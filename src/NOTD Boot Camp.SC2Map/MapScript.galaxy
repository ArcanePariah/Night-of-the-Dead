//==================================================================================================
// 
// Generated Map Script
// 
// Name:   NOTD Boot Camp
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/CampaignLib"

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_StarcodeStartCode ();
void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue);
void lib1_gf_StarcodeSetCode (string lp_code);
void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string);
string lib1_gf_StarcodeGetCode ();
int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue);
string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key);
string lib1_gf_StarcodeCompressString (string lp_toCompress);
string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel);
string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel);
bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel);
string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key);
string lib1_gf_StarcodeDecompressString (string lp_toDecompress);

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    //if (carry>0){
        //debug("This bigint is not suited for negative numbers!");
    //}
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    //debug(out);
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    if (carry>0){
        //debug("Left: "+IntToString(carry));
    }
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    //debug(IntToString(carry));
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: READ ME
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
//
//    
//    SC2Mapster.com
//    http://forums.sc2mapster.com/development/galaxy-scripting-and-trigger-lib/5091-library-starcode-v1-3/
//    Credits to vjeux
//
//
//  DOCUMENTATION:
//
//  Before you start using STARCODE you should know a couple of things:
//
//    1) STARCODE is still somewhat experimental. There could very well be bugs 
//       or glitches left in the system. During my tests I have fixed everything
//       I noticed, but that is no guarantee that it's always work under every 
//       circumstances. The system is rather messy too.
//       I haven't noticed any lags during my tests, but I believe that it could be
//       quite a bit faster with optimized functions.
//       Not my problem, at the moment.
//
//    2) I have tested STARCODE with dozens of integer values and generated codes of
//       up to 100 digits length without problems. After that, however, the system 
//       often hits StarCraft II's execution limit. Since I cannot disable this limit
//       you should try not to make codes longer than 100 digits.
//       You can, however, just create several codes with 100 digits length each.
//
//    3) The generated code length can change, even if you haven't added or removed any
//       integers. 
//       That is because the closer an integer's value is to it's maximum value, the more
//       space it needs in the code.
//       So to get the maximum code length you have to set all stored integer's values to
//       their respective maximum values.
//       Keep this in mind when you are storing your codes in a bank.
//       When the codes' length is already close to the maximum size of the bank, you should
//       check whether the code can possibly exceed the bank size.
//
//    4) There is a public function called Set Encryption Alphabet.
//       You should leave this function alone, unless you have a good reason to use it and know
//       what you are doing.
//       One reason could be to remove some characters from the alphabet so that they
//       won't be used in the code anymore.
//       The default alphabet is:
//
//       "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&/()=?,.-;:_^#+*' @{[]}|>"
//
//       You can add and remove characters as you like. However, you should always keep the first
//       ten characters (all numbers) at it's place, or some functions might return strange
//       results.
//       Also note that I have excluded "<" and "\" from the alphabet.
//       "\" is an escape characters so it's of no use to us.
//       "<" could be potentially dangerous. If you want to display your code and there happens
//       to be a sequence such as "<abc>" in there, StarCraft II will recongize this as a tag
//       and not display it. Thus you would get wrong results. I left ">" in because it won't
//       cause any harm on it's own.
//
//
//  Ok, I think I have mentioned everything. 
//  You can take a look at the Example Usage trigger to see how STARCODE can be used.
//
//  
//
// ~ s3rius
//

void lib1_InitCustomScript () {
}

// Functions
void lib1_gf_StarcodeStartCode () {
    // Automatic Variable Declarations
    // Implementation
        STARCODE_CurrentCode = "0";
}

void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue) {
    // Automatic Variable Declarations
    // Implementation
    if(lp_value<lp_maximumValue+1){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}

void lib1_gf_StarcodeSetCode (string lp_code) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_CurrentCode=lp_code;
}

void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string) {
    // Automatic Variable Declarations
    // Implementation
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}

string lib1_gf_StarcodeGetCode () {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_CurrentCode;
}

int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return lv_i;
}

string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}

string lib1_gf_StarcodeCompressString (string lp_toCompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
}

string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}

string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}

bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}

string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}

string lib1_gf_StarcodeDecompressString (string lp_toDecompress) {
    // Automatic Variable Declarations
    // Implementation
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library: Item Utility Library
//--------------------------------------------------------------------------------------------------
// Function Declarations
order lib2_gf_OrderUseItemTargetingPoint (abilcmd lp_cmd, unit lp_item, point lp_tgt);
order lib2_gf_OrderUseItemTargetingUnit (abilcmd lp_cmd, unit lp_item, unit lp_tgt);
order lib2_gf_OrderTakeItem (abilcmd lp_cmd, unit lp_item);
order lib2_gf_OrderUseItem (abilcmd lp_cmd, unit lp_item);
unitgroup lib2_gf_UnitsInGroupOfType (unitgroup lp_group, string lp_type);
string lib2_gf_ItemTypeChargeLink (string lp_itemId);
string lib2_gf_ItemTypeChargeLinkName (string lp_itemId);
void lib2_gf_ItemSetChargesRemaining (unit lp_tgt, fixed lp_charges);
fixed lib2_gf_ItemTypeMaxCharges (string lp_itemId);
fixed lib2_gf_ItemTypeStartCharges (string lp_itemId);
int lib2_gf_InventoryCountItemsOfType (unit lp_tgt, string lp_type);
unitgroup lib2_gf_InventoryGetItemsOfType (unit lp_tgt, string lp_type);
bool lib2_gf_InventoryHasItemOfType (unit lp_tgt, string lp_type);
unit lib2_gf_InventoryGetRandomItemOfType (unit lp_tgt, string lp_type);
fixed lib2_gf_ItemGetChargesUsed (unit lp_tgt);
fixed lib2_gf_ItemGetChargesRemaining (unit lp_tgt);
fixed lib2_gf_InventoryTotalChargesOfItemType (unit lp_tgt, string lp_type);
bool lib2_gf_InventoryPreStackItemCountCheck (string lp_type);
int lib2_gf_InventoryMaxItemCount (unit lp_tgt);
void lib2_gf_InventoryStackItemsofDifferentType (unit lp_tgt, string lp_type1, string lp_type2);

//--------------------------------------------------------------------------------------------------
// Library: Item Utility Library
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib2_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Custom Script
//--------------------------------------------------------------------------------------------------
unitgroup UnitsInGroupOfType(unitgroup group, string type)
{
    unitgroup matchingUnits = UnitGroupEmpty();
    int numUnits = UnitGroupCount(group, c_unitCountAll);
    unit curUnit;
    int i = 1;
    while(i <= numUnits)
    {
        curUnit = UnitGroupUnit(group, i);
        if(UnitGetType(curUnit) == type)
        {
            UnitGroupAdd(matchingUnits, curUnit);
        }
        i += 1;
    }
    return matchingUnits;
}
unitgroup InventoryGetItemsOfType(unit tgt, string type)
{
    return UnitsInGroupOfType(UnitInventoryGroup(tgt), type);
}
int InventoryItemCountOfType(unit tgt, string type)
{
    return UnitGroupCount(InventoryGetItemsOfType(tgt, type), c_unitCountAll);
}
bool InventoryHasItemOfType(unit tgt, string type)
{
    return InventoryItemCountOfType(tgt, type) > 0;
}
unit InventoryGetRandomItemOfType(unit tgt, string type)
{
    unitgroup items = InventoryGetItemsOfType(tgt, type);
    if(UnitGroupCount(items, c_unitCountAll) <= 0)
    {
        return null;
    }
    return UnitGroupUnit(items, 0);
}
string ItemTypeChargeLink(string itemId)
{
    string itemLinkId = CatalogFieldValueGet(c_gameCatalogUnit, itemId, "Item", -1);
    return CatalogFieldValueGet(c_gameCatalogItem, itemLinkId, "EffectCost.Charge.Link", -1);
}
fixed ItemTypeMaxCharges(string itemId)
{
    return StringToFixed(CatalogFieldValueGet(c_gameCatalogItem, itemId, "EffectCost.Charge.CountMax", -1));
}
fixed ItemGetChargesUsed(unit tgt)
{
    string chargeLinkName = ItemTypeChargeLink(UnitGetType(tgt));
    return UnitGetChargeUsed(tgt, chargeLinkName);
}
fixed ItemGetChargesRemaining(unit tgt)
{
    string itemId = UnitGetType(tgt);
    string chargeLinkName = ItemTypeChargeLink(itemId);
    return ItemTypeMaxCharges(itemId) - UnitGetChargeUsed(tgt, chargeLinkName);
}
void ItemSetChargesRemaining(unit tgt, fixed charges)
{
    string chargeLinkName = ItemTypeChargeLink(UnitGetType(tgt));
    fixed curCharges = ItemGetChargesRemaining(tgt);
    UnitAddChargeUsed(tgt, chargeLinkName, (curCharges - charges));
}
fixed InventoryTotalChargesOfItemType(unit tgt, string type)
{
    unitgroup items = InventoryGetItemsOfType(tgt, type);
    fixed chargeCount = 0;
    int numItems = UnitGroupCount(items, c_unitCountAll);
    int i = 1;
    while(i <= numItems)
    {
        chargeCount += ItemGetChargesRemaining(UnitGroupUnit(items, i));
        i += 1;
    }
    return chargeCount;
}
void InventoryStackItemsOfType(unit tgt, string type)
{
    fixed chargeCount = InventoryTotalChargesOfItemType(tgt, type);
    fixed maxCharges = ItemTypeMaxCharges(type);
    unitgroup items = InventoryGetItemsOfType(tgt, type);
    int i = UnitGroupCount(items, c_unitCountAll);
    unit curUnit;
    while(i > 0)
    {
        curUnit = UnitGroupUnit(items, i);
        if(chargeCount > maxCharges)
        {
            ItemSetChargesRemaining(curUnit, maxCharges);
            chargeCount -= maxCharges;
        }
        else if(chargeCount > 0)
        {
            ItemSetChargesRemaining(curUnit, chargeCount);
            chargeCount = 0;
        }
        else
        {
            UnitRemove(curUnit);
        }
        i -= 1;
    }
}
order OrderUseItemTargetingPoint(abilcmd cmd, unit item, point tgt)
{
    order ord = OrderTargetingPoint(cmd, tgt);
    OrderSetTargetItem(ord, item);
    return ord;
}
order OrderUseItemTargetingRelativePoint(abilcmd cmd, unit item, point tgt)
{
    order ord = OrderTargetingRelativePoint(cmd, tgt);
    OrderSetTargetItem(ord, item);
    return ord;
}
order OrderUseItemTargetingUnit(abilcmd cmd, unit item, unit tgt)
{
    order ord = OrderTargetingUnit(cmd, tgt);
    OrderSetTargetItem(ord, item);
    return ord;
}
order OrderUseItem(abilcmd cmd, unit item)
{
    return OrderTargetingItem(cmd, item);
}

void lib2_InitCustomScript () {
}

// Functions
order lib2_gf_OrderUseItemTargetingPoint (abilcmd lp_cmd, unit lp_item, point lp_tgt) {
    // Variable Declarations
    order lv_ord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ord = OrderTargetingPoint(lp_cmd, lp_tgt);

    // Implementation
    OrderSetTargetItem(lv_ord, lp_item);
    return lv_ord;
}

order lib2_gf_OrderUseItemTargetingUnit (abilcmd lp_cmd, unit lp_item, unit lp_tgt) {
    // Variable Declarations
    order lv_ord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ord = OrderTargetingUnit(lp_cmd, lp_tgt);

    // Implementation
    OrderSetTargetItem(lv_ord, lp_item);
    return lv_ord;
}

order lib2_gf_OrderTakeItem (abilcmd lp_cmd, unit lp_item) {
    // Variable Declarations
    order lv_ord;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ord = OrderTargetingUnit(lp_cmd, lp_item);

    // Implementation
    OrderSetTargetItem(lv_ord, lp_item);
    return lv_ord;
}

order lib2_gf_OrderUseItem (abilcmd lp_cmd, unit lp_item) {
    // Automatic Variable Declarations
    // Implementation
    return OrderTargetingItem(lp_cmd, lp_item);
}

unitgroup lib2_gf_UnitsInGroupOfType (unitgroup lp_group, string lp_type) {
    // Variable Declarations
    int lv_numUnits;
    unitgroup lv_matchingUnits;
    unit lv_curUnit;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_numUnits = UnitGroupCount(lp_group, c_unitCountAll);
    lv_matchingUnits = UnitGroupEmpty();
    lv_i = 1;

    // Implementation
    while ((lv_i <= lv_numUnits)) {
        lv_curUnit = UnitGroupUnit(lp_group, lv_i);
        if ((UnitGetType(lv_curUnit) == lp_type)) {
            UnitGroupAdd(lv_matchingUnits, lv_curUnit);
        }

        lv_i += 1;
    }
    return lv_matchingUnits;
}

string lib2_gf_ItemTypeChargeLink (string lp_itemId) {
    // Variable Declarations
    string lv_itemLinkId;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemLinkId = CatalogFieldValueGet(c_gameCatalogUnit, lp_itemId, "Item", c_playerAny);

    // Implementation
    return CatalogFieldValueGet(c_gameCatalogItem, lv_itemLinkId, "EffectCost.Charge.Link", c_playerAny);
}

string lib2_gf_ItemTypeChargeLinkName (string lp_itemId) {
    // Variable Declarations
    string lv_itemLinkId;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemLinkId = CatalogFieldValueGet(c_gameCatalogUnit, lp_itemId, "Item", c_playerAny);

    // Implementation
    return CatalogFieldValueGet(c_gameCatalogItem, lv_itemLinkId, "PowerupCost.Charge.Link", c_playerAny);
}

void lib2_gf_ItemSetChargesRemaining (unit lp_tgt, fixed lp_charges) {
    // Variable Declarations
    string lv_chargeLinkName;
    fixed lv_curCharges;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chargeLinkName = lib2_gf_ItemTypeChargeLink((UnitGetType(lp_tgt)));
    lv_curCharges = lib2_gf_ItemGetChargesRemaining(lp_tgt);

    // Implementation
    UnitAddChargeUsed(lp_tgt, lv_chargeLinkName, (lv_curCharges - lp_charges));
}

fixed lib2_gf_ItemTypeMaxCharges (string lp_itemId) {
    // Variable Declarations
    int lv_untitledVariable001;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return StringToFixed(CatalogFieldValueGet(c_gameCatalogItem, lp_itemId, "EffectCost.Charge.CountMax", c_playerAny));
}

fixed lib2_gf_ItemTypeStartCharges (string lp_itemId) {
    // Variable Declarations
    int lv_untitledVariable001;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return StringToFixed(CatalogFieldValueGet(c_gameCatalogItem, lp_itemId, "EffectCost.Charge.CountStart", c_playerAny));
}

int lib2_gf_InventoryCountItemsOfType (unit lp_tgt, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupCount(lib2_gf_InventoryGetItemsOfType(lp_tgt, lp_type), c_unitCountAll);
}

unitgroup lib2_gf_InventoryGetItemsOfType (unit lp_tgt, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    return lib2_gf_UnitsInGroupOfType(UnitInventoryGroup(lp_tgt), lp_type);
}

bool lib2_gf_InventoryHasItemOfType (unit lp_tgt, string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    return (lib2_gf_InventoryCountItemsOfType(lp_tgt, lp_type) > 0);
}

unit lib2_gf_InventoryGetRandomItemOfType (unit lp_tgt, string lp_type) {
    // Variable Declarations
    unitgroup lv_items;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_items = lib2_gf_InventoryGetItemsOfType(lp_tgt, lp_type);

    // Implementation
    if ((UnitGroupCount(lv_items, c_unitCountAll) <= 0)) {
        return null;
    }

    return UnitGroupRandomUnit(lv_items, c_unitCountAll);
}

fixed lib2_gf_ItemGetChargesUsed (unit lp_tgt) {
    // Variable Declarations
    string lv_chargeLinkName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_chargeLinkName = lib2_gf_ItemTypeChargeLink((UnitGetType(lp_tgt)));

    // Implementation
    return UnitGetChargeUsed(lp_tgt, lv_chargeLinkName);
}

fixed lib2_gf_ItemGetChargesRemaining (unit lp_tgt) {
    // Variable Declarations
    string lv_itemId;
    string lv_chargeLinkName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemId = (UnitGetType(lp_tgt));
    lv_chargeLinkName = lib2_gf_ItemTypeChargeLink((UnitGetType(lp_tgt)));

    // Implementation
    return (lib2_gf_ItemTypeMaxCharges(lv_itemId) - UnitGetChargeUsed(lp_tgt, lv_chargeLinkName));
}

fixed lib2_gf_InventoryTotalChargesOfItemType (unit lp_tgt, string lp_type) {
    // Variable Declarations
    unitgroup lv_items;
    fixed lv_chargeCount;
    int lv_numItems;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_items = lib2_gf_InventoryGetItemsOfType(lp_tgt, lp_type);
    lv_numItems = UnitGroupCount(lv_items, c_unitCountAll);
    lv_i = 1;

    // Implementation
    while ((lv_i <= lv_numItems)) {
        lv_chargeCount += lib2_gf_ItemGetChargesRemaining(UnitGroupUnit(lv_items, lv_i));
        lv_i += 1;
    }
    return lv_chargeCount;
}

bool lib2_gf_InventoryPreStackItemCountCheck (string lp_type) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_type == "Magazine"))) {
        return true;
    }
    else {
        return false;
    }
}

int lib2_gf_InventoryMaxItemCount (unit lp_tgt) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupCount(UnitInventoryGroup(lp_tgt), c_unitCountAll);
}

void lib2_gf_InventoryStackItemsofDifferentType (unit lp_tgt, string lp_type1, string lp_type2) {
    // Variable Declarations
    fixed lv_chargeCount;
    fixed lv_maxCharge1;
    fixed lv_maxCharge2;
    string lv_typeString1;
    string lv_typeString2;
    unitgroup lv_items1;
    unitgroup lv_items2;
    int lv_i;
    int lv_j;
    unit lv_curUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_typeString1 = (lp_type1);
    lv_typeString2 = (lp_type2);
    lv_items1 = lib2_gf_InventoryGetItemsOfType(lp_tgt, lp_type1);
    lv_items2 = lib2_gf_InventoryGetItemsOfType(lp_tgt, lp_type2);
    lv_i = UnitGroupCount(lv_items1, c_unitCountAll);
    lv_j = UnitGroupCount(lv_items2, c_unitCountAll);

    // Implementation
    lv_chargeCount = lib2_gf_InventoryTotalChargesOfItemType(lp_tgt, lp_type1);
    lv_chargeCount += lib2_gf_InventoryTotalChargesOfItemType(lp_tgt, lp_type2);
    if ((lib2_gf_InventoryPreStackItemCountCheck(lp_type1) == true)) {
        lv_maxCharge1 = lib2_gf_ItemTypeStartCharges(lv_typeString1);
    }
    else {
        lv_maxCharge1 = lib2_gf_ItemTypeMaxCharges(lv_typeString1);
    }
    if ((lib2_gf_InventoryPreStackItemCountCheck(lp_type2) == true)) {
        lv_maxCharge2 = lib2_gf_ItemTypeStartCharges(lv_typeString2);
    }
    else {
        lv_maxCharge2 = lib2_gf_ItemTypeMaxCharges(lv_typeString2);
    }
    while ((lv_i > 0)) {
        lv_curUnit = UnitGroupUnit(lv_items1, lv_i);
        if ((lv_chargeCount > lv_maxCharge1)) {
            lv_chargeCount -= FixedToInt(lv_maxCharge1);
            lib2_gf_ItemSetChargesRemaining(lv_curUnit, lv_maxCharge1);
        }
        else if ((lv_chargeCount >= 0.0)) {
            lib2_gf_ItemSetChargesRemaining(lv_curUnit, lv_chargeCount);
            lv_chargeCount = 0.0;
        }
        lv_i -= 1;
    }
    while ((lv_j > 0)) {
        lv_curUnit = UnitGroupUnit(lv_items2, lv_j);
        if ((lv_chargeCount > lv_maxCharge2)) {
            lv_chargeCount -= FixedToInt(lv_maxCharge2);
            lib2_gf_ItemSetChargesRemaining(lv_curUnit, lv_maxCharge2);
        }
        else if ((lv_chargeCount > 0.0)) {
            lib2_gf_ItemSetChargesRemaining(lv_curUnit, lv_chargeCount);
            lv_chargeCount = 0.0;
        }
        else if ((StringExternal("Param/Value/lib_2_2E248428") != null)) {
            UnitRemove(lv_curUnit);
        }
        lv_j -= 1;
    }
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_InitLib_completed = false;

void lib2_InitLib () {
    if (lib2_InitLib_completed) {
        return;
    }

    lib2_InitLib_completed = true;

    lib2_InitLibraries();
    lib2_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libCamp_InitLib();
    lib1_InitLib();
    lib2_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_numberofPlayers = 8;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Hero {
    color lv_color;
    fixed lv_hitTolerance;
    int lv_lives;
    fixed lv_level;
    int[11] lv_talentLevel;
    bool lv_alive;
    int lv_talentsAvailable;
    int lv_hitsTaken;
    int lv_weightPoints;
    fixed lv_weightTolerance;
    string lv_class;
    int lv_classSlot;
};

struct gs_Wins {
    int lv_easyCompanyNormalWins;
    int lv_easyCompanyNormalSpeedWins;
    int lv_easyCompanyNightmareWins;
    int lv_easyCompanyNightmareSpeedWins;
    int lv_alphaCompanyNormalWins;
    int lv_alphaCompanyNormalSpeedWins;
    int lv_alphaCompanyNightmareWins;
    int lv_alphaCompanyNightmareSpeedWins;
    int lv_apolloSecurityTeamNormalWins;
    int lv_apolloSecurityTeamNormalSpeedWins;
    int lv_apolloSecurityTeamNightmareWins;
    int lv_apolloSecurityTeamNightmareSpeedWins;
    int lv_survivalNormalSpeedWins;
    int lv_survivaNightmareSpeedWins;
};

struct gs_Medals {
    int lv_combatActionRibbon;
    int lv_lifesavingMedal;
    int lv_bronzeStar;
    int lv_silverStar;
    int lv_legionOfMerit;
    int lv_distinguishedServiceMedal;
    int lv_navyCross;
    int lv_expeditionaryMedal;
    int lv_superiorServiceMedal;
    int lv_medalofHonor;
};

struct gs_ClassPoints {
    int lv_rifleman;
    int lv_medic;
    int lv_assaultFlamethrowerTechnician;
    int lv_recon;
    int lv_marksman;
    int lv_demolitionsForwardObserverChemicalExpert;
    int lv_engineerPathfinder;
    int lv_commandoPsiOps;
};

struct gs_Player {
    color lv_color;
    int lv_rank;
    int lv_xP;
    int lv_gamesPlayed;
    int lv_rating;
    int lv_karma;
    int lv_stats;
    int lv_credits;
    int lv_lifetimeCredits;
    int lv_weaponMods1;
    int lv_weaponMods2;
    gs_ClassPoints lv_playerClassPoints;
    gs_Wins lv_playerWins;
    gs_Hero lv_playerHero;
    gs_Medals lv_playerMedals;
    unit lv_playerPet;
    bool lv_doctor;
    unitgroup lv_kittens;
    int lv_ammoCounterDialog;
    int[5] lv_ammoCounterDialogItem;
    int lv_ratingHitTolerance;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_classSelection;
point[19] gv_pathtoMilitaryBase;
int[9][9] gv_playerClassPoints;
int[9] gv_playerXP;
int[9] gv_playerRating;
int[9] gv_playerGamesPlayed;
int[9] gv_playerMedicPlayed;
int[9] gv_playerKarma;
int[9] gv_playerStats;
int[9] gv_playerCredits;
int[9] gv_playerLifeTimeCreditsAcquired;
int[9] gv_playerWeaponsMod1;
int[9] gv_playerWeaponsMod2;
int[9] gv_combatActionRibbon;
int[9] gv_lifeSavingMedal;
int[9] gv_bronzeStar;
int[9] gv_silverStar;
int[9] gv_legionOfMerit;
int[9] gv_distinguishedServiceMedal;
int[11] gv_navyCross;
int[9] gv_expeditionaryMedal;
int[9] gv_superiorServiceMedal;
int[9] gv_medalOfHonor;
int[9] gv_playerRiflemanPoints;
int[9] gv_playerMedicPoints;
int[9] gv_playerAssaultFlamerTechPoints;
int[9] gv_playerReconPoints;
int[9] gv_playerMarksmanPoints;
int[9] gv_playerDemoFOChemPoints;
int[9] gv_playerEngineerPathfinderPoints;
int[9] gv_playerCommandoPsiOpsPoints;
int[9] gv_playerColorCode;
int[9] gv_playerPetCode;
int[9] gv_eCWinNormal;
int[9] gv_eCWinNM;
int[9] gv_aCWinNormal;
int[9] gv_aCWinNM;
int[9] gv_sTWinNormal;
int[9] gv_sTWinNM;
int[9] gv_survivalWin;
int[9] gv_eCSpeed;
int[9] gv_aCSpeed;
int[9] gv_sTSpeed;
int[9] gv_eCNMSpeed;
int[9] gv_aCNMSpeed;
int[9] gv_sTNMSpeed;
int[9] gv_survivalWinNM;
int[9] gv_bootCampComplete;
gs_Hero[15] gv_heros;
gs_Player[gv_numberofPlayers + 1] gv_players;
bool gv_mutexLock;
text[6] gv_ramirezTaunts;
int gv_infestorObjective;
int gv_scrapyardObjective;
int gv_commTowerObjective;
unit[16] gv_marineHero;
unit[16] gv_playerPet;
unit gv_drBergmann;
unit gv_drTanaka;
unit gv_drGunjan;
unit gv_sgtStallans;
unit gv_priyanka;
unitgroup gv_blackOps;
unitgroup gv_zombieWave;
unitgroup gv_brainBugs;
unit gv_madMaxTruck;
unit gv_charlie;
unit[13] gv_complianceNexus;
unitgroup gv_complianceNexusGroup;
unit gv_tartarusCocoon;
unit gv_ramirez;
unit gv_incompleteIVAX;
unit[3] gv_sensorTower;
region[9] gv_lZ;
region[5] gv_bioDomeSpawn;
int gv_concentrationDisplay;
int gv_concentrationDisplayItem;
int gv_primaryObjective;
int gv_secondaryObjective;
int gv_secondary2Objective;
int gv_rescueObjective;
int gv_storyline;
bool gv_victory;
fixed gv_hexCycle;
bool gv_cinematicMode;
playergroup gv_marineSquad;
unitgroup gv_marines;
int[9] gv_playerLives;
bool gv_bossFight;
bool[9] gv_playerRecovery;
bool gv_gameOver;
int gv_totalPlayers;
int gv_alivePlayers;
int gv_globalIntA;
bool[16] gv_classDiversity;
int gv_wave;
bool[9] gv_reloading;
bool[9] gv_activePlayer;
int[9] gv_playerRoundLimit;
unit gv_boss;
unit gv_finalBoss;
unit gv_infestedParrot;
string[3] gv_civPool;
unit gv_dropship;
bool[9] gv_fPS;
timer[9] gv_globalTimer;
int[9] gv_globalTimerWindow;
int[9] gv_classSelectionDialog;
int[9][19] gv_classSelectionDialogItem;
int gv_bootCampDialog;
int[4] gv_bootCampDialogItem;
int[9] gv_ammoCounterDialog;
int[9][5] gv_ammoCounterDialogItem;
string[16] gv_marineClass;
bool[9] gv_marineSelected;
int[9] gv_marineRounds;
int[9] gv_marineMags;
fixed[9] gv_marineWeightTolerance;
int[9] gv_marineWeightPoints;
bool[9] gv_talentTreeOpen;
int[9] gv_talentTree;
int[9][17] gv_talentTreeItem;
int gv_talentTreePlayer;
int gv_waveXPReward;
int gv_spawnFactor;
bool[9] gv_marineKilled;
region[6] gv_militaryBaseSpawn;
region[6] gv_mineSpawn;
int gv_performanceTimer;
int gv_securityCam;
int gv_squadXP;
int gv_squadRating;
int[9] gv_hitsTaken;
bool gv_noNewbie;
int gv_hitPar;
int[9] gv_talentsAvailable;
int[9] gv_talentsAvailableDialog;
int[11][9] gv_talentTreeImages;
int[11][9] gv_talentTreeTexts;
int[11][10] gv_talentLevel;
unit[7] gv_infestor;
int gv_infestorsAlive;
unitgroup gv_colonists;
int gv_colonistsRescued;
bool[9] gv_playerDoctor;
bool[9] gv_playerIsBad;
int[9] gv_playerRank;
string[19] gv_rankIcon;
text[19] gv_rankTitle;
int[19] gv_rankRequirement;
text[19] gv_rankFullTitle;
region[12] gv_nydusNetwork;
bool gv_nightmare;
fixed[9] gv_playerDamageTaken;
fixed[9] gv_marineLevel;
soundlink gv_dummySound;
unitgroup[9] gv_kittens;
bool[9] gv_playerMarinePetDead;
bool[9] gv_gameUIHidden;
bool[9] gv_underAttack;
fixed gv_gameVictoryTime;
timer gv_nOTDGameTime;
region[8] gv_reinforcementSpawn;
fixed[8] gv_reinforcementSpawnHeight;
text gv_difficulty;
int gv_storylineSelectionDialog;
int[6] gv_storylineSelectionDialogChoices;
int[6] gv_storylineSelectionDialogImages;
bool gv_alphaCompanyUnlocked;
bool gv_secTeamUnlocked;
bool gv_survivalUnlocked;
int[121][9] gv_playerBankData;
int gv_bankSize;
int gv_originalBankSize;
bool[9] gv_upgraded;
int gv_raidUITeamStatus;
int gv_raidUITeamStatusDummy;
int gv_raidUIMedalsSubtab;
int gv_teamUIMedalsButton;
int gv_teamUIStatsButton;
int gv_raidUISizeX;
int gv_raidUISizeY;
int gv_raidUIOffsetX;
int gv_raidUIOffsetY;
int gv_teamStatusButtonOpened;
int gv_teamStatusButtonClosed;
int[9] gv_teamStatusXPButton;
int[9] gv_teamStatusPortraitImages;
int[9] gv_teamStatusLifeBar;
int[9] gv_teamStatusPlayerName;
int[4][9] gv_teamStatusDebuffs;
int[4][9] gv_teamStatusDebuffsBackground;
int[4][9] gv_teamStatusDebuffsBorder;
int[9] gv_teamStatusLifeMidSlash;
int[9] gv_teamStatusRankIcon;
fixed gv_teamStatusLifeBarLength;
int gv_teamStatusLifeBarThickness;
int[9] gv_teamStatusXP;
int[9] gv_teamStatusPortraitButton;
int[9] gv_teamStatusLifeButton;
text[9] gv_teamStatusPortraitTooltip;
text[9] gv_teamStatusLifeTooltip;
text[9] gv_teamStatusXPTooltip;
int[9] gv_startingKarma;
int[9] gv_startingRating;
int[9] gv_startingXP;
int[9] gv_startingCredits;
int gv_medalsDialogButton;
int[9] gv_playerMedalsDialog;
int[11][9] gv_playerMedalsImage;
int[11][9] gv_playerMedalsMedalName;
int[10][11][9] gv_playerMedalsMedalProgressSubBar;
int[11][9] gv_playerMedalsMedalProgressPoints;
int[11][9] gv_playerMedalsMedalItems;
int[11][9] gv_playerMedalsMedalPoints;
int[9] gv_playerMedalsCloseButtons;
int[9] gv_playerMedalsStatsTabButtons;
int[9] gv_playerMedalsTalentsTabButtons;
int[9] gv_playerMedalsScrollPreviousButtons;
int[9] gv_playerMedalsScrollNextButtons;
int[9] gv_playerMedalsRankIcon;
int[9] gv_playerMedalsPlayerNameLabel;
int gv_statsDialogButton;
int[9] gv_statsStrength1;
int[9] gv_statsEndurance2;
int[9] gv_statsAgility3;
int[9] gv_statsPerception4;
int[9] gv_statsIntelligence5;
int[9] gv_statsTotalStats;
int[9] gv_statsPlayerStatsDialog;
int[9] gv_statsPlayerStatsDialogStats;
int[9] gv_statsPlayerHeroImage;
int[9] gv_statsPlayerLivesLeft;
int[6][9] gv_statsPlayerDecreImage;
int[6][9] gv_statsPlayerDecreButton;
int[6][9] gv_statsPlayerIncreImage;
int[6][9] gv_statsPlayerIncreButton;
int[6][9] gv_statsPlayerStatImage;
int[6][9] gv_statsPlayerStatLabel;
int[9] gv_statsPlayerStatAvailableLabel;
int[9] gv_statsPlayerStatCloseButton;
int[9] gv_statsPlayerNextLevelProgressBar;
int[9] gv_statsPlayerNextLevelPromotionLabel;
int[9] gv_statsPlayerCurrentXP;
int[9] gv_statsPlayerNextXP;
int[9] gv_statsPlayerCashLabel;
int[9] gv_statsPlayerCashAcquiredLabel;
int[9] gv_statsPlayerStatsStatsButton;
int[9] gv_statsPlayerStatsStatsHeroImage;
int[9] gv_statsMedalsTabButtons;
int[9] gv_statsTalentsTabButtons;
int[9] gv_statsScrollPreviousButtons;
int[9] gv_statsScrollNextButtons;
int[9] gv_statsRankIcon;
int[9] gv_statsPlayerNameLabel;
int[9] gv_wModWeaponsModButton;
fixed[9] gv_baseMarineReloadMultiplier;
fixed[9] gv_baseMarineSwitchingMultiplier;
fixed[9] gv_baseMarineWeightPointMultiplier;
int gv_wModButton;
int[9] gv_wModTotalPointsLeft;
int[9] gv_wModTotalPointsPositive;
int[9] gv_wModTotalPointsNegative;
int[9] gv_wModRange1;
int[9] gv_wModDamage2;
int[9] gv_wModReload3;
int[9] gv_wModSwitch4;
int[9] gv_wModSpeed5;
int[9] gv_wModWeight6;
int[9] gv_wModSplash7;
int[9] gv_wModWeaponsModDialog;
int[9] gv_wModWeaponPointsAvailableLabel;
int[8][9] gv_wModWeaponPointsLabels;
int[8][9] gv_wModPlayerDecreImage;
int[8][9] gv_wModPlayerIncreImage;
int[8][9] gv_wModPlayerDecreButton;
int[8][9] gv_wModPlayerIncreButton;
int[11][9] gv_talentTreeBordersInitial;
int[11][9] gv_talentTreeBordersFinal;
int[9] gv_talentTreeMedalsTabButtons;
int[9] gv_talentTreeStatsTabButtons;
int[9] gv_talentTreeScrollPreviousButtons;
int[9] gv_talentTreeScrollNextButtons;
int[9] gv_talentTreeRankIcon;
int[9] gv_talentTreePlayerNameLabel;
int[9] gv_talentTreeCloseButtons;
unitgroup[9] gv_sonicTrap;
timer[9] gv_concentrationTimer;
playergroup gv_heartbeatSensorReconGroup;
fixed[9] gv_heartbeatSensorRadius;
bool[9] gv_noEnemy;
bool gv_heartbeatSensorTriggerOn;
unitgroup[9] gv_armageddonBomb;
unit[9] gv_fieldNexus;
timer[9] gv_synergyTimerEngineer;
timer[9] gv_synergyTimerGuardian;
unit[9] gv_synergyTargetUnit;
unit[9] gv_x1Guardian;
bool gv_inceptionOn;
unitgroup[9] gv_mindLinkedGroup;
fixed[9] gv_barrageTime;
int[4][9] gv_shellCounter;
int[4][9] gv_shellDecre;
int[4][9] gv_shellIncre;
int[9] gv_shellDialog;
unitgroup[9] gv_mobileInfantryGroup;
bool[9] gv_gunshipActive;
bool[9] gv_gunshipGaussCannonCooldown;
bool[9] gv_gunshipHellfireMissileCooldown;
unit[9] gv_gunshipUnit;
bool[9] gv_gunshipCameraSwitch;
bool[9] gv_gunshipZoom;
unit[9] gv_gunshipFollowedUnit;
bool[9] gv_gunshipCinematicActive;
int[9] gv_gunshipBuddy;
bool gv_assaultJumpTriggered;
int[9] gv_assaultJumpTimer;
int[9] gv_assaultJumpTimerCooldown;
int gv_legionOfMeritCivsRescued;
bool gv_distinguishedServiceMedalFailed;
bool gv_navyCrossFailed;
string gv_spawnItem;
bool[5][9] gv_medalsAwarded;
string[5][9] gv_medalsAwardedImages;
text[5][9] gv_medalsAwardedText;
int gv_victoryButton1;
int gv_victoryButton2;
int gv_endGameDialog1;
int gv_endGameDialog2;
int[9][9] gv_itemBarButtons;
int[9][9] gv_itemBarImages;
int[9][3] gv_itemBarRatingImages;
int[9][3] gv_itemBarRatingButtons;
int[5][9] gv_medalsItemButtons;
int[5][9] gv_medalsItemImages;
int[9] gv_itemIconImages;
int[9] gv_itemIconLabel;
int[4][3] gv_finalTextLabel;
int gv_itemX;
int gv_playerNameTextY;
int[3] gv_scrollEndGameUIButtons;
bool[9] gv_playerExitButton;
int[9] gv_voteKickDanger;
bool[9] gv_voteKickNomination;
bool[9] gv_kicked;
bool[9] gv_spectatorModeOn;
bool[9] gv_spectatedBefore;
int[9] gv_spectatedDialog;
int[9] gv_spectatedLabel;
bool[9] gv_spectated;
bool gv_navyCrossMode;
unitgroup[9] gv_shopItems;
bool gv_equipmentOpen;
unit[9] gv_reaperMK13;
bool[9] gv_bandageUsed;
playergroup gv_deadPlayers;
int[10] gv_petKills;
int[9] gv_petLevel;
bool[9] gv_victimOfTK;
int gv_tKedPlayer;
int gv_griefingPlayer;
int gv_rankUpPlayer;
bool[9] gv_playerHasRankedUp;
int[9] gv_smartReloadCount;
bool[9] gv_playerSmartReloadCredit;
bool gv_infestorAggroMode;
unitgroup[9] gv_unitsSelected;
bool[9] gv_iLikeItOpen;
unitgroup gv_mineShaftMobs;
bool gv_mineShaftReached;
unit gv_zeus;
unit gv_leto;
point gv_bCDeathSpot;
bool gv_nOTDShutdown;
int gv_zeusLetoRespawnCount;
bool gv_eND;
int[9] gv_equipmentButton;
int[9] gv_equipment;
int[15] gv_classCount;
bool gv_classLimitBroken;
fixed gv_classLimitMultiplier;
region[7] gv_arenaSpawnZones;
int gv_objectivePing;
unit gv_objectiveArrow;
bool gv_trainingFieldMode;
int gv_trainingFieldZone;
region[5] gv_zone;
bool gv_huntMode;
int gv_oMPerformanceTimer;
int gv_oMCount;
int gv_oMCount2;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;
    int init_i1;

    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_heros[init_i].lv_color = Color(0,0,0);
        gv_heros[init_i].lv_lives = 3;
        gv_heros[init_i].lv_level = 1.0;
        gv_heros[init_i].lv_alive = true;
    }
    for (init_i = 0; init_i <= gv_numberofPlayers; init_i += 1) {
        gv_players[init_i].lv_color = Color(0,0,0);
        gv_players[init_i].lv_playerHero.lv_color = Color(0,0,0);
        gv_players[init_i].lv_playerHero.lv_lives = 3;
        gv_players[init_i].lv_playerHero.lv_level = 1.0;
        gv_players[init_i].lv_playerHero.lv_alive = true;
        gv_players[init_i].lv_kittens = UnitGroupEmpty();
        gv_players[init_i].lv_ammoCounterDialog = c_invalidDialogId;
        for (init_i1 = 0; init_i1 <= 4; init_i1 += 1) {
            gv_players[init_i].lv_ammoCounterDialogItem[init_i1] = c_invalidDialogControlId;
        }
    }
    gv_mutexLock = true;
    gv_infestorObjective = c_invalidObjectiveId;
    gv_scrapyardObjective = c_invalidObjectiveId;
    gv_commTowerObjective = c_invalidObjectiveId;
    gv_blackOps = UnitGroupEmpty();
    gv_zombieWave = UnitGroupEmpty();
    gv_brainBugs = UnitGroupEmpty();
    gv_complianceNexusGroup = UnitGroupEmpty();
    gv_concentrationDisplay = c_invalidDialogId;
    gv_concentrationDisplayItem = c_invalidDialogControlId;
    gv_primaryObjective = c_invalidObjectiveId;
    gv_secondaryObjective = c_invalidObjectiveId;
    gv_secondary2Objective = c_invalidObjectiveId;
    gv_rescueObjective = c_invalidObjectiveId;
    gv_hexCycle = 0.5;
    gv_marineSquad = PlayerGroupEmpty();
    gv_marines = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerLives[init_i] = 3;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerRoundLimit[init_i] = 30;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_globalTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_globalTimerWindow[init_i] = c_timerWindowNone;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_classSelectionDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 18; init_j += 1) {
            gv_classSelectionDialogItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_bootCampDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_bootCampDialogItem[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_ammoCounterDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 4; init_j += 1) {
            gv_ammoCounterDialogItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_marineRounds[init_i] = 30;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_marineMags[init_i] = 40;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTree[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            gv_talentTreeItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_spawnFactor = 1;
    gv_noNewbie = true;
    gv_hitPar = 20;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentsAvailable[init_i] = 1;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentsAvailableDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_talentTreeImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_talentTreeTexts[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_infestorsAlive = 5;
    gv_colonists = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerRank[init_i] = 1;
    }
    gv_dummySound = SoundLink("EditorDefaultSound", -1);
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_kittens[init_i] = UnitGroupEmpty();
    }
    gv_nOTDGameTime = TimerCreate();
    gv_difficulty = StringExternal("Param/Value/F8130A42");
    gv_storylineSelectionDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_storylineSelectionDialogChoices[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        gv_storylineSelectionDialogImages[init_i] = c_invalidDialogControlId;
    }
    gv_alphaCompanyUnlocked = true;
    gv_secTeamUnlocked = true;
    gv_survivalUnlocked = true;
    gv_bankSize = 120;
    gv_originalBankSize = 20;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_upgraded[init_i] = true;
    }
    gv_raidUITeamStatus = c_invalidDialogId;
    gv_raidUITeamStatusDummy = c_invalidDialogId;
    gv_raidUIMedalsSubtab = c_invalidDialogId;
    gv_teamUIMedalsButton = c_invalidDialogId;
    gv_teamUIStatsButton = c_invalidDialogId;
    gv_raidUISizeX = 506;
    gv_raidUISizeY = 330;
    gv_raidUIOffsetX = 10;
    gv_raidUIOffsetY = 120;
    gv_teamStatusButtonOpened = c_invalidDialogControlId;
    gv_teamStatusButtonClosed = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusXPButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusPortraitImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusLifeBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusPlayerName[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_teamStatusDebuffs[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_teamStatusDebuffsBackground[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_teamStatusDebuffsBorder[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusLifeMidSlash[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusRankIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusXP[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusPortraitButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusLifeButton[init_i] = c_invalidDialogControlId;
    }
    gv_medalsDialogButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalName[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 10; init_j += 1) {
            for (init_k = 0; init_k <= 8; init_k += 1) {
                gv_playerMedalsMedalProgressSubBar[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalProgressPoints[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalItems[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalPoints[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsCloseButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsStatsTabButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsTalentsTabButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsScrollPreviousButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsScrollNextButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsRankIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsPlayerNameLabel[init_i] = c_invalidDialogControlId;
    }
    gv_statsDialogButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsDialogStats[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerHeroImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerLivesLeft[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerDecreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerDecreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerIncreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerIncreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerStatImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerStatLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatAvailableLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatCloseButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerNextLevelProgressBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerNextLevelPromotionLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerCurrentXP[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerNextXP[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerCashLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerCashAcquiredLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsStatsButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsStatsHeroImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsMedalsTabButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsTalentsTabButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsScrollPreviousButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsScrollNextButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsRankIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_wModWeaponsModButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_baseMarineReloadMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_baseMarineSwitchingMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_baseMarineWeightPointMultiplier[init_i] = 1.0;
    }
    gv_wModButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_wModWeaponsModDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_wModWeaponPointsAvailableLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModWeaponPointsLabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerDecreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerIncreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerDecreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerIncreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_talentTreeBordersInitial[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_talentTreeBordersFinal[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTreeMedalsTabButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTreeStatsTabButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTreeScrollPreviousButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTreeScrollNextButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTreeRankIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTreePlayerNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTreeCloseButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_sonicTrap[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_concentrationTimer[init_i] = TimerCreate();
    }
    gv_heartbeatSensorReconGroup = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_noEnemy[init_i] = true;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_armageddonBomb[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_synergyTimerEngineer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_synergyTimerGuardian[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_mindLinkedGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_barrageTime[init_i] = 8.0;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_shellCounter[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_shellDecre[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_shellIncre[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_shellDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_mobileInfantryGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_assaultJumpTimer[init_i] = 1;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_assaultJumpTimerCooldown[init_i] = 30;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_medalsAwardedImages[init_i][init_j] = "Assets\\Textures\\black.dds";
        }
    }
    gv_victoryButton1 = c_invalidDialogControlId;
    gv_victoryButton2 = c_invalidDialogControlId;
    gv_endGameDialog1 = c_invalidDialogId;
    gv_endGameDialog2 = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_itemBarButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_itemBarImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_itemBarRatingImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_itemBarRatingButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_medalsItemButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_medalsItemImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_itemIconImages[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_itemIconLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_finalTextLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_itemX = 300;
    gv_playerNameTextY = 25;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_scrollEndGameUIButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_spectatedDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_spectatedLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_shopItems[init_i] = UnitGroupEmpty();
    }
    gv_deadPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_unitsSelected[init_i] = UnitGroupEmpty();
    }
    gv_mineShaftMobs = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_equipmentButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_equipment[init_i] = c_invalidDialogId;
    }
    gv_classLimitMultiplier = 1.0;
    gv_objectivePing = c_invalidPingId;
    gv_huntMode = true;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_DebugBehaviorUnit (unit lp_target);
int gf_NOTDOwnerofUnit (unit lp_unit);
void gf_NOTDBanlist ();
void gf_NOTDEnvironment ();
void gf_PlayerAlliances ();
void gf_RankVariableIntialization ();
void gf_HeroIntialization ();
void gf_IntializeHero (int lp_classSlot, color lp_color, fixed lp_hitTolerance, string lp_class);
void gf_AmmoUICreation ();
void gf_ClassSelectionUI ();
void gf_ClassPointBarCreation (int lp_parentDialog, int lp_parentDialogItem, int lp_classPoints);
void gf_DifficultyHackerCheck ();
void gf_SaveInitBoundaryCheck (int lp_playerNo);
void gf_AutoSaveLong ();
void gf_Save (int lp_playerNo, int lp_bankSize);
void gf_ResetPlayerData (int lp_playerNo, int lp_bankSize);
void gf_LoadAcknowledge (int lp_playerNo, bool lp_valid);
void gf_LoadBoundaryCheck (int lp_playerNo, int lp_bankSize);
void gf_LoadPlayerBankFile (int lp_playerNo, int lp_originalBankSize, int lp_bankSize);
void gf_LoadPlayerBackupBankFile (int lp_playerNo);
void gf_TeamStatusInitializePlayerPortrait (int lp_triggeringPlayer);
void gf_TeamStatusUnderAttackPortraitFlash (int lp_playerNo);
void gf_UIUpdatePortraitTooltip (int lp_triggeringPlayer);
void gf_UIUpdateLifePercentage (int lp_triggeringPlayer);
void gf_UIUpdateLifeBarLength (int lp_triggeringPlayer);
void gf_UIInitializeLifeBar (int lp_triggeringPlayer);
void gf_UIUpdatePetLifeBarLength (int lp_triggeringPlayer);
void gf_UIUpdateLifeTooltip (int lp_triggeringPlayer);
void gf_UIUpdateXP (int lp_triggeringPlayer);
void gf_UIUpdateDebuffBackgroundBorder (int lp_triggeringPlayer, int lp_iconNumber);
void gf_UIUpdateDebuffBar (int lp_triggeringPlayer);
void gf_UISetPlayerRankNameIconXP (int lp_triggeringPlayer);
void gf_UIInitializePlayerLifePortrait (int lp_triggeringPlayer);
void gf_UISetDoctorTitle (int lp_triggeringPlayer);
void gf_UIInitializeStartingCareerStats ();
void gf_PeriodicTeamUIUpdate ();
void gf_PlayerMedalsSetMedalItems (int lp_player);
int gf_StatsXPLabelXPosition (int lp_playerNo);
void gf_StatsUpdateAvailableStatsText (int lp_triggeringPlayer);
void gf_StatsUpdateAllStatsText (int lp_playerNo);
void gf_StatsStorePlayerStats (int lp_triggeringPlayer);
void gf_StatsLoadPlayerStats ();
void gf_StatsUpdateHeroImage (int lp_triggeringPlayer);
void gf_StatsSetBehaviors (int lp_triggeringPlayer);
bool gf_StatsStatsChecking (int lp_playerNo);
void gf_StatsAddStrength (int lp_playerNo);
void gf_StatsRemoveStrength (int lp_triggeringPlayer);
void gf_StatsUpdateStrengthText (int lp_triggeringPlayer);
void gf_StatsAddEndurance (int lp_triggeringPlayer);
void gf_StatsRemoveEndurance (int lp_triggeringPlayer);
void gf_StatsUpdateEnduranceText (int lp_triggeringPlayer);
void gf_StatsAddAgility (int lp_triggeringPlayer);
void gf_StatsRemoveAgility (int lp_triggeringPlayer);
void gf_StatsUpdateAgilityText (int lp_triggeringPlayer);
void gf_StatsAddPerception (int lp_triggeringPlayer);
void gf_StatsRemovePerception (int lp_triggeringPlayer);
void gf_StatsUpdatePerceptionText (int lp_triggeringPlayer);
void gf_StatsAddIntelligence (int lp_triggeringPlayer);
void gf_StatsRemoveIntelligence (int lp_triggeringPlayer);
void gf_StatsUpdateIntelligenceText (int lp_triggeringPlayer);
void gf_WModLoadPlayerWeaponModPoints ();
void gf_WModStorePlayerWeaponModPoints (int lp_playerNo);
void gf_WModModPointRecalculate (int lp_playerNo);
int gf_WModGetMaxModPoints (int lp_playerNo);
void gf_WModUpdateAvailableWModPointsText (int lp_playerNo);
void gf_WModUpdateAllWeaponsModText (int lp_playerNo);
void gf_WModInitializeWeaponMods (int lp_playerNo);
void gf_WModSetRange (int lp_modLevel, int lp_modOwner);
void gf_WModUpdateWeaponsRangeText (int lp_playerNo);
void gf_WModSetDamage (int lp_modLevel, int lp_modOwner);
void gf_WModUpdateWeaponsDamageText (int lp_playerNo);
void gf_WModSetReloadTime (int lp_modLevel, int lp_modOwner);
void gf_WModUpdateWeaponsReloadText (int lp_playerNo);
void gf_WModSetSwitchTime (int lp_modLevel, int lp_modOwner);
void gf_WModUpdateWeaponsSwitchText (int lp_playerNo);
void gf_WModSetAttackSpeed (int lp_modLevel, int lp_modOwner);
void gf_WModUpdateWeaponsSpeedText (int lp_playerNo);
void gf_WModSetWeightPoint (int lp_modLevel, int lp_modOwner);
void gf_WModUpdateWeaponsWeightText (int lp_playerNo);
void gf_WeaponsModSetSplashRadius (int lp_modLevel, int lp_modOwner);
void gf_WModUpdateWeaponsSplashText (int lp_playerNo);
void gf_LevelUpTalentRifleman (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentMedic (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentAssault (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentMarksman (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentRecon (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentDemolitions (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentEngineer (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentCommando (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentPsiOps (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentTechnician (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentForwardObserver (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentFlamethrower (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentPathfinder (int lp_itemNo, int lp_triggPlayer);
void gf_LevelUpTalentChemExpert (int lp_itemNo, int lp_triggPlayer);
void gf_UpdateTalentText (int lp_itemNo, int lp_triggPlayer, int lp_itemLevel);
bool gf_TalentSelectionOption (int lp_itemNo, int lp_triggPlayer);
void gf_UpdateTalentImage (int lp_itemNo, int lp_triggPlayer);
void gf_UpdateAllTalentImages (int lp_triggPlayer);
void gf_UpdateTalentAbility (int lp_itemNo, int lp_triggPlayer);
void gf_UpdateTalentSystem (int lp_itemNo, int lp_triggPlayer);
void gf_TalentTreeRifleman ();
void gf_TalentTreeMedic ();
void gf_TalentTreeAssault ();
void gf_TalentTreeRecon ();
void gf_TalentTreeMarksman ();
void gf_TalentTreeDemolitions ();
void gf_TalentTreeEngineer ();
void gf_TalentTreeCommando ();
void gf_TalentTreePsiOps ();
void gf_TalentTreeTechnician ();
void gf_TalentTreeForwardObserver ();
void gf_TalentTreeFlamethrower ();
void gf_TalentTreePathfinder ();
void gf_TalentTreeChemExpert ();
void gf_TalentTreeCreation ();
void gf_TalentTreeInit ();
void gf_SetCombatKnifeDamage (int lp_triggeringPlayer);
fixed gf_HarvesterofSorrowCheck (unit lp_assaultUnit);
fixed gf_WeaponsProfReloadTimeFactor (int lp_triggPlayer);
void gf_InitializeConcentrationTimer (int lp_marksmanPlayer);
void gf_HeartbeatSensorBeep (int lp_reconPlayer);
void gf_ForwardObserverLaunchSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode);
void gf_ForwardObserverShellFlightSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode);
void gf_ForwardObserverCreateShellDialog (int lp_forwardObserverOwner);
bool gf_CPDecayFactor ();
void gf_MarineSpeechNOTD (unit lp_speechUnit, text lp_speech);
void gf_CoordinateTextNOTD (point lp_displayPoint, text lp_speech);
void gf_RadioNOTD (text lp_speechUnit, text lp_speech);
void gf_TipNOTD (int lp_tipThreshold, text lp_tipText);
void gf_TipLocalNOTD (int lp_tipThreshold, int lp_tipPlayer, text lp_tipText);
void gf_CreateItemNOTD (string lp_itemToBeCreated, int lp_quantity);
void gf_CreateItemLocalNOTD (string lp_itemToBeCreated, int lp_quantity, region lp_deploymentArea);
void gf_SmartSpawnNOTD (string lp_spawningUnit, fixed lp_spawnRange);
void gf_AwardPlayerXPNOTD (int lp_xPAwarded);
void gf_AwardRatingNOTD (int lp_ratingAwarded);
void gf_AwardKarmaNOTD (int lp_karmaAwarded);
void gf_AwardMarineXPNOTD (fixed lp_marineXPAwarded);
void gf_AwardCreditsNOTD (int lp_creditsAwarded);
void gf_EndGameUINOTD ();
void gf_EndGameUISetNOTD ();
void gf_SetMedalVariables (int lp_playerNo, int lp_medalID);
void gf_FlareAreaRecruit (point lp_flarePoint, fixed lp_flareRadius);
void gf_EquipmentUpdateMarineWeight (int lp_ownerOfEquipment);
int gf_GetEnhancementSlots (unit lp_hero);
int gf_GetInventorySlots (unit lp_hero);
void gf_EquipmentUpdateMarineWeightPointPerItem (int lp_ownerofEquipment, unit lp_item);
void gf_DisableAttackEquippingWeapons (int lp_inventoryOwner, string lp_equipment);
string gf_GetImageFileofHeroType (int lp_inventoryOwner);
int gf_GetBoughtItemOwner (unit lp_tempItem);
void gf_HEAmmoBurnDamage (int lp_firingMarineOwner);
void gf_PlayerColorChange (int lp_buyingPlayer);
void gf_CreatePet (int lp_owner, point lp_point);
bool gf_BOInsigniaBought (int lp_owner);
bool gf_KittensBought (int lp_owner);
void gf_UpgradeBOInsigniaRank (int lp_owner);
void gf_CreateKittens (int lp_owner);
bool gf_WeaponsModPointMax (int lp_playerNo);
void gf_RemoveBoughtItems (int lp_playerNo);
void gf_UpdateAmmoDialog (int lp_playerNumber);
void gf_BadlyInjured (unit lp_injuredUnit);
bool gf_AilmentResistanceCheck (unit lp_localUnitA);
void gf_DeathDisplay (string lp_damageEffect, int lp_playerNumber, unit lp_killer);
void gf_DeathRating (unit lp_deadMarine, int lp_playerNumber);
void gf_DeathCamera (region lp_deathLocation, unit lp_deadMarine, int lp_playerNumber);
void gf_DeathDialogDestruction (int lp_playerNumber);
void gf_RankUp ();
void gf_AIDataDifficultyEdit ();
bool gf_PreCinematicProcessing ();
bool gf_PostCinematicProcessing ();
void gf_ZombieAIWorldEvents ();
void gf_BlackMaskApplication ();
void gf_GameOverInit ();
point gf_RandomPointatGroundHeight (region lp_region, fixed lp_groundHeight);
void gf_ClassCreationMaster ();
fixed gf_GetClassWeight (string lp_class);
int gf_GetClassCP (int lp_player, string lp_class);
int gf_GetClassColor (int lp_player, string lp_class);
soundlink gf_GetClassColor2 (int lp_player, string lp_class);
void gf_BootCampMarineCreation ();
void gf_BootCampEnvironmentalChanges ();
void gf_ClassLimitCheck2 ();
void gf_Task1ObjectivesandMovement ();
void gf_Task2ItemsandInventory ();
void gf_Task3EvasiveManeuversArtillery ();
void gf_Task3FireMission ();
void gf_Task3BrokenArrow ();
void gf_Task3bUnderstandingAilments ();
void gf_Task4ObstaclesandHexMissions ();
void gf_Task5ItemReconandDefensiveSetup ();
void gf_Task6BossFight ();
void gf_BootCampComplete ();
void gf_TrainingFieldInitialize ();
void gf_TrainingFieldEnvironmentalChanges ();
void gf_SurvivalSpawn (string lp_spawningUnit, region lp_spawnRegion);
void gf_FieldBegins ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ClassSelectOverride;
trigger gt_ShowPathtoMilitaryBase;
trigger gt_NOTDInitialize;
trigger gt_NOTDCamera;
trigger gt_StorylineDialogCreation;
trigger gt_StorylineSelection;
trigger gt_ManualSave;
trigger gt_AutoSave;
trigger gt_MapInitLoadPlayer;
trigger gt_CreateTeamStatusDialog;
trigger gt_ToggleTeamStatusDialog;
trigger gt_UpdateLifeBarMIAPlayerHasLeftGame;
trigger gt_TeamStatusClickedTalentTree;
trigger gt_CreateMedalsDialog;
trigger gt_ToggleMedalsDialog;
trigger gt_CloseShowMedalDialog;
trigger gt_CreateStatsDialog;
trigger gt_ToggleStatsDialog;
trigger gt_ModifyHeroStats;
trigger gt_CreateWeaponsModDialog;
trigger gt_ToggleWeaponsModDialog;
trigger gt_ModifyWeapons;
trigger gt_TalentTreeToggle;
trigger gt_TalentSelection;
trigger gt_Backstab;
trigger gt_CriticalStrike;
trigger gt_GrenadeLauncherFireUpEnd;
trigger gt_SonicTrapLimit5;
trigger gt_SonicTrapVision;
trigger gt_Anticipation;
trigger gt_ResetConcentration;
trigger gt_AddConcentrationPoint;
trigger gt_Concentration;
trigger gt_SupplyStation;
trigger gt_LaserDesignator;
trigger gt_Flare;
trigger gt_ReaperMK13Created;
trigger gt_RefresherResetCooldowns;
trigger gt_EscapeResetSprintCooldown;
trigger gt_ArmageddonBombLimit3;
trigger gt_FireVulnerability;
trigger gt_FieldNexusRevokeSharedVision;
trigger gt_FieldNexusShareVision;
trigger gt_Synergy;
trigger gt_X1Guardian;
trigger gt_TacticalNuke;
trigger gt_RavagingPhantom;
trigger gt_Inception;
trigger gt_MindLinkShareDamage;
trigger gt_MindLinkShareVision;
trigger gt_CancelMindLink;
trigger gt_HammeroftheGodsCamShake;
trigger gt_AMRounds;
trigger gt_ModifyShellLimit;
trigger gt_FireMission;
trigger gt_ShockwaveBarrage;
trigger gt_NapalmBarrage;
trigger gt_MobileInfantry;
trigger gt_SurveillanceFlares;
trigger gt_GunshipBuddy;
trigger gt_GunshipSupport;
trigger gt_GunshipMouse1GaussCannon;
trigger gt_GunshipMouse2HellfireMissile;
trigger gt_GunshipOtherKeys;
trigger gt_GunshipImpactQuake;
trigger gt_NoQuarter;
trigger gt_AssaultJumpTimer;
trigger gt_Shrinker;
trigger gt_HugRevealWhenActivated;
trigger gt_GameOverCheck;
trigger gt_VictoryBonus;
trigger gt_ClassPointsUpdateVictoryOnly;
trigger gt_NightmareBonus;
trigger gt_NOTDCreditsRoll;
trigger gt_PlayerLeavesGame;
trigger gt_ReturntoEarth;
trigger gt_Clear;
trigger gt_SquadStatsCheck;
trigger gt_CiviliansCheck;
trigger gt_TeamLocation;
trigger gt_ClassPointsCheck;
trigger gt_WinsCheck;
trigger gt_AmmoCheck;
trigger gt_NightmareMode;
trigger gt_OpenEquipment;
trigger gt_UpdateWeightItems;
trigger gt_ItemTransferBlock;
trigger gt_UnequipItem;
trigger gt_ShowInventory;
trigger gt_EquipItem;
trigger gt_ItemGained;
trigger gt_DropMagazine;
trigger gt_MagazineUse;
trigger gt_StackMagsIntoBox;
trigger gt_RoadFlare;
trigger gt_BuyItem;
trigger gt_BandageUsed;
trigger gt_UseBandagewithAbility;
trigger gt_ReceivesDamage;
trigger gt_DeadMarine;
trigger gt_Kills;
trigger gt_KarmaBite;
trigger gt_ManualReload;
trigger gt_AmmoUsage;
trigger gt_LevelUp;
trigger gt_PetLevelUp;
trigger gt_MiniMarineLevelUp;
trigger gt_Helium3AcquiredCredits;
trigger gt_InfestorKilled;
trigger gt_InfestorAI;
trigger gt_Barrels;
trigger gt_BootCampInitialize;
trigger gt_EntersTowerA;
trigger gt_EntersTowerB;
trigger gt_EntersTowerC;
trigger gt_EntersTowerD;
trigger gt_Task2PredatorKillXP;
trigger gt_Task4ActivatingTacticalArenaHexTerminal1;
trigger gt_Task5PredatorKillXP;
trigger gt_Task5ActivatingTacticalArenaHexTerminal2;
trigger gt_TrainingFieldClassSelectionUI;
trigger gt_TrainingFieldClassCreation;
trigger gt_EntersMainZoneNorth;
trigger gt_EntersMainZoneEast;
trigger gt_EntersMainZoneSouth;
trigger gt_Scenario1;
trigger gt_Scenario2;
trigger gt_Scenario3;
trigger gt_Scenario4;
trigger gt_Scenario5;
trigger gt_Scenario6;
trigger gt_Day;
trigger gt_Night;
trigger gt_Hunt;
trigger gt_OM3ArmoryTurrets;

//--------------------------------------------------------------------------------------------------
// Custom Script: README - Player Bank Data
//--------------------------------------------------------------------------------------------------
//Player Bank Data
//These stores player data
//The first index: 0-20 is data number
//All of 0-40 can be used
//The second index: player number
//e.g. Player 1 = 1
//Important: range of data must be of range 0 - 1000000
//For encryption

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_DebugBehaviorUnit (unit lp_target) {
    // Variable Declarations
    int lv_loop;

    // Automatic Variable Declarations
    int autoB20EB7C8_ae;
    const int autoB20EB7C8_ai = 1;

    // Variable Initialization

    // Implementation
    autoB20EB7C8_ae = UnitBehaviorCountAll(lp_target);
    lv_loop = 1;
    for ( ; ( (autoB20EB7C8_ai >= 0 && lv_loop <= autoB20EB7C8_ae) || (autoB20EB7C8_ai < 0 && lv_loop >= autoB20EB7C8_ae) ) ; lv_loop += autoB20EB7C8_ai ) {
        TextExpressionSetToken("Param/Expression/CB96C272", "A", StringToText((UnitBehaviorGet(lp_target, lv_loop))));
        TextExpressionSetToken("Param/Expression/CB96C272", "B", IntToText(UnitBehaviorCount(lp_target, UnitBehaviorGet(lp_target, lv_loop))));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/CB96C272"), true);
    }
}

int gf_NOTDOwnerofUnit (unit lp_unit) {
    // Variable Declarations
    int lv_iLocal;

    // Automatic Variable Declarations
    const int auto3D9B7A8C_ae = 8;
    const int auto3D9B7A8C_ai = 1;
    const int autoD6B53A79_ae = 8;
    const int autoD6B53A79_ai = 1;
    const int auto4072FB31_ae = 8;
    const int auto4072FB31_ai = 1;
    const int autoA94FEB18_ae = 8;
    const int autoA94FEB18_ai = 1;

    // Variable Initialization

    // Implementation
    lv_iLocal = 1;
    for ( ; ( (auto3D9B7A8C_ai >= 0 && lv_iLocal <= auto3D9B7A8C_ae) || (auto3D9B7A8C_ai < 0 && lv_iLocal >= auto3D9B7A8C_ae) ) ; lv_iLocal += auto3D9B7A8C_ai ) {
        if ((lp_unit == gv_marineHero[lv_iLocal])) {
            return lv_iLocal;
        }

    }
    lv_iLocal = 1;
    for ( ; ( (autoD6B53A79_ai >= 0 && lv_iLocal <= autoD6B53A79_ae) || (autoD6B53A79_ai < 0 && lv_iLocal >= autoD6B53A79_ae) ) ; lv_iLocal += autoD6B53A79_ai ) {
        if ((lp_unit == gv_reaperMK13[lv_iLocal])) {
            return lv_iLocal;
        }

    }
    lv_iLocal = 1;
    for ( ; ( (auto4072FB31_ai >= 0 && lv_iLocal <= auto4072FB31_ae) || (auto4072FB31_ai < 0 && lv_iLocal >= auto4072FB31_ae) ) ; lv_iLocal += auto4072FB31_ai ) {
        if ((lp_unit == gv_x1Guardian[lv_iLocal])) {
            return lv_iLocal;
        }

    }
    lv_iLocal = 1;
    for ( ; ( (autoA94FEB18_ai >= 0 && lv_iLocal <= autoA94FEB18_ae) || (autoA94FEB18_ai < 0 && lv_iLocal >= autoA94FEB18_ae) ) ; lv_iLocal += autoA94FEB18_ai ) {
        if ((lp_unit == gv_playerPet[lv_iLocal])) {
            return lv_iLocal;
        }

    }
    return UnitGetOwner(lp_unit);
}

trigger auto_gf_NOTDBanlist_Trigger = null;

void gf_NOTDBanlist () {
    if (auto_gf_NOTDBanlist_Trigger == null) {
        auto_gf_NOTDBanlist_Trigger = TriggerCreate("auto_gf_NOTDBanlist_TriggerFunc");
    }

    TriggerExecute(auto_gf_NOTDBanlist_Trigger, false, false);
}

bool auto_gf_NOTDBanlist_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;
    bool lv_banActivated;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localIntA = 1;

    // Implementation
    while ((lv_localIntA < 9)) {
        if ((PlayerType(lv_localIntA) == c_playerTypeUser) && ((PlayerHandle(lv_localIntA) == "1-S2-1-550237") || (PlayerHandle(lv_localIntA) == "1-S1-1-2152926") || (PlayerHandle(lv_localIntA) == "1-S2-1-1055911") || (PlayerHandle(lv_localIntA) == "1-S2-1-3029037") || (PlayerHandle(lv_localIntA) == "1-S2-1-2983952") || (PlayerHandle(lv_localIntA) == "1-S2-1-2448999") || (PlayerHandle(lv_localIntA) == "1-S2-1-2087632") || (PlayerHandle(lv_localIntA) == "1-S2-1-2147025") || (PlayerHandle(lv_localIntA) == "1-S2-1-2280046") || (PlayerHandle(lv_localIntA) == "1-S2-1-2524675") || (PlayerHandle(lv_localIntA) == "1-S2-1-1005217") || (PlayerHandle(lv_localIntA) == "1-S2-1-3735941") || (PlayerHandle(lv_localIntA) == "1-S2-1-879732") || (PlayerHandle(lv_localIntA) == "1-S2-1-3784621") || (PlayerHandle(lv_localIntA) == "1-S2-1-1752172") || (PlayerHandle(lv_localIntA) == "1-S2-1-3514029") || (PlayerHandle(lv_localIntA) == "1-S2-1-3146908") || (PlayerHandle(lv_localIntA) == "1-S2-2-349445") || (PlayerHandle(lv_localIntA) == "1-S2-2-4822") || (PlayerHandle(lv_localIntA) == "1-S2-1-3817069") || (PlayerHandle(lv_localIntA) == "1-S2-1-1974079") || (PlayerHandle(lv_localIntA) == "1-S2-1-1053057") || (PlayerHandle(lv_localIntA) == "1-S2-1-805120") || (PlayerHandle(lv_localIntA) == "1-S2-1-2497649") || (PlayerHandle(lv_localIntA) == "1-S2-1-1811964") || (PlayerHandle(lv_localIntA) == "1-S2-3446415") || (PlayerHandle(lv_localIntA) == "1-S2-1-2018586") || (PlayerHandle(lv_localIntA) == "1-S2-2-334016") || (PlayerHandle(lv_localIntA) == "1-S2-1-2087314") || (PlayerHandle(lv_localIntA) == "1-S2-1-2753709") || (PlayerHandle(lv_localIntA) == "1-S2-1-2192630") || (PlayerHandle(lv_localIntA) == "1-S2-1-3327811") || (PlayerHandle(lv_localIntA) == "1-S2-1-3361931") || (PlayerHandle(lv_localIntA) == "1-S2-1-4004127") || (PlayerHandle(lv_localIntA) == "1-S2-2-23983") || (PlayerHandle(lv_localIntA) == "1-S2-1-2284325") || (PlayerHandle(lv_localIntA) == "1-S2-1-4009964") || (PlayerHandle(lv_localIntA) == "1-S2-1-2204726") || (PlayerHandle(lv_localIntA) == "1-S2-1-4094968") || (PlayerHandle(lv_localIntA) == "1-S2-1-616811") || (PlayerHandle(lv_localIntA) == "1-S2-1-3204161") || (PlayerHandle(lv_localIntA) == "1-S2-1-2760203") || (PlayerHandle(lv_localIntA) == "1-S2-1-2466377") || (PlayerHandle(lv_localIntA) == "1-S2-1-4114447") || (PlayerHandle(lv_localIntA) == "1-S2-1-1431683") || (PlayerHandle(lv_localIntA) == "1-S2-2-369112") || (PlayerHandle(lv_localIntA) == "1-S2-1-2461615") || (PlayerHandle(lv_localIntA) == "1-S2-1-3122878") || (PlayerHandle(lv_localIntA) == "1-S2-1-4004949") || (PlayerHandle(lv_localIntA) == "1-S2-1-4209567") || (PlayerHandle(lv_localIntA) == "1-S2-1-728983") || (PlayerHandle(lv_localIntA) == "1-S2-1-4213731") || (PlayerHandle(lv_localIntA) == "1-S2-1-2059162") || (PlayerHandle(lv_localIntA) == "6-S2-1-356623") || (PlayerHandle(lv_localIntA) == "6-S2-1-401486") || (PlayerHandle(lv_localIntA) == "6-S2-1-83628") || (PlayerHandle(lv_localIntA) == "6-S2-1-298115") || (PlayerHandle(lv_localIntA) == "6-S2-1-405585") || (PlayerHandle(lv_localIntA) == "6-S2-1-424949") || (PlayerHandle(lv_localIntA) == "6-S2-1-84197") || (PlayerHandle(lv_localIntA) == "2-S2-1-2276448") || (PlayerHandle(lv_localIntA) == "2-S2-1-1662275") || (PlayerHandle(lv_localIntA) == "2-S2-1-2551674") || (PlayerHandle(lv_localIntA) == "2-S2-1-264192") || (PlayerHandle(lv_localIntA) == "2-S2-1-2812234") || (PlayerHandle(lv_localIntA) == "2-S2-1-2819418") || (PlayerHandle(lv_localIntA) == "2-S2-1-2475538") || (PlayerHandle(lv_localIntA) == "2-S2-2-568321") || (PlayerHandle(lv_localIntA) == "2-S2-2-81596") || (PlayerHandle(lv_localIntA) == "2-S2-1-1059546") || (PlayerHandle(lv_localIntA) == "2-S2-1-1528363") || (PlayerHandle(lv_localIntA) == "2-S2-1-1417509") || (PlayerHandle(lv_localIntA) == "2-S2-1-2963567") || (PlayerHandle(lv_localIntA) == "2-S2-1-2962068") || (PlayerHandle(lv_localIntA) == "2-S2-1-675106") || (PlayerHandle(lv_localIntA) == "2-S2-1-1283282") || (PlayerHandle(lv_localIntA) == "2-S2-1-1743117") || (PlayerHandle(lv_localIntA) == "2-S2-1-704032") || (PlayerHandle(lv_localIntA) == "2-S2-1-2826788") || (PlayerHandle(lv_localIntA) == "2-S2-1-2419451") || (PlayerHandle(lv_localIntA) == "2-S2-1-1662367") || (PlayerHandle(lv_localIntA) == "2-S2-2-230390") || (PlayerHandle(lv_localIntA) == "2-S2-1-967331") || (PlayerHandle(lv_localIntA) == "2-S2-1-1312881") || (PlayerHandle(lv_localIntA) == "2-S2-2-293587") || (PlayerHandle(lv_localIntA) == "2-S2-1-849474") || (PlayerHandle(lv_localIntA) == "2-S2-1-1063879") || (PlayerHandle(lv_localIntA) == "2-S2-2-6964") || (PlayerHandle(lv_localIntA) == "2-S2-1-3285157") || (PlayerHandle(lv_localIntA) == "2-S2-2-799293") || (PlayerHandle(lv_localIntA) == "2-S2-2-381280") || (PlayerHandle(lv_localIntA) == "2-S2-1-683507") || (PlayerHandle(lv_localIntA) == "2-S2-2-214538") || (PlayerHandle(lv_localIntA) == "2-S2-1-3480627"))) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/6A9EBE6F") + PlayerName(lv_localIntA)) + StringExternal("Param/Value/1E34A543")));
            SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
            Wait(12.0, c_timeReal);
            GameOver(lv_localIntA, c_gameOverDefeat, true, true);
            lv_banActivated = true;
        }

        lv_localIntA += 1;
    }
    if ((lv_banActivated == true)) {
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    return true;
}

trigger auto_gf_NOTDEnvironment_Trigger = null;

void gf_NOTDEnvironment () {
    if (auto_gf_NOTDEnvironment_Trigger == null) {
        auto_gf_NOTDEnvironment_Trigger = TriggerCreate("auto_gf_NOTDEnvironment_TriggerFunc");
    }

    TriggerExecute(auto_gf_NOTDEnvironment_Trigger, false, false);
}

bool auto_gf_NOTDEnvironment_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "BootCampSoundtrack", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    GameSetLighting("UnknownLight", 0.0);
    GameSetBackground(c_backgroundFixed, null, 100.0);
    GameTimeOfDaySet("20:00:00");
    GameTimeOfDaySetLength(3000.0);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryME, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    UISetBattleNetButtonOffset(PlayerGroupAll(), 9, 252);
    TriggerExecute(gt_NOTDCamera, true, false);
    gv_reinforcementSpawnHeight[1] = 21.5;
    gv_reinforcementSpawnHeight[2] = 20.5;
    gv_reinforcementSpawnHeight[3] = 20.5;
    gv_reinforcementSpawnHeight[4] = 20.5;
    gv_reinforcementSpawnHeight[5] = 20.5;
    gv_reinforcementSpawnHeight[6] = 20.5;
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    Wait(20.0, c_timeReal);
    gf_NOTDBanlist();
    return true;
}

trigger auto_gf_PlayerAlliances_Trigger = null;

void gf_PlayerAlliances () {
    if (auto_gf_PlayerAlliances_Trigger == null) {
        auto_gf_PlayerAlliances_Trigger = TriggerCreate("auto_gf_PlayerAlliances_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayerAlliances_Trigger, false, false);
}

bool auto_gf_PlayerAlliances_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allyOuterLoop;
    int lv_allyInnerLoop;

    // Automatic Variable Declarations
    const int auto51CA0516_ae = 8;
    const int auto51CA0516_ai = 1;
    const int autoD4814300_ae = 8;
    const int autoD4814300_ai = 1;

    // Variable Initialization

    // Implementation
    PlayerSetColorIndex(13, 1, true);
    PlayerSetColorIndex(14, 1, true);
    PlayerSetColorIndex(15, 1, true);
    PlayerSetColorIndex(9, 0, true);
    PlayerSetDifficulty(14, 2);
    libNtve_gf_SetAlliance(14, 13, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(14, 12, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAlliance(13, 12, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_SetAllianceOneWay(9, 12, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(13, 12, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(14, 12, libNtve_ge_AllianceSetting_Neutral);
    lv_allyOuterLoop = 1;
    for ( ; ( (auto51CA0516_ai >= 0 && lv_allyOuterLoop <= auto51CA0516_ae) || (auto51CA0516_ai < 0 && lv_allyOuterLoop >= auto51CA0516_ae) ) ; lv_allyOuterLoop += auto51CA0516_ai ) {
        libNtve_gf_SetAlliance(lv_allyOuterLoop, 9, libNtve_ge_AllianceSetting_AllyWithSharedVision);
        lv_allyInnerLoop = (lv_allyOuterLoop + 1);
        for ( ; ( (autoD4814300_ai >= 0 && lv_allyInnerLoop <= autoD4814300_ae) || (autoD4814300_ai < 0 && lv_allyInnerLoop >= autoD4814300_ae) ) ; lv_allyInnerLoop += autoD4814300_ai ) {
            libNtve_gf_SetAlliance(lv_allyOuterLoop, lv_allyInnerLoop, libNtve_ge_AllianceSetting_Ally);
        }
        libNtve_gf_SetAllianceOneWay(lv_allyOuterLoop, 12, libNtve_ge_AllianceSetting_Neutral);
        libNtve_gf_SetAllianceOneWay(12, lv_allyOuterLoop, libNtve_ge_AllianceSetting_Enemy);
    }
    libNtve_gf_SetAlliance(14, 1, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 1, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(14, 9, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(13, 9, libNtve_ge_AllianceSetting_Enemy);
    libNtve_gf_SetAlliance(2, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(3, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAlliance(4, 1, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    return true;
}

void gf_RankVariableIntialization () {
    // Automatic Variable Declarations
    // Implementation
    gv_rankIcon[1] = "NOTD Rank Icons\\Rank 1 - PVT.dds";
    gv_rankIcon[2] = "NOTD Rank Icons\\Rank 2 - PFC.dds";
    gv_rankIcon[3] = "NOTD Rank Icons\\Rank 3 - CPL.dds";
    gv_rankIcon[4] = "NOTD Rank Icons\\Rank 4 - SGT.dds";
    gv_rankIcon[5] = "NOTD Rank Icons\\Rank 5 - SSG.dds";
    gv_rankIcon[6] = "NOTD Rank Icons\\Rank 6 - SGM.dds";
    gv_rankIcon[7] = "NOTD Rank Icons\\Rank 7 - 2LT.dds";
    gv_rankIcon[8] = "NOTD Rank Icons\\Rank 8 - 1LT.dds";
    gv_rankIcon[9] = "NOTD Rank Icons\\Rank 9 - CPT.dds";
    gv_rankIcon[10] = "NOTD Rank Icons\\Rank 10 - MAJ.dds";
    gv_rankIcon[11] = "NOTD Rank Icons\\Rank 11 - LTC.dds";
    gv_rankIcon[12] = "NOTD Rank Icons\\Rank 12 - COL.dds";
    gv_rankIcon[13] = "NOTD Rank Icons\\Rank 13 - BG.dds";
    gv_rankIcon[14] = "NOTD Rank Icons\\Rank 14 - MG.dds";
    gv_rankIcon[15] = "NOTD Rank Icons\\Rank 15 - LTG.dds";
    gv_rankIcon[16] = "NOTD Rank Icons\\Rank 16 - GEN.dds";
    gv_rankIcon[17] = "NOTD Rank Icons\\Rank 17 - GA.dds";
    gv_rankTitle[1] = StringExternal("Param/Value/64723C59");
    gv_rankTitle[2] = StringExternal("Param/Value/0F158D38");
    gv_rankTitle[3] = StringExternal("Param/Value/17B29F22");
    gv_rankTitle[4] = StringExternal("Param/Value/972FDE4C");
    gv_rankTitle[5] = StringExternal("Param/Value/750C8448");
    gv_rankTitle[6] = StringExternal("Param/Value/7E29E5C0");
    gv_rankTitle[7] = StringExternal("Param/Value/FE3198AC");
    gv_rankTitle[8] = StringExternal("Param/Value/657D2E1B");
    gv_rankTitle[9] = StringExternal("Param/Value/8A1B55DD");
    gv_rankTitle[10] = StringExternal("Param/Value/0177E998");
    gv_rankTitle[11] = StringExternal("Param/Value/AB60E82F");
    gv_rankTitle[12] = StringExternal("Param/Value/E0EAE657");
    gv_rankTitle[13] = StringExternal("Param/Value/752771F9");
    gv_rankTitle[14] = StringExternal("Param/Value/FB914750");
    gv_rankTitle[15] = StringExternal("Param/Value/4CB28109");
    gv_rankTitle[16] = StringExternal("Param/Value/31E1B9CA");
    gv_rankTitle[17] = StringExternal("Param/Value/E6D8AB78");
    gv_rankRequirement[1] = 0;
    gv_rankRequirement[2] = 100;
    gv_rankRequirement[3] = 500;
    gv_rankRequirement[4] = 2000;
    gv_rankRequirement[5] = 5000;
    gv_rankRequirement[6] = 10000;
    gv_rankRequirement[7] = 20000;
    gv_rankRequirement[8] = 30000;
    gv_rankRequirement[9] = 40000;
    gv_rankRequirement[10] = 60000;
    gv_rankRequirement[11] = 80000;
    gv_rankRequirement[12] = 120000;
    gv_rankRequirement[13] = 160000;
    gv_rankRequirement[14] = 200000;
    gv_rankRequirement[15] = 250000;
    gv_rankRequirement[16] = 300000;
    gv_rankRequirement[17] = 350000;
    gv_rankFullTitle[1] = StringExternal("Param/Value/7B8E479C");
    gv_rankFullTitle[2] = StringExternal("Param/Value/616BA444");
    gv_rankFullTitle[3] = StringExternal("Param/Value/C99E18E9");
    gv_rankFullTitle[4] = StringExternal("Param/Value/85F66458");
    gv_rankFullTitle[5] = StringExternal("Param/Value/5C3D5687");
    gv_rankFullTitle[6] = StringExternal("Param/Value/B119C0F3");
    gv_rankFullTitle[7] = StringExternal("Param/Value/54DB7209");
    gv_rankFullTitle[8] = StringExternal("Param/Value/F1BDD62E");
    gv_rankFullTitle[9] = StringExternal("Param/Value/810F9387");
    gv_rankFullTitle[10] = StringExternal("Param/Value/B7E0926A");
    gv_rankFullTitle[11] = StringExternal("Param/Value/E8674584");
    gv_rankFullTitle[12] = StringExternal("Param/Value/1F18619D");
    gv_rankFullTitle[13] = StringExternal("Param/Value/169E1EC2");
    gv_rankFullTitle[14] = StringExternal("Param/Value/474FD77B");
    gv_rankFullTitle[15] = StringExternal("Param/Value/58478DFC");
    gv_rankFullTitle[16] = StringExternal("Param/Value/1965ACD1");
    gv_rankFullTitle[17] = StringExternal("Param/Value/F3CEA296");
}

trigger auto_gf_HeroIntialization_Trigger = null;

void gf_HeroIntialization () {
    if (auto_gf_HeroIntialization_Trigger == null) {
        auto_gf_HeroIntialization_Trigger = TriggerCreate("auto_gf_HeroIntialization_TriggerFunc");
    }

    TriggerExecute(auto_gf_HeroIntialization_Trigger, false, false);
}

bool auto_gf_HeroIntialization_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

trigger auto_gf_IntializeHero_Trigger = null;
int auto_gf_IntializeHero_lp_classSlot;
color auto_gf_IntializeHero_lp_color;
fixed auto_gf_IntializeHero_lp_hitTolerance;
string auto_gf_IntializeHero_lp_class;

void gf_IntializeHero (int lp_classSlot, color lp_color, fixed lp_hitTolerance, string lp_class) {
    auto_gf_IntializeHero_lp_classSlot = lp_classSlot;
    auto_gf_IntializeHero_lp_color = lp_color;
    auto_gf_IntializeHero_lp_hitTolerance = lp_hitTolerance;
    auto_gf_IntializeHero_lp_class = lp_class;

    if (auto_gf_IntializeHero_Trigger == null) {
        auto_gf_IntializeHero_Trigger = TriggerCreate("auto_gf_IntializeHero_TriggerFunc");
    }

    TriggerExecute(auto_gf_IntializeHero_Trigger, false, false);
}

bool auto_gf_IntializeHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_classSlot = auto_gf_IntializeHero_lp_classSlot;
    color lp_color = auto_gf_IntializeHero_lp_color;
    fixed lp_hitTolerance = auto_gf_IntializeHero_lp_hitTolerance;
    string lp_class = auto_gf_IntializeHero_lp_class;

    // Automatic Variable Declarations
    return true;
}

trigger auto_gf_AmmoUICreation_Trigger = null;

void gf_AmmoUICreation () {
    if (auto_gf_AmmoUICreation_Trigger == null) {
        auto_gf_AmmoUICreation_Trigger = TriggerCreate("auto_gf_AmmoUICreation_TriggerFunc");
    }

    TriggerExecute(auto_gf_AmmoUICreation_Trigger, false, false);
}

bool auto_gf_AmmoUICreation_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto73E00CBA_ae = 8;
    int auto73E00CBA_var;

    // Implementation
    auto73E00CBA_var = 1;
    for ( ; auto73E00CBA_var <= auto73E00CBA_ae; auto73E00CBA_var += 1 ) {
        DialogCreate(170, 35, c_anchorBottom, -274, 295, true);
        DialogSetImageVisible(DialogLastCreated(), false);
        gv_ammoCounterDialog[auto73E00CBA_var] = DialogLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_ammoCounterDialog[auto73E00CBA_var], 35, 35, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/50D4D5F4"), "Assets\\Textures\\btn-techupgrade-terran-extramines.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(gv_ammoCounterDialog[auto73E00CBA_var], 200, 50, c_anchorTopLeft, 40, 5, StringExternal("Param/Value/D6B54D05"), Color(100,100,100), false, 2.0);
        gv_ammoCounterDialogItem[auto73E00CBA_var][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_ammoCounterDialog[auto73E00CBA_var], 35, 35, c_anchorTopLeft, 93, 0, StringExternal("Param/Value/4563176E"), "Assets\\Textures\\btn-techupgrade-terran-fullborecanisterammo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemLabel(gv_ammoCounterDialog[auto73E00CBA_var], 200, 50, c_anchorTopLeft, 130, 5, StringExternal("Param/Value/8FBA5F8A"), Color(100,100,100), false, 2.0);
        gv_ammoCounterDialogItem[auto73E00CBA_var][2] = DialogControlLastCreated();
        DialogSetVisible(gv_ammoCounterDialog[auto73E00CBA_var], PlayerGroupSingle(auto73E00CBA_var), true);
        libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[auto73E00CBA_var][1], IntToText(gv_marineRounds[auto73E00CBA_var]), PlayerGroupActive());
        libNtve_gf_SetDialogItemStyle(gv_ammoCounterDialogItem[auto73E00CBA_var][1], "Kicker_Zerg", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[auto73E00CBA_var][2], IntToText(gv_marineMags[auto73E00CBA_var]), PlayerGroupActive());
        libNtve_gf_SetDialogItemStyle(gv_ammoCounterDialogItem[auto73E00CBA_var][2], "Kicker_Zerg", PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_ClassSelectionUI_Trigger = null;

void gf_ClassSelectionUI () {
    if (auto_gf_ClassSelectionUI_Trigger == null) {
        auto_gf_ClassSelectionUI_Trigger = TriggerCreate("auto_gf_ClassSelectionUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClassSelectionUI_Trigger, false, false);
}

bool auto_gf_ClassSelectionUI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;
    int lv_xPosition;
    bool lv_above5000XP;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localIntA = 1;

    // Implementation
    Wait(2.0, c_timeGame);
    gv_marineClass[1] = "Rifleman";
    gv_marineClass[2] = "Medic";
    if ((gv_storyline == 1)) {
        gv_marineClass[3] = "TychusChaingun";
    }
    else if ((gv_storyline == 2)) {
        gv_marineClass[3] = "Flamethrower3";
    }
    else if ((gv_storyline == 3)) {
        gv_marineClass[3] = "Technician";
    }
    gv_marineClass[4] = "Spectre";
    gv_marineClass[5] = "GhostLaserLines";
    if ((gv_storyline == 1)) {
        gv_marineClass[6] = "DominionKillTeam";
    }
    else if ((gv_storyline == 2)) {
        gv_marineClass[6] = "ForwardObserver";
    }
    else if ((gv_storyline == 3)) {
        gv_marineClass[6] = "ChemicalExpert";
    }
    if ((gv_storyline != 3)) {
        gv_marineClass[7] = "Engineer";
    }
    else if ((gv_storyline == 3)) {
        gv_marineClass[7] = "Pathfinder";
    }
    if ((gv_storyline <= 2)) {
        gv_marineClass[8] = "Commando";
    }
    else if ((gv_storyline == 3)) {
        gv_marineClass[8] = "PsiOps";
    }
    while ((lv_localIntA < 9)) {
        if ((PlayerStatus(lv_localIntA) == c_playerStatusActive) && (PlayerType(lv_localIntA) == c_playerTypeUser)) {
            if ((gv_playerXP[lv_localIntA] >= 5000)) {
                lv_above5000XP = true;
            }
            else {
                lv_above5000XP = false;
            }
            gf_UISetPlayerRankNameIconXP(lv_localIntA);
            DialogCreate(575, 730, c_anchorLeft, 30, -135, true);
            gv_classSelectionDialog[lv_localIntA] = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 575, 730, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 400, 50, c_anchorTopLeft, 145, 36, StringExternal("Param/Value/2E9AFAB0"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 65, StringExternal("Param/Value/FAFDF604"), StringExternal("Param/Value/CE328140"), "");
            gv_classSelectionDialogItem[lv_localIntA][1] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-marineraynor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 135, 50, c_anchorTopLeft, 86, 167, StringExternal("Param/Value/4711430F"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][1], gv_playerRiflemanPoints[lv_localIntA]);
            }

            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 65, StringExternal("Param/Value/106C1F63"), StringExternal("Param/Value/64059D25"), "");
            gv_classSelectionDialogItem[lv_localIntA][2] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-medic.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 248, 167, StringExternal("Param/Value/48E2FB18"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][2], gv_playerMedicPoints[lv_localIntA]);
            }

            if ((gv_storyline == 1)) {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringExternal("Param/Value/7657E80C"), StringExternal("Param/Value/8AB02FB0"), "");
                gv_classSelectionDialogItem[lv_localIntA][3] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-marinetychus.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 391, 167, StringExternal("Param/Value/37D8D5CF"), Color(100,100,100), false, 2.0);
            }
            else if ((gv_storyline == 2)) {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringExternal("Param/Value/8B18040E"), StringExternal("Param/Value/489EDB1C"), "");
                gv_classSelectionDialogItem[lv_localIntA][3] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-firebatmercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 394, 167, StringExternal("Param/Value/0EAC6DE2"), Color(100,100,100), false, 2.0);
            }
            else if ((gv_storyline == 3)) {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringExternal("Param/Value/9B5C6234"), StringExternal("Param/Value/59E2EF34"), "");
                gv_classSelectionDialogItem[lv_localIntA][3] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringToText(""), "Assets/Textures/btn-unit-terran-vikingmercenary-assault.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 377, 167, StringExternal("Param/Value/45B3EE42"), Color(100,100,100), false, 2.0);
            }
            else if ((gv_storyline == 5)) {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringExternal("Param/Value/605743B3"), StringExternal("Param/Value/7E970322"), "");
                gv_classSelectionDialogItem[lv_localIntA][3] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringToText(""), "Assets\\Textures\\wireframe-terran-spectreprisoner.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 409, 167, StringExternal("Param/Value/A748F62A"), Color(100,100,100), false, 2.0);
            }
            if ((lv_above5000XP == true)) {
                gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][3], gv_playerAssaultFlamerTechPoints[lv_localIntA]);
            }

            if ((gv_playerXP[lv_localIntA] >= 100) && (gv_playerKarma[lv_localIntA] >= 1300)) {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 230, StringExternal("Param/Value/8547A857"), StringExternal("Param/Value/9418AA86"), "");
                gv_classSelectionDialogItem[lv_localIntA][4] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-spectre.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 97, 332, StringExternal("Param/Value/EF8DC335"), Color(100,100,100), false, 2.0);
                if ((lv_above5000XP == true)) {
                    gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][4], gv_playerReconPoints[lv_localIntA]);
                }

            }
            else {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 230, StringExternal("Param/Value/2CA126C7"), StringExternal("Param/Value/2EF76379"), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 230, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 97, 332, StringExternal("Param/Value/8E02ADDD"), Color(100,100,100), false, 2.0);
            }
            if ((gv_playerXP[lv_localIntA] >= 500) && (gv_playerKarma[lv_localIntA] >= 1300)) {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 230, StringExternal("Param/Value/F9D76077"), StringExternal("Param/Value/005E9E08"), "");
                gv_classSelectionDialogItem[lv_localIntA][5] = DialogControlLastCreated();
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-ghost.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 225, 332, StringExternal("Param/Value/3986D7D0"), Color(100,100,100), false, 2.0);
                if ((lv_above5000XP == true)) {
                    gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][5], gv_playerMarksmanPoints[lv_localIntA]);
                }

            }
            else {
                libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 230, StringExternal("Param/Value/6DFDD761"), StringExternal("Param/Value/430FE1B2"), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 230, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 225, 332, StringExternal("Param/Value/BF4B2981"), Color(100,100,100), false, 2.0);
            }
            if ((gv_playerXP[lv_localIntA] >= 2000) && (gv_playerKarma[lv_localIntA] >= 1300)) {
                if ((gv_storyline == 1)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringExternal("Param/Value/E88F5B1E"), StringExternal("Param/Value/F8982DA8"), "");
                    gv_classSelectionDialogItem[lv_localIntA][6] = DialogControlLastCreated();
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-marauderkillsquad.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 370, 332, StringExternal("Param/Value/C4EE206E"), Color(100,100,100), false, 2.0);
                }
                else if ((gv_storyline == 2)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringExternal("Param/Value/DA39E525"), StringExternal("Param/Value/6FAB65BD"), "");
                    gv_classSelectionDialogItem[lv_localIntA][6] = DialogControlLastCreated();
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-marineraynorhev.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 382, 314, StringExternal("Param/Value/37AEBE5F"), Color(100,100,100), false, 2.0);
                }
                else if ((gv_storyline == 3)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringExternal("Param/Value/8A0EC375"), StringExternal("Param/Value/CBC7603E"), "");
                    gv_classSelectionDialogItem[lv_localIntA][6] = DialogControlLastCreated();
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-maraudermercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 366, 332, StringExternal("Param/Value/39ED40F0"), Color(100,100,100), false, 2.0);
                }
                if ((lv_above5000XP == true)) {
                    gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][6], gv_playerDemoFOChemPoints[lv_localIntA]);
                }

            }
            else {
                if ((gv_storyline != 2)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringExternal("Param/Value/AE0D3AE0"), StringExternal("Param/Value/5971BB99"), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 370, 332, StringExternal("Param/Value/636D95C0"), Color(100,100,100), false, 2.0);
                }
                else if ((gv_storyline == 2)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringExternal("Param/Value/89892ED9"), StringExternal("Param/Value/05E33F46"), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 381, 314, StringExternal("Param/Value/FE305D7E"), Color(100,100,100), false, 2.0);
                }
            }
            if (((gv_playerXP[lv_localIntA] >= 40000) || ((gv_playerXP[lv_localIntA] >= 10000) && (gv_playerRating[lv_localIntA] >= 1600))) && (gv_playerKarma[lv_localIntA] >= 1300)) {
                if ((gv_storyline != 3)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringExternal("Param/Value/01BD31B2"), StringExternal("Param/Value/2CB3034D"), "");
                    gv_classSelectionDialogItem[lv_localIntA][7] = DialogControlLastCreated();
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringToText(""), "Assets\\Textures\\btn-unit-terran-marauderswann.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 87, 492, StringExternal("Param/Value/184515F7"), Color(100,100,100), false, 2.0);
                }
                else if ((gv_storyline == 3)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringExternal("Param/Value/4DEB3FCD"), StringExternal("Param/Value/262B5BE7"), "");
                    gv_classSelectionDialogItem[lv_localIntA][7] = DialogControlLastCreated();
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringToText(""), "Assets\\Textures\\btn-unit-terran-reaper.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 81, 492, StringExternal("Param/Value/EB18B89F"), Color(100,100,100), false, 2.0);
                }
                if ((lv_above5000XP == true)) {
                    gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][7], gv_playerEngineerPathfinderPoints[lv_localIntA]);
                }

            }
            else {
                if ((gv_storyline != 3)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringExternal("Param/Value/AACC38BD"), StringExternal("Param/Value/2D4C9798"), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 87, 492, StringExternal("Param/Value/E8F2D534"), Color(100,100,100), false, 2.0);
                }
                else if ((gv_storyline == 3)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringExternal("Param/Value/63F1D2DF"), StringExternal("Param/Value/9135FBFC"), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 86, 492, StringExternal("Param/Value/C11434C8"), Color(100,100,100), false, 2.0);
                }
            }
            if (((gv_playerXP[lv_localIntA] >= 80000) || ((gv_playerXP[lv_localIntA] >= 10000) && (gv_playerRating[lv_localIntA] >= 1700))) && (gv_playerKarma[lv_localIntA] >= 1300)) {
                if ((gv_storyline <= 2)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringExternal("Param/Value/396DC2B4"), StringExternal("Param/Value/7DB8CC87"), "");
                    gv_classSelectionDialogItem[lv_localIntA][8] = DialogControlLastCreated();
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringToText(""), "Assets\\Textures\\btn-unit-terran-marinemercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 222, 492, StringExternal("Param/Value/CD25EDA4"), Color(100,100,100), false, 2.0);
                }
                else if ((gv_storyline == 3)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringExternal("Param/Value/5BE9906A"), StringExternal("Param/Value/90589F68"), "");
                    gv_classSelectionDialogItem[lv_localIntA][8] = DialogControlLastCreated();
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringToText(""), "Assets\\Textures\\btn-unit-terran-nova.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 241, 492, StringExternal("Param/Value/40FA731F"), Color(100,100,100), false, 2.0);
                }
                if ((lv_above5000XP == true)) {
                    gf_ClassPointBarCreation(gv_classSelectionDialog[lv_localIntA], gv_classSelectionDialogItem[lv_localIntA][8], gv_playerCommandoPsiOpsPoints[lv_localIntA]);
                }

            }
            else {
                if ((gv_storyline <= 2)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringExternal("Param/Value/55533D37"), StringExternal("Param/Value/80B59951"), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 222, 492, StringExternal("Param/Value/511027CF"), Color(100,100,100), false, 2.0);
                }
                else if ((gv_storyline == 3)) {
                    libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringExternal("Param/Value/2EC4FEBD"), StringExternal("Param/Value/D8F28708"), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringToText(""), "Assets\\Textures\\ui_mercenary_lockicon.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 241, 492, StringExternal("Param/Value/4F2CE7EB"), Color(100,100,100), false, 2.0);
                }
            }
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 390, StringExternal("Param/Value/310D214D"), StringExternal("Param/Value/DC42573E"), "");
            gv_classSelectionDialogItem[lv_localIntA][9] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 372, 390, StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 135, 50, c_anchorTopLeft, 387, 492, StringExternal("Param/Value/B04A3D36"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 70, 70, c_anchorTopLeft, 50, 545, StringToText(""), gv_rankIcon[gv_playerRank[lv_localIntA]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 405, 50, c_anchorTopLeft, 122, 560, (gv_rankTitle[gv_playerRank[lv_localIntA]] + PlayerName(lv_localIntA)), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ExitGameTitle", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 525, 50, c_anchorTopLeft, 50, 625, StringExternal("Param/Value/58D39EF1"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 525, 50, c_anchorTopLeft, 290, 625, gv_rankFullTitle[(gv_playerRank[lv_localIntA] + 1)], Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            gv_classSelectionDialogItem[lv_localIntA][10] = DialogControlLastCreated();
            DialogControlSetSize(gv_classSelectionDialogItem[lv_localIntA][10], PlayerGroupAll(), 475, 37);
            DialogControlSetPosition(gv_classSelectionDialogItem[lv_localIntA][10], PlayerGroupAll(), c_anchorTopLeft, 50, 650);
            libNtve_gf_SetDialogItemMaximumValue(gv_classSelectionDialogItem[lv_localIntA][10], IntToFixed(gv_rankRequirement[(gv_playerRank[lv_localIntA] + 1)]), PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(gv_classSelectionDialogItem[lv_localIntA][10], 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(gv_classSelectionDialogItem[lv_localIntA][10], IntToFixed(gv_playerXP[lv_localIntA]), PlayerGroupAll());
            if (((gv_playerXP[lv_localIntA] / 100000) >= 1)) {
                lv_xPosition = 178;
            }
            else if (((gv_playerXP[lv_localIntA] / 10000) >= 1)) {
                lv_xPosition = 194;
            }
            else if (((gv_playerXP[lv_localIntA] / 1000) >= 1)) {
                lv_xPosition = 210;
            }
            else if (((gv_playerXP[lv_localIntA] / 100) >= 1)) {
                lv_xPosition = 226;
            }
            else if (((gv_playerXP[lv_localIntA] / 10) >= 1)) {
                lv_xPosition = 242;
            }
            else if (true) {
                lv_xPosition = 258;
            }
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 300, 52, c_anchorTopLeft, lv_xPosition, 660, (IntToText(gv_playerXP[lv_localIntA]) + StringToText("")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 300, 52, c_anchorTopLeft, 275, 660, StringExternal("Param/Value/2BDE60B2"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 300, 52, c_anchorTopLeft, 285, 660, (StringToText("") + (StringToText("") + IntToText(gv_rankRequirement[(gv_playerRank[lv_localIntA] + 1)]))), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            DialogSetVisible(gv_classSelectionDialog[lv_localIntA], PlayerGroupSingle(lv_localIntA), true);
        }

        lv_localIntA += 1;
    }
    DialogSetVisible(gv_raidUITeamStatus, PlayerGroupActive(), true);
    return true;
}

void gf_ClassPointBarCreation (int lp_parentDialog, int lp_parentDialogItem, int lp_classPoints) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlCreate(lp_parentDialog, c_triggerControlTypeProgressBar);
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
    libCamp_gf_MoveDialogItemInGridRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, lp_parentDialogItem, c_anchorBottom, 0.0, 15.0);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lp_classPoints, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/2FF21ADA") + IntToText(lp_classPoints)) + StringExternal("Param/Value/42F6F864")), PlayerGroupAll());
}

trigger auto_gf_DifficultyHackerCheck_Trigger = null;

void gf_DifficultyHackerCheck () {
    if (auto_gf_DifficultyHackerCheck_Trigger == null) {
        auto_gf_DifficultyHackerCheck_Trigger = TriggerCreate("auto_gf_DifficultyHackerCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_DifficultyHackerCheck_Trigger, false, false);
}

bool auto_gf_DifficultyHackerCheck_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;
    int lv_xPPool;
    int lv_ratingPool;

    // Automatic Variable Declarations
    const int auto2D0EAD55_ae = 8;
    int auto2D0EAD55_var;
    const int auto125FBC7C_ae = 14;
    int auto125FBC7C_var;
    const int autoD7ED1910_n = 8;
    int autoD7ED1910_i;
    const int auto4E631C24_ae = 8;
    int auto4E631C24_var;

    // Variable Initialization
    lv_localIntA = 1;

    // Implementation
    libNtve_gf_SetUpgradeLevelForPlayer(14, "Burrow", 1);
    if ((gv_totalPlayers <= 3)) {
        gv_spawnFactor = 3;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperSetTo, 90);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperSetTo, 90);
    }
    else if (((gv_totalPlayers >= 4) && (gv_totalPlayers <= 6))) {
        gv_spawnFactor = 3;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperSetTo, 100);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperSetTo, 100);
    }
    else if ((gv_totalPlayers > 6)) {
        gv_spawnFactor = 4;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperSetTo, 110);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperSetTo, 110);
    }
    TriggerEnable(gt_NightmareMode, true);
    auto2D0EAD55_var = 1;
    for ( ; auto2D0EAD55_var <= auto2D0EAD55_ae; auto2D0EAD55_var += 1 ) {
        if ((gv_playerXP[auto2D0EAD55_var] < 500) && (PlayerStatus(auto2D0EAD55_var) != c_playerStatusUnused) && (PlayerStatus(auto2D0EAD55_var) != c_playerStatusLeft)) {
            gv_noNewbie = false;
        }

    }
    if ((GameAttributeGameValue("2") == "0001")) {
        TriggerExecute(gt_NightmareMode, true, false);
    }

    if ((gv_noNewbie == false)) {
        auto125FBC7C_var = 1;
        for ( ; auto125FBC7C_var <= auto125FBC7C_ae; auto125FBC7C_var += 1 ) {
            PlayerSetDifficulty(auto125FBC7C_var, 1);
        }
    }

    for (autoD7ED1910_i = 1; autoD7ED1910_i <= autoD7ED1910_n; autoD7ED1910_i += 1) {
        if ((PlayerStatus(lv_localIntA) == c_playerStatusActive) && (PlayerType(lv_localIntA) == c_playerTypeUser)) {
            lv_xPPool = (lv_xPPool + gv_playerXP[lv_localIntA]);
            if ((gv_noNewbie == false) && (gv_playerRating[lv_localIntA] > 2000)) {
                lv_ratingPool += 2000;
            }
            else {
                lv_ratingPool += gv_playerRating[lv_localIntA];
            }
            if ((gv_playerRating[lv_localIntA] >= 1900)) {
                gv_playerLives[lv_localIntA] = 0;
            }
            else if ((gv_playerRating[lv_localIntA] >= 1800)) {
                gv_playerLives[lv_localIntA] = 1;
            }
            else if ((gv_playerRating[lv_localIntA] >= 1700)) {
                gv_playerLives[lv_localIntA] = 2;
            }
            else if ((gv_playerRating[lv_localIntA] >= 1600)) {
                gv_playerLives[lv_localIntA] = 3;
            }
            else if ((gv_playerXP[lv_localIntA] < 100)) {
                gv_marineMags[lv_localIntA] = 40;
                gv_playerLives[lv_localIntA] = 5;
                libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_localIntA][1], IntToText(gv_marineRounds[lv_localIntA]), PlayerGroupActive());
                libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_localIntA][2], IntToText(gv_marineMags[lv_localIntA]), PlayerGroupActive());
            }
            if (((gv_playerXP[lv_localIntA] / gv_playerGamesPlayed[lv_localIntA]) > 150) && (PlayerStatus(lv_localIntA) == c_playerStatusActive)) {
                GameOver(lv_localIntA, c_gameOverDefeat, true, true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_localIntA) + StringExternal("Param/Value/2D4B17FC")));
                SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
            }

        }

        lv_localIntA += 1;
    }
    gv_squadXP = (lv_xPPool / gv_totalPlayers);
    gv_squadRating = (lv_ratingPool / gv_totalPlayers);
    PlayerModifyPropertyInt(14, c_playerPropMinerals, c_playerPropOperSetTo, gv_squadRating);
    PlayerModifyPropertyInt(13, c_playerPropMinerals, c_playerPropOperSetTo, gv_squadRating);
    Wait(15.0, c_timeReal);
    if ((gv_squadRating > 2400) && (gv_totalPlayers > 2)) {
        gv_spawnFactor += 4;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 100);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 100);
    }
    else if ((gv_squadRating > 2200) && (gv_totalPlayers > 2)) {
        gv_spawnFactor += 3;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 75);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 75);
    }
    else if ((gv_squadRating > 1900) && (gv_totalPlayers > 2)) {
        gv_spawnFactor += 2;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 50);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 50);
    }
    else if ((gv_squadRating > 1800) && (gv_totalPlayers > 2)) {
        gv_spawnFactor += 2;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 40);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 40);
    }
    else if ((gv_squadRating > 1650) && (gv_totalPlayers > 2)) {
        gv_spawnFactor += 1;
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 27);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 27);
    }
    else if ((gv_squadRating > 1550) && (gv_totalPlayers > 2) && (gv_noNewbie == true)) {
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 18);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 18);
    }
    else if ((gv_squadRating < 1490)) {
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperSubtract, 15);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperSubtract, 15);
    }
    else if ((gv_squadRating < 1460)) {
        if ((gv_spawnFactor > 1)) {
            gv_spawnFactor -= 1;
        }

        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperSubtract, 25);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperSubtract, 25);
    }
    if ((gv_noNewbie == true) && (gv_squadRating >= 1600)) {
        TriggerEnable(gt_InfestorAI, true);
    }

    if ((gv_noNewbie == false)) {
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperSubtract, 12);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperSubtract, 12);
    }

    gf_AIDataDifficultyEdit();
    if ((gv_squadRating > 1800) && (gv_noNewbie == true) && (gv_nightmare == false)) {
        gv_difficulty = StringExternal("Param/Value/345FE2E5");
    }
    else if ((gv_squadRating > 1650) && (gv_noNewbie == true) && (gv_nightmare == false)) {
        gv_difficulty = StringExternal("Param/Value/63B189EE");
    }
    else if ((gv_squadRating > 1550) && (gv_noNewbie == true) && (gv_nightmare == false)) {
        gv_difficulty = StringExternal("Param/Value/F921A7EF");
    }
    else if ((gv_nightmare == false)) {
        gv_difficulty = StringExternal("Param/Value/BB76D159");
    }
    else if ((gv_nightmare == true)) {
        gv_difficulty = StringExternal("Param/Value/FECB5072");
    }
    Wait(35.0, c_timeReal);
    TriggerEnable(gt_NightmareMode, false);
    Wait(5.0, c_timeReal);
    auto4E631C24_var = 1;
    for ( ; auto4E631C24_var <= auto4E631C24_ae; auto4E631C24_var += 1 ) {
        if ((gv_playerXP[auto4E631C24_var] > 277000) && (PlayerStatus(auto4E631C24_var) == c_playerStatusActive)) {
            gv_playerXP[auto4E631C24_var] = 0;
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

        if ((gv_playerRating[auto4E631C24_var] < 1200) && (PlayerStatus(auto4E631C24_var) == c_playerStatusActive)) {
            gv_playerRating[auto4E631C24_var] = 1500;
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

        if ((gv_playerXP[auto4E631C24_var] > 10000) && ((gv_playerLifeTimeCreditsAcquired[auto4E631C24_var] / gv_playerGamesPlayed[auto4E631C24_var]) > 250) && (PlayerStatus(auto4E631C24_var) == c_playerStatusActive)) {
            gv_playerCredits[auto4E631C24_var] = 0;
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

        if ((gv_playerXP[auto4E631C24_var] > 50000) && (PlayerStatus(auto4E631C24_var) == c_playerStatusActive) && ((gv_combatActionRibbon[auto4E631C24_var] < 20) || (gv_playerGamesPlayed[auto4E631C24_var] < 300))) {
            gv_playerXP[auto4E631C24_var] = 0;
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

        if ((gv_playerXP[auto4E631C24_var] < 3500) && (PlayerStatus(auto4E631C24_var) == c_playerStatusActive) && (gv_combatActionRibbon[auto4E631C24_var] > 50)) {
            gv_playerXP[auto4E631C24_var] = 0;
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

        if ((PlayerStatus(auto4E631C24_var) == c_playerStatusActive) && (gv_lifeSavingMedal[auto4E631C24_var] > gv_combatActionRibbon[auto4E631C24_var])) {
            gv_lifeSavingMedal[auto4E631C24_var] = 0;
            gf_SetMedalVariables(auto4E631C24_var, 2);
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

        if ((PlayerStatus(auto4E631C24_var) == c_playerStatusActive) && (gv_playerGamesPlayed[auto4E631C24_var] > 5500)) {
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

        if ((PlayerStatus(auto4E631C24_var) == c_playerStatusActive) && (gv_playerCommandoPsiOpsPoints[auto4E631C24_var] > 300) && (gv_playerEngineerPathfinderPoints[auto4E631C24_var] > 300)) {
            TriggerExecute(gt_AutoSave, true, false);
            GameOver(auto4E631C24_var, c_gameOverDefeat, true, true);
        }

    }
    return true;
}

trigger auto_gf_SaveInitBoundaryCheck_Trigger = null;
int auto_gf_SaveInitBoundaryCheck_lp_playerNo;

void gf_SaveInitBoundaryCheck (int lp_playerNo) {
    auto_gf_SaveInitBoundaryCheck_lp_playerNo = lp_playerNo;

    if (auto_gf_SaveInitBoundaryCheck_Trigger == null) {
        auto_gf_SaveInitBoundaryCheck_Trigger = TriggerCreate("auto_gf_SaveInitBoundaryCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveInitBoundaryCheck_Trigger, false, false);
}

bool auto_gf_SaveInitBoundaryCheck_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_SaveInitBoundaryCheck_lp_playerNo;

    // Automatic Variable Declarations
    int autoA9C593D6_ae;
    int autoA9C593D6_var;

    // Implementation
    gf_StatsStorePlayerStats(lp_playerNo);
    gf_WModStorePlayerWeaponModPoints(lp_playerNo);
    gv_playerBankData[1][lp_playerNo] = gv_playerXP[lp_playerNo];
    gv_playerBankData[2][lp_playerNo] = gv_playerRating[lp_playerNo];
    gv_playerBankData[3][lp_playerNo] = gv_playerGamesPlayed[lp_playerNo];
    gv_playerBankData[4][lp_playerNo] = gv_playerMedicPlayed[lp_playerNo];
    gv_playerBankData[5][lp_playerNo] = gv_playerKarma[lp_playerNo];
    gv_playerBankData[6][lp_playerNo] = gv_playerStats[lp_playerNo];
    gv_playerBankData[7][lp_playerNo] = gv_playerCredits[lp_playerNo];
    if (((gv_playerBankData[7][lp_playerNo] - gv_startingCredits[lp_playerNo]) > 500)) {
        gv_playerBankData[7][lp_playerNo] = (gv_startingCredits[lp_playerNo] + 500);
    }

    if ((gv_playerBankData[7][lp_playerNo] > 10000)) {
        gv_playerBankData[7][lp_playerNo] = 10000;
    }

    gv_playerBankData[8][lp_playerNo] = gv_playerLifeTimeCreditsAcquired[lp_playerNo];
    gv_playerWeaponsMod2[lp_playerNo] = ModI(gv_playerWeaponsMod2[lp_playerNo], 100000);
    if (((ModI(gv_playerWeaponsMod2[lp_playerNo], 10000) / 100) > 0) && (ModI(gv_playerPetCode[lp_playerNo], 1000) < 100)) {
        gv_playerWeaponsMod2[lp_playerNo] = 10055;
    }

    if (((gv_playerWeaponsMod1[lp_playerNo] <= 11111) || (gv_playerWeaponsMod1[lp_playerNo] >= 99999))) {
        gv_playerWeaponsMod1[lp_playerNo] = 55555;
    }

    gv_playerBankData[9][lp_playerNo] = gv_playerWeaponsMod1[lp_playerNo];
    gv_playerBankData[10][lp_playerNo] = gv_playerWeaponsMod2[lp_playerNo];
    gv_playerBankData[11][lp_playerNo] = gv_combatActionRibbon[lp_playerNo];
    gv_playerBankData[12][lp_playerNo] = gv_lifeSavingMedal[lp_playerNo];
    gv_playerBankData[13][lp_playerNo] = gv_bronzeStar[lp_playerNo];
    gv_playerBankData[14][lp_playerNo] = gv_silverStar[lp_playerNo];
    gv_playerBankData[15][lp_playerNo] = gv_legionOfMerit[lp_playerNo];
    gv_playerBankData[16][lp_playerNo] = gv_distinguishedServiceMedal[lp_playerNo];
    gv_playerBankData[17][lp_playerNo] = gv_navyCross[lp_playerNo];
    gv_playerBankData[18][lp_playerNo] = gv_expeditionaryMedal[lp_playerNo];
    gv_playerBankData[19][lp_playerNo] = gv_superiorServiceMedal[lp_playerNo];
    gv_playerBankData[20][lp_playerNo] = gv_medalOfHonor[lp_playerNo];
    gv_playerBankData[21][lp_playerNo] = gv_playerRiflemanPoints[lp_playerNo];
    gv_playerBankData[22][lp_playerNo] = gv_playerMedicPoints[lp_playerNo];
    gv_playerBankData[23][lp_playerNo] = gv_playerAssaultFlamerTechPoints[lp_playerNo];
    gv_playerBankData[24][lp_playerNo] = gv_playerReconPoints[lp_playerNo];
    gv_playerBankData[25][lp_playerNo] = gv_playerMarksmanPoints[lp_playerNo];
    gv_playerBankData[26][lp_playerNo] = gv_playerDemoFOChemPoints[lp_playerNo];
    gv_playerBankData[27][lp_playerNo] = gv_playerEngineerPathfinderPoints[lp_playerNo];
    gv_playerBankData[28][lp_playerNo] = gv_playerCommandoPsiOpsPoints[lp_playerNo];
    gv_playerBankData[29][lp_playerNo] = gv_playerColorCode[lp_playerNo];
    gv_playerBankData[30][lp_playerNo] = gv_playerPetCode[lp_playerNo];
    gv_playerBankData[31][lp_playerNo] = gv_eCWinNormal[lp_playerNo];
    gv_playerBankData[32][lp_playerNo] = gv_eCWinNM[lp_playerNo];
    gv_playerBankData[33][lp_playerNo] = gv_aCWinNormal[lp_playerNo];
    gv_playerBankData[34][lp_playerNo] = gv_aCWinNM[lp_playerNo];
    gv_playerBankData[35][lp_playerNo] = gv_sTWinNormal[lp_playerNo];
    gv_playerBankData[36][lp_playerNo] = gv_sTWinNM[lp_playerNo];
    gv_playerBankData[37][lp_playerNo] = gv_survivalWin[lp_playerNo];
    gv_playerBankData[38][lp_playerNo] = gv_eCSpeed[lp_playerNo];
    gv_playerBankData[39][lp_playerNo] = gv_aCSpeed[lp_playerNo];
    gv_playerBankData[40][lp_playerNo] = gv_sTSpeed[lp_playerNo];
    gv_playerBankData[41][lp_playerNo] = gv_eCNMSpeed[lp_playerNo];
    gv_playerBankData[42][lp_playerNo] = gv_aCNMSpeed[lp_playerNo];
    gv_playerBankData[43][lp_playerNo] = gv_sTNMSpeed[lp_playerNo];
    gv_playerBankData[44][lp_playerNo] = gv_survivalWinNM[lp_playerNo];
    gv_playerBankData[45][lp_playerNo] = gv_bootCampComplete[lp_playerNo];
    autoA9C593D6_ae = gv_bankSize;
    autoA9C593D6_var = 0;
    for ( ; autoA9C593D6_var <= autoA9C593D6_ae; autoA9C593D6_var += 1 ) {
        if ((gv_playerBankData[autoA9C593D6_var][lp_playerNo] > 1000000)) {
            gv_playerBankData[autoA9C593D6_var][lp_playerNo] = 1000000;
        }

        if ((gv_playerBankData[autoA9C593D6_var][lp_playerNo] < 0)) {
            gv_playerBankData[autoA9C593D6_var][lp_playerNo] = 0;
        }

    }
    if ((gv_playerBankData[2][lp_playerNo] > 3000)) {
        gv_playerBankData[2][lp_playerNo] = 3000;
    }

    return true;
}

trigger auto_gf_AutoSaveLong_Trigger = null;

void gf_AutoSaveLong () {
    if (auto_gf_AutoSaveLong_Trigger == null) {
        auto_gf_AutoSaveLong_Trigger = TriggerCreate("auto_gf_AutoSaveLong_TriggerFunc");
    }

    TriggerExecute(auto_gf_AutoSaveLong_Trigger, false, false);
}

bool auto_gf_AutoSaveLong_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_saveGroup;

    // Automatic Variable Declarations
    playergroup autoE9352498_g;
    int autoE9352498_var;
    playergroup autoD6E2FC90_g;
    int autoD6E2FC90_var;

    // Variable Initialization
    lv_saveGroup = PlayerGroupEmpty();

    // Implementation
    autoE9352498_g = PlayerGroupActive();
    autoE9352498_var = -1;
    while (true) {
        autoE9352498_var = PlayerGroupNextPlayer(autoE9352498_g, autoE9352498_var);
        if (autoE9352498_var < 0) { break; }
        if ((PlayerStatus(autoE9352498_var) == c_playerStatusActive) && (PlayerType(autoE9352498_var) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_saveGroup, autoE9352498_var);
        }

    }
    autoD6E2FC90_g = lv_saveGroup;
    autoD6E2FC90_var = -1;
    while (true) {
        autoD6E2FC90_var = PlayerGroupNextPlayer(autoD6E2FC90_g, autoD6E2FC90_var);
        if (autoD6E2FC90_var < 0) { break; }
        Wait(0.8, c_timeReal);
        if (((gv_playerXP[autoD6E2FC90_var] - gv_startingXP[autoD6E2FC90_var]) > 350)) {
            GameOver(autoD6E2FC90_var, c_gameOverDefeat, true, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(autoD6E2FC90_var) + StringExternal("Param/Value/F3D86F5B")));
            SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (true) {
            gf_Save(autoD6E2FC90_var, gv_bankSize);
        }
    }
    PlayerGroupClear(lv_saveGroup);
    return true;
}

trigger auto_gf_Save_Trigger = null;
int auto_gf_Save_lp_playerNo;
int auto_gf_Save_lp_bankSize;

void gf_Save (int lp_playerNo, int lp_bankSize) {
    auto_gf_Save_lp_playerNo = lp_playerNo;
    auto_gf_Save_lp_bankSize = lp_bankSize;

    if (auto_gf_Save_Trigger == null) {
        auto_gf_Save_Trigger = TriggerCreate("auto_gf_Save_TriggerFunc");
    }

    TriggerExecute(auto_gf_Save_Trigger, false, false);
}

bool auto_gf_Save_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_Save_lp_playerNo;
    int lp_bankSize = auto_gf_Save_lp_bankSize;

    int init_i;

    // Variable Declarations
    string[7] lv_tempString;
    int lv_iLocal;
    bank lv_activeBank;

    // Automatic Variable Declarations
    const int auto59F2B628_ae = 6;
    const int auto59F2B628_ai = 1;
    int auto11F381F4_ae;
    int auto11F381F4_var;
    const int auto1118FEEF_ae = 6;
    int auto1118FEEF_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_tempString[init_i] = "";
    }

    // Implementation
    gf_SaveInitBoundaryCheck(lp_playerNo);
    if ((((lp_playerNo >= 1) && (lp_playerNo <= 8)) == true)) {
        BankLoad("notdbank5", lp_playerNo);
        lv_activeBank = BankLastCreated();
    }

    lv_iLocal = 1;
    for ( ; ( (auto59F2B628_ai >= 0 && lv_iLocal <= auto59F2B628_ae) || (auto59F2B628_ai < 0 && lv_iLocal >= auto59F2B628_ae) ) ; lv_iLocal += auto59F2B628_ai ) {
        lib1_gf_StarcodeStartCode();
        auto11F381F4_ae = (20 * lv_iLocal);
        auto11F381F4_var = (((lv_iLocal - 1) * 20) + 1);
        for ( ; auto11F381F4_var <= auto11F381F4_ae; auto11F381F4_var += 1 ) {
            lib1_gf_StarcodeStoreIntegerValue(gv_playerBankData[auto11F381F4_var][lp_playerNo], 1000000);
        }
        lv_tempString[lv_iLocal] = lib1_gf_StarcodeCompressString(lib1_gf_StarcodeGetCode());
        lv_tempString[lv_iLocal] = lib1_gf_StarcodeEncryptString(lv_tempString[lv_iLocal], "XaviAbilityEarendil");
        lv_tempString[lv_iLocal] = lib1_gf_StarcodeHashString(lv_tempString[lv_iLocal], 3);
        BankValueSetFromString(BankLastCreated(), IntToString(lv_iLocal), IntToString(lv_iLocal), lv_tempString[lv_iLocal]);
        Wait(0.05, c_timeGame);
    }
    BankSave(lv_activeBank);
    Wait(1.0, c_timeGame);
    if ((((lp_playerNo >= 1) && (lp_playerNo <= 8)) == true)) {
        BankLoad("NOTDBackup", lp_playerNo);
        lv_activeBank = BankLastCreated();
    }

    auto1118FEEF_var = 1;
    for ( ; auto1118FEEF_var <= auto1118FEEF_ae; auto1118FEEF_var += 1 ) {
        BankValueSetFromString(BankLastCreated(), IntToString(auto1118FEEF_var), IntToString(auto1118FEEF_var), lv_tempString[auto1118FEEF_var]);
    }
    BankSave(lv_activeBank);
    return true;
}

void gf_ResetPlayerData (int lp_playerNo, int lp_bankSize) {
    // Automatic Variable Declarations
    int auto61727E92_ae;
    int auto61727E92_var;

    // Implementation
    auto61727E92_ae = lp_bankSize;
    auto61727E92_var = 0;
    for ( ; auto61727E92_var <= auto61727E92_ae; auto61727E92_var += 1 ) {
        gv_playerBankData[auto61727E92_var][lp_playerNo] = 0;
    }
    gv_playerBankData[9][lp_playerNo] = 55555;
    gv_playerBankData[10][lp_playerNo] = 55;
}

void gf_LoadAcknowledge (int lp_playerNo, bool lp_valid) {
    // Variable Declarations
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    PlayerGroupAdd(lv_playerGroup, lp_playerNo);
    if ((lp_valid == true)) {
    }
    else {
        UIDisplayMessage(lv_playerGroup, c_messageAreaSubtitle, (StringExternal("Param/Value/5B4DEB8C") + (PlayerName(lp_playerNo) + StringExternal("Param/Value/42731D11"))));
    }
    PlayerGroupClear(lv_playerGroup);
}

void gf_LoadBoundaryCheck (int lp_playerNo, int lp_bankSize) {
    // Automatic Variable Declarations
    // Implementation
    if (((gv_playerBankData[2][lp_playerNo] > 3000) || (gv_playerBankData[5][lp_playerNo] > 3000) || (gv_playerBankData[6][lp_playerNo] > 199999))) {
        gf_ResetPlayerData(lp_playerNo, lp_bankSize);
        gf_LoadAcknowledge(lp_playerNo, false);
    }
    else {
        gf_LoadAcknowledge(lp_playerNo, true);
    }
    if ((gf_StatsStatsChecking(lp_playerNo) == false)) {
        gv_playerBankData[6][lp_playerNo] = 100000;
    }

    if ((gv_playerBankData[7][lp_playerNo] > 10000)) {
        gv_playerBankData[7][lp_playerNo] = 10000;
    }

    gv_playerBankData[29][lp_playerNo] = ModI(gv_playerBankData[29][lp_playerNo], 100000);
    if (((ModI(gv_playerBankData[29][lp_playerNo], 100000) - ModI(gv_playerBankData[29][lp_playerNo], 10000)) != 10000)) {
        gv_playerBankData[8][lp_playerNo] = 0;
        gv_playerBankData[29][lp_playerNo] += 10000;
    }

    if (((ModI(gv_playerBankData[30][lp_playerNo], 100000) - ModI(gv_playerBankData[30][lp_playerNo], 10000)) != 20000)) {
        if ((ModI(gv_playerBankData[30][lp_playerNo], 1000) >= 100)) {
            gv_playerBankData[30][lp_playerNo] = 20108;
        }
        else {
            gv_playerBankData[30][lp_playerNo] = 20008;
        }
        gv_playerBankData[29][lp_playerNo] = 10000;
    }

}

trigger auto_gf_LoadPlayerBankFile_Trigger = null;
int auto_gf_LoadPlayerBankFile_lp_playerNo;
int auto_gf_LoadPlayerBankFile_lp_originalBankSize;
int auto_gf_LoadPlayerBankFile_lp_bankSize;

void gf_LoadPlayerBankFile (int lp_playerNo, int lp_originalBankSize, int lp_bankSize) {
    auto_gf_LoadPlayerBankFile_lp_playerNo = lp_playerNo;
    auto_gf_LoadPlayerBankFile_lp_originalBankSize = lp_originalBankSize;
    auto_gf_LoadPlayerBankFile_lp_bankSize = lp_bankSize;

    if (auto_gf_LoadPlayerBankFile_Trigger == null) {
        auto_gf_LoadPlayerBankFile_Trigger = TriggerCreate("auto_gf_LoadPlayerBankFile_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadPlayerBankFile_Trigger, false, false);
}

bool auto_gf_LoadPlayerBankFile_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_LoadPlayerBankFile_lp_playerNo;
    int lp_originalBankSize = auto_gf_LoadPlayerBankFile_lp_originalBankSize;
    int lp_bankSize = auto_gf_LoadPlayerBankFile_lp_bankSize;

    // Variable Declarations
    string lv_tempString;
    bool lv_continue;
    int lv_iLocal;

    // Automatic Variable Declarations
    const int autoF3822D72_ae = 6;
    const int autoF3822D72_ai = 1;
    const int autoD7464244_ae = 19;
    int autoD7464244_var;

    // Variable Initialization
    lv_tempString = "";
    lv_continue = true;

    // Implementation
    if ((BankExists("notdbank5", lp_playerNo) == true)) {
        if ((lp_playerNo == 1)) {
            BankLoad("notdbank5", 1);
        }
        else if ((lp_playerNo == 2)) {
            BankLoad("notdbank5", 2);
        }
        else if ((lp_playerNo == 3)) {
            BankLoad("notdbank5", 3);
        }
        else if ((lp_playerNo == 4)) {
            BankLoad("notdbank5", 4);
        }
        else if ((lp_playerNo == 5)) {
            BankLoad("notdbank5", 5);
        }
        else if ((lp_playerNo == 6)) {
            BankLoad("notdbank5", 6);
        }
        else if ((lp_playerNo == 7)) {
            BankLoad("notdbank5", 7);
        }
        else if ((lp_playerNo == 8)) {
            BankLoad("notdbank5", 8);
        }
    }
    else {
        gv_upgraded[lp_playerNo] = false;
        if ((BankExists("notdv003", lp_playerNo) == true)) {
            if ((lp_playerNo == 1)) {
                BankLoad("notdv003", 1);
            }
            else if ((lp_playerNo == 2)) {
                BankLoad("notdv003", 2);
            }
            else if ((lp_playerNo == 3)) {
                BankLoad("notdv003", 3);
            }
            else if ((lp_playerNo == 4)) {
                BankLoad("notdv003", 4);
            }
            else if ((lp_playerNo == 5)) {
                BankLoad("notdv003", 5);
            }
            else if ((lp_playerNo == 6)) {
                BankLoad("notdv003", 6);
            }
            else if ((lp_playerNo == 7)) {
                BankLoad("notdv003", 7);
            }
            else if ((lp_playerNo == 8)) {
                BankLoad("notdv003", 8);
            }
        }
        else {
            gf_ResetPlayerData(lp_playerNo, gv_bankSize);
            gf_LoadAcknowledge(lp_playerNo, true);
            lv_continue = false;
        }
    }
    if ((lv_continue == true)) {
        lv_iLocal = 1;
        for ( ; ( (autoF3822D72_ai >= 0 && lv_iLocal <= autoF3822D72_ae) || (autoF3822D72_ai < 0 && lv_iLocal >= autoF3822D72_ae) ) ; lv_iLocal += autoF3822D72_ai ) {
            if ((gv_upgraded[lp_playerNo] == false) && (lv_iLocal > 2)) {
            }
            else {
                if ((gv_upgraded[lp_playerNo] == false) && (lv_iLocal == 1)) {
                    lv_tempString = BankValueGetAsString(BankLastCreated(), "", "");
                }
                else {
                    if ((gv_upgraded[lp_playerNo] == false) && (lv_iLocal == 2)) {
                        lv_tempString = BankValueGetAsString(BankLastCreated(), "1", "1");
                    }
                    else {
                        lv_tempString = BankValueGetAsString(BankLastCreated(), IntToString(lv_iLocal), IntToString(lv_iLocal));
                    }
                }
                if ((lib1_gf_StarcodeValidateString(lv_tempString, 3) == true)) {
                    lv_tempString = lib1_gf_StarcodeRemoveHashfromString(lv_tempString, 3);
                    lv_tempString = lib1_gf_StarcodeDecryptString(lv_tempString, "XaviAbilityEarendil");
                    lv_tempString = lib1_gf_StarcodeDecompressString(lv_tempString);
                    lib1_gf_StarcodeSetCode(lv_tempString);
                    autoD7464244_var = 0;
                    for ( ; autoD7464244_var <= autoD7464244_ae; autoD7464244_var += 1 ) {
                        gv_playerBankData[((20 * lv_iLocal) - autoD7464244_var)][lp_playerNo] = lib1_gf_StarcodeGetIntegerValue(1000000);
                    }
                }
                else {
                    gf_ResetPlayerData(lp_playerNo, gv_bankSize);
                    gf_LoadAcknowledge(lp_playerNo, true);
                    break;
                }
            }
            Wait(0.001, c_timeGame);
        }
        gf_LoadBoundaryCheck(lp_playerNo, gv_bankSize);
    }

    return true;
}

trigger auto_gf_LoadPlayerBackupBankFile_Trigger = null;
int auto_gf_LoadPlayerBackupBankFile_lp_playerNo;

void gf_LoadPlayerBackupBankFile (int lp_playerNo) {
    auto_gf_LoadPlayerBackupBankFile_lp_playerNo = lp_playerNo;

    if (auto_gf_LoadPlayerBackupBankFile_Trigger == null) {
        auto_gf_LoadPlayerBackupBankFile_Trigger = TriggerCreate("auto_gf_LoadPlayerBackupBankFile_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadPlayerBackupBankFile_Trigger, false, false);
}

bool auto_gf_LoadPlayerBackupBankFile_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_LoadPlayerBackupBankFile_lp_playerNo;

    int init_i;

    // Variable Declarations
    string[7] lv_tempString1;

    // Automatic Variable Declarations
    const int auto7947C90E_ae = 6;
    int auto7947C90E_var;
    const int auto350129D3_ae = 6;
    int auto350129D3_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_tempString1[init_i] = "";
    }

    // Implementation
    if ((lp_playerNo == 1)) {
        BankLoad("notdbank5", 1);
    }
    else if ((lp_playerNo == 2)) {
        BankLoad("notdbank5", 2);
    }
    else if ((lp_playerNo == 3)) {
        BankLoad("notdbank5", 3);
    }
    else if ((lp_playerNo == 4)) {
        BankLoad("notdbank5", 4);
    }
    else if ((lp_playerNo == 5)) {
        BankLoad("notdbank5", 5);
    }
    else if ((lp_playerNo == 6)) {
        BankLoad("notdbank5", 6);
    }
    else if ((lp_playerNo == 7)) {
        BankLoad("notdbank5", 7);
    }
    else if ((lp_playerNo == 8)) {
        BankLoad("notdbank5", 8);
    }
    auto7947C90E_var = 1;
    for ( ; auto7947C90E_var <= auto7947C90E_ae; auto7947C90E_var += 1 ) {
        lv_tempString1[auto7947C90E_var] = BankValueGetAsString(BankLastCreated(), IntToString(auto7947C90E_var), IntToString(auto7947C90E_var));
    }
    if ((lp_playerNo == 1)) {
        BankLoad("NOTDBackup", 1);
    }
    else if ((lp_playerNo == 2)) {
        BankLoad("NOTDBackup", 2);
    }
    else if ((lp_playerNo == 3)) {
        BankLoad("NOTDBackup", 3);
    }
    else if ((lp_playerNo == 4)) {
        BankLoad("NOTDBackup", 4);
    }
    else if ((lp_playerNo == 5)) {
        BankLoad("NOTDBackup", 5);
    }
    else if ((lp_playerNo == 6)) {
        BankLoad("NOTDBackup", 6);
    }
    else if ((lp_playerNo == 7)) {
        BankLoad("NOTDBackup", 7);
    }
    else if ((lp_playerNo == 8)) {
        BankLoad("NOTDBackup", 8);
    }
    auto350129D3_var = 1;
    for ( ; auto350129D3_var <= auto350129D3_ae; auto350129D3_var += 1 ) {
        BankValueSetFromString(BankLastCreated(), IntToString(auto350129D3_var), IntToString(auto350129D3_var), lv_tempString1[auto350129D3_var]);
    }
    BankSave(BankLastCreated());
    return true;
}

trigger auto_gf_TeamStatusInitializePlayerPortrait_Trigger = null;
int auto_gf_TeamStatusInitializePlayerPortrait_lp_triggeringPlayer;

void gf_TeamStatusInitializePlayerPortrait (int lp_triggeringPlayer) {
    auto_gf_TeamStatusInitializePlayerPortrait_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_TeamStatusInitializePlayerPortrait_Trigger == null) {
        auto_gf_TeamStatusInitializePlayerPortrait_Trigger = TriggerCreate("auto_gf_TeamStatusInitializePlayerPortrait_TriggerFunc");
    }

    TriggerExecute(auto_gf_TeamStatusInitializePlayerPortrait_Trigger, false, false);
}

bool auto_gf_TeamStatusInitializePlayerPortrait_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_TeamStatusInitializePlayerPortrait_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_marineHero[lp_triggeringPlayer]) == true)) {
        if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Rifleman")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMarineC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMarineB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMarineA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Medic")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMedicC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMedicB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMedicA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "TychusChaingun")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitAssaultC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitAssaultB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitAssaultA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "GhostLaserLines")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMarksmanC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMarksmanB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitMarksmanA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Spectre")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitReconC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitReconB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitReconA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "DominionKillTeam")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitDemoC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitDemoB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitDemoA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Engineer")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitEngyC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitEngyB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitEngyA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Commando")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitCommandoC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitCommandoB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitCommandoA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "PsiOps")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitPsiOpsC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitPsiOpsB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitPsiOpsA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Pathfinder")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitPathfinderB.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitPathfinderB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitPathfinderB.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "ForwardObserver")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitForwardObserverC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitForwardObserverB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitForwardObserverA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Flamethrower3")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitFlamerC.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitFlamerB.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitFlamerA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "Technician")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitTechnicianA.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitTechnicianA.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitTechnicianA.dds", PlayerGroupAll());
            }
        }
        else if ((UnitGetType(gv_marineHero[lp_triggeringPlayer]) == "ChemicalExpert")) {
            if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitChemExpertA.dds", PlayerGroupAll());
            }
            else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitChemExpertA.dds", PlayerGroupAll());
            }
            else if (true) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Marine Portraits\\PortraitChemExpertA.dds", PlayerGroupAll());
            }
        }
    }
    else {
        if ((gv_marineKilled[lp_triggeringPlayer] == true)) {
            libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "Assets\\Textures\\terranportraittransition_static.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemBlendMode(gv_teamStatusPortraitImages[lp_triggeringPlayer], c_triggerBlendModeAdd, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "Black.dds", PlayerGroupAll());
        }
    }
    return true;
}

trigger auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger = null;
int auto_gf_TeamStatusUnderAttackPortraitFlash_lp_playerNo;

void gf_TeamStatusUnderAttackPortraitFlash (int lp_playerNo) {
    auto_gf_TeamStatusUnderAttackPortraitFlash_lp_playerNo = lp_playerNo;

    if (auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger == null) {
        auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger = TriggerCreate("auto_gf_TeamStatusUnderAttackPortraitFlash_TriggerFunc");
    }

    TriggerExecute(auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger, false, false);
}

bool auto_gf_TeamStatusUnderAttackPortraitFlash_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_TeamStatusUnderAttackPortraitFlash_lp_playerNo;

    // Automatic Variable Declarations
    const int auto336E6B0E_n = 3;
    int auto336E6B0E_i;

    // Implementation
    if ((gv_underAttack[lp_playerNo] == false)) {
        gv_underAttack[lp_playerNo] = true;
        for (auto336E6B0E_i = 1; auto336E6B0E_i <= auto336E6B0E_n; auto336E6B0E_i += 1) {
            if ((UnitIsAlive(gv_marineHero[lp_playerNo]) == true) && (UnitGetPropertyFixed(gv_marineHero[lp_playerNo], c_unitPropShieldsPercent, c_unitPropCurrent) > 10.0)) {
                libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitImages[lp_playerNo], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitImages[lp_playerNo], Color(100.00, 0.00, 0.00), PlayerGroupAll());
            }
            Wait(0.35, c_timeGame);
            libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitImages[lp_playerNo], Color(100,100,100), PlayerGroupAll());
            Wait(0.2, c_timeGame);
        }
        gv_underAttack[lp_playerNo] = false;
    }

    return true;
}

trigger auto_gf_UIUpdatePortraitTooltip_Trigger = null;
int auto_gf_UIUpdatePortraitTooltip_lp_triggeringPlayer;

void gf_UIUpdatePortraitTooltip (int lp_triggeringPlayer) {
    auto_gf_UIUpdatePortraitTooltip_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdatePortraitTooltip_Trigger == null) {
        auto_gf_UIUpdatePortraitTooltip_Trigger = TriggerCreate("auto_gf_UIUpdatePortraitTooltip_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdatePortraitTooltip_Trigger, false, false);
}

bool auto_gf_UIUpdatePortraitTooltip_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdatePortraitTooltip_lp_triggeringPlayer;

    // Variable Declarations
    text lv_temp;
    int lv_ratingInt;
    text lv_ratingText;
    int lv_karmaInt;
    text lv_karmaText;
    int lv_xPInt;
    text lv_xPText;
    int lv_creditInt;
    text lv_creditText;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_ratingInt = (gv_playerRating[lp_triggeringPlayer] - gv_startingRating[lp_triggeringPlayer]);
    lv_karmaInt = (gv_playerKarma[lp_triggeringPlayer] - gv_startingKarma[lp_triggeringPlayer]);
    lv_xPInt = (gv_playerXP[lp_triggeringPlayer] - gv_startingXP[lp_triggeringPlayer]);
    lv_creditInt = (gv_playerCredits[lp_triggeringPlayer] - gv_startingCredits[lp_triggeringPlayer]);

    // Implementation
    if ((lv_ratingInt > 0)) {
        lv_ratingText = (StringExternal("Param/Value/648748AC") + IntToText(lv_ratingInt));
    }
    else {
        lv_ratingText = IntToText(lv_ratingInt);
    }
    if ((lv_karmaInt > 0)) {
        lv_karmaText = (StringExternal("Param/Value/B5DC7FB9") + IntToText(lv_karmaInt));
    }
    else {
        lv_karmaText = IntToText(lv_karmaInt);
    }
    if ((lv_xPInt > 0)) {
        lv_xPText = (StringExternal("Param/Value/50865FA9") + IntToText(lv_xPInt));
    }
    else {
        lv_xPText = IntToText(lv_xPInt);
    }
    if ((lv_creditInt > 0)) {
        lv_creditText = (StringExternal("Param/Value/E44F499A") + IntToText(lv_creditInt));
    }
    else {
        lv_creditText = IntToText(lv_creditInt);
    }
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = StringExternal("Param/Value/6A470478");
    TextExpressionSetToken("Param/Expression/4EEAFF4E", "A", UnitTypeGetName(UnitGetType(gv_marineHero[lp_triggeringPlayer])));
    lv_temp = TextExpressionAssemble("Param/Expression/4EEAFF4E");
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + lv_temp);
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/75D0FAFD"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerRating[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/BCE6D27B") + (lv_ratingText + StringExternal("Param/Value/9636C697"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/6734436C"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerKarma[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/F96F7B86") + (lv_karmaText + StringExternal("Param/Value/86182C3C"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/7E5D1603"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerXP[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/6064B540") + (lv_xPText + StringExternal("Param/Value/2B8E1854"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/64F415B8"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerCredits[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/A7EAAC9B") + (lv_creditText + StringExternal("Param/Value/A89F0CC4"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/54228DBB"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerGamesPlayed[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/497C825E"));
    if ((gv_playerGamesPlayed[lp_triggeringPlayer] <= 0)) {
        gv_playerGamesPlayed[lp_triggeringPlayer] = 1;
    }

    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText((gv_playerXP[lp_triggeringPlayer] / gv_playerGamesPlayed[lp_triggeringPlayer])));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/666A04DF") + StringToText(PlayerHandle(lp_triggeringPlayer))));
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusPortraitButton[lp_triggeringPlayer], gv_teamStatusPortraitTooltip[lp_triggeringPlayer], PlayerGroupAll());
    return true;
}

trigger auto_gf_UIUpdateLifePercentage_Trigger = null;
int auto_gf_UIUpdateLifePercentage_lp_triggeringPlayer;

void gf_UIUpdateLifePercentage (int lp_triggeringPlayer) {
    auto_gf_UIUpdateLifePercentage_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateLifePercentage_Trigger == null) {
        auto_gf_UIUpdateLifePercentage_Trigger = TriggerCreate("auto_gf_UIUpdateLifePercentage_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateLifePercentage_Trigger, false, false);
}

bool auto_gf_UIUpdateLifePercentage_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateLifePercentage_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    if ((PlayerType(lp_triggeringPlayer) == c_playerTypeUser) && (PlayerStatus(lp_triggeringPlayer) == c_playerStatusActive)) {
        libNtve_gf_SetDialogItemText(gv_teamStatusLifeMidSlash[lp_triggeringPlayer], (IntToText(FixedToInt(UnitGetPropertyFixed(gv_marineHero[lp_triggeringPlayer], c_unitPropLifePercent, c_unitPropCurrent))) + StringExternal("Param/Value/6767B545")), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(gv_teamStatusLifeMidSlash[lp_triggeringPlayer], StringExternal("Param/Value/141B5E62"), PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_UIUpdateLifeBarLength_Trigger = null;
int auto_gf_UIUpdateLifeBarLength_lp_triggeringPlayer;

void gf_UIUpdateLifeBarLength (int lp_triggeringPlayer) {
    auto_gf_UIUpdateLifeBarLength_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateLifeBarLength_Trigger == null) {
        auto_gf_UIUpdateLifeBarLength_Trigger = TriggerCreate("auto_gf_UIUpdateLifeBarLength_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateLifeBarLength_Trigger, false, false);
}

bool auto_gf_UIUpdateLifeBarLength_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateLifeBarLength_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(gv_teamStatusLifeBar[lp_triggeringPlayer], PlayerGroupAll(), FixedToInt((UnitGetPropertyFixed(gv_marineHero[lp_triggeringPlayer], c_unitPropLifePercent, c_unitPropCurrent) * (gv_teamStatusLifeBarLength / 100.0))), gv_teamStatusLifeBarThickness);
    return true;
}

trigger auto_gf_UIInitializeLifeBar_Trigger = null;
int auto_gf_UIInitializeLifeBar_lp_triggeringPlayer;

void gf_UIInitializeLifeBar (int lp_triggeringPlayer) {
    auto_gf_UIInitializeLifeBar_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIInitializeLifeBar_Trigger == null) {
        auto_gf_UIInitializeLifeBar_Trigger = TriggerCreate("auto_gf_UIInitializeLifeBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIInitializeLifeBar_Trigger, false, false);
}

bool auto_gf_UIInitializeLifeBar_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIInitializeLifeBar_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(gv_marineHero[lp_triggeringPlayer]) == true)) {
        gf_UIUpdateLifeBarLength(lp_triggeringPlayer);
        libNtve_gf_SetDialogItemImage(gv_teamStatusLifeBar[lp_triggeringPlayer], "Life Bar.dds", PlayerGroupAll());
        gf_UIUpdateLifePercentage(lp_triggeringPlayer);
    }
    else {
        libNtve_gf_SetDialogItemImage(gv_teamStatusLifeBar[lp_triggeringPlayer], "Life Bar.dds", PlayerGroupAll());
        if ((PlayerStatus(lp_triggeringPlayer) == c_playerStatusLeft)) {
            libNtve_gf_SetDialogItemText(gv_teamStatusLifeMidSlash[lp_triggeringPlayer], StringExternal("Param/Value/B9AFBCAA"), PlayerGroupAll());
        }
        else {
            if ((PlayerType(lp_triggeringPlayer) != c_playerTypeUser)) {
                libNtve_gf_SetDialogItemText(gv_teamStatusLifeMidSlash[lp_triggeringPlayer], StringExternal("Param/Value/FA468B9E"), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemText(gv_teamStatusLifeMidSlash[lp_triggeringPlayer], StringExternal("Param/Value/4A4AC2E8"), PlayerGroupAll());
            }
        }
    }
    return true;
}

trigger auto_gf_UIUpdatePetLifeBarLength_Trigger = null;
int auto_gf_UIUpdatePetLifeBarLength_lp_triggeringPlayer;

void gf_UIUpdatePetLifeBarLength (int lp_triggeringPlayer) {
    auto_gf_UIUpdatePetLifeBarLength_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdatePetLifeBarLength_Trigger == null) {
        auto_gf_UIUpdatePetLifeBarLength_Trigger = TriggerCreate("auto_gf_UIUpdatePetLifeBarLength_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdatePetLifeBarLength_Trigger, false, false);
}

bool auto_gf_UIUpdatePetLifeBarLength_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdatePetLifeBarLength_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    DialogControlSetSize(gv_teamStatusLifeBar[lp_triggeringPlayer], PlayerGroupAll(), FixedToInt((UnitGetPropertyFixed(gv_playerPet[lp_triggeringPlayer], c_unitPropLifePercent, c_unitPropCurrent) * (gv_teamStatusLifeBarLength / 100.0))), gv_teamStatusLifeBarThickness);
    return true;
}

trigger auto_gf_UIUpdateLifeTooltip_Trigger = null;
int auto_gf_UIUpdateLifeTooltip_lp_triggeringPlayer;

void gf_UIUpdateLifeTooltip (int lp_triggeringPlayer) {
    auto_gf_UIUpdateLifeTooltip_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateLifeTooltip_Trigger == null) {
        auto_gf_UIUpdateLifeTooltip_Trigger = TriggerCreate("auto_gf_UIUpdateLifeTooltip_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateLifeTooltip_Trigger, false, false);
}

bool auto_gf_UIUpdateLifeTooltip_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateLifeTooltip_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = StringExternal("Param/Value/C1D141D3");
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + IntToText(libNtve_gf_UnitGetPropertyKills(gv_marineHero[lp_triggeringPlayer], c_unitPropCurrent)));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/371C5830"));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + IntToText(gv_hitsTaken[lp_triggeringPlayer]));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/9D8902A7"));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + FixedToText(gv_playerDamageTaken[lp_triggeringPlayer], 0));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/77C36B7E"));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + IntToText(gv_marineMags[lp_triggeringPlayer]));
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusLifeButton[lp_triggeringPlayer], gv_teamStatusLifeTooltip[lp_triggeringPlayer], PlayerGroupAll());
    return true;
}

trigger auto_gf_UIUpdateXP_Trigger = null;
int auto_gf_UIUpdateXP_lp_triggeringPlayer;

void gf_UIUpdateXP (int lp_triggeringPlayer) {
    auto_gf_UIUpdateXP_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateXP_Trigger == null) {
        auto_gf_UIUpdateXP_Trigger = TriggerCreate("auto_gf_UIUpdateXP_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateXP_Trigger, false, false);
}

bool auto_gf_UIUpdateXP_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateXP_lp_triggeringPlayer;

    // Variable Declarations
    text lv_xPText;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_xPText = (StringExternal("Param/Value/174CE2FA") + IntToText(gv_playerXP[lp_triggeringPlayer]));
    if ((((UnitIsAlive(gv_marineHero[lp_triggeringPlayer]) == true) || (UnitIsAlive(gv_playerPet[lp_triggeringPlayer]) == true)) || (PlayerType(lp_triggeringPlayer) == c_playerTypeUser))) {
        libNtve_gf_SetDialogItemText(gv_teamStatusXP[lp_triggeringPlayer], lv_xPText, PlayerGroupAll());
    }
    else {
        if ((PlayerGroupHasPlayer(PlayerGroupActive(), lp_triggeringPlayer) == true) && (PlayerType(lp_triggeringPlayer) == c_playerTypeUser) && (PlayerStatus(lp_triggeringPlayer) == c_playerStatusActive)) {
            libNtve_gf_SetDialogItemText(gv_teamStatusXP[lp_triggeringPlayer], lv_xPText, PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemText(gv_teamStatusXP[lp_triggeringPlayer], StringToText(""), PlayerGroupAll());
        }
    }
    return true;
}

trigger auto_gf_UIUpdateDebuffBackgroundBorder_Trigger = null;
int auto_gf_UIUpdateDebuffBackgroundBorder_lp_triggeringPlayer;
int auto_gf_UIUpdateDebuffBackgroundBorder_lp_iconNumber;

void gf_UIUpdateDebuffBackgroundBorder (int lp_triggeringPlayer, int lp_iconNumber) {
    auto_gf_UIUpdateDebuffBackgroundBorder_lp_triggeringPlayer = lp_triggeringPlayer;
    auto_gf_UIUpdateDebuffBackgroundBorder_lp_iconNumber = lp_iconNumber;

    if (auto_gf_UIUpdateDebuffBackgroundBorder_Trigger == null) {
        auto_gf_UIUpdateDebuffBackgroundBorder_Trigger = TriggerCreate("auto_gf_UIUpdateDebuffBackgroundBorder_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateDebuffBackgroundBorder_Trigger, false, false);
}

bool auto_gf_UIUpdateDebuffBackgroundBorder_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateDebuffBackgroundBorder_lp_triggeringPlayer;
    int lp_iconNumber = auto_gf_UIUpdateDebuffBackgroundBorder_lp_iconNumber;

    // Automatic Variable Declarations
    // Implementation
    if (((lp_iconNumber >= 0) && (lp_iconNumber <= 3))) {
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBorder[lp_iconNumber][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBackground[lp_iconNumber][lp_triggeringPlayer], "Black.tga", PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_UIUpdateDebuffBar_Trigger = null;
int auto_gf_UIUpdateDebuffBar_lp_triggeringPlayer;

void gf_UIUpdateDebuffBar (int lp_triggeringPlayer) {
    auto_gf_UIUpdateDebuffBar_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateDebuffBar_Trigger == null) {
        auto_gf_UIUpdateDebuffBar_Trigger = TriggerCreate("auto_gf_UIUpdateDebuffBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateDebuffBar_Trigger, false, false);
}

bool auto_gf_UIUpdateDebuffBar_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateDebuffBar_lp_triggeringPlayer;

    // Variable Declarations
    unit lv_marineHero;
    int lv_i;

    // Automatic Variable Declarations
    const int autoEFF20166_ae = 3;
    int autoEFF20166_var;

    // Variable Initialization
    lv_marineHero = gv_marineHero[lp_triggeringPlayer];

    // Implementation
    if ((UnitIsAlive(lv_marineHero) == true)) {
        if ((UnitHasBehavior(lv_marineHero, "Cripple") == true)) {
            gf_UIUpdateDebuffBackgroundBorder(lp_triggeringPlayer, lv_i);
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], "Assets\\Textures\\btn-tips-fallenheroes.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, "Cripple", "Tooltip", c_playerAny)), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], Color(254*100/255,138*100/255,14*100/255), PlayerGroupAll());
            lv_i += 1;
        }

        if ((UnitHasBehavior(lv_marineHero, "OpenWound") == true)) {
            gf_UIUpdateDebuffBackgroundBorder(lp_triggeringPlayer, lv_i);
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], "Assets\\Textures\\btn-upgrade-zerg-enduringcorruption.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, "OpenWound", "Tooltip", c_playerAny)), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], Color(100.00, 0.00, 0.00), PlayerGroupAll());
            lv_i += 1;
        }

        if ((UnitHasBehavior(lv_marineHero, "Venom") == true)) {
            gf_UIUpdateDebuffBackgroundBorder(lp_triggeringPlayer, lv_i);
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], "Assets\\Textures\\btn-upgrade-zerg-airattacks-level0.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, "Venom", "Tooltip", c_playerAny)), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], Color(22*100/255,128*100/255,0), PlayerGroupAll());
            lv_i += 1;
        }

        if ((UnitHasBehavior(lv_marineHero, "Blind") == true)) {
            gf_UIUpdateDebuffBackgroundBorder(lp_triggeringPlayer, lv_i);
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], "Assets\\Textures\\btn-ability-zerg-leech.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, "Blind", "Tooltip", c_playerAny)), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], Color(100,100,100), PlayerGroupAll());
            lv_i += 1;
        }

        if ((UnitHasBehavior(lv_marineHero, "ShortCircuit") == true)) {
            gf_UIUpdateDebuffBackgroundBorder(lp_triggeringPlayer, lv_i);
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], "Assets\\Textures\\btn-ability-terran-emp-color.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, "ShortCircuit", "Tooltip", c_playerAny)), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
            lv_i += 1;
        }

        if ((UnitHasBehavior(lv_marineHero, "Madness") == true)) {
            gf_UIUpdateDebuffBackgroundBorder(lp_triggeringPlayer, lv_i);
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], "Assets\\Textures\\btn-ability-terran-tosh-mindblast.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, "Madness", "Tooltip", c_playerAny)), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], Color(229*100/255,91*100/255,176*100/255), PlayerGroupAll());
            lv_i += 1;
        }

        if ((UnitHasBehavior(lv_marineHero, "Infection") == true)) {
            gf_UIUpdateDebuffBackgroundBorder(lp_triggeringPlayer, lv_i);
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], "Assets\\Textures\\btn-upgrade-zerg-airattacks-level3.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, "Infection", "Tooltip", c_playerAny)), PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], Color(100.00, 0.00, 0.00), PlayerGroupAll());
            lv_i += 1;
        }

        autoEFF20166_var = lv_i;
        for ( ; autoEFF20166_var <= autoEFF20166_ae; autoEFF20166_var += 1 ) {
            if (((autoEFF20166_var >= 0) && (autoEFF20166_var <= 3))) {
                libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBorder[autoEFF20166_var][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBackground[autoEFF20166_var][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[autoEFF20166_var][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[autoEFF20166_var][lp_triggeringPlayer], StringToText(""), PlayerGroupAll());
            }

        }
    }

    return true;
}

trigger auto_gf_UISetPlayerRankNameIconXP_Trigger = null;
int auto_gf_UISetPlayerRankNameIconXP_lp_triggeringPlayer;

void gf_UISetPlayerRankNameIconXP (int lp_triggeringPlayer) {
    auto_gf_UISetPlayerRankNameIconXP_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UISetPlayerRankNameIconXP_Trigger == null) {
        auto_gf_UISetPlayerRankNameIconXP_Trigger = TriggerCreate("auto_gf_UISetPlayerRankNameIconXP_TriggerFunc");
    }

    TriggerExecute(auto_gf_UISetPlayerRankNameIconXP_Trigger, false, false);
}

bool auto_gf_UISetPlayerRankNameIconXP_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UISetPlayerRankNameIconXP_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_playerDoctor[lp_triggeringPlayer] == true)) {
        libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_triggeringPlayer], "Assets\\Textures\\btn-ability-terran-heal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "Assets\\Textures\\btn-ability-terran-heal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_triggeringPlayer], StringExternal("Param/Value/35FA14D2"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_triggeringPlayer], gv_rankIcon[gv_playerRank[lp_triggeringPlayer]], PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], gv_rankIcon[gv_playerRank[lp_triggeringPlayer]], PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_triggeringPlayer], gv_rankFullTitle[gv_playerRank[lp_triggeringPlayer]], PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(gv_teamStatusPlayerName[lp_triggeringPlayer], PlayerName(lp_triggeringPlayer), PlayerGroupAll());
    gf_UIUpdateXP(lp_triggeringPlayer);
    if ((gf_BOInsigniaBought(lp_triggeringPlayer) == true)) {
        gf_UpgradeBOInsigniaRank(lp_triggeringPlayer);
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lp_triggeringPlayer], "NOTD Rank Icons\\Black Ops Insignia.dds", PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_UIInitializePlayerLifePortrait_Trigger = null;
int auto_gf_UIInitializePlayerLifePortrait_lp_triggeringPlayer;

void gf_UIInitializePlayerLifePortrait (int lp_triggeringPlayer) {
    auto_gf_UIInitializePlayerLifePortrait_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIInitializePlayerLifePortrait_Trigger == null) {
        auto_gf_UIInitializePlayerLifePortrait_Trigger = TriggerCreate("auto_gf_UIInitializePlayerLifePortrait_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIInitializePlayerLifePortrait_Trigger, false, false);
}

bool auto_gf_UIInitializePlayerLifePortrait_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIInitializePlayerLifePortrait_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gf_TeamStatusInitializePlayerPortrait(lp_triggeringPlayer);
    gf_UIInitializeLifeBar(lp_triggeringPlayer);
    return true;
}

trigger auto_gf_UISetDoctorTitle_Trigger = null;
int auto_gf_UISetDoctorTitle_lp_triggeringPlayer;

void gf_UISetDoctorTitle (int lp_triggeringPlayer) {
    auto_gf_UISetDoctorTitle_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UISetDoctorTitle_Trigger == null) {
        auto_gf_UISetDoctorTitle_Trigger = TriggerCreate("auto_gf_UISetDoctorTitle_TriggerFunc");
    }

    TriggerExecute(auto_gf_UISetDoctorTitle_Trigger, false, false);
}

bool auto_gf_UISetDoctorTitle_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UISetDoctorTitle_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_teamStatusPlayerName[lp_triggeringPlayer], (StringExternal("Param/Value/31B81D09") + PlayerName(lp_triggeringPlayer)), PlayerGroupAll());
    return true;
}

trigger auto_gf_UIInitializeStartingCareerStats_Trigger = null;

void gf_UIInitializeStartingCareerStats () {
    if (auto_gf_UIInitializeStartingCareerStats_Trigger == null) {
        auto_gf_UIInitializeStartingCareerStats_Trigger = TriggerCreate("auto_gf_UIInitializeStartingCareerStats_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIInitializeStartingCareerStats_Trigger, false, false);
}

bool auto_gf_UIInitializeStartingCareerStats_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto810AE71A_ae = 8;
    int auto810AE71A_var;

    // Implementation
    auto810AE71A_var = 1;
    for ( ; auto810AE71A_var <= auto810AE71A_ae; auto810AE71A_var += 1 ) {
        if ((PlayerStatus(auto810AE71A_var) == c_playerStatusActive)) {
            gv_startingKarma[auto810AE71A_var] = gv_playerKarma[auto810AE71A_var];
            gv_startingXP[auto810AE71A_var] = gv_playerXP[auto810AE71A_var];
            gv_startingRating[auto810AE71A_var] = gv_playerRating[auto810AE71A_var];
            gv_startingCredits[auto810AE71A_var] = gv_playerCredits[auto810AE71A_var];
        }

    }
    return true;
}

trigger auto_gf_PeriodicTeamUIUpdate_Trigger = null;

void gf_PeriodicTeamUIUpdate () {
    if (auto_gf_PeriodicTeamUIUpdate_Trigger == null) {
        auto_gf_PeriodicTeamUIUpdate_Trigger = TriggerCreate("auto_gf_PeriodicTeamUIUpdate_TriggerFunc");
    }

    TriggerExecute(auto_gf_PeriodicTeamUIUpdate_Trigger, false, false);
}

bool auto_gf_PeriodicTeamUIUpdate_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerOfUnit;

    // Automatic Variable Declarations
    unitgroup autoCAD9E254_g;
    int autoCAD9E254_u;
    unit autoCAD9E254_var;
    const int auto03D96A08_ae = 8;
    int auto03D96A08_var;

    // Variable Initialization

    // Implementation
    while ((gv_eND == false)) {
        Wait(1.0, c_timeReal);
        autoCAD9E254_g = gv_marines;
        autoCAD9E254_u = UnitGroupCount(autoCAD9E254_g, c_unitCountAll);
        for (;; autoCAD9E254_u -= 1) {
            autoCAD9E254_var = UnitGroupUnitFromEnd(autoCAD9E254_g, autoCAD9E254_u);
            if (autoCAD9E254_var == null) { break; }
            if ((UnitIsAlive(autoCAD9E254_var) == true)) {
                lv_ownerOfUnit = UnitGetOwner(autoCAD9E254_var);
                gf_UIUpdateLifeBarLength(lv_ownerOfUnit);
                gf_UIUpdateLifePercentage(lv_ownerOfUnit);
                gf_UIUpdateDebuffBar(lv_ownerOfUnit);
                gf_UIUpdatePortraitTooltip(lv_ownerOfUnit);
                gf_UIUpdateLifeTooltip(lv_ownerOfUnit);
                if ((gv_spectated[lv_ownerOfUnit] == true)) {
                }

            }

        }
        auto03D96A08_var = 1;
        for ( ; auto03D96A08_var <= auto03D96A08_ae; auto03D96A08_var += 1 ) {
            if ((PlayerStatus(auto03D96A08_var) != c_playerStatusUnused) && (UnitIsAlive(gv_playerPet[auto03D96A08_var]) == true)) {
                gf_UIUpdatePetLifeBarLength(auto03D96A08_var);
            }

        }
    }
    return true;
}

trigger auto_gf_PlayerMedalsSetMedalItems_Trigger = null;
int auto_gf_PlayerMedalsSetMedalItems_lp_player;

void gf_PlayerMedalsSetMedalItems (int lp_player) {
    auto_gf_PlayerMedalsSetMedalItems_lp_player = lp_player;

    if (auto_gf_PlayerMedalsSetMedalItems_Trigger == null) {
        auto_gf_PlayerMedalsSetMedalItems_Trigger = TriggerCreate("auto_gf_PlayerMedalsSetMedalItems_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayerMedalsSetMedalItems_Trigger, false, false);
}

bool auto_gf_PlayerMedalsSetMedalItems_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_PlayerMedalsSetMedalItems_lp_player;

    // Variable Declarations
    int lv_combatRibbonRequirements;
    int lv_medalOfHonorRequirements;
    text lv_combatRibbonRText;
    text lv_medalOfHonorRText;
    int lv_combatActionRibbonPoints;
    int lv_lifesavingMedalPoints;
    int lv_bronzeStarPoints;
    int lv_silverStarPoints;
    int lv_legionOfMeritPoints;
    int lv_distinguishedServiceMedalPoints;
    int lv_navyCrossPoints;
    int lv_expeditionaryMedalPoints;
    int lv_superiorServiceMedalPoints;
    int lv_medalOfHonorPoints;
    int lv_combatActionRibbonLevel;
    int lv_lifesavingMedalLevel;
    int lv_bronzeStarLevel;
    int lv_silverStarLevel;
    int lv_legionOfMeritLevel;
    int lv_distinguishedServiceMedalLevel;
    int lv_navyCrossLevel;
    int lv_expeditionaryMedalLevel;
    int lv_superiorServiceMedalLevel;
    int lv_medalOfHonorLevel;
    int[11] lv_playerMedalLevels;
    string lv_imageLink;

    // Automatic Variable Declarations
    const int auto07038A38_ae = 10;
    int auto07038A38_var;
    const int auto0460E811_ae = 9;
    int auto0460E811_var;
    int auto4E2BF122_ae;
    int auto4E2BF122_var;
    const int autoFFF8548C_ae = 9;
    int autoFFF8548C_var;
    int auto9F2F405D_ae;
    int auto9F2F405D_var;
    const int autoCDD405C3_ae = 9;
    int autoCDD405C3_var;
    int auto3B4A5596_ae;
    int auto3B4A5596_var;
    const int autoBFBBBBF5_ae = 9;
    int autoBFBBBBF5_var;
    int auto6668E2D1_ae;
    int auto6668E2D1_var;
    const int auto59A8A07A_ae = 9;
    int auto59A8A07A_var;
    int auto36E7C593_ae;
    int auto36E7C593_var;
    const int autoF46C9B4A_ae = 9;
    int autoF46C9B4A_var;
    int auto94120CCA_ae;
    int auto94120CCA_var;
    const int auto9A16F040_ae = 9;
    int auto9A16F040_var;
    int auto9154DF30_ae;
    int auto9154DF30_var;
    const int auto3A23DF58_ae = 9;
    int auto3A23DF58_var;
    int autoADF61302_ae;
    int autoADF61302_var;
    const int auto28572EE7_ae = 9;
    int auto28572EE7_var;
    int autoC7966C0E_ae;
    int autoC7966C0E_var;
    const int auto0393EFF9_ae = 9;
    int auto0393EFF9_var;
    int auto5165DA2B_ae;
    int auto5165DA2B_var;
    const int auto1C77A4E2_ae = 10;
    int auto1C77A4E2_var;

    // Variable Initialization
    lv_combatRibbonRequirements = ((gv_combatActionRibbon[lp_player] + 1) * 50);
    lv_medalOfHonorRequirements = ((gv_medalOfHonor[lp_player] + 1) * 50);
    lv_combatRibbonRText = IntToText(lv_combatRibbonRequirements);
    lv_medalOfHonorRText = IntToText(lv_medalOfHonorRequirements);
    lv_combatActionRibbonPoints = (ModI(gv_combatActionRibbon[lp_player], 50) / 5);
    lv_lifesavingMedalPoints = ModI(gv_lifeSavingMedal[lp_player], 10);
    lv_bronzeStarPoints = ModI(gv_bronzeStar[lp_player], 10);
    lv_silverStarPoints = ModI(gv_silverStar[lp_player], 10);
    lv_legionOfMeritPoints = ModI(gv_legionOfMerit[lp_player], 10);
    lv_distinguishedServiceMedalPoints = ModI(gv_distinguishedServiceMedal[lp_player], 10);
    lv_navyCrossPoints = ModI(gv_navyCross[lp_player], 10);
    lv_expeditionaryMedalPoints = ModI(gv_expeditionaryMedal[lp_player], 10);
    lv_superiorServiceMedalPoints = ModI(gv_superiorServiceMedal[lp_player], 10);
    lv_medalOfHonorPoints = ((ModI(gv_medalOfHonor[lp_player], 50) / 5) * 1);
    lv_combatActionRibbonLevel = (gv_combatActionRibbon[lp_player] / 50);
    lv_lifesavingMedalLevel = (gv_lifeSavingMedal[lp_player] / 10);
    lv_bronzeStarLevel = (gv_bronzeStar[lp_player] / 10);
    lv_silverStarLevel = (gv_silverStar[lp_player] / 10);
    lv_legionOfMeritLevel = (gv_legionOfMerit[lp_player] / 10);
    lv_distinguishedServiceMedalLevel = (gv_distinguishedServiceMedal[lp_player] / 10);
    lv_navyCrossLevel = (gv_navyCross[lp_player] / 10);
    lv_expeditionaryMedalLevel = (gv_expeditionaryMedal[lp_player] / 10);
    lv_superiorServiceMedalLevel = (gv_superiorServiceMedal[lp_player] / 10);
    lv_medalOfHonorLevel = (gv_medalOfHonor[lp_player] / 50);
    lv_imageLink = "Assets\\Textures\\lazerbolt1_blue_blend2.dds";

    // Implementation
    lv_playerMedalLevels[1] = lv_combatActionRibbonLevel;
    lv_playerMedalLevels[2] = lv_lifesavingMedalLevel;
    lv_playerMedalLevels[3] = lv_bronzeStarLevel;
    lv_playerMedalLevels[4] = lv_silverStarLevel;
    lv_playerMedalLevels[5] = lv_legionOfMeritLevel;
    lv_playerMedalLevels[6] = lv_distinguishedServiceMedalLevel;
    lv_playerMedalLevels[7] = lv_navyCrossLevel;
    lv_playerMedalLevels[8] = lv_expeditionaryMedalLevel;
    lv_playerMedalLevels[9] = lv_superiorServiceMedalLevel;
    lv_playerMedalLevels[10] = lv_medalOfHonorLevel;
    auto07038A38_var = 1;
    for ( ; auto07038A38_var <= auto07038A38_ae; auto07038A38_var += 1 ) {
        if ((lv_playerMedalLevels[auto07038A38_var] > 0)) {
            libNtve_gf_SetDialogItemColor(gv_playerMedalsImage[auto07038A38_var][lp_player], Color(100,100,100), PlayerGroupAll());
            libNtve_gf_SetDialogItemBlendMode(gv_playerMedalsImage[auto07038A38_var][lp_player], c_triggerBlendModeNormal, PlayerGroupAll());
        }

        if ((lv_playerMedalLevels[auto07038A38_var] == 1)) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[auto07038A38_var][lp_player], "NOTD Medal Icons\\NOTD Medal T1.dds", PlayerGroupAll());
        }
        else if ((lv_playerMedalLevels[auto07038A38_var] == 2)) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[auto07038A38_var][lp_player], "NOTD Medal Icons\\NOTD Medal T2.dds", PlayerGroupAll());
        }
        else if ((lv_playerMedalLevels[auto07038A38_var] == 3)) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[auto07038A38_var][lp_player], "NOTD Medal Icons\\NOTD Medal T3.dds", PlayerGroupAll());
        }
        else if ((lv_playerMedalLevels[auto07038A38_var] == 4)) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[auto07038A38_var][lp_player], "NOTD Medal Icons\\NOTD Medal T4.dds", PlayerGroupAll());
        }
        else if ((lv_playerMedalLevels[auto07038A38_var] == 5)) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[auto07038A38_var][lp_player], "NOTD Medal Icons\\NOTD Medal T5.dds", PlayerGroupAll());
        }
        else if ((lv_playerMedalLevels[auto07038A38_var] >= 6)) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[auto07038A38_var][lp_player], "NOTD Medal Icons\\NOTD Medal T6.dds", PlayerGroupAll());
        }
    }
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[1][lp_player], StringExternal("Param/Value/75FF77C8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[2][lp_player], StringExternal("Param/Value/1478FAC8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[3][lp_player], StringExternal("Param/Value/2E8ADDFC"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[4][lp_player], StringExternal("Param/Value/86C9915E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[5][lp_player], StringExternal("Param/Value/D2F5A12C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[6][lp_player], StringExternal("Param/Value/6412A582"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[7][lp_player], StringExternal("Param/Value/A31B4C3C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[8][lp_player], StringExternal("Param/Value/A25976CF"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[9][lp_player], StringExternal("Param/Value/49F3E057"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[10][lp_player], StringExternal("Param/Value/9A86B949"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[1][lp_player], (StringExternal("Param/Value/6D1F9F8A") + (StringExternal("Param/Value/58BA0A04") + StringExternal("Param/Value/FAAAAA48"))), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[2][lp_player], StringExternal("Param/Value/5EB0B18E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[3][lp_player], StringExternal("Param/Value/CD794AD2"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[4][lp_player], StringExternal("Param/Value/F50A038F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[5][lp_player], StringExternal("Param/Value/F834B73B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[6][lp_player], StringExternal("Param/Value/8BB221FF"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[7][lp_player], StringExternal("Param/Value/92D3E4A8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[8][lp_player], StringExternal("Param/Value/B55E9F28"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[9][lp_player], StringExternal("Param/Value/3E0AD1AB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_playerMedalsMedalItems[10][lp_player], (StringExternal("Param/Value/E0CEADA9") + (StringExternal("Param/Value/94E5C4DF") + StringExternal("Param/Value/406BCDD6"))), PlayerGroupAll());
    if ((lv_combatActionRibbonLevel > 10)) {
        lv_combatActionRibbonLevel = 10;
    }

    if ((lv_lifesavingMedalLevel > 10)) {
        lv_lifesavingMedalLevel = 10;
    }

    if ((lv_bronzeStarLevel > 10)) {
        lv_bronzeStarLevel = 10;
    }

    if ((lv_silverStarLevel > 10)) {
        lv_silverStarLevel = 10;
    }

    if ((lv_legionOfMeritLevel > 10)) {
        lv_legionOfMeritLevel = 10;
    }

    if ((lv_distinguishedServiceMedalLevel > 10)) {
        lv_distinguishedServiceMedalLevel = 10;
    }

    if ((lv_navyCrossLevel > 10)) {
        lv_navyCrossLevel = 10;
    }

    if ((lv_expeditionaryMedalLevel > 10)) {
        lv_expeditionaryMedalLevel = 10;
    }

    if ((lv_superiorServiceMedalLevel > 10)) {
        lv_superiorServiceMedalLevel = 10;
    }

    if ((lv_medalOfHonorLevel > 10)) {
        lv_medalOfHonorLevel = 10;
    }

    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[1][lp_player], IntToText(lv_combatActionRibbonLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[2][lp_player], IntToText(lv_lifesavingMedalLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[3][lp_player], IntToText(lv_bronzeStarLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[4][lp_player], IntToText(lv_silverStarLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[5][lp_player], IntToText(lv_legionOfMeritLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[6][lp_player], IntToText(lv_distinguishedServiceMedalLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[7][lp_player], IntToText(lv_navyCrossLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[8][lp_player], IntToText(lv_expeditionaryMedalLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[9][lp_player], IntToText(lv_superiorServiceMedalLevel), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsMedalPoints[10][lp_player], IntToText(lv_medalOfHonorLevel), PlayerGroupAll());
    if ((lv_combatActionRibbonLevel == 10)) {
        auto0460E811_var = 1;
        for ( ; auto0460E811_var <= auto0460E811_ae; auto0460E811_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto0460E811_var][1][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto4E2BF122_ae = lv_combatActionRibbonPoints;
        auto4E2BF122_var = 1;
        for ( ; auto4E2BF122_var <= auto4E2BF122_ae; auto4E2BF122_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto4E2BF122_var][1][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[1][lp_player], IntToText(lv_combatActionRibbonPoints), PlayerGroupAll());
    }
    if ((lv_lifesavingMedalLevel == 10)) {
        autoFFF8548C_var = 1;
        for ( ; autoFFF8548C_var <= autoFFF8548C_ae; autoFFF8548C_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[autoFFF8548C_var][2][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto9F2F405D_ae = lv_lifesavingMedalPoints;
        auto9F2F405D_var = 1;
        for ( ; auto9F2F405D_var <= auto9F2F405D_ae; auto9F2F405D_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto9F2F405D_var][2][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[2][lp_player], IntToText(lv_lifesavingMedalPoints), PlayerGroupAll());
    }
    if ((lv_bronzeStarLevel == 10)) {
        autoCDD405C3_var = 1;
        for ( ; autoCDD405C3_var <= autoCDD405C3_ae; autoCDD405C3_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[autoCDD405C3_var][3][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto3B4A5596_ae = lv_bronzeStarPoints;
        auto3B4A5596_var = 1;
        for ( ; auto3B4A5596_var <= auto3B4A5596_ae; auto3B4A5596_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto3B4A5596_var][3][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[3][lp_player], IntToText(lv_bronzeStarPoints), PlayerGroupAll());
    }
    if ((lv_silverStarLevel == 10)) {
        autoBFBBBBF5_var = 1;
        for ( ; autoBFBBBBF5_var <= autoBFBBBBF5_ae; autoBFBBBBF5_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[autoBFBBBBF5_var][4][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto6668E2D1_ae = lv_silverStarPoints;
        auto6668E2D1_var = 1;
        for ( ; auto6668E2D1_var <= auto6668E2D1_ae; auto6668E2D1_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto6668E2D1_var][4][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[4][lp_player], IntToText(lv_silverStarPoints), PlayerGroupAll());
    }
    if ((lv_legionOfMeritLevel == 10)) {
        auto59A8A07A_var = 1;
        for ( ; auto59A8A07A_var <= auto59A8A07A_ae; auto59A8A07A_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto59A8A07A_var][5][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto36E7C593_ae = lv_legionOfMeritPoints;
        auto36E7C593_var = 1;
        for ( ; auto36E7C593_var <= auto36E7C593_ae; auto36E7C593_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto36E7C593_var][5][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[5][lp_player], IntToText(lv_legionOfMeritPoints), PlayerGroupAll());
    }
    if ((lv_distinguishedServiceMedalLevel == 10)) {
        autoF46C9B4A_var = 1;
        for ( ; autoF46C9B4A_var <= autoF46C9B4A_ae; autoF46C9B4A_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[autoF46C9B4A_var][6][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto94120CCA_ae = lv_distinguishedServiceMedalPoints;
        auto94120CCA_var = 1;
        for ( ; auto94120CCA_var <= auto94120CCA_ae; auto94120CCA_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto94120CCA_var][6][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[6][lp_player], IntToText(lv_distinguishedServiceMedalPoints), PlayerGroupAll());
    }
    if ((lv_navyCrossLevel == 10)) {
        auto9A16F040_var = 1;
        for ( ; auto9A16F040_var <= auto9A16F040_ae; auto9A16F040_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto9A16F040_var][7][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto9154DF30_ae = lv_navyCrossPoints;
        auto9154DF30_var = 1;
        for ( ; auto9154DF30_var <= auto9154DF30_ae; auto9154DF30_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto9154DF30_var][7][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[7][lp_player], IntToText(lv_navyCrossPoints), PlayerGroupAll());
    }
    if ((lv_expeditionaryMedalLevel == 10)) {
        auto3A23DF58_var = 1;
        for ( ; auto3A23DF58_var <= auto3A23DF58_ae; auto3A23DF58_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto3A23DF58_var][8][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        autoADF61302_ae = lv_expeditionaryMedalPoints;
        autoADF61302_var = 1;
        for ( ; autoADF61302_var <= autoADF61302_ae; autoADF61302_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[autoADF61302_var][8][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[8][lp_player], IntToText(lv_expeditionaryMedalPoints), PlayerGroupAll());
    }
    if ((lv_superiorServiceMedalLevel == 10)) {
        auto28572EE7_var = 1;
        for ( ; auto28572EE7_var <= auto28572EE7_ae; auto28572EE7_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto28572EE7_var][9][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        autoC7966C0E_ae = lv_superiorServiceMedalPoints;
        autoC7966C0E_var = 1;
        for ( ; autoC7966C0E_var <= autoC7966C0E_ae; autoC7966C0E_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[autoC7966C0E_var][9][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[9][lp_player], IntToText(lv_superiorServiceMedalPoints), PlayerGroupAll());
    }
    if ((lv_medalOfHonorLevel == 10)) {
        auto0393EFF9_var = 1;
        for ( ; auto0393EFF9_var <= auto0393EFF9_ae; auto0393EFF9_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto0393EFF9_var][10][lp_player], lv_imageLink, PlayerGroupAll());
        }
    }
    else {
        auto5165DA2B_ae = lv_medalOfHonorPoints;
        auto5165DA2B_var = 1;
        for ( ; auto5165DA2B_var <= auto5165DA2B_ae; auto5165DA2B_var += 1 ) {
            libNtve_gf_SetDialogItemImage(gv_playerMedalsMedalProgressSubBar[auto5165DA2B_var][10][lp_player], lv_imageLink, PlayerGroupAll());
        }
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressPoints[10][lp_player], IntToText(lv_medalOfHonorPoints), PlayerGroupAll());
    }
    auto1C77A4E2_var = 1;
    for ( ; auto1C77A4E2_var <= auto1C77A4E2_ae; auto1C77A4E2_var += 1 ) {
        libNtve_gf_SetDialogItemStyle(gv_playerMedalsMedalPoints[auto1C77A4E2_var][lp_player], "HeaderExtendedTemplate", PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_playerMedalsMedalProgressPoints[auto1C77A4E2_var][lp_player], "HeaderExtendedTemplate", PlayerGroupAll());
    }
    return true;
}

int gf_StatsXPLabelXPosition (int lp_playerNo) {
    // Variable Declarations
    int lv_xPosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((gv_playerXP[lp_playerNo] / 100000) >= 1)) {
        lv_xPosition = 233;
    }
    else if (((gv_playerXP[lp_playerNo] / 10000) >= 1)) {
        lv_xPosition = 249;
    }
    else if (((gv_playerXP[lp_playerNo] / 1000) >= 1)) {
        lv_xPosition = 265;
    }
    else if (((gv_playerXP[lp_playerNo] / 100) >= 1)) {
        lv_xPosition = 281;
    }
    else if (((gv_playerXP[lp_playerNo] / 10) >= 1)) {
        lv_xPosition = 297;
    }
    else if (true) {
        lv_xPosition = 313;
    }
    return lv_xPosition;
}

void gf_StatsUpdateAvailableStatsText (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatAvailableLabel[lp_triggeringPlayer], (StringExternal("Param/Value/6ECF4D5C") + IntToText(gv_statsTotalStats[lp_triggeringPlayer])), PlayerGroupAll());
}

void gf_StatsUpdateAllStatsText (int lp_playerNo) {
    // Automatic Variable Declarations
    // Implementation
    gf_StatsUpdateStrengthText(lp_playerNo);
    gf_StatsUpdateIntelligenceText(lp_playerNo);
    gf_StatsUpdateAgilityText(lp_playerNo);
    gf_StatsUpdateEnduranceText(lp_playerNo);
    gf_StatsUpdatePerceptionText(lp_playerNo);
    gf_StatsUpdateAvailableStatsText(lp_playerNo);
    libNtve_gf_SetDialogItemText(gv_statsPlayerLivesLeft[lp_playerNo], IntToText(gv_playerLives[lp_playerNo]), PlayerGroupAll());
}

void gf_StatsStorePlayerStats (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerStats[lp_triggeringPlayer] = 100000;
    if ((gv_statsStrength1[lp_triggeringPlayer] > 9)) {
        gv_statsStrength1[lp_triggeringPlayer] = 9;
    }

    if ((gv_statsStrength1[lp_triggeringPlayer] < 0)) {
        gv_statsStrength1[lp_triggeringPlayer] = 0;
    }

    if ((gv_statsEndurance2[lp_triggeringPlayer] > 9)) {
        gv_statsEndurance2[lp_triggeringPlayer] = 9;
    }

    if ((gv_statsEndurance2[lp_triggeringPlayer] < 0)) {
        gv_statsEndurance2[lp_triggeringPlayer] = 0;
    }

    if ((gv_statsAgility3[lp_triggeringPlayer] > 9)) {
        gv_statsAgility3[lp_triggeringPlayer] = 9;
    }

    if ((gv_statsAgility3[lp_triggeringPlayer] < 0)) {
        gv_statsAgility3[lp_triggeringPlayer] = 0;
    }

    if ((gv_statsPerception4[lp_triggeringPlayer] > 9)) {
        gv_statsPerception4[lp_triggeringPlayer] = 9;
    }

    if ((gv_statsPerception4[lp_triggeringPlayer] < 0)) {
        gv_statsPerception4[lp_triggeringPlayer] = 0;
    }

    if ((gv_statsIntelligence5[lp_triggeringPlayer] > 9)) {
        gv_statsIntelligence5[lp_triggeringPlayer] = 9;
    }

    if ((gv_statsIntelligence5[lp_triggeringPlayer] < 0)) {
        gv_statsIntelligence5[lp_triggeringPlayer] = 0;
    }

    gv_playerStats[lp_triggeringPlayer] += (10000 * gv_statsStrength1[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (1000 * gv_statsEndurance2[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (100 * gv_statsAgility3[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (10 * gv_statsPerception4[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (1 * gv_statsIntelligence5[lp_triggeringPlayer]);
}

void gf_StatsLoadPlayerStats () {
    // Variable Declarations
    int lv_temp;

    // Automatic Variable Declarations
    const int auto4CAF7936_ae = 8;
    int auto4CAF7936_var;

    // Variable Initialization

    // Implementation
    auto4CAF7936_var = 1;
    for ( ; auto4CAF7936_var <= auto4CAF7936_ae; auto4CAF7936_var += 1 ) {
        if (((PlayerType(auto4CAF7936_var) == c_playerTypeUser) && (PlayerStatus(auto4CAF7936_var) == c_playerStatusActive))) {
            gv_playerStats[auto4CAF7936_var] = gv_playerBankData[6][auto4CAF7936_var];
            lv_temp = (gv_playerStats[auto4CAF7936_var] / 100000);
            gv_playerStats[auto4CAF7936_var] -= (lv_temp * 100000);
            gv_statsStrength1[auto4CAF7936_var] = (gv_playerStats[auto4CAF7936_var] / 10000);
            gv_playerStats[auto4CAF7936_var] -= (gv_statsStrength1[auto4CAF7936_var] * 10000);
            gv_statsEndurance2[auto4CAF7936_var] = (gv_playerStats[auto4CAF7936_var] / 1000);
            gv_playerStats[auto4CAF7936_var] -= (gv_statsEndurance2[auto4CAF7936_var] * 1000);
            gv_statsAgility3[auto4CAF7936_var] = (gv_playerStats[auto4CAF7936_var] / 100);
            gv_playerStats[auto4CAF7936_var] -= (gv_statsAgility3[auto4CAF7936_var] * 100);
            gv_statsPerception4[auto4CAF7936_var] = (gv_playerStats[auto4CAF7936_var] / 10);
            gv_playerStats[auto4CAF7936_var] -= (gv_statsPerception4[auto4CAF7936_var] * 10);
            gv_statsIntelligence5[auto4CAF7936_var] = (gv_playerStats[auto4CAF7936_var] / 1);
            gv_playerStats[auto4CAF7936_var] -= (gv_statsIntelligence5[auto4CAF7936_var] * 1);
        }

    }
}

void gf_StatsUpdateHeroImage (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(gv_statsPlayerHeroImage[lp_triggeringPlayer], gf_GetImageFileofHeroType(lp_triggeringPlayer), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_statsPlayerStatsStatsHeroImage[lp_triggeringPlayer], gf_GetImageFileofHeroType(lp_triggeringPlayer), PlayerGroupAll());
}

void gf_StatsSetBehaviors (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "StrengthStat", lp_triggeringPlayer, gv_statsStrength1[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "EnduranceStat", lp_triggeringPlayer, gv_statsEndurance2[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "AgilityStat", lp_triggeringPlayer, gv_statsAgility3[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "PerceptionStat", lp_triggeringPlayer, gv_statsPerception4[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "IntelligenceStat", lp_triggeringPlayer, gv_statsIntelligence5[lp_triggeringPlayer]);
}

bool gf_StatsStatsChecking (int lp_playerNo) {
    // Variable Declarations
    int lv_stats;
    int lv_totalStats;
    int lv_i;
    int lv_rank;
    int lv_statsGivenViaMedals;

    // Automatic Variable Declarations
    const int auto071D8928_ae = 19;
    int auto071D8928_var;

    // Variable Initialization
    lv_stats = gv_playerBankData[6][lp_playerNo];
    lv_rank = 1;

    // Implementation
    lv_i = (lv_stats / 100000);
    lv_stats -= (lv_i * 100000);
    lv_i = (lv_stats / 10000);
    lv_totalStats += lv_i;
    lv_stats -= (lv_i * 10000);
    lv_i = (lv_stats / 1000);
    lv_totalStats += lv_i;
    lv_stats -= (lv_i * 1000);
    lv_i = (lv_stats / 100);
    lv_totalStats += lv_i;
    lv_stats -= (lv_i * 100);
    lv_i = (lv_stats / 10);
    lv_totalStats += lv_i;
    lv_stats -= (lv_i * 10);
    lv_i = (lv_stats / 1);
    lv_totalStats += lv_i;
    if ((gv_playerBankData[11][lp_playerNo] >= 150)) {
        lv_statsGivenViaMedals += 1;
    }

    if ((gv_playerBankData[20][lp_playerNo] >= 150)) {
        lv_statsGivenViaMedals += 1;
    }

    auto071D8928_var = 12;
    for ( ; auto071D8928_var <= auto071D8928_ae; auto071D8928_var += 1 ) {
        if ((gv_playerBankData[auto071D8928_var][lp_playerNo] >= 30)) {
            lv_statsGivenViaMedals += 1;
        }

    }
    if ((gv_playerBankData[1][lp_playerNo] >= 350000)) {
        lv_rank = 17;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 300000)) {
        lv_rank = 16;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 250000)) {
        lv_rank = 15;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 200000)) {
        lv_rank = 14;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 150000)) {
        lv_rank = 13;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 100000)) {
        lv_rank = 12;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 80000)) {
        lv_rank = 11;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 60000)) {
        lv_rank = 10;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 40000)) {
        lv_rank = 9;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 30000)) {
        lv_rank = 8;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 20000)) {
        lv_rank = 7;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 10000)) {
        lv_rank = 6;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 5000)) {
        lv_rank = 5;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 2000)) {
        lv_rank = 4;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 500)) {
        lv_rank = 3;
    }
    else if ((gv_playerBankData[1][lp_playerNo] >= 100)) {
        lv_rank = 2;
    }
    else if ((gv_playerBankData[1][lp_playerNo] < 100)) {
        lv_rank = 1;
    }
    if ((lv_totalStats <= ((lv_rank * 2) + lv_statsGivenViaMedals))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_StatsAddStrength_Trigger = null;
int auto_gf_StatsAddStrength_lp_playerNo;

void gf_StatsAddStrength (int lp_playerNo) {
    auto_gf_StatsAddStrength_lp_playerNo = lp_playerNo;

    if (auto_gf_StatsAddStrength_Trigger == null) {
        auto_gf_StatsAddStrength_Trigger = TriggerCreate("auto_gf_StatsAddStrength_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsAddStrength_Trigger, false, false);
}

bool auto_gf_StatsAddStrength_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_StatsAddStrength_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    gv_statsStrength1[lp_playerNo] += 1;
    UnitBehaviorAddPlayer(gv_marineHero[lp_playerNo], "StrengthStat", lp_playerNo, 1);
    return true;
}

trigger auto_gf_StatsRemoveStrength_Trigger = null;
int auto_gf_StatsRemoveStrength_lp_triggeringPlayer;

void gf_StatsRemoveStrength (int lp_triggeringPlayer) {
    auto_gf_StatsRemoveStrength_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsRemoveStrength_Trigger == null) {
        auto_gf_StatsRemoveStrength_Trigger = TriggerCreate("auto_gf_StatsRemoveStrength_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsRemoveStrength_Trigger, false, false);
}

bool auto_gf_StatsRemoveStrength_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsRemoveStrength_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsStrength1[lp_triggeringPlayer] -= 1;
    UnitBehaviorRemovePlayer(gv_marineHero[EventPlayer()], "StrengthStat", lp_triggeringPlayer, 1);
    return true;
}

void gf_StatsUpdateStrengthText (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatLabel[1][lp_triggeringPlayer], IntToText(gv_statsStrength1[lp_triggeringPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_statsPlayerStatLabel[1][lp_triggeringPlayer], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_statsStrength1[lp_triggeringPlayer] < 9) && (gv_statsStrength1[lp_triggeringPlayer] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[1][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[1][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
    }
    else if ((gv_statsStrength1[lp_triggeringPlayer] == 9)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[1][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_statsStrength1[lp_triggeringPlayer] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[1][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
}

trigger auto_gf_StatsAddEndurance_Trigger = null;
int auto_gf_StatsAddEndurance_lp_triggeringPlayer;

void gf_StatsAddEndurance (int lp_triggeringPlayer) {
    auto_gf_StatsAddEndurance_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsAddEndurance_Trigger == null) {
        auto_gf_StatsAddEndurance_Trigger = TriggerCreate("auto_gf_StatsAddEndurance_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsAddEndurance_Trigger, false, false);
}

bool auto_gf_StatsAddEndurance_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsAddEndurance_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsEndurance2[lp_triggeringPlayer] += 1;
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "EnduranceStat", lp_triggeringPlayer, 1);
    return true;
}

trigger auto_gf_StatsRemoveEndurance_Trigger = null;
int auto_gf_StatsRemoveEndurance_lp_triggeringPlayer;

void gf_StatsRemoveEndurance (int lp_triggeringPlayer) {
    auto_gf_StatsRemoveEndurance_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsRemoveEndurance_Trigger == null) {
        auto_gf_StatsRemoveEndurance_Trigger = TriggerCreate("auto_gf_StatsRemoveEndurance_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsRemoveEndurance_Trigger, false, false);
}

bool auto_gf_StatsRemoveEndurance_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsRemoveEndurance_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsEndurance2[lp_triggeringPlayer] -= 1;
    UnitBehaviorRemovePlayer(gv_marineHero[EventPlayer()], "EnduranceStat", lp_triggeringPlayer, 1);
    return true;
}

void gf_StatsUpdateEnduranceText (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatLabel[2][lp_triggeringPlayer], IntToText(gv_statsEndurance2[lp_triggeringPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_statsPlayerStatLabel[2][lp_triggeringPlayer], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_statsEndurance2[lp_triggeringPlayer] < 9) && (gv_statsEndurance2[lp_triggeringPlayer] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[2][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[2][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
    }
    else if ((gv_statsEndurance2[lp_triggeringPlayer] == 9)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[2][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_statsEndurance2[lp_triggeringPlayer] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[2][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
}

trigger auto_gf_StatsAddAgility_Trigger = null;
int auto_gf_StatsAddAgility_lp_triggeringPlayer;

void gf_StatsAddAgility (int lp_triggeringPlayer) {
    auto_gf_StatsAddAgility_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsAddAgility_Trigger == null) {
        auto_gf_StatsAddAgility_Trigger = TriggerCreate("auto_gf_StatsAddAgility_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsAddAgility_Trigger, false, false);
}

bool auto_gf_StatsAddAgility_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsAddAgility_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsAgility3[lp_triggeringPlayer] += 1;
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "AgilityStat", lp_triggeringPlayer, 1);
    return true;
}

trigger auto_gf_StatsRemoveAgility_Trigger = null;
int auto_gf_StatsRemoveAgility_lp_triggeringPlayer;

void gf_StatsRemoveAgility (int lp_triggeringPlayer) {
    auto_gf_StatsRemoveAgility_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsRemoveAgility_Trigger == null) {
        auto_gf_StatsRemoveAgility_Trigger = TriggerCreate("auto_gf_StatsRemoveAgility_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsRemoveAgility_Trigger, false, false);
}

bool auto_gf_StatsRemoveAgility_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsRemoveAgility_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsAgility3[lp_triggeringPlayer] -= 1;
    UnitBehaviorRemovePlayer(gv_marineHero[EventPlayer()], "AgilityStat", lp_triggeringPlayer, 1);
    return true;
}

void gf_StatsUpdateAgilityText (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatLabel[3][lp_triggeringPlayer], IntToText(gv_statsAgility3[lp_triggeringPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_statsPlayerStatLabel[3][lp_triggeringPlayer], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_statsAgility3[lp_triggeringPlayer] < 9) && (gv_statsAgility3[lp_triggeringPlayer] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[3][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[3][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
    }
    else if ((gv_statsAgility3[lp_triggeringPlayer] == 9)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[3][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_statsAgility3[lp_triggeringPlayer] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[3][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
}

trigger auto_gf_StatsAddPerception_Trigger = null;
int auto_gf_StatsAddPerception_lp_triggeringPlayer;

void gf_StatsAddPerception (int lp_triggeringPlayer) {
    auto_gf_StatsAddPerception_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsAddPerception_Trigger == null) {
        auto_gf_StatsAddPerception_Trigger = TriggerCreate("auto_gf_StatsAddPerception_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsAddPerception_Trigger, false, false);
}

bool auto_gf_StatsAddPerception_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsAddPerception_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsPerception4[lp_triggeringPlayer] += 1;
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "PerceptionStat", lp_triggeringPlayer, 1);
    return true;
}

trigger auto_gf_StatsRemovePerception_Trigger = null;
int auto_gf_StatsRemovePerception_lp_triggeringPlayer;

void gf_StatsRemovePerception (int lp_triggeringPlayer) {
    auto_gf_StatsRemovePerception_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsRemovePerception_Trigger == null) {
        auto_gf_StatsRemovePerception_Trigger = TriggerCreate("auto_gf_StatsRemovePerception_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsRemovePerception_Trigger, false, false);
}

bool auto_gf_StatsRemovePerception_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsRemovePerception_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsPerception4[lp_triggeringPlayer] -= 1;
    UnitBehaviorRemovePlayer(gv_marineHero[EventPlayer()], "PerceptionStat", lp_triggeringPlayer, 1);
    return true;
}

void gf_StatsUpdatePerceptionText (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatLabel[4][lp_triggeringPlayer], IntToText(gv_statsPerception4[lp_triggeringPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_statsPlayerStatLabel[4][lp_triggeringPlayer], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_statsPerception4[lp_triggeringPlayer] < 9) && (gv_statsPerception4[lp_triggeringPlayer] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[4][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[4][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
    }
    else if ((gv_statsPerception4[lp_triggeringPlayer] == 9)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[4][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_statsPerception4[lp_triggeringPlayer] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[4][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
}

trigger auto_gf_StatsAddIntelligence_Trigger = null;
int auto_gf_StatsAddIntelligence_lp_triggeringPlayer;

void gf_StatsAddIntelligence (int lp_triggeringPlayer) {
    auto_gf_StatsAddIntelligence_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsAddIntelligence_Trigger == null) {
        auto_gf_StatsAddIntelligence_Trigger = TriggerCreate("auto_gf_StatsAddIntelligence_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsAddIntelligence_Trigger, false, false);
}

bool auto_gf_StatsAddIntelligence_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsAddIntelligence_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsIntelligence5[lp_triggeringPlayer] += 1;
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "IntelligenceStat", lp_triggeringPlayer, 1);
    return true;
}

trigger auto_gf_StatsRemoveIntelligence_Trigger = null;
int auto_gf_StatsRemoveIntelligence_lp_triggeringPlayer;

void gf_StatsRemoveIntelligence (int lp_triggeringPlayer) {
    auto_gf_StatsRemoveIntelligence_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_StatsRemoveIntelligence_Trigger == null) {
        auto_gf_StatsRemoveIntelligence_Trigger = TriggerCreate("auto_gf_StatsRemoveIntelligence_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsRemoveIntelligence_Trigger, false, false);
}

bool auto_gf_StatsRemoveIntelligence_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_StatsRemoveIntelligence_lp_triggeringPlayer;

    // Automatic Variable Declarations
    // Implementation
    gv_statsIntelligence5[lp_triggeringPlayer] -= 1;
    UnitBehaviorRemovePlayer(gv_marineHero[EventPlayer()], "IntelligenceStat", lp_triggeringPlayer, 1);
    return true;
}

void gf_StatsUpdateIntelligenceText (int lp_triggeringPlayer) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatLabel[5][lp_triggeringPlayer], IntToText(gv_statsIntelligence5[lp_triggeringPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_statsPlayerStatLabel[5][lp_triggeringPlayer], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_statsIntelligence5[lp_triggeringPlayer] < 9) && (gv_statsIntelligence5[lp_triggeringPlayer] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[5][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[5][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
    }
    else if ((gv_statsIntelligence5[lp_triggeringPlayer] == 9)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[5][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_statsIntelligence5[lp_triggeringPlayer] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[5][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
}

void gf_WModLoadPlayerWeaponModPoints () {
    // Variable Declarations
    int lv_temp;

    // Automatic Variable Declarations
    const int auto59BB5A65_ae = 8;
    int auto59BB5A65_var;

    // Variable Initialization

    // Implementation
    auto59BB5A65_var = 1;
    for ( ; auto59BB5A65_var <= auto59BB5A65_ae; auto59BB5A65_var += 1 ) {
        if (((PlayerType(auto59BB5A65_var) == c_playerTypeUser) && (PlayerStatus(auto59BB5A65_var) == c_playerStatusActive))) {
            gv_playerWeaponsMod1[auto59BB5A65_var] = gv_playerBankData[9][auto59BB5A65_var];
            lv_temp = (gv_playerWeaponsMod1[auto59BB5A65_var] / 100000);
            gv_playerWeaponsMod1[auto59BB5A65_var] -= (lv_temp * 100000);
            gv_wModRange1[auto59BB5A65_var] = (gv_playerWeaponsMod1[auto59BB5A65_var] / 10000);
            gv_playerWeaponsMod1[auto59BB5A65_var] -= (gv_wModRange1[auto59BB5A65_var] * 10000);
            gv_wModDamage2[auto59BB5A65_var] = (gv_playerWeaponsMod1[auto59BB5A65_var] / 1000);
            gv_playerWeaponsMod1[auto59BB5A65_var] -= (gv_wModDamage2[auto59BB5A65_var] * 1000);
            gv_wModReload3[auto59BB5A65_var] = (gv_playerWeaponsMod1[auto59BB5A65_var] / 100);
            gv_playerWeaponsMod1[auto59BB5A65_var] -= (gv_wModReload3[auto59BB5A65_var] * 100);
            gv_wModSwitch4[auto59BB5A65_var] = (gv_playerWeaponsMod1[auto59BB5A65_var] / 10);
            gv_playerWeaponsMod1[auto59BB5A65_var] -= (gv_wModSwitch4[auto59BB5A65_var] * 10);
            gv_wModSpeed5[auto59BB5A65_var] = (gv_playerWeaponsMod1[auto59BB5A65_var] / 1);
            gv_playerWeaponsMod1[auto59BB5A65_var] -= (gv_wModSpeed5[auto59BB5A65_var] * 1);
            gv_playerWeaponsMod2[auto59BB5A65_var] = gv_playerBankData[10][auto59BB5A65_var];
            lv_temp = (gv_playerWeaponsMod2[auto59BB5A65_var] / 100);
            gv_playerWeaponsMod2[auto59BB5A65_var] -= (lv_temp * 100);
            gv_wModSplash7[auto59BB5A65_var] = (gv_playerWeaponsMod2[auto59BB5A65_var] / 10);
            gv_playerWeaponsMod2[auto59BB5A65_var] -= (gv_wModSplash7[auto59BB5A65_var] * 10);
            gv_wModWeight6[auto59BB5A65_var] = (gv_playerWeaponsMod2[auto59BB5A65_var] / 1);
            gv_playerWeaponsMod2[auto59BB5A65_var] -= (gv_wModWeight6[auto59BB5A65_var] * 1);
            gv_playerWeaponsMod1[auto59BB5A65_var] = gv_playerBankData[9][auto59BB5A65_var];
            gv_playerWeaponsMod2[auto59BB5A65_var] = gv_playerBankData[10][auto59BB5A65_var];
            gf_WModInitializeWeaponMods(auto59BB5A65_var);
        }

    }
}

void gf_WModStorePlayerWeaponModPoints (int lp_playerNo) {
    // Automatic Variable Declarations
    // Implementation
    gv_playerWeaponsMod1[lp_playerNo] = 0;
    gv_playerWeaponsMod2[lp_playerNo] = (ModI(gv_playerWeaponsMod2[lp_playerNo], 10000) - ModI(gv_playerWeaponsMod2[lp_playerNo], 100));
    if ((gv_wModRange1[lp_playerNo] > 9)) {
        gv_wModRange1[lp_playerNo] = 9;
    }

    if ((gv_wModRange1[lp_playerNo] < 1)) {
        gv_wModRange1[lp_playerNo] = 1;
    }

    if ((gv_wModDamage2[lp_playerNo] > 9)) {
        gv_wModDamage2[lp_playerNo] = 9;
    }

    if ((gv_wModDamage2[lp_playerNo] < 1)) {
        gv_wModDamage2[lp_playerNo] = 1;
    }

    if ((gv_wModReload3[lp_playerNo] > 9)) {
        gv_wModReload3[lp_playerNo] = 9;
    }

    if ((gv_wModReload3[lp_playerNo] < 1)) {
        gv_wModReload3[lp_playerNo] = 1;
    }

    if ((gv_wModSwitch4[lp_playerNo] > 9)) {
        gv_wModSwitch4[lp_playerNo] = 9;
    }

    if ((gv_wModSwitch4[lp_playerNo] < 1)) {
        gv_wModSwitch4[lp_playerNo] = 1;
    }

    if ((gv_wModSpeed5[lp_playerNo] > 9)) {
        gv_wModSpeed5[lp_playerNo] = 9;
    }

    if ((gv_wModSpeed5[lp_playerNo] < 1)) {
        gv_wModSpeed5[lp_playerNo] = 1;
    }

    if ((gv_wModWeight6[lp_playerNo] > 9)) {
        gv_wModWeight6[lp_playerNo] = 9;
    }

    if ((gv_wModWeight6[lp_playerNo] < 1)) {
        gv_wModWeight6[lp_playerNo] = 1;
    }

    if ((gv_wModSplash7[lp_playerNo] > 9)) {
        gv_wModSplash7[lp_playerNo] = 9;
    }

    if ((gv_wModSplash7[lp_playerNo] < 1)) {
        gv_wModSplash7[lp_playerNo] = 1;
    }

    gv_playerWeaponsMod1[lp_playerNo] += (10000 * gv_wModRange1[lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (1000 * gv_wModDamage2[lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (100 * gv_wModReload3[lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (10 * gv_wModSwitch4[lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (1 * gv_wModSpeed5[lp_playerNo]);
    gv_playerWeaponsMod2[lp_playerNo] += (10 * gv_wModSplash7[lp_playerNo]);
    gv_playerWeaponsMod2[lp_playerNo] += (1 * gv_wModWeight6[lp_playerNo]);
    gv_playerWeaponsMod2[lp_playerNo] += 10000;
}

void gf_WModModPointRecalculate (int lp_playerNo) {
    // Variable Declarations
    int[7] lv_wModPoints;
    int lv_iLocal;
    int lv_jLocal;

    // Automatic Variable Declarations
    const int auto29FF236F_ae = 6;
    const int auto29FF236F_ai = 1;

    // Variable Initialization

    // Implementation
    lv_wModPoints[0] = gv_wModRange1[lp_playerNo];
    lv_wModPoints[1] = gv_wModDamage2[lp_playerNo];
    lv_wModPoints[2] = gv_wModReload3[lp_playerNo];
    lv_wModPoints[3] = gv_wModSwitch4[lp_playerNo];
    lv_wModPoints[4] = gv_wModSpeed5[lp_playerNo];
    lv_wModPoints[5] = gv_wModWeight6[lp_playerNo];
    lv_wModPoints[6] = gv_wModSplash7[lp_playerNo];
    gv_wModTotalPointsPositive[lp_playerNo] = 0;
    gv_wModTotalPointsNegative[lp_playerNo] = 0;
    lv_jLocal = 0;
    for ( ; ( (auto29FF236F_ai >= 0 && lv_jLocal <= auto29FF236F_ae) || (auto29FF236F_ai < 0 && lv_jLocal >= auto29FF236F_ae) ) ; lv_jLocal += auto29FF236F_ai ) {
        lv_iLocal = (lv_wModPoints[lv_jLocal] - 5);
        if ((lv_iLocal > 0)) {
            gv_wModTotalPointsPositive[lp_playerNo] += lv_iLocal;
        }
        else if ((lv_iLocal < 0)) {
            gv_wModTotalPointsNegative[lp_playerNo] -= lv_iLocal;
        }
    }
    gv_wModTotalPointsLeft[lp_playerNo] = (gf_WModGetMaxModPoints(lp_playerNo) - gv_wModTotalPointsNegative[lp_playerNo]);
}

int gf_WModGetMaxModPoints (int lp_playerNo) {
    // Variable Declarations
    int lv_modPoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_modPoints = (ModI(gv_playerWeaponsMod2[lp_playerNo], 10000) / 100);

    // Implementation
    return lv_modPoints;
}

void gf_WModUpdateAvailableWModPointsText (int lp_playerNo) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsAvailableLabel[lp_playerNo], (StringExternal("Param/Value/970215F7") + IntToText(gv_wModTotalPointsLeft[lp_playerNo])), PlayerGroupAll());
}

void gf_WModUpdateAllWeaponsModText (int lp_playerNo) {
    // Automatic Variable Declarations
    // Implementation
    gf_WModUpdateWeaponsRangeText(lp_playerNo);
    gf_WModUpdateWeaponsDamageText(lp_playerNo);
    gf_WModUpdateWeaponsReloadText(lp_playerNo);
    gf_WModUpdateWeaponsSwitchText(lp_playerNo);
    gf_WModUpdateWeaponsSpeedText(lp_playerNo);
    gf_WModUpdateWeaponsSplashText(lp_playerNo);
    gf_WModUpdateWeaponsWeightText(lp_playerNo);
    gf_WModUpdateAvailableWModPointsText(lp_playerNo);
}

trigger auto_gf_WModInitializeWeaponMods_Trigger = null;
int auto_gf_WModInitializeWeaponMods_lp_playerNo;

void gf_WModInitializeWeaponMods (int lp_playerNo) {
    auto_gf_WModInitializeWeaponMods_lp_playerNo = lp_playerNo;

    if (auto_gf_WModInitializeWeaponMods_Trigger == null) {
        auto_gf_WModInitializeWeaponMods_Trigger = TriggerCreate("auto_gf_WModInitializeWeaponMods_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModInitializeWeaponMods_Trigger, false, false);
}

bool auto_gf_WModInitializeWeaponMods_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModInitializeWeaponMods_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    gf_WModSetRange(gv_wModRange1[lp_playerNo], lp_playerNo);
    gf_WModSetDamage(gv_wModDamage2[lp_playerNo], lp_playerNo);
    gf_WModSetReloadTime(gv_wModReload3[lp_playerNo], lp_playerNo);
    gf_WModSetSwitchTime(gv_wModSwitch4[lp_playerNo], lp_playerNo);
    gf_WModSetAttackSpeed(gv_wModSpeed5[lp_playerNo], lp_playerNo);
    gf_WModSetWeightPoint(gv_wModWeight6[lp_playerNo], lp_playerNo);
    gf_WeaponsModSetSplashRadius(gv_wModSplash7[lp_playerNo], lp_playerNo);
    return true;
}

trigger auto_gf_WModSetRange_Trigger = null;
int auto_gf_WModSetRange_lp_modLevel;
int auto_gf_WModSetRange_lp_modOwner;

void gf_WModSetRange (int lp_modLevel, int lp_modOwner) {
    auto_gf_WModSetRange_lp_modLevel = lp_modLevel;
    auto_gf_WModSetRange_lp_modOwner = lp_modOwner;

    if (auto_gf_WModSetRange_Trigger == null) {
        auto_gf_WModSetRange_Trigger = TriggerCreate("auto_gf_WModSetRange_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModSetRange_Trigger, false, false);
}

bool auto_gf_WModSetRange_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_WModSetRange_lp_modLevel;
    int lp_modOwner = auto_gf_WModSetRange_lp_modOwner;

    int init_i;

    // Variable Declarations
    fixed lv_range;
    string[12] lv_dataWeaponName;
    fixed lv_rangePercentagePerLevel;

    // Automatic Variable Declarations
    const int auto71526214_ae = 11;
    int auto71526214_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 11; init_i += 1) {
        lv_dataWeaponName[init_i] = "";
    }
    lv_rangePercentagePerLevel = 0.05;

    // Implementation
    if (((lp_modLevel >= 0) && (lp_modLevel <= 10)) && ((lp_modOwner >= 1) && (lp_modOwner <= 8))) {
        lv_dataWeaponName[0] = "P38ScytheGuassPistol";
        lv_dataWeaponName[1] = "GuassRifle";
        lv_dataWeaponName[2] = "Chaingun";
        lv_dataWeaponName[3] = "SniperRifle";
        lv_dataWeaponName[4] = "Shotgun";
        lv_dataWeaponName[5] = "HyperionAir";
        lv_dataWeaponName[6] = "BarrettM112";
        lv_dataWeaponName[7] = "MP9A2SubMachineGun";
        lv_dataWeaponName[8] = "M5PulseRifle";
        lv_dataWeaponName[9] = "UA420AssaultRifle";
        lv_dataWeaponName[10] = "StingerMK3";
        lv_dataWeaponName[11] = "Flamethrower";
        auto71526214_var = 0;
        for ( ; auto71526214_var <= auto71526214_ae; auto71526214_var += 1 ) {
            lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_dataWeaponName[auto71526214_var], "Range", 0));
            lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
            CatalogFieldValueSet(c_gameCatalogWeapon, lv_dataWeaponName[auto71526214_var], "Range", lp_modOwner, FixedToString(lv_range, c_fixedPrecisionAny));
        }
        lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "PullGravityGun", "Range[0]", 0));
        lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogAbil, "PullGravityGun", "Range[0]", lp_modOwner, FixedToString(lv_range, c_fixedPrecisionAny));
        lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "ThrowGravityGun", "Range[0]", 0));
        lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogAbil, "ThrowGravityGun", "Range[0]", lp_modOwner, FixedToString(lv_range, c_fixedPrecisionAny));
        if ((UnitIsAlive(gv_marineHero[lp_modOwner]) == true) && (UnitGetType(gv_marineHero[lp_modOwner]) == "Flamethrower3")) {
            if ((gv_talentLevel[1][lp_modOwner] == 0)) {
                lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "Flamethrower", "Range", 0));
            }
            else if ((gv_talentLevel[1][lp_modOwner] == 1)) {
                lv_range = 5.65;
            }
            else if ((gv_talentLevel[1][lp_modOwner] == 2)) {
                lv_range = 6.65;
            }
            else if ((gv_talentLevel[1][lp_modOwner] == 3)) {
                lv_range = 7.65;
            }
        }
        else {
            lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "Flamethrower", "Range", 0));
        }
        lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogWeapon, "Flamethrower", "Range", lp_modOwner, FixedToString(lv_range, c_fixedPrecisionAny));
        if ((UnitIsAlive(gv_marineHero[lp_modOwner]) == true) && (UnitGetType(gv_marineHero[lp_modOwner]) == "Pathfinder")) {
            if ((gv_talentLevel[3][lp_modOwner] == 0) && (gv_talentLevel[5][lp_modOwner] == 0)) {
                lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", 0));
            }
            else if ((((gv_talentLevel[3][lp_modOwner] == 1) && (gv_talentLevel[5][lp_modOwner] == 0)) || ((gv_talentLevel[3][lp_modOwner] == 0) && (gv_talentLevel[5][lp_modOwner] == 1)))) {
                lv_range = 9.0;
            }
            else if ((((gv_talentLevel[3][lp_modOwner] == 2) && (gv_talentLevel[5][lp_modOwner] == 0)) || ((gv_talentLevel[3][lp_modOwner] == 1) && (gv_talentLevel[5][lp_modOwner] == 1)))) {
                lv_range = 12.0;
            }
            else if ((gv_talentLevel[3][lp_modOwner] == 2) && (gv_talentLevel[5][lp_modOwner] == 1)) {
                lv_range = 15.0;
            }
        }
        else {
            lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", 0));
        }
        lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_modOwner, FixedToString(lv_range, c_fixedPrecisionAny));
    }

    return true;
}

trigger auto_gf_WModUpdateWeaponsRangeText_Trigger = null;
int auto_gf_WModUpdateWeaponsRangeText_lp_playerNo;

void gf_WModUpdateWeaponsRangeText (int lp_playerNo) {
    auto_gf_WModUpdateWeaponsRangeText_lp_playerNo = lp_playerNo;

    if (auto_gf_WModUpdateWeaponsRangeText_Trigger == null) {
        auto_gf_WModUpdateWeaponsRangeText_Trigger = TriggerCreate("auto_gf_WModUpdateWeaponsRangeText_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModUpdateWeaponsRangeText_Trigger, false, false);
}

bool auto_gf_WModUpdateWeaponsRangeText_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModUpdateWeaponsRangeText_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[1][lp_playerNo], IntToText((gv_wModRange1[lp_playerNo] - 5)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsLabels[1][lp_playerNo], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_wModRange1[lp_playerNo] < 10) && (gv_wModRange1[lp_playerNo] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[1][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[1][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
    }
    else if ((gv_wModRange1[lp_playerNo] == 10)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[1][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_wModRange1[lp_playerNo] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[1][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_WModSetDamage_Trigger = null;
int auto_gf_WModSetDamage_lp_modLevel;
int auto_gf_WModSetDamage_lp_modOwner;

void gf_WModSetDamage (int lp_modLevel, int lp_modOwner) {
    auto_gf_WModSetDamage_lp_modLevel = lp_modLevel;
    auto_gf_WModSetDamage_lp_modOwner = lp_modOwner;

    if (auto_gf_WModSetDamage_Trigger == null) {
        auto_gf_WModSetDamage_Trigger = TriggerCreate("auto_gf_WModSetDamage_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModSetDamage_Trigger, false, false);
}

bool auto_gf_WModSetDamage_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_WModSetDamage_lp_modLevel;
    int lp_modOwner = auto_gf_WModSetDamage_lp_modOwner;

    int init_i;

    // Variable Declarations
    fixed lv_damage;
    string[16] lv_dataDamageName;
    fixed lv_damagePercentagePerLevel;
    int lv_iLocal;
    string lv_attributeString;

    // Automatic Variable Declarations
    const int auto873916D6_ae = 15;
    int auto873916D6_var;
    const int autoADBAFCF5_ae = 9;
    const int autoADBAFCF5_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_dataDamageName[init_i] = "";
    }
    lv_damagePercentagePerLevel = 0.05;
    lv_attributeString = "";

    // Implementation
    if (((lp_modLevel >= 0) && (lp_modLevel <= 10)) && ((lp_modOwner >= 1) && (lp_modOwner <= 8))) {
        lv_dataDamageName[0] = "P38ScytheGuassPistol";
        lv_dataDamageName[1] = "GuassRifle";
        lv_dataDamageName[2] = "XM814HeavyMachineGun";
        lv_dataDamageName[3] = "C10CanisterRifle";
        lv_dataDamageName[4] = "Shotgun";
        lv_dataDamageName[5] = "LaserRifleDamage";
        lv_dataDamageName[6] = "BarrettM112";
        lv_dataDamageName[7] = "MP9A2SubMachineGun";
        lv_dataDamageName[8] = "M5PulseRifle";
        lv_dataDamageName[9] = "UA420AssaultRifle";
        lv_dataDamageName[10] = "StingerMK3DamageAllies";
        lv_dataDamageName[11] = "StingerMK3Damage";
        lv_dataDamageName[12] = "GravityGunThrowDamageAllies";
        lv_dataDamageName[13] = "GravityGunThrowDamage";
        lv_dataDamageName[14] = "Crowbar2";
        lv_dataDamageName[15] = "InfernalFlameThrower";
        auto873916D6_var = 0;
        for ( ; auto873916D6_var <= auto873916D6_ae; auto873916D6_var += 1 ) {
            lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName[auto873916D6_var], "Amount", 0));
            lv_damage *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_damagePercentagePerLevel));
            CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName[auto873916D6_var], "Amount", lp_modOwner, FixedToString(lv_damage, c_fixedPrecisionAny));
            lv_iLocal = 0;
            for ( ; ( (autoADBAFCF5_ai >= 0 && lv_iLocal <= autoADBAFCF5_ae) || (autoADBAFCF5_ai < 0 && lv_iLocal >= autoADBAFCF5_ae) ) ; lv_iLocal += autoADBAFCF5_ai ) {
                lv_attributeString = ("AttributeBonus[" + (IntToString(lv_iLocal) + "]"));
                lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName[auto873916D6_var], lv_attributeString, 0));
                lv_damage *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_damagePercentagePerLevel));
                CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName[auto873916D6_var], lv_attributeString, lp_modOwner, FixedToString(lv_damage, c_fixedPrecisionAny));
            }
        }
        if ((UnitIsAlive(gv_marineHero[lp_modOwner]) == true) && (UnitGetType(gv_marineHero[lp_modOwner]) == "Flamethrower3")) {
            if ((gv_talentLevel[1][lp_modOwner] == 0)) {
                lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "InfernalFlameThrower", "Amount", 0));
            }
            else if ((gv_talentLevel[1][lp_modOwner] == 1)) {
                lv_damage = 8.8;
            }
            else if ((gv_talentLevel[1][lp_modOwner] == 2)) {
                lv_damage = 9.6;
            }
            else if ((gv_talentLevel[1][lp_modOwner] == 3)) {
                lv_damage = 10.4;
            }
        }
        else {
            lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "InfernalFlameThrower", "Amount", 0));
        }
        lv_damage *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_damagePercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogEffect, "InfernalFlameThrower", "Amount", lp_modOwner, FixedToString(lv_damage, c_fixedPrecisionAny));
        if ((UnitIsAlive(gv_marineHero[lp_modOwner]) == true) && (UnitGetType(gv_marineHero[lp_modOwner]) == "Pathfinder")) {
            if ((gv_talentLevel[3][lp_modOwner] == 0) && (gv_talentLevel[5][lp_modOwner] == 0)) {
                lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", 0));
            }
            else if ((((gv_talentLevel[3][lp_modOwner] == 1) && (gv_talentLevel[5][lp_modOwner] == 0)) || ((gv_talentLevel[3][lp_modOwner] == 0) && (gv_talentLevel[5][lp_modOwner] == 1)))) {
                lv_damage = 46.0;
            }
            else if ((((gv_talentLevel[3][lp_modOwner] == 2) && (gv_talentLevel[5][lp_modOwner] == 0)) || ((gv_talentLevel[3][lp_modOwner] == 1) && (gv_talentLevel[5][lp_modOwner] == 1)))) {
                lv_damage = 52.0;
            }
            else if ((gv_talentLevel[3][lp_modOwner] == 2) && (gv_talentLevel[5][lp_modOwner] == 1)) {
                lv_damage = 58.0;
            }
        }
        else {
            lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", 0));
        }
        lv_damage *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_damagePercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_modOwner, FixedToString(lv_damage, c_fixedPrecisionAny));
    }

    return true;
}

trigger auto_gf_WModUpdateWeaponsDamageText_Trigger = null;
int auto_gf_WModUpdateWeaponsDamageText_lp_playerNo;

void gf_WModUpdateWeaponsDamageText (int lp_playerNo) {
    auto_gf_WModUpdateWeaponsDamageText_lp_playerNo = lp_playerNo;

    if (auto_gf_WModUpdateWeaponsDamageText_Trigger == null) {
        auto_gf_WModUpdateWeaponsDamageText_Trigger = TriggerCreate("auto_gf_WModUpdateWeaponsDamageText_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModUpdateWeaponsDamageText_Trigger, false, false);
}

bool auto_gf_WModUpdateWeaponsDamageText_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModUpdateWeaponsDamageText_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[2][lp_playerNo], IntToText((gv_wModDamage2[lp_playerNo] - 5)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsLabels[2][lp_playerNo], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_wModDamage2[lp_playerNo] < 10) && (gv_wModDamage2[lp_playerNo] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[2][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[2][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
    }
    else if ((gv_wModDamage2[lp_playerNo] == 10)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[2][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_wModDamage2[lp_playerNo] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[2][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_WModSetReloadTime_Trigger = null;
int auto_gf_WModSetReloadTime_lp_modLevel;
int auto_gf_WModSetReloadTime_lp_modOwner;

void gf_WModSetReloadTime (int lp_modLevel, int lp_modOwner) {
    auto_gf_WModSetReloadTime_lp_modLevel = lp_modLevel;
    auto_gf_WModSetReloadTime_lp_modOwner = lp_modOwner;

    if (auto_gf_WModSetReloadTime_Trigger == null) {
        auto_gf_WModSetReloadTime_Trigger = TriggerCreate("auto_gf_WModSetReloadTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModSetReloadTime_Trigger, false, false);
}

bool auto_gf_WModSetReloadTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_WModSetReloadTime_lp_modLevel;
    int lp_modOwner = auto_gf_WModSetReloadTime_lp_modOwner;

    // Variable Declarations
    fixed lv_reloadPercentagePerLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reloadPercentagePerLevel = 0.05;

    // Implementation
    if (((lp_modLevel >= 0) && (lp_modLevel <= 10)) && ((lp_modOwner >= 1) && (lp_modOwner <= 8))) {
        gv_baseMarineReloadMultiplier[lp_modOwner] = (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_reloadPercentagePerLevel));
    }

    return true;
}

trigger auto_gf_WModUpdateWeaponsReloadText_Trigger = null;
int auto_gf_WModUpdateWeaponsReloadText_lp_playerNo;

void gf_WModUpdateWeaponsReloadText (int lp_playerNo) {
    auto_gf_WModUpdateWeaponsReloadText_lp_playerNo = lp_playerNo;

    if (auto_gf_WModUpdateWeaponsReloadText_Trigger == null) {
        auto_gf_WModUpdateWeaponsReloadText_Trigger = TriggerCreate("auto_gf_WModUpdateWeaponsReloadText_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModUpdateWeaponsReloadText_Trigger, false, false);
}

bool auto_gf_WModUpdateWeaponsReloadText_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModUpdateWeaponsReloadText_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[3][lp_playerNo], IntToText((gv_wModReload3[lp_playerNo] - 5)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsLabels[3][lp_playerNo], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_wModReload3[lp_playerNo] < 10) && (gv_wModReload3[lp_playerNo] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[3][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[3][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
    }
    else if ((gv_wModReload3[lp_playerNo] == 10)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[3][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_wModReload3[lp_playerNo] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[3][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_WModSetSwitchTime_Trigger = null;
int auto_gf_WModSetSwitchTime_lp_modLevel;
int auto_gf_WModSetSwitchTime_lp_modOwner;

void gf_WModSetSwitchTime (int lp_modLevel, int lp_modOwner) {
    auto_gf_WModSetSwitchTime_lp_modLevel = lp_modLevel;
    auto_gf_WModSetSwitchTime_lp_modOwner = lp_modOwner;

    if (auto_gf_WModSetSwitchTime_Trigger == null) {
        auto_gf_WModSetSwitchTime_Trigger = TriggerCreate("auto_gf_WModSetSwitchTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModSetSwitchTime_Trigger, false, false);
}

bool auto_gf_WModSetSwitchTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_WModSetSwitchTime_lp_modLevel;
    int lp_modOwner = auto_gf_WModSetSwitchTime_lp_modOwner;

    // Variable Declarations
    fixed lv_switchPercentagePerLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_switchPercentagePerLevel = 0.05;

    // Implementation
    if (((lp_modLevel >= 0) && (lp_modLevel <= 10)) && ((lp_modOwner >= 1) && (lp_modOwner <= 8))) {
        gv_baseMarineSwitchingMultiplier[lp_modOwner] = (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_switchPercentagePerLevel));
    }

    return true;
}

trigger auto_gf_WModUpdateWeaponsSwitchText_Trigger = null;
int auto_gf_WModUpdateWeaponsSwitchText_lp_playerNo;

void gf_WModUpdateWeaponsSwitchText (int lp_playerNo) {
    auto_gf_WModUpdateWeaponsSwitchText_lp_playerNo = lp_playerNo;

    if (auto_gf_WModUpdateWeaponsSwitchText_Trigger == null) {
        auto_gf_WModUpdateWeaponsSwitchText_Trigger = TriggerCreate("auto_gf_WModUpdateWeaponsSwitchText_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModUpdateWeaponsSwitchText_Trigger, false, false);
}

bool auto_gf_WModUpdateWeaponsSwitchText_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModUpdateWeaponsSwitchText_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[4][lp_playerNo], IntToText((gv_wModSwitch4[lp_playerNo] - 5)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsLabels[4][lp_playerNo], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_wModSwitch4[lp_playerNo] < 10) && (gv_wModSwitch4[lp_playerNo] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[4][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[4][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
    }
    else if ((gv_wModSwitch4[lp_playerNo] == 10)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[4][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_wModSwitch4[lp_playerNo] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[4][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_WModSetAttackSpeed_Trigger = null;
int auto_gf_WModSetAttackSpeed_lp_modLevel;
int auto_gf_WModSetAttackSpeed_lp_modOwner;

void gf_WModSetAttackSpeed (int lp_modLevel, int lp_modOwner) {
    auto_gf_WModSetAttackSpeed_lp_modLevel = lp_modLevel;
    auto_gf_WModSetAttackSpeed_lp_modOwner = lp_modOwner;

    if (auto_gf_WModSetAttackSpeed_Trigger == null) {
        auto_gf_WModSetAttackSpeed_Trigger = TriggerCreate("auto_gf_WModSetAttackSpeed_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModSetAttackSpeed_Trigger, false, false);
}

bool auto_gf_WModSetAttackSpeed_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_WModSetAttackSpeed_lp_modLevel;
    int lp_modOwner = auto_gf_WModSetAttackSpeed_lp_modOwner;

    int init_i;

    // Variable Declarations
    fixed lv_period;
    string[15] lv_dataWeaponName;
    fixed lv_speedPercentagePerLevel;

    // Automatic Variable Declarations
    const int autoF60E587E_ae = 13;
    int autoF60E587E_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 14; init_i += 1) {
        lv_dataWeaponName[init_i] = "";
    }
    lv_speedPercentagePerLevel = 0.05;

    // Implementation
    if (((lp_modLevel >= 0) && (lp_modLevel <= 10)) && ((lp_modOwner >= 1) && (lp_modOwner <= 8))) {
        lv_dataWeaponName[0] = "P38ScytheGuassPistol";
        lv_dataWeaponName[1] = "GuassRifle";
        lv_dataWeaponName[2] = "Chaingun";
        lv_dataWeaponName[3] = "SniperRifle";
        lv_dataWeaponName[4] = "Shotgun";
        lv_dataWeaponName[5] = "HyperionAir";
        lv_dataWeaponName[6] = "BarrettM112";
        lv_dataWeaponName[7] = "MP9A2SubMachineGun";
        lv_dataWeaponName[8] = "M5PulseRifle";
        lv_dataWeaponName[9] = "UA420AssaultRifle";
        lv_dataWeaponName[10] = "StingerMK3";
        lv_dataWeaponName[11] = "Flamethrower";
        lv_dataWeaponName[12] = "GravityGun";
        lv_dataWeaponName[13] = "Crowbar2";
        autoF60E587E_var = 0;
        for ( ; autoF60E587E_var <= autoF60E587E_ae; autoF60E587E_var += 1 ) {
            lv_period = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_dataWeaponName[autoF60E587E_var], "Period", 0));
            lv_period *= (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_speedPercentagePerLevel));
            CatalogFieldValueSet(c_gameCatalogWeapon, lv_dataWeaponName[autoF60E587E_var], "Period", lp_modOwner, FixedToString(lv_period, c_fixedPrecisionAny));
        }
    }

    return true;
}

trigger auto_gf_WModUpdateWeaponsSpeedText_Trigger = null;
int auto_gf_WModUpdateWeaponsSpeedText_lp_playerNo;

void gf_WModUpdateWeaponsSpeedText (int lp_playerNo) {
    auto_gf_WModUpdateWeaponsSpeedText_lp_playerNo = lp_playerNo;

    if (auto_gf_WModUpdateWeaponsSpeedText_Trigger == null) {
        auto_gf_WModUpdateWeaponsSpeedText_Trigger = TriggerCreate("auto_gf_WModUpdateWeaponsSpeedText_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModUpdateWeaponsSpeedText_Trigger, false, false);
}

bool auto_gf_WModUpdateWeaponsSpeedText_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModUpdateWeaponsSpeedText_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[5][lp_playerNo], IntToText((gv_wModSpeed5[lp_playerNo] - 5)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsLabels[5][lp_playerNo], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_wModSpeed5[lp_playerNo] < 10) && (gv_wModSpeed5[lp_playerNo] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[5][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[5][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
    }
    else if ((gv_wModSpeed5[lp_playerNo] == 10)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[5][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_wModSpeed5[lp_playerNo] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[5][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_WModSetWeightPoint_Trigger = null;
int auto_gf_WModSetWeightPoint_lp_modLevel;
int auto_gf_WModSetWeightPoint_lp_modOwner;

void gf_WModSetWeightPoint (int lp_modLevel, int lp_modOwner) {
    auto_gf_WModSetWeightPoint_lp_modLevel = lp_modLevel;
    auto_gf_WModSetWeightPoint_lp_modOwner = lp_modOwner;

    if (auto_gf_WModSetWeightPoint_Trigger == null) {
        auto_gf_WModSetWeightPoint_Trigger = TriggerCreate("auto_gf_WModSetWeightPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModSetWeightPoint_Trigger, false, false);
}

bool auto_gf_WModSetWeightPoint_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_WModSetWeightPoint_lp_modLevel;
    int lp_modOwner = auto_gf_WModSetWeightPoint_lp_modOwner;

    // Variable Declarations
    fixed lv_weightPercentagePerLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_weightPercentagePerLevel = 0.075;

    // Implementation
    if (((lp_modLevel >= 0) && (lp_modLevel <= 10)) && ((lp_modOwner >= 1) && (lp_modOwner <= 8))) {
        gv_baseMarineWeightPointMultiplier[lp_modOwner] = (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_weightPercentagePerLevel));
    }

    return true;
}

trigger auto_gf_WModUpdateWeaponsWeightText_Trigger = null;
int auto_gf_WModUpdateWeaponsWeightText_lp_playerNo;

void gf_WModUpdateWeaponsWeightText (int lp_playerNo) {
    auto_gf_WModUpdateWeaponsWeightText_lp_playerNo = lp_playerNo;

    if (auto_gf_WModUpdateWeaponsWeightText_Trigger == null) {
        auto_gf_WModUpdateWeaponsWeightText_Trigger = TriggerCreate("auto_gf_WModUpdateWeaponsWeightText_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModUpdateWeaponsWeightText_Trigger, false, false);
}

bool auto_gf_WModUpdateWeaponsWeightText_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModUpdateWeaponsWeightText_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[6][lp_playerNo], IntToText((gv_wModWeight6[lp_playerNo] - 5)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsLabels[6][lp_playerNo], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_wModWeight6[lp_playerNo] < 10) && (gv_wModWeight6[lp_playerNo] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[6][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[6][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
    }
    else if ((gv_wModWeight6[lp_playerNo] == 10)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[6][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_wModWeight6[lp_playerNo] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[6][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_WeaponsModSetSplashRadius_Trigger = null;
int auto_gf_WeaponsModSetSplashRadius_lp_modLevel;
int auto_gf_WeaponsModSetSplashRadius_lp_modOwner;

void gf_WeaponsModSetSplashRadius (int lp_modLevel, int lp_modOwner) {
    auto_gf_WeaponsModSetSplashRadius_lp_modLevel = lp_modLevel;
    auto_gf_WeaponsModSetSplashRadius_lp_modOwner = lp_modOwner;

    if (auto_gf_WeaponsModSetSplashRadius_Trigger == null) {
        auto_gf_WeaponsModSetSplashRadius_Trigger = TriggerCreate("auto_gf_WeaponsModSetSplashRadius_TriggerFunc");
    }

    TriggerExecute(auto_gf_WeaponsModSetSplashRadius_Trigger, false, false);
}

bool auto_gf_WeaponsModSetSplashRadius_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_WeaponsModSetSplashRadius_lp_modLevel;
    int lp_modOwner = auto_gf_WeaponsModSetSplashRadius_lp_modOwner;

    int init_i;

    // Variable Declarations
    fixed lv_splashRadius;
    string[4] lv_dataDamageName3;
    string[4] lv_dataDamageName2;
    string[3] lv_dataDamageName1;
    string[7] lv_dataDamageNameSearch;
    fixed lv_splashPercentagePerLevel;
    string lv_dataString;
    int lv_iLocal;
    text lv_test;

    // Automatic Variable Declarations
    const int auto35D0065C_ae = 2;
    int auto35D0065C_var;
    const int autoE081CE6C_ae = 2;
    const int autoE081CE6C_ai = 1;
    const int autoACD9DD00_ae = 2;
    int autoACD9DD00_var;
    const int autoF3FBB897_ae = 1;
    const int autoF3FBB897_ai = 1;
    const int autoD502563F_ae = 5;
    int autoD502563F_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_dataDamageName3[init_i] = "";
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_dataDamageName2[init_i] = "";
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_dataDamageName1[init_i] = "";
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_dataDamageNameSearch[init_i] = "";
    }
    lv_splashPercentagePerLevel = 0.05;
    lv_dataString = "";

    // Implementation
    if (((lp_modLevel >= 0) && (lp_modLevel <= 10)) && ((lp_modOwner >= 1) && (lp_modOwner <= 8))) {
        lv_dataDamageName3[0] = "GuassRifle";
        lv_dataDamageName3[1] = "XM814HeavyMachineGun";
        lv_dataDamageName3[2] = "Shotgun";
        lv_dataDamageName2[0] = "MP9A2SubMachineGun";
        lv_dataDamageName2[1] = "M5PulseRifle";
        lv_dataDamageName2[2] = "UA420AssaultRifle";
        lv_dataDamageName1[0] = "LaserRifleDamage";
        lv_dataDamageNameSearch[0] = "InfernalFlameThrowerE";
        lv_dataDamageNameSearch[1] = "InfernalFlameThrowerLevel22";
        lv_dataDamageNameSearch[2] = "InfernalFlameThrowerLevel32";
        lv_dataDamageNameSearch[3] = "StingerMK3SearchDamage";
        lv_dataDamageNameSearch[4] = "CrowbarSearchDamage";
        lv_dataDamageNameSearch[5] = "P45GaussPistolDamageSearch";
        auto35D0065C_var = 0;
        for ( ; auto35D0065C_var <= auto35D0065C_ae; auto35D0065C_var += 1 ) {
            lv_iLocal = 0;
            for ( ; ( (autoE081CE6C_ai >= 0 && lv_iLocal <= autoE081CE6C_ae) || (autoE081CE6C_ai < 0 && lv_iLocal >= autoE081CE6C_ae) ) ; lv_iLocal += autoE081CE6C_ai ) {
                lv_dataString = ("AreaArray[" + (IntToString(lv_iLocal) + "].Radius[0]"));
                lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName3[auto35D0065C_var], lv_dataString, 0));
                lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
                CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName3[auto35D0065C_var], lv_dataString, lp_modOwner, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
            }
        }
        autoACD9DD00_var = 0;
        for ( ; autoACD9DD00_var <= autoACD9DD00_ae; autoACD9DD00_var += 1 ) {
            lv_iLocal = 0;
            for ( ; ( (autoF3FBB897_ai >= 0 && lv_iLocal <= autoF3FBB897_ae) || (autoF3FBB897_ai < 0 && lv_iLocal >= autoF3FBB897_ae) ) ; lv_iLocal += autoF3FBB897_ai ) {
                lv_dataString = ("AreaArray[" + (IntToString(lv_iLocal) + "].Radius[0]"));
                lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName2[autoACD9DD00_var], lv_dataString, 0));
                lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
                CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName2[autoACD9DD00_var], lv_dataString, lp_modOwner, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
            }
        }
        lv_dataString = ("AreaArray[" + (IntToString(0) + "].Radius[0]"));
        lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName1[0], lv_dataString, 0));
        lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName1[0], lv_dataString, lp_modOwner, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
        autoD502563F_var = 0;
        for ( ; autoD502563F_var <= autoD502563F_ae; autoD502563F_var += 1 ) {
            lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageNameSearch[autoD502563F_var], "AreaArray[0].Radius[0]", 0));
            lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
            CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageNameSearch[autoD502563F_var], "AreaArray[0].Radius[0]", lp_modOwner, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
        }
    }

    return true;
}

trigger auto_gf_WModUpdateWeaponsSplashText_Trigger = null;
int auto_gf_WModUpdateWeaponsSplashText_lp_playerNo;

void gf_WModUpdateWeaponsSplashText (int lp_playerNo) {
    auto_gf_WModUpdateWeaponsSplashText_lp_playerNo = lp_playerNo;

    if (auto_gf_WModUpdateWeaponsSplashText_Trigger == null) {
        auto_gf_WModUpdateWeaponsSplashText_Trigger = TriggerCreate("auto_gf_WModUpdateWeaponsSplashText_TriggerFunc");
    }

    TriggerExecute(auto_gf_WModUpdateWeaponsSplashText_Trigger, false, false);
}

bool auto_gf_WModUpdateWeaponsSplashText_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_WModUpdateWeaponsSplashText_lp_playerNo;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[7][lp_playerNo], IntToText((gv_wModSplash7[lp_playerNo] - 5)), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsLabels[7][lp_playerNo], "Kicker_Zerg", PlayerGroupAll());
    if (((gv_wModSplash7[lp_playerNo] < 10) && (gv_wModSplash7[lp_playerNo] > 0))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[7][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[7][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
    }
    else if ((gv_wModSplash7[lp_playerNo] == 10)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[7][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    else if ((gv_wModSplash7[lp_playerNo] == 0)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[7][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    return true;
}

void gf_LevelUpTalentRifleman (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Rifleman")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("FireUp", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 9)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("CripplingFire", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 6)), c_orderQueueAddToFront);
                TriggerEnable(gt_SonicTrapLimit5, true);
                TriggerEnable(gt_SonicTrapVision, true);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 4)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRifleman", 7)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentMedic (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Medic")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 4)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 7)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMedic", 9)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentAssault (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "TychusChaingun")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 7)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 9)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnAssault", 4)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentMarksman (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "GhostLaserLines")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 0)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerAddEventUnitAbility(gt_ResetConcentration, UnitRefFromUnit(lv_triggUnit), AbilityCommand("RaynorSnipe", 0), c_unitAbilStageComplete, true);
                    TriggerAddEventUnitAbility(gt_ResetConcentration, UnitRefFromUnit(lv_triggUnit), AbilityCommand("Snipe", 0), c_unitAbilStageComplete, true);
                    TriggerAddEventTimer(gt_AddConcentrationPoint, gv_concentrationTimer[lp_triggPlayer]);
                    TriggerEnable(gt_AddConcentrationPoint, true);
                    TriggerEnable(gt_ResetConcentration, true);
                    TriggerEnable(gt_Concentration, true);
                    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
                    gv_concentrationDisplay = DialogLastCreated();
                    DialogSetImageVisible(DialogLastCreated(), false);
                    DialogSetFullscreen(DialogLastCreated(), true);
                    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
                    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
                    gf_InitializeConcentrationTimer(lp_triggPlayer);
                }

            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 3)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerEnable(gt_Anticipation, true);
                }
                else {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "AnticipationLevel2", 1);
                }
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 4)), c_orderQueueAddToFront);
                if ((gv_talentLevel[3][lp_triggPlayer] == 2)) {
                    UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 2)), c_orderQueueAddToFront);
                }

            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 7)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnMarksman", 9)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentRecon (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Spectre")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 0)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerAddEventUnitAbility(gt_Flare, UnitRefFromUnit(lv_triggUnit), AbilityCommand("Flare", 0), c_unitAbilStageComplete, true);
                    TriggerEnable(gt_Flare, true);
                }

            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 1)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerAddEventUnitAbility(gt_LaserDesignator, UnitRefFromUnit(lv_triggUnit), AbilityCommand("LaserDesignator", 0), c_unitAbilStageComplete, true);
                    TriggerEnable(gt_LaserDesignator, true);
                }

            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 2)), c_orderQueueAddToFront);
                PlayerGroupAdd(gv_heartbeatSensorReconGroup, lp_triggPlayer);
                gf_HeartbeatSensorBeep(lp_triggPlayer);
                if ((gv_heartbeatSensorTriggerOn == false)) {
                    gv_heartbeatSensorTriggerOn = true;
                }

                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    gv_heartbeatSensorRadius[lp_triggPlayer] = 25.0;
                }
                else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    gv_heartbeatSensorRadius[lp_triggPlayer] = 40.0;
                }
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 3)), c_orderQueueAddToFront);
                TriggerAddEventUnitCreated(gt_SupplyStation, UnitRefFromUnit(lv_triggUnit), "SupplyStation", null);
                TriggerEnable(gt_SupplyStation, true);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 9)), c_orderQueueAddToFront);
                TriggerAddEventUnitCreated(gt_ReaperMK13Created, UnitRefFromUnit(lv_triggUnit), "ReaperMK13", null);
                TriggerEnable(gt_ReaperMK13Created, true);
            }

            if ((lp_itemNo == 6)) {
                if ((UnitBehaviorEnabled(gv_marineHero[lp_triggPlayer], "ReflexesLevel1") == true)) {
                    UnitBehaviorRemove(gv_marineHero[lp_triggPlayer], "ReflexesLevel1", 1);
                }

                if ((UnitBehaviorEnabled(gv_marineHero[lp_triggPlayer], "ReflexesLevel2") == true)) {
                    UnitBehaviorRemove(gv_marineHero[lp_triggPlayer], "ReflexesLevel2", 1);
                }

                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 4)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 7)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerAddEventUnitAbility(gt_EscapeResetSprintCooldown, UnitRefFromUnit(lv_triggUnit), AbilityCommand("Escape", 0), c_unitAbilStageComplete, true);
                    TriggerEnable(gt_EscapeResetSprintCooldown, true);
                }

            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnRecon", 6)), c_orderQueueAddToFront);
                TriggerAddEventUnitAbility(gt_RefresherResetCooldowns, UnitRefFromUnit(lv_triggUnit), AbilityCommand("Refresher", 0), c_unitAbilStageComplete, true);
                TriggerEnable(gt_RefresherResetCooldowns, true);
            }

        }

    }

}

void gf_LevelUpTalentDemolitions (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "DominionKillTeam")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 0)), c_orderQueueAddToFront);
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 10)), c_orderQueueAddToFront);
                if ((gv_talentLevel[1][lp_triggPlayer] == 2)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, "VultureSpiderMinesDamage", "Amount", lp_triggPlayer, "60");
                    PlayerCreateEffectUnit(1, "ReplenishMines2", gv_marineHero[lp_triggPlayer]);
                }

                if ((gv_talentLevel[1][lp_triggPlayer] == 3)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, "VultureSpiderMinesDamage", "Amount", lp_triggPlayer, "80");
                    PlayerCreateEffectUnit(1, "ReplenishMines3", gv_marineHero[lp_triggPlayer]);
                }

            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 3)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerEnable(gt_FireVulnerability, true);
                }

            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 4)), c_orderQueueAddToFront);
                TriggerEnable(gt_ArmageddonBombLimit3, true);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 7)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "LookLevel2", 1);
                }

            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnDemolitions", 9)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentEngineer (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Engineer")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 0)), c_orderQueueAddToFront);
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("ProbeLimit", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 1)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "PlasmaDischargeLevel2", 1);
                }
                else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "PlasmaDischargeLevel3", 1);
                }
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 4)), c_orderQueueAddToFront);
                TriggerAddEventUnitCreated(gt_FieldNexusShareVision, UnitRefFromUnit(lv_triggUnit), "FieldNexus", null);
                TriggerEnable(gt_FieldNexusShareVision, true);
                TriggerEnable(gt_FieldNexusRevokeSharedVision, true);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 5)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel1", 0), false);
                    TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel2", 0), false);
                    TriggerAddEventUnitCreated(gt_X1Guardian, UnitRefFromUnit(lv_triggUnit), "X1Guardian", null);
                    TriggerEnable(gt_X1Guardian, true);
                }

                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel1", 0), true);
                }

                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
                    TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel2", 0), true);
                }

            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 7)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 8)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerEnable(gt_Synergy, true);
                }

            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnEngineer", 9)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentCommando (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;
    int lv_skillLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Commando")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 4)), c_orderQueueAddToFront);
                TriggerAddEventUnitAbility(gt_TacticalNuke, UnitRefFromUnit(lv_triggUnit), AbilityCommand("TacNukeStrike", 0), c_unitAbilStageComplete, false);
                TriggerEnable(gt_TacticalNuke, true);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 7)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "GravityGrenade", 1);
                }

            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnCommando", 9)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentPsiOps (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    unitgroup auto455AD551_g;
    int auto455AD551_u;
    unit auto455AD551_var;

    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "PsiOps")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 6)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "ForcePushLevel2", 1);
                }
                else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "ForcePushLevel3", 1);
                }
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 7)), c_orderQueueAddToFront);
                TriggerEnable(gt_RavagingPhantom, true);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 4)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 0)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 10)), c_orderQueueAddToFront);
                    TriggerAddEventUnitAbility(gt_MindLinkShareVision, UnitRefFromUnit(lv_triggUnit), AbilityCommand("MindLink", 0), c_unitAbilStageComplete, false);
                    TriggerAddEventUnitAbility(gt_CancelMindLink, UnitRefFromUnit(lv_triggUnit), AbilityCommand("MindLinkCancel", 0), c_unitAbilStageComplete, false);
                    TriggerEnable(gt_MindLinkShareVision, true);
                    TriggerEnable(gt_MindLinkShareDamage, true);
                    TriggerEnable(gt_CancelMindLink, true);
                }

                auto455AD551_g = gv_mindLinkedGroup[lp_triggPlayer];
                auto455AD551_u = UnitGroupCount(auto455AD551_g, c_unitCountAll);
                for (;; auto455AD551_u -= 1) {
                    auto455AD551_var = UnitGroupUnitFromEnd(auto455AD551_g, auto455AD551_u);
                    if (auto455AD551_var == null) { break; }
                    UnitBehaviorRemove(auto455AD551_var, "MindLinkLevel1", 1);
                    UnitBehaviorRemove(auto455AD551_var, "MindLinkLevel2", 1);
                    UnitBehaviorRemove(auto455AD551_var, "MindLinkLevel3", 1);
                    if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                        UnitBehaviorAdd(auto455AD551_var, "MindLinkLevel1", auto455AD551_var, 1);
                    }
                    else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                        UnitBehaviorAdd(auto455AD551_var, "MindLinkLevel2", auto455AD551_var, 1);
                    }
                    else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
                        UnitBehaviorAdd(auto455AD551_var, "MindLinkLevel3", auto455AD551_var, 1);
                    }
                }
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPsiOps", 9)), c_orderQueueAddToFront);
                TriggerAddEventUnitAbility(gt_Inception, UnitRefFromUnit(lv_triggUnit), AbilityCommand("Inception", 0), c_unitAbilStageComplete, false);
                TriggerEnable(gt_Inception, true);
            }

        }

    }

}

void gf_LevelUpTalentTechnician (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Technician")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 2)) {
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    UnitBehaviorRemovePlayer(lv_triggUnit, "FloodlightsLevel1", lp_triggPlayer, 1);
                }
                else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
                    UnitBehaviorRemovePlayer(lv_triggUnit, "FloodlightsLevel2", lp_triggPlayer, 1);
                }
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 4)), c_orderQueueAddToFront);
                TriggerEnable(gt_HammeroftheGodsCamShake, true);
                TriggerEnable(gt_AMRounds, true);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 7)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 8)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnTechnician", 9)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentForwardObserver (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "ForwardObserver")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 0)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    gf_ForwardObserverCreateShellDialog(lp_triggPlayer);
                    TriggerAddEventUnitAbility(gt_FireMission, UnitRefFromUnit(lv_triggUnit), AbilityCommand("FireMission", 0), c_unitAbilStageComplete, false);
                    TriggerEnable(gt_FireMission, true);
                    TriggerEnable(gt_ModifyShellLimit, true);
                }

            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 1)), c_orderQueueAddToFront);
                gv_barrageTime[lp_triggPlayer] = (gv_barrageTime[lp_triggPlayer] - 1.5);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 2)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerAddEventUnitAbility(gt_ShockwaveBarrage, UnitRefFromUnit(lv_triggUnit), AbilityCommand("ShockwaveBarrage", 0), c_unitAbilStageComplete, false);
                    TriggerEnable(gt_ShockwaveBarrage, true);
                }

            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 3)), c_orderQueueAddToFront);
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 8)), c_orderQueueAddToFront);
                if ((gv_talentLevel[4][lp_triggPlayer] == 2)) {
                    CatalogFieldValueSet(c_gameCatalogEffect, "Damage", "Amount", lp_triggPlayer, FixedToString(150.0, c_fixedPrecisionAny));
                }

            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 4)), c_orderQueueAddToFront);
                TriggerAddEventUnitAbility(gt_NapalmBarrage, UnitRefFromUnit(lv_triggUnit), AbilityCommand("NapalmBarrage", 0), c_unitAbilStageComplete, false);
                TriggerEnable(gt_NapalmBarrage, true);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 5)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                    TriggerAddEventUnitAbility(gt_MobileInfantry, UnitRefFromUnit(lv_triggUnit), AbilityCommand("MobileInfantry", 0), c_unitAbilStageComplete, false);
                    TriggerEnable(gt_MobileInfantry, true);
                }

            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("MobileInfantryImproveEquipment", 0)), c_orderQueueReplace);
            }

            if ((lp_itemNo == 8)) {
                TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("FlamethrowerGear", 0), true);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("SlowRoast", 0), true);
                }

            }

            if ((lp_itemNo == 9)) {
                TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("MarksmanGear", 0), true);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("VeteransFocus", 0), true);
                }

            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnForwardObserver", 9)), c_orderQueueAddToFront);
                TriggerAddEventUnitAbility(gt_GunshipSupport, UnitRefFromUnit(lv_triggUnit), AbilityCommand("TX179Asgard", 0), c_unitAbilStageComplete, false);
                TriggerAddEventMouseClicked(gt_GunshipMouse1GaussCannon, lp_triggPlayer, c_mouseButtonLeft, true);
                TriggerAddEventMouseClicked(gt_GunshipMouse2HellfireMissile, lp_triggPlayer, c_mouseButtonRight, true);
                TriggerAddEventKeyPressed(gt_GunshipOtherKeys, lp_triggPlayer, c_keyC, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
                TriggerAddEventKeyPressed(gt_GunshipOtherKeys, lp_triggPlayer, c_keyM, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
                TriggerAddEventKeyPressed(gt_GunshipOtherKeys, lp_triggPlayer, c_keyZ, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
                TriggerAddEventKeyPressed(gt_GunshipOtherKeys, lp_triggPlayer, c_keyQ, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
                TriggerAddEventPlayerEffectUsed(gt_GunshipImpactQuake, lp_triggPlayer, "GunshipSupportGaussCannonDamageSet");
                TriggerAddEventPlayerEffectUsed(gt_GunshipImpactQuake, lp_triggPlayer, "HellfireSearchDamageSetGuided");
                TriggerAddEventPlayerEffectUsed(gt_GunshipImpactQuake, lp_triggPlayer, "HellfireSearchDamageSet");
                TriggerEnable(gt_GunshipSupport, true);
            }

        }

    }

}

void gf_LevelUpTalentFlamethrower (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Flamethrower3")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 0)), c_orderQueueAddToFront);
                if ((gv_talentLevel[1][lp_triggPlayer] == 1)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "Helium3IgniterLevel1", 1);
                }
                else if ((gv_talentLevel[1][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "Helium3IgniterLevel2", 1);
                }
                else if ((gv_talentLevel[1][lp_triggPlayer] == 3)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "HighCapacityBarrels", 1);
                }
                gf_WModSetDamage(gv_wModDamage2[lp_triggPlayer], lp_triggPlayer);
                gf_WModSetRange(gv_wModRange1[lp_triggPlayer], lp_triggPlayer);
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 4)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 5)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 7)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "RighteousnessLevel2", 1);
                }

            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 8)), c_orderQueueAddToFront);
                if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "ShatterLevel2", 1);
                }

            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnFlamethrower", 9)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_LevelUpTalentPathfinder (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "Pathfinder")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 0)), c_orderQueueAddToFront);
                if ((gv_talentLevel[1][lp_triggPlayer] == 1)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel1", 1);
                }
                else if ((gv_talentLevel[1][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel2", 1);
                }
                else if ((gv_talentLevel[1][lp_triggPlayer] == 3)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel3", 1);
                }
                else if ((gv_talentLevel[1][lp_triggPlayer] == 4)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel4", 1);
                }
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 2)), c_orderQueueAddToFront);
                if ((gv_talentLevel[3][lp_triggPlayer] == 1) && (gv_talentLevel[5][lp_triggPlayer] == 0)) {
                    CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(9.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(46.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                }
                else if ((((gv_talentLevel[3][lp_triggPlayer] == 2) && (gv_talentLevel[5][lp_triggPlayer] == 0)) || ((gv_talentLevel[3][lp_triggPlayer] == 1) && (gv_talentLevel[5][lp_triggPlayer] == 1)))) {
                    CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(12.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(52.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                }
                else if ((gv_talentLevel[3][lp_triggPlayer] == 2) && (gv_talentLevel[5][lp_triggPlayer] == 1)) {
                    CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(15.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(58.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                }
                gf_WModSetDamage(gv_wModDamage2[lp_triggPlayer], lp_triggPlayer);
                gf_WModSetRange(gv_wModRange1[lp_triggPlayer], lp_triggPlayer);
            }

            if ((lp_itemNo == 4)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 4)), c_orderQueueAddToFront);
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 0)), c_orderQueueAddToFront);
                if ((gv_talentLevel[1][lp_triggPlayer] == 1)) {
                    gv_talentLevel[1][lp_triggPlayer] = 2;
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel2", 1);
                }
                else if ((gv_talentLevel[1][lp_triggPlayer] == 2)) {
                    gv_talentLevel[1][lp_triggPlayer] = 3;
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel3", 1);
                }
                else if ((gv_talentLevel[1][lp_triggPlayer] == 3)) {
                    gv_talentLevel[1][lp_triggPlayer] = 4;
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel4", 1);
                }
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 1)), c_orderQueueAddToFront);
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 2)), c_orderQueueAddToFront);
                if ((gv_talentLevel[3][lp_triggPlayer] == 0)) {
                    CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(9.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(46.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "ArmorReduction", lp_triggPlayer, FixedToString(1.3, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "ArmorReduction", lp_triggPlayer, FixedToString(1.0, c_fixedPrecisionAny));
                }
                else if ((gv_talentLevel[3][lp_triggPlayer] == 1)) {
                    CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(12.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(52.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.5, c_fixedPrecisionAny));
                }
                else if ((gv_talentLevel[3][lp_triggPlayer] == 2)) {
                    CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(15.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(58.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                    CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "ArmorReduction", lp_triggPlayer, FixedToString(0.0, c_fixedPrecisionAny));
                }
                gf_WModSetDamage(gv_wModDamage2[lp_triggPlayer], lp_triggPlayer);
                gf_WModSetRange(gv_wModRange1[lp_triggPlayer], lp_triggPlayer);
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 5)), c_orderQueueAddToFront);
                UnitBehaviorAdd(lv_triggUnit, "AssaultJumpShieldArmor", lv_triggUnit, 1);
                if ((gv_assaultJumpTriggered == false)) {
                    gv_assaultJumpTriggered = true;
                    TriggerExecute(gt_AssaultJumpTimer, true, false);
                }

            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 7)), c_orderQueueAddToFront);
                if ((gv_talentLevel[8][lp_triggPlayer] == 1)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "AssaultJumpLevel1", 1);
                }
                else if ((gv_talentLevel[8][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "AssaultJumpLevel2", 1);
                }
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 8)), c_orderQueueAddToFront);
                if ((gv_talentLevel[9][lp_triggPlayer] == 1)) {
                    gv_assaultJumpTimerCooldown[lp_triggPlayer] -= 7;
                    gv_assaultJumpTimer[lp_triggPlayer] = 1;
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "ImprovedCoolantLinesLevel1", 1);
                    CatalogFieldValueSet(c_gameCatalogAbil, "AssaultJump", "EffectRange[0]", lp_triggPlayer, "1.5, 15");
                }
                else if ((gv_talentLevel[9][lp_triggPlayer] == 2)) {
                    gv_assaultJumpTimerCooldown[lp_triggPlayer] -= 8;
                    gv_assaultJumpTimer[lp_triggPlayer] = 1;
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "ImprovedCoolantLinesLevel2", 1);
                    CatalogFieldValueSet(c_gameCatalogAbil, "AssaultJump", "EffectRange[0]", lp_triggPlayer, "0, 15");
                }
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnPathfinder", 9)), c_orderQueueAddToFront);
                TriggerAddEventUnitAbility(gt_NoQuarter, UnitRefFromUnit(lv_triggUnit), AbilityCommand("NoQuarter", 0), c_unitAbilStageComplete, false);
                TriggerEnable(gt_NoQuarter, true);
            }

        }

    }

}

void gf_LevelUpTalentChemExpert (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    unit lv_triggUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    if ((UnitGetType(gv_marineHero[lp_triggPlayer]) == "ChemicalExpert")) {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 10))) {
            if ((lp_itemNo == 1)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 0)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 2)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 1)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 3)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 2)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 4)) {
                if ((gv_talentLevel[4][lp_triggPlayer] == 1)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "ChemicalSynthesisLevel1", 1);
                }
                else if ((gv_talentLevel[4][lp_triggPlayer] == 2)) {
                    TechTreeUpgradeAddLevel(lp_triggPlayer, "ChemicalSynthesisLevel2", 1);
                }
            }

            if ((lp_itemNo == 5)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 3)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 6)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 4)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 7)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 5)), c_orderQueueAddToFront);
                TriggerAddEventUnitAbility(gt_Shrinker, UnitRefFromUnit(lv_triggUnit), AbilityCommand("Shrinker", 0), c_unitAbilStageComplete, false);
                TriggerEnable(gt_Shrinker, true);
            }

            if ((lp_itemNo == 8)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 6)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 9)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 7)), c_orderQueueAddToFront);
            }

            if ((lp_itemNo == 10)) {
                UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("LearnChemExpert", 8)), c_orderQueueAddToFront);
            }

        }

    }

}

void gf_UpdateTalentText (int lp_itemNo, int lp_triggPlayer, int lp_itemLevel) {
    // Variable Declarations
    text lv_tempText;
    text lv_levelText;
    int lv_i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((((lp_itemNo >= 1) && (lp_itemNo <= 2)) || ((lp_itemNo >= 6) && (lp_itemNo <= 7)))) {
        lv_tempText = StringExternal("Param/Value/D7334A65");
    }
    else if ((((lp_itemNo >= 3) && (lp_itemNo <= 4)) || ((lp_itemNo >= 8) && (lp_itemNo <= 9)))) {
        lv_tempText = StringExternal("Param/Value/669A0686");
    }
    else if (((lp_itemNo == 5) || (lp_itemNo == 10))) {
        lv_tempText = StringExternal("Param/Value/19AC00D9");
    }
    lv_levelText = IntToText(lp_itemLevel);
    lv_tempText = (lv_levelText + lv_tempText);
    libNtve_gf_SetDialogItemText(gv_talentTreeTexts[lp_itemNo][lp_triggPlayer], lv_tempText, gv_marineSquad);
}

bool gf_TalentSelectionOption (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    int lv_tempInt;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if (((((lp_itemNo >= 1) && (lp_itemNo <= 2)) || ((lp_itemNo >= 6) && (lp_itemNo <= 7))) && ((gv_talentLevel[lp_itemNo][lp_triggPlayer] >= 0) && (gv_talentLevel[lp_itemNo][lp_triggPlayer] <= 2)))) {
        return true;
    }

    lv_tempInt = (gv_talentLevel[1][lp_triggPlayer] + gv_talentLevel[2][lp_triggPlayer]);
    if (((lv_tempInt >= 4) && ((lp_itemNo >= 3) && (lp_itemNo <= 4)) && ((gv_talentLevel[lp_itemNo][lp_triggPlayer] >= 0) && (gv_talentLevel[lp_itemNo][lp_triggPlayer] <= 1)))) {
        return true;
    }

    lv_tempInt = (lv_tempInt + (gv_talentLevel[3][lp_triggPlayer] + gv_talentLevel[4][lp_triggPlayer]));
    if (((lp_itemNo == 5) && (lv_tempInt >= 8) && (gv_talentLevel[5][lp_triggPlayer] == 0))) {
        return true;
    }

    lv_tempInt = (gv_talentLevel[6][lp_triggPlayer] + gv_talentLevel[7][lp_triggPlayer]);
    if (((lv_tempInt >= 4) && ((lp_itemNo >= 8) && (lp_itemNo <= 9)) && ((gv_talentLevel[lp_itemNo][lp_triggPlayer] >= 0) && (gv_talentLevel[lp_itemNo][lp_triggPlayer] <= 1)))) {
        return true;
    }

    lv_tempInt = (lv_tempInt + (gv_talentLevel[8][lp_triggPlayer] + gv_talentLevel[9][lp_triggPlayer]));
    if (((lp_itemNo == 10) && (lv_tempInt >= 8) && (gv_talentLevel[10][lp_triggPlayer] == 0))) {
        return true;
    }

    return false;
}

void gf_UpdateTalentImage (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    bool lv_talentsAvailable;
    int lv_currentTalent;
    int lv_dialogItem;
    int lv_dialogBorderInitial;
    int lv_dialogBorderFinal;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_talentsAvailable = (gv_talentsAvailable[lp_triggPlayer] > 0);
    lv_currentTalent = gv_talentLevel[lp_itemNo][lp_triggPlayer];
    lv_dialogItem = gv_talentTreeImages[lp_itemNo][lp_triggPlayer];
    lv_dialogBorderInitial = gv_talentTreeBordersInitial[lp_itemNo][lp_triggPlayer];
    lv_dialogBorderFinal = gv_talentTreeBordersFinal[lp_itemNo][lp_triggPlayer];

    // Implementation
    if ((((lp_itemNo >= 1) && (lp_itemNo <= 2)) || ((lp_itemNo >= 6) && (lp_itemNo <= 7)))) {
        if ((lv_currentTalent == 3)) {
            libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(100,100,100), gv_marineSquad);
            DialogControlDestroy(lv_dialogBorderInitial);
            libNtve_gf_SetDialogItemImage(lv_dialogBorderFinal, "Assets\\Textures\\ui_research_button_protoss_researched.dds", PlayerGroupAll());
        }
        else {
            if ((lv_talentsAvailable == true)) {
                libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(67.45, 67.45, 67.45), gv_marineSquad);
            }
            else {
                if ((lv_currentTalent == 0)) {
                    libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(33.33, 33.33, 100.00), gv_marineSquad);
                }
                else {
                    libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(66.67, 66.67, 100.00), gv_marineSquad);
                }
            }
        }
    }
    else if ((((lp_itemNo >= 3) && (lp_itemNo <= 4)) || ((lp_itemNo >= 8) && (lp_itemNo <= 9)))) {
        if ((lv_currentTalent == 2)) {
            libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(100,100,100), gv_marineSquad);
            DialogControlDestroy(lv_dialogBorderInitial);
            libNtve_gf_SetDialogItemImage(lv_dialogBorderFinal, "Assets\\Textures\\ui_research_button_protoss_researched.dds", PlayerGroupAll());
        }
        else {
            if (((lv_talentsAvailable == true) && (gf_TalentSelectionOption(lp_itemNo, lp_triggPlayer) == true))) {
                libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(67.45, 67.45, 67.45), gv_marineSquad);
            }
            else {
                if ((lv_currentTalent == 0)) {
                    libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(33.33, 33.33, 100.00), gv_marineSquad);
                }
                else {
                    libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(66.67, 66.67, 100.00), gv_marineSquad);
                }
            }
        }
    }
    else if (((lp_itemNo == 5) || (lp_itemNo == 10))) {
        if ((lv_currentTalent == 1)) {
            libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(100,100,100), gv_marineSquad);
            DialogControlDestroy(lv_dialogBorderInitial);
            libNtve_gf_SetDialogItemImage(lv_dialogBorderFinal, "Assets\\Textures\\ui_research_button_protoss_researched.dds", PlayerGroupAll());
        }
        else {
            if (((lv_talentsAvailable == true) && (gf_TalentSelectionOption(lp_itemNo, lp_triggPlayer) == true))) {
                libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(66.67, 66.67, 100.00), gv_marineSquad);
            }
            else {
                libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(33.33, 33.33, 100.00), gv_marineSquad);
            }
        }
    }
}

void gf_UpdateAllTalentImages (int lp_triggPlayer) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto73DAD587_ae = 10;
    const int auto73DAD587_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto73DAD587_ai >= 0 && lv_i <= auto73DAD587_ae) || (auto73DAD587_ai < 0 && lv_i >= auto73DAD587_ae) ) ; lv_i += auto73DAD587_ai ) {
        gf_UpdateTalentImage(lv_i, lp_triggPlayer);
    }
}

void gf_UpdateTalentAbility (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    string lv_classOfPlayer;

    // Automatic Variable Declarations
    string auto4E346E50_val;

    // Variable Initialization
    lv_classOfPlayer = UnitGetType(gv_marineHero[lp_triggPlayer]);

    // Implementation
    auto4E346E50_val = lv_classOfPlayer;
    if (auto4E346E50_val == "Rifleman") {
        gf_LevelUpTalentRifleman(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Medic") {
        gf_LevelUpTalentMedic(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "TychusChaingun") {
        gf_LevelUpTalentAssault(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Spectre") {
        gf_LevelUpTalentRecon(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "GhostLaserLines") {
        gf_LevelUpTalentMarksman(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "DominionKillTeam") {
        gf_LevelUpTalentDemolitions(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Engineer") {
        gf_LevelUpTalentEngineer(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Commando") {
        gf_LevelUpTalentCommando(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Flamethrower3") {
        gf_LevelUpTalentFlamethrower(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "ForwardObserver") {
        gf_LevelUpTalentForwardObserver(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Technician") {
        gf_LevelUpTalentTechnician(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "ChemicalExpert") {
        gf_LevelUpTalentChemExpert(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Pathfinder") {
        gf_LevelUpTalentPathfinder(lp_itemNo, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "PsiOps") {
        gf_LevelUpTalentPsiOps(lp_itemNo, lp_triggPlayer);

    }
    else {
    }
}

void gf_UpdateTalentSystem (int lp_itemNo, int lp_triggPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if ((gf_TalentSelectionOption(lp_itemNo, lp_triggPlayer) == true)) {
        gv_talentsAvailable[lp_triggPlayer] -= 1;
        gv_talentLevel[lp_itemNo][lp_triggPlayer] += 1;
        gf_UpdateTalentAbility(lp_itemNo, lp_triggPlayer);
        gf_UpdateTalentText(lp_itemNo, lp_triggPlayer, gv_talentLevel[lp_itemNo][lp_triggPlayer]);
        if (((lp_itemNo == 5) || (lp_itemNo == 10))) {
            gf_TeamStatusInitializePlayerPortrait(lp_triggPlayer);
        }

        gf_UpdateAllTalentImages(lp_triggPlayer);
        libNtve_gf_SetDialogItemText(gv_talentsAvailableDialog[lp_triggPlayer], (StringExternal("Param/Value/8A9EFD0F") + IntToText(gv_talentsAvailable[lp_triggPlayer])), gv_marineSquad);
    }

}

trigger auto_gf_TalentTreeRifleman_Trigger = null;

void gf_TalentTreeRifleman () {
    if (auto_gf_TalentTreeRifleman_Trigger == null) {
        auto_gf_TalentTreeRifleman_Trigger = TriggerCreate("auto_gf_TalentTreeRifleman_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeRifleman_Trigger, false, false);
}

bool auto_gf_TalentTreeRifleman_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 155, 80, StringExternal("Param/Value/1D17F765"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 405, 80, StringExternal("Param/Value/772C0F97"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/2B4976CF"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-maelstromrounds.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/8A9AA768"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-experiencedplasmagun.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/B4F52F97"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel2.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/DE0E7F03"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-raynortossgrenade.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/1E681DDA"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-plague.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/39BA6F44"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-stimpack-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/600C1C48"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-blink-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/F0E146C0"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-crystal.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/630B7290"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-snipe.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/ED3D071C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-gravitonbeam-color.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeMedic_Trigger = null;

void gf_TalentTreeMedic () {
    if (auto_gf_TalentTreeMedic_Trigger == null) {
        auto_gf_TalentTreeMedic_Trigger = TriggerCreate("auto_gf_TalentTreeMedic_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeMedic_Trigger, false, false);
}

bool auto_gf_TalentTreeMedic_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 152, 80, StringExternal("Param/Value/322473BA"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 389, 80, StringExternal("Param/Value/6E66B84B"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/DBF26646"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-heal.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/D3B6C884"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-fireonthemove.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/5A871345"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-forcefield-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/6E528527"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-chronoboost.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/79FEAF21"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-prismaticbeam.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/CD8F950A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-tosh-mindblast.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/229EF451"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-tomahawkpowercell.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/97497D8E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-chronorift.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/AED59685"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-explode.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/58A2F0DD"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-rapidregeneration.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeAssault_Trigger = null;

void gf_TalentTreeAssault () {
    if (auto_gf_TalentTreeAssault_Trigger == null) {
        auto_gf_TalentTreeAssault_Trigger = TriggerCreate("auto_gf_TalentTreeAssault_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeAssault_Trigger, false, false);
}

bool auto_gf_TalentTreeAssault_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 172, 80, StringExternal("Param/Value/35D31082"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 385, 80, StringExternal("Param/Value/52055FE0"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/9D3C9C4C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-330mmbarragecannon.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/1D215960"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-maelstromrounds.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/1646AAB3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-fullborecanisterammo.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/B27A7AD2"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-infestation.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/7B9493CB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-domination.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/4D6D992A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-tosh-mindblast.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/33D7C4ED"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel2.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/62BA8445"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-feedback-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/0EBAE4D3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-selfixarmor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/052BD5CE"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel3.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeRecon_Trigger = null;

void gf_TalentTreeRecon () {
    if (auto_gf_TalentTreeRecon_Trigger == null) {
        auto_gf_TalentTreeRecon_Trigger = TriggerCreate("auto_gf_TalentTreeRecon_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeRecon_Trigger, false, false);
}

bool auto_gf_TalentTreeRecon_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 128, 80, StringExternal("Param/Value/D5153499"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 402, 80, StringExternal("Param/Value/7F5744E5"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/956C3D00"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-minimap-ping.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/E4C96E31"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-challengecounter.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/8553FE64"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-scannersweep.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/1B268D9A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-building-terran-ghostacademy.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/124283B3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-research-terran-raven.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/50347476"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-disguise.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/15A5C201"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-ultrasonicpulse.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/9380A317"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-nyxcloakingclassmodule.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/CA7C0A78"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-research-terran-orbitalstrikerally.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/21170617"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-computerterminals.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeMarksman_Trigger = null;

void gf_TalentTreeMarksman () {
    if (auto_gf_TalentTreeMarksman_Trigger == null) {
        auto_gf_TalentTreeMarksman_Trigger = TriggerCreate("auto_gf_TalentTreeMarksman_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeMarksman_Trigger, false, false);
}

bool auto_gf_TalentTreeMarksman_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 121, 80, StringExternal("Param/Value/7BA7BF28"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 400, 80, StringExternal("Param/Value/491BF1EE"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/0FE1E59C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-feedback-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/B50667C5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-penetratorround.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/9E580B97"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-terran-penetrator.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/254052D9"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-snipe-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/D3052ACB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-terran-ghost.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/D181083D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-snipe.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/3CAF261E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-maelstromrounds.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/3458D60F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-criussuit.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/4D8D10B4"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-consumption.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/BC774553"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-cloakfield-color.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeDemolitions_Trigger = null;

void gf_TalentTreeDemolitions () {
    if (auto_gf_TalentTreeDemolitions_Trigger == null) {
        auto_gf_TalentTreeDemolitions_Trigger = TriggerCreate("auto_gf_TalentTreeDemolitions_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeDemolitions_Trigger, false, false);
}

bool auto_gf_TalentTreeDemolitions_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 136, 80, StringExternal("Param/Value/02F1A5BF"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 393, 80, StringExternal("Param/Value/B54E2E92"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/031ECE4C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-spidermine.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/A3C543E5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-extramines.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/6246E76B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-research-terran-techreactor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/853EF5E9"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-antistructureweapon.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/E7DA0331"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-terran-nukepack.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/BC10A6AA"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-zerg-buildingarmor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/1AF9B61B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-tosh-consumption.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/A6FAC1A3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-microfiltering.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/65803165"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-terran-marauderkillsquad.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/6AF75D59"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-frenzied-color.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeEngineer_Trigger = null;

void gf_TalentTreeEngineer () {
    if (auto_gf_TalentTreeEngineer_Trigger == null) {
        auto_gf_TalentTreeEngineer_Trigger = TriggerCreate("auto_gf_TalentTreeEngineer_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeEngineer_Trigger, false, false);
}

bool auto_gf_TalentTreeEngineer_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 118, 80, StringExternal("Param/Value/D5DA9F02"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 404, 80, StringExternal("Param/Value/13B99862"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/D60C6553"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-protoss-probe-dark.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/B52ADE7D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-d8charge.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/5817E800"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-research-zerg-psidisruptor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/EB0CEA94"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-hardenedshields-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/EB7CBB6B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-protoss-immortal-dark.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/794801C7"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets/Textures/btn-unit-terran-ares.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/ED6ADE25"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-clusterwarheads.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/2C115FD9"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-behavior-incapacitated.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/593C8B18"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-research-terran-commandcenterreactor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/DFA0E100"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-planetcracker.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeCommando_Trigger = null;

void gf_TalentTreeCommando () {
    if (auto_gf_TalentTreeCommando_Trigger == null) {
        auto_gf_TalentTreeCommando_Trigger = TriggerCreate("auto_gf_TalentTreeCommando_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeCommando_Trigger, false, false);
}

bool auto_gf_TalentTreeCommando_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 130, 80, StringExternal("Param/Value/800BC384"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 409, 80, StringExternal("Param/Value/97C8044E"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/8737037E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-zerg-missileattacks-level3.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/F5EFF790"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-research-zerg-cellularreactor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/715F0C91"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-fallenheroes.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/7B1A91EB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/C3E6E389"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-nuclearstrike-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/0E23790F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-psidisruption.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/007CB6ED"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-defierbones.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/DA47D00B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-blackhole-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/2EE68D46"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-combatshield-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/4FC12332"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-tosh-mindblast.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreePsiOps_Trigger = null;

void gf_TalentTreePsiOps () {
    if (auto_gf_TalentTreePsiOps_Trigger == null) {
        auto_gf_TalentTreePsiOps_Trigger = TriggerCreate("auto_gf_TalentTreePsiOps_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreePsiOps_Trigger, false, false);
}

bool auto_gf_TalentTreePsiOps_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 136, 80, StringExternal("Param/Value/3A12726E"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 363, 80, StringExternal("Param/Value/E58A9A8E"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/3F10C20D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-phasemine-zeratul.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/338E89DB"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-terran-energynova.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/41A4BECF"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-blink-zeratul.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/307A9E1B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-ocularimplants.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/E68BB14D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-psistorm-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/4EB3E5D4"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-voidprison.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/ED2DC321"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-hallucination-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/56A9529D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-nova-permacloak.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/92C4003A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-creepmove.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/5E401B3F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-timebomb.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeTechnician_Trigger = null;

void gf_TalentTreeTechnician () {
    if (auto_gf_TalentTreeTechnician_Trigger == null) {
        auto_gf_TalentTreeTechnician_Trigger = TriggerCreate("auto_gf_TalentTreeTechnician_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeTechnician_Trigger, false, false);
}

bool auto_gf_TalentTreeTechnician_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 142, 80, StringExternal("Param/Value/7EF313C0"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 373, 80, StringExternal("Param/Value/811A377A"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/87EEA165"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets/Textures/btn-research-terran-sciencevessel.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/ECB0B7EF"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets/Textures/btn-ability-protoss-blink.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/DD01240C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets/Textures/btn-ability-terran-scannersweep-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/86F47CDE"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets/Textures/btn-ability-terran-tychustossgrenade.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/C1CF922A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets/Textures/btn-tips-flamingbetty.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/13C4FF05"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets/Textures/btn-ability-terran-chronoriftdevice.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/CFF8384B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets/Textures/btn-research-terran-ultracapacitors.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/78176EBF"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets/Textures/btn-unit-terran-vikingassault.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/0BA84212"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets/Textures/btn-research-zerg-shriketurret.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/82F6A922"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets/Textures/btn-upgrade-terran-moebiusreactor.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeForwardObserver_Trigger = null;

void gf_TalentTreeForwardObserver () {
    if (auto_gf_TalentTreeForwardObserver_Trigger == null) {
        auto_gf_TalentTreeForwardObserver_Trigger = TriggerCreate("auto_gf_TalentTreeForwardObserver_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeForwardObserver_Trigger, false, false);
}

bool auto_gf_TalentTreeForwardObserver_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 143, 80, StringExternal("Param/Value/24C99249"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 362, 80, StringExternal("Param/Value/D295A879"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/0B321D7F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-bombardmentstrike-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/5299857B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-charonboosters.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/6C3D1083"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-ripwavemissiles.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/49A61829"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-terran-wraith.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/652A42EE"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-walloffire.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/54B11EAC"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-neosteelbunker.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/A11BC364"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-infantryarmorlevel3.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/AFDF15A5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-terran-firebat.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/D696DE69"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-unit-terran-ghost.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/25770153"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-tips-hyperion.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeFlamethrower_Trigger = null;

void gf_TalentTreeFlamethrower () {
    if (auto_gf_TalentTreeFlamethrower_Trigger == null) {
        auto_gf_TalentTreeFlamethrower_Trigger = TriggerCreate("auto_gf_TalentTreeFlamethrower_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeFlamethrower_Trigger, false, false);
}

bool auto_gf_TalentTreeFlamethrower_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 171, 80, StringExternal("Param/Value/F26C45D1"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 416, 80, StringExternal("Param/Value/48E2CCBA"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/37E0BF65"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-infernalpreigniter.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/6A72CD9D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-reapernitropacks.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/5C6A246F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-jotunboosters.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/2F8EE6C8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-domination.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/286519D9"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-corvidreactor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/5040DCE5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-psioniclash.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/3EE873A7"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-domination.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/4905F1F4"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-advancedhealingai.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/D6F283E1"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-blink.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/70BA0938"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-techupgrade-terran-nano-botinjectors.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreePathfinder_Trigger = null;

void gf_TalentTreePathfinder () {
    if (auto_gf_TalentTreePathfinder_Trigger == null) {
        auto_gf_TalentTreePathfinder_Trigger = TriggerCreate("auto_gf_TalentTreePathfinder_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreePathfinder_Trigger, false, false);
}

bool auto_gf_TalentTreePathfinder_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 153, 80, StringExternal("Param/Value/17D10814"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 401, 80, StringExternal("Param/Value/35E13E34"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/7A385CD3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets/Textures/btn-upgrade-terran-infantryweaponslevel3.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/9812C9EA"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets/Textures/btn-techupgrade-terran-330mmbarragecannon.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/701E9F3B"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "NOTD Generic Art/NOTD Pistol.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/5132AC62"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets/Textures/btn-ability-terran-psidisruption.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/F7D88AB5"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets/Textures/btn-upgrade-zerg-enduringcorruption.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/2FCCACD7"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets/Textures/btn-ability-terran-jetpack-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/DD20E3D0"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets/Textures/btn-upgrade-terran-reapernitropacks.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/278E976F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets/Textures/btn-tips-walloffire.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/854D90F9"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets/Textures/btn-research-terran-ultracapacitors.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/13E23BA8"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets/Textures/btn-techupgrade-terran-ripwavemissiles.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeChemExpert_Trigger = null;

void gf_TalentTreeChemExpert () {
    if (auto_gf_TalentTreeChemExpert_Trigger == null) {
        auto_gf_TalentTreeChemExpert_Trigger = TriggerCreate("auto_gf_TalentTreeChemExpert_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeChemExpert_Trigger, false, false);
}

bool auto_gf_TalentTreeChemExpert_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 171, 80, StringExternal("Param/Value/BF37F3BF"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopLeft, 390, 80, StringExternal("Param/Value/84281CCA"), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][1], StringExternal("Param/Value/94E1D098"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[1][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-banelingspooge.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][2], StringExternal("Param/Value/504CAB81"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[2][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-zerg-generatecreep-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][3], StringExternal("Param/Value/08B6C2EC"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[3][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-terran-huntermissile-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][4], StringExternal("Param/Value/C70B78E0"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[4][gv_talentTreePlayer], "Assets\\Textures\\btn-building-terran-techreactor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][5], StringExternal("Param/Value/B2EB5930"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[5][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-zerg-airattacks-level1.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][6], StringExternal("Param/Value/10D2B34E"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[6][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-terran-caduceusreactor.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][7], StringExternal("Param/Value/7988AD9F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[7][gv_talentTreePlayer], "Assets\\Textures\\btn-upgrade-protoss-airweaponslevel2.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][8], StringExternal("Param/Value/1D3E5E79"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[8][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-feedback-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][9], StringExternal("Param/Value/7DA58432"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[9][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-blink-color.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_talentTreeItem[gv_talentTreePlayer][10], StringExternal("Param/Value/6DF4400A"), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeImages[10][gv_talentTreePlayer], "Assets\\Textures\\btn-ability-protoss-gather.dds", PlayerGroupAll());
    return true;
}

trigger auto_gf_TalentTreeCreation_Trigger = null;

void gf_TalentTreeCreation () {
    if (auto_gf_TalentTreeCreation_Trigger == null) {
        auto_gf_TalentTreeCreation_Trigger = TriggerCreate("auto_gf_TalentTreeCreation_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeCreation_Trigger, false, false);
}

bool auto_gf_TalentTreeCreation_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBF986D46_ae = 10;
    int autoBF986D46_var;

    // Implementation
    DialogCreate(690, 610, c_anchorBottomRight, 273, 433, true);
    gv_talentTree[gv_talentTreePlayer] = DialogLastCreated();
    DialogSetTransparency(gv_talentTree[gv_talentTreePlayer], 0.0);
    DialogSetImageVisible(gv_talentTree[gv_talentTreePlayer], false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 690, 610, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 156, 182, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(17.25, 68.63, 99.61), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 156, 322, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(17.25, 68.63, 99.61), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 406, 182, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(17.25, 68.63, 99.61), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 100, 100, c_anchorTopLeft, 406, 322, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(17.25, 68.63, 99.61), c_triggerBlendModeAdd);
    libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 90, PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopRight, -76, 153, StringExternal("Param/Value/DD1A4C85"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopRight, -76, 293, StringExternal("Param/Value/C124A0C6"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 200, 50, c_anchorTopRight, -76, 435, StringExternal("Param/Value/8A6448DF"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 500, 50, c_anchorBottom, 120, 53, (StringExternal("Param/Value/4E7C5F3E") + IntToText(gv_talentsAvailable[gv_talentTreePlayer])), Color(100,100,100), false, 0.0);
    gv_talentsAvailableDialog[gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(gv_talentsAvailableDialog[gv_talentTreePlayer], "HelpPanelListBoxItemTitle", PlayerGroupAll());
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 500, 50, c_anchorTop, 173, 29, StringExternal("Param/Value/92E65714"), Color(100,100,100), false, 0.0);
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 34, 34, c_anchorTopRight, 40, 30, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeCloseButtons[gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 34, 34, c_anchorTopRight, 40, 30, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_closebutton_normalandpressed.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 100, 115, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 99, 113, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[1][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 62, 73, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[1][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 100, 113, StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-maelstromrounds.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[1][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 210, 113, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][2] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 209, 113, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[2][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 172, 73, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[2][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 210, 113, StringToText(""), "Assets\\Textures\\btn-ability-terran-experiencedplasmagun.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[2][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 100, 253, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][3] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 99, 253, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[3][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 62, 213, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[3][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 100, 253, StringToText(""), "Assets\\Textures\\btn-ability-terran-snipe.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[3][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 210, 253, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][4] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 209, 253, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[4][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 172, 213, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[4][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 210, 253, StringToText(""), "Assets\\Textures\\btn-ability-terran-raynortossgrenade.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[4][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 155, 393, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][5] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 154, 393, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[5][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 117, 353, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[5][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 155, 393, StringToText(""), "Assets\\Textures\\btn-ability-terran-domination.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[5][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 350, 113, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][6] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 349, 113, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[6][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 310, 73, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[6][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 350, 113, StringToText(""), "Assets\\Textures\\btn-ability-terran-stimpack.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[6][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 460, 113, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][7] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 459, 113, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[7][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 422, 73, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[7][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 460, 113, StringToText(""), "Assets\\Textures\\btn-ability-protoss-charge.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[7][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 350, 253, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][8] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 349, 253, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[8][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 312, 213, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[8][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 350, 253, StringToText(""), "Assets\\Textures\\btn-ability-protoss-blink-color.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[8][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 460, 253, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][9] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 459, 253, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[9][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 422, 213, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[9][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 460, 253, StringToText(""), "Assets\\Textures\\btn-ability-terran-haleoflead.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[9][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 405, 393, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeItem[gv_talentTreePlayer][10] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 113, 109, c_anchorTopLeft, 404, 393, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersInitial[10][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 176, 176, c_anchorTopLeft, 367, 353, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_talentTreeBordersFinal[10][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_talentTree[gv_talentTreePlayer], 100, 100, c_anchorTopLeft, 405, 393, StringToText(""), "Assets\\Textures\\btn-ability-protoss-voidprison.dds", c_triggerImageTypeNormal, false, Color(33.33, 33.33, 100.00), c_triggerBlendModeAdd);
    gv_talentTreeImages[10][gv_talentTreePlayer] = DialogControlLastCreated();
    if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Rifleman")) {
        gf_TalentTreeRifleman();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Medic")) {
        gf_TalentTreeMedic();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "TychusChaingun")) {
        gf_TalentTreeAssault();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Spectre")) {
        gf_TalentTreeRecon();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "GhostLaserLines")) {
        gf_TalentTreeMarksman();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "DominionKillTeam")) {
        gf_TalentTreeDemolitions();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Engineer")) {
        gf_TalentTreeEngineer();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Commando")) {
        gf_TalentTreeCommando();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "PsiOps")) {
        gf_TalentTreePsiOps();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Technician")) {
        gf_TalentTreeTechnician();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "ForwardObserver")) {
        gf_TalentTreeForwardObserver();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Flamethrower3")) {
        gf_TalentTreeFlamethrower();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Pathfinder")) {
        gf_TalentTreePathfinder();
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "ChemicalExpert")) {
        gf_TalentTreeChemExpert();
    }
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 155, 190, (StringExternal("Param/Value/F968518F") + (StringExternal("Param/Value/B831BF36") + StringExternal("Param/Value/A8822340"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[1][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 265, 190, (StringExternal("Param/Value/328CA45C") + (StringExternal("Param/Value/D42467F8") + StringExternal("Param/Value/DEDCAB38"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[2][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 155, 330, (StringExternal("Param/Value/B8259B1B") + (StringExternal("Param/Value/9FEC493D") + StringExternal("Param/Value/0DA5FB0D"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[3][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 265, 330, (StringExternal("Param/Value/EE82EB70") + (StringExternal("Param/Value/4C477970") + StringExternal("Param/Value/C0DBC94F"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[4][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 210, 470, (StringExternal("Param/Value/E4A9872D") + (StringExternal("Param/Value/6C4D6BB2") + StringExternal("Param/Value/4BACB945"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[5][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 405, 190, (StringExternal("Param/Value/2F0D98D5") + (StringExternal("Param/Value/B02CC394") + StringExternal("Param/Value/CFCAEC89"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[6][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 515, 190, (StringExternal("Param/Value/B1C3AB30") + (StringExternal("Param/Value/5488C1CD") + StringExternal("Param/Value/47C2261E"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[7][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 405, 330, (StringExternal("Param/Value/1DE70699") + (StringExternal("Param/Value/B27B7AF8") + StringExternal("Param/Value/391A24CF"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[8][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 515, 330, (StringExternal("Param/Value/C13E1143") + (StringExternal("Param/Value/2B64E381") + StringExternal("Param/Value/36B2DD0E"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[9][gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_talentTree[gv_talentTreePlayer], 150, 50, c_anchorTopLeft, 460, 470, (StringExternal("Param/Value/A7E3BA3D") + (StringExternal("Param/Value/4F43555B") + StringExternal("Param/Value/8A61B91F"))), Color(100,100,100), false, 2.0);
    gv_talentTreeTexts[10][gv_talentTreePlayer] = DialogControlLastCreated();
    autoBF986D46_var = 1;
    for ( ; autoBF986D46_var <= autoBF986D46_ae; autoBF986D46_var += 1 ) {
        libNtve_gf_SetDialogItemStyle(gv_talentTreeTexts[autoBF986D46_var][gv_talentTreePlayer], "HeaderExtendedTemplate", PlayerGroupAll());
    }
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 43, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 51, 10, StringExternal("Param/Value/18A39E42"), Color(100,100,100), false, 0.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 43, 25, StringExternal("Param/Value/78494FEB"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeMedalsTabButtons[gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 129, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 137, 10, StringExternal("Param/Value/359E1AAF"), Color(100,100,100), false, 0.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 129, 25, StringExternal("Param/Value/10DFB63E"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeStatsTabButtons[gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 198, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 198, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 198, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 206, 10, StringExternal("Param/Value/350ED921"), Color(100,100,100), false, 0.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 290, 32, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 290, 32, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeScrollPreviousButtons[gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 323, 32, StringToText(""), gv_rankIcon[gv_playerRank[gv_talentTreePlayer]], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
    gv_talentTreeRankIcon[gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 375, 33, c_anchorBottomLeft, 356, 25, (gv_rankTitle[gv_playerRank[gv_talentTreePlayer]] + PlayerName(gv_talentTreePlayer)), Color(100.00, 100.00, 0.00), false, 0.0);
    gv_talentTreePlayerNameLabel[gv_talentTreePlayer] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomRight, 80, 32, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 33, 33, c_anchorBottomRight, 80, 32, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_talentTreeScrollNextButtons[gv_talentTreePlayer] = DialogControlLastCreated();
    gf_TalentTreeInit();
    return true;
}

trigger auto_gf_TalentTreeInit_Trigger = null;

void gf_TalentTreeInit () {
    if (auto_gf_TalentTreeInit_Trigger == null) {
        auto_gf_TalentTreeInit_Trigger = TriggerCreate("auto_gf_TalentTreeInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeInit_Trigger, false, false);
}

bool auto_gf_TalentTreeInit_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerGroup;
    int lv_pickedPlayer;

    // Automatic Variable Declarations
    playergroup auto640C0780_g;
    int auto640C0780_var;
    playergroup auto159EFDAE_g;
    int auto159EFDAE_var;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    auto640C0780_g = PlayerGroupAll();
    auto640C0780_var = -1;
    while (true) {
        auto640C0780_var = PlayerGroupNextPlayer(auto640C0780_g, auto640C0780_var);
        if (auto640C0780_var < 0) { break; }
        if ((PlayerStatus(auto640C0780_var) == c_playerStatusActive) && (PlayerType(auto640C0780_var) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_playerGroup, auto640C0780_var);
        }

    }
    auto159EFDAE_g = lv_playerGroup;
    auto159EFDAE_var = -1;
    while (true) {
        auto159EFDAE_var = PlayerGroupNextPlayer(auto159EFDAE_g, auto159EFDAE_var);
        if (auto159EFDAE_var < 0) { break; }
        lv_pickedPlayer = auto159EFDAE_var;
        gf_UpdateTalentImage(1, lv_pickedPlayer);
        gf_UpdateTalentImage(2, lv_pickedPlayer);
        gf_UpdateTalentImage(6, lv_pickedPlayer);
        gf_UpdateTalentImage(7, lv_pickedPlayer);
    }
    return true;
}

void gf_SetCombatKnifeDamage (int lp_triggeringPlayer) {
    // Variable Declarations
    fixed lv_combatKnifeDamage;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_combatKnifeDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CombatKnifeDamage", "Amount", lp_triggeringPlayer));
    lv_combatKnifeDamage += ((IntToFixed(gv_playerRank[lp_triggeringPlayer]) - 1.0) * 0.5);
    CatalogFieldValueSet(c_gameCatalogEffect, "CombatKnifeDamage", "Amount", lp_triggeringPlayer, FixedToString(lv_combatKnifeDamage, c_fixedPrecisionAny));
}

fixed gf_HarvesterofSorrowCheck (unit lp_assaultUnit) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitHasBehavior(lp_assaultUnit, "HarvesterofSorrow") == true)) {
        return 1.0;
    }
    else {
        return 0.0;
    }
}

fixed gf_WeaponsProfReloadTimeFactor (int lp_triggPlayer) {
    // Variable Declarations
    fixed lv_abilityLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_abilityLevel = IntToFixed(gv_talentLevel[3][lp_triggPlayer]);

    // Implementation
    if (((lv_abilityLevel > 0.0) && (UnitGetType(gv_marineHero[lp_triggPlayer]) == "Rifleman"))) {
        return (gv_baseMarineReloadMultiplier[lp_triggPlayer] - ((lv_abilityLevel * 0.15) * gv_baseMarineReloadMultiplier[lp_triggPlayer]));
    }
    else {
        return gv_baseMarineReloadMultiplier[lp_triggPlayer];
    }
}

void gf_InitializeConcentrationTimer (int lp_marksmanPlayer) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(gv_marineHero[lp_marksmanPlayer]) == "GhostLaserLines") && (gv_talentLevel[1][lp_marksmanPlayer] > 0))) {
        TimerStart(gv_concentrationTimer[lp_marksmanPlayer], 2.5, true, c_timeGame);
    }

}

trigger auto_gf_HeartbeatSensorBeep_Trigger = null;
int auto_gf_HeartbeatSensorBeep_lp_reconPlayer;

void gf_HeartbeatSensorBeep (int lp_reconPlayer) {
    auto_gf_HeartbeatSensorBeep_lp_reconPlayer = lp_reconPlayer;

    if (auto_gf_HeartbeatSensorBeep_Trigger == null) {
        auto_gf_HeartbeatSensorBeep_Trigger = TriggerCreate("auto_gf_HeartbeatSensorBeep_TriggerFunc");
    }

    TriggerExecute(auto_gf_HeartbeatSensorBeep_Trigger, false, false);
}

bool auto_gf_HeartbeatSensorBeep_TriggerFunc (bool testConds, bool runActions) {
    int lp_reconPlayer = auto_gf_HeartbeatSensorBeep_lp_reconPlayer;

    // Variable Declarations
    unitgroup lv_nearbyZombies;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_nearbyZombies = UnitGroupEmpty();

    // Implementation
    while (true) {
        if ((UnitIsAlive(gv_marineHero[lp_reconPlayer]) == false)) {
            break;
        }

        UnitGroupClear(lv_nearbyZombies);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, 13, RegionCircle(UnitGetPosition(gv_marineHero[lp_reconPlayer]), gv_heartbeatSensorRadius[lp_reconPlayer]), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_nearbyZombies);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, 14, RegionCircle(UnitGetPosition(gv_marineHero[lp_reconPlayer]), gv_heartbeatSensorRadius[lp_reconPlayer]), UnitFilter((1 << c_targetFilterMassive), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_nearbyZombies);
        if ((UnitGroupCount(lv_nearbyZombies, c_unitCountAlive) == 0)) {
            gv_noEnemy[lp_reconPlayer] = true;
        }
        else {
            gv_noEnemy[lp_reconPlayer] = false;
        }
        if ((gv_noEnemy[lp_reconPlayer] == false)) {
            SoundPlay(SoundLink("HeartBeatSensorPing", -1), PlayerGroupSingle(lp_reconPlayer), 100.0, 0.0);
        }

        Wait(3.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_ForwardObserverLaunchSound_Trigger = null;
int auto_gf_ForwardObserverLaunchSound_lp_forwardObserverOwner;
point auto_gf_ForwardObserverLaunchSound_lp_point;
int auto_gf_ForwardObserverLaunchSound_lp_shellMode;

void gf_ForwardObserverLaunchSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode) {
    auto_gf_ForwardObserverLaunchSound_lp_forwardObserverOwner = lp_forwardObserverOwner;
    auto_gf_ForwardObserverLaunchSound_lp_point = lp_point;
    auto_gf_ForwardObserverLaunchSound_lp_shellMode = lp_shellMode;

    if (auto_gf_ForwardObserverLaunchSound_Trigger == null) {
        auto_gf_ForwardObserverLaunchSound_Trigger = TriggerCreate("auto_gf_ForwardObserverLaunchSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_ForwardObserverLaunchSound_Trigger, false, false);
}

bool auto_gf_ForwardObserverLaunchSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_forwardObserverOwner = auto_gf_ForwardObserverLaunchSound_lp_forwardObserverOwner;
    point lp_point = auto_gf_ForwardObserverLaunchSound_lp_point;
    int lp_shellMode = auto_gf_ForwardObserverLaunchSound_lp_shellMode;

    // Variable Declarations
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;

    // Automatic Variable Declarations
    int auto74EE3ACA_ae;
    int auto74EE3ACA_var;

    // Variable Initialization

    // Implementation
    if ((lp_shellMode == 1)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 2)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 3)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    Wait(0.5, c_timeGame);
    auto74EE3ACA_ae = lv_shellLimit;
    auto74EE3ACA_var = 1;
    for ( ; auto74EE3ACA_var <= auto74EE3ACA_ae; auto74EE3ACA_var += 1 ) {
        UnitCreateEffectPoint(gv_marineHero[lp_forwardObserverOwner], "ForwardObserverLaunch", lp_point);
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

trigger auto_gf_ForwardObserverShellFlightSound_Trigger = null;
int auto_gf_ForwardObserverShellFlightSound_lp_forwardObserverOwner;
point auto_gf_ForwardObserverShellFlightSound_lp_point;
int auto_gf_ForwardObserverShellFlightSound_lp_shellMode;

void gf_ForwardObserverShellFlightSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode) {
    auto_gf_ForwardObserverShellFlightSound_lp_forwardObserverOwner = lp_forwardObserverOwner;
    auto_gf_ForwardObserverShellFlightSound_lp_point = lp_point;
    auto_gf_ForwardObserverShellFlightSound_lp_shellMode = lp_shellMode;

    if (auto_gf_ForwardObserverShellFlightSound_Trigger == null) {
        auto_gf_ForwardObserverShellFlightSound_Trigger = TriggerCreate("auto_gf_ForwardObserverShellFlightSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_ForwardObserverShellFlightSound_Trigger, false, false);
}

bool auto_gf_ForwardObserverShellFlightSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_forwardObserverOwner = auto_gf_ForwardObserverShellFlightSound_lp_forwardObserverOwner;
    point lp_point = auto_gf_ForwardObserverShellFlightSound_lp_point;
    int lp_shellMode = auto_gf_ForwardObserverShellFlightSound_lp_shellMode;

    // Variable Declarations
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;
    fixed lv_startTime;

    // Automatic Variable Declarations
    int autoED3BED98_ae;
    int autoED3BED98_var;

    // Variable Initialization
    lv_startTime = (gv_barrageTime[lp_forwardObserverOwner] - 4.5);

    // Implementation
    if ((lp_shellMode == 1)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 2)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 3)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    if ((lv_startTime < 0.0)) {
        lv_startTime = 0.0;
    }

    Wait(lv_startTime, c_timeGame);
    autoED3BED98_ae = lv_shellLimit;
    autoED3BED98_var = 1;
    for ( ; autoED3BED98_var <= autoED3BED98_ae; autoED3BED98_var += 1 ) {
        UnitCreateEffectPoint(gv_marineHero[lp_forwardObserverOwner], "ForwardObserverShellFlight", lp_point);
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

void gf_ForwardObserverCreateShellDialog (int lp_forwardObserverOwner) {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(190, 250, c_anchorBottom, 734, -17, false);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\black.dds");
    gv_shellDialog[lp_forwardObserverOwner] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 28, StringExternal("Param/Value/C32F4DC4"), "Assets\\Textures\\btn-techupgrade-terran-extramines.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_shellDialog[lp_forwardObserverOwner], 200, 50, c_anchorTopLeft, 70, 33, IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountStart", lp_forwardObserverOwner)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Kicker_Zerg", PlayerGroupSingle(lp_forwardObserverOwner));
    gv_shellCounter[0][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 76, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 76, StringExternal("Param/Value/0BC8506B"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_forwardObserverOwner), 0.0, 100.0);
    gv_shellDecre[1][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 58, 76, StringExternal("Param/Value/D1B7C63A"), "Assets\\Textures\\btn-ability-terran-bombardmentstrike-color.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 88, 76, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 88, 76, StringExternal("Param/Value/546EB49A"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_forwardObserverOwner), 0.0, 100.0);
    gv_shellIncre[1][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_shellDialog[lp_forwardObserverOwner], 200, 50, c_anchorTopLeft, 118, 81, IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Kicker_Zerg", PlayerGroupSingle(lp_forwardObserverOwner));
    gv_shellCounter[1][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 124, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 124, StringExternal("Param/Value/9A970C8E"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_forwardObserverOwner), 0.0, 100.0);
    gv_shellDecre[2][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 58, 124, StringExternal("Param/Value/1338F715"), "Assets\\Textures\\btn-techupgrade-terran-ripwavemissiles.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 88, 124, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 88, 124, StringExternal("Param/Value/5557EA5F"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_forwardObserverOwner), 0.0, 100.0);
    gv_shellIncre[2][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_shellDialog[lp_forwardObserverOwner], 200, 50, c_anchorTopLeft, 118, 129, IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Kicker_Zerg", PlayerGroupSingle(lp_forwardObserverOwner));
    gv_shellCounter[2][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 172, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 172, StringExternal("Param/Value/753FC6CE"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_forwardObserverOwner), 0.0, 100.0);
    gv_shellDecre[3][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 58, 172, StringExternal("Param/Value/C1316C0B"), "Assets\\Textures\\btn-tips-walloffire.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 88, 172, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 88, 172, StringExternal("Param/Value/1401E44F"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lp_forwardObserverOwner), 0.0, 100.0);
    gv_shellIncre[3][lp_forwardObserverOwner] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_shellDialog[lp_forwardObserverOwner], 200, 50, c_anchorTopLeft, 118, 177, IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Kicker_Zerg", PlayerGroupSingle(lp_forwardObserverOwner));
    gv_shellCounter[3][lp_forwardObserverOwner] = DialogControlLastCreated();
    DialogSetVisible(gv_shellDialog[lp_forwardObserverOwner], PlayerGroupAll(), false);
    DialogSetVisible(gv_shellDialog[lp_forwardObserverOwner], PlayerGroupSingle(lp_forwardObserverOwner), true);
}

bool gf_CPDecayFactor () {
    // Automatic Variable Declarations
    // Implementation
    if ((((gv_nightmare == true) && (RandomInt(1, 100) <= 15)) || ((gv_nightmare == false) && (gv_noNewbie == true) && (RandomInt(1, 100) <= 20)) || ((gv_nightmare == false) && (gv_noNewbie == false) && (RandomInt(1, 100) <= 25)))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_MarineSpeechNOTD_Trigger = null;
unit auto_gf_MarineSpeechNOTD_lp_speechUnit;
text auto_gf_MarineSpeechNOTD_lp_speech;

void gf_MarineSpeechNOTD (unit lp_speechUnit, text lp_speech) {
    auto_gf_MarineSpeechNOTD_lp_speechUnit = lp_speechUnit;
    auto_gf_MarineSpeechNOTD_lp_speech = lp_speech;

    if (auto_gf_MarineSpeechNOTD_Trigger == null) {
        auto_gf_MarineSpeechNOTD_Trigger = TriggerCreate("auto_gf_MarineSpeechNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_MarineSpeechNOTD_Trigger, false, false);
}

bool auto_gf_MarineSpeechNOTD_TriggerFunc (bool testConds, bool runActions) {
    unit lp_speechUnit = auto_gf_MarineSpeechNOTD_lp_speechUnit;
    text lp_speech = auto_gf_MarineSpeechNOTD_lp_speech;

    // Variable Declarations
    int lv_localTextTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localTextTag = c_textTagNone;

    // Implementation
    SoundPlayAtPoint(SoundLink("Transmission", -1), PlayerGroupAll(), UnitGetPosition(lp_speechUnit), 1.5, 31.0, 0.0);
    if (((lp_speechUnit == gv_marineHero[1]) || (lp_speechUnit == gv_marineHero[2]) || (lp_speechUnit == gv_marineHero[3]) || (lp_speechUnit == gv_marineHero[4]) || (lp_speechUnit == gv_marineHero[5]) || (lp_speechUnit == gv_marineHero[6]) || (lp_speechUnit == gv_marineHero[7]) || (lp_speechUnit == gv_marineHero[8]))) {
        TextTagCreate((PlayerName(UnitGetOwner(lp_speechUnit)) + (StringExternal("Param/Value/9F04A6FD") + lp_speech)), 24, UnitGetPosition(lp_speechUnit), 1.5, true, true, PlayerGroupActive());
    }
    else {
        TextTagCreate((UnitTypeGetName(UnitGetType(lp_speechUnit)) + (StringExternal("Param/Value/C5735DA3") + lp_speech)), 24, UnitGetPosition(lp_speechUnit), 1.5, true, true, PlayerGroupActive());
    }
    lv_localTextTag = TextTagLastCreated();
    TextTagSetColor(lv_localTextTag, c_textTagColorText, Color(95.69, 84.31, 16.86));
    TextTagAttachToUnit(lv_localTextTag, lp_speechUnit, 1.5);
    Wait(5.0, c_timeReal);
    TextTagDestroy(lv_localTextTag);
    return true;
}

trigger auto_gf_CoordinateTextNOTD_Trigger = null;
point auto_gf_CoordinateTextNOTD_lp_displayPoint;
text auto_gf_CoordinateTextNOTD_lp_speech;

void gf_CoordinateTextNOTD (point lp_displayPoint, text lp_speech) {
    auto_gf_CoordinateTextNOTD_lp_displayPoint = lp_displayPoint;
    auto_gf_CoordinateTextNOTD_lp_speech = lp_speech;

    if (auto_gf_CoordinateTextNOTD_Trigger == null) {
        auto_gf_CoordinateTextNOTD_Trigger = TriggerCreate("auto_gf_CoordinateTextNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_CoordinateTextNOTD_Trigger, false, false);
}

bool auto_gf_CoordinateTextNOTD_TriggerFunc (bool testConds, bool runActions) {
    point lp_displayPoint = auto_gf_CoordinateTextNOTD_lp_displayPoint;
    text lp_speech = auto_gf_CoordinateTextNOTD_lp_speech;

    // Variable Declarations
    int lv_localTextTag;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localTextTag = c_textTagNone;

    // Implementation
    SoundPlayAtPoint(SoundLink("Transmission", -1), PlayerGroupAll(), lp_displayPoint, 1.5, 20.0, 0.0);
    TextTagCreate(lp_speech, 24, lp_displayPoint, 1.0, true, false, PlayerGroupActive());
    lv_localTextTag = TextTagLastCreated();
    Wait(5.0, c_timeReal);
    TextTagDestroy(lv_localTextTag);
    return true;
}

trigger auto_gf_RadioNOTD_Trigger = null;
text auto_gf_RadioNOTD_lp_speechUnit;
text auto_gf_RadioNOTD_lp_speech;

void gf_RadioNOTD (text lp_speechUnit, text lp_speech) {
    auto_gf_RadioNOTD_lp_speechUnit = lp_speechUnit;
    auto_gf_RadioNOTD_lp_speech = lp_speech;

    if (auto_gf_RadioNOTD_Trigger == null) {
        auto_gf_RadioNOTD_Trigger = TriggerCreate("auto_gf_RadioNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_RadioNOTD_Trigger, false, false);
}

bool auto_gf_RadioNOTD_TriggerFunc (bool testConds, bool runActions) {
    text lp_speechUnit = auto_gf_RadioNOTD_lp_speechUnit;
    text lp_speech = auto_gf_RadioNOTD_lp_speech;

    // Automatic Variable Declarations
    // Implementation
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupActive(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/A5117E49") + (lp_speechUnit + (StringExternal("Param/Value/5DDB7741") + (lp_speech + StringExternal("Param/Value/3778460A"))))));
    return true;
}

trigger auto_gf_TipNOTD_Trigger = null;
int auto_gf_TipNOTD_lp_tipThreshold;
text auto_gf_TipNOTD_lp_tipText;

void gf_TipNOTD (int lp_tipThreshold, text lp_tipText) {
    auto_gf_TipNOTD_lp_tipThreshold = lp_tipThreshold;
    auto_gf_TipNOTD_lp_tipText = lp_tipText;

    if (auto_gf_TipNOTD_Trigger == null) {
        auto_gf_TipNOTD_Trigger = TriggerCreate("auto_gf_TipNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipNOTD_Trigger, false, false);
}

bool auto_gf_TipNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_tipThreshold = auto_gf_TipNOTD_lp_tipThreshold;
    text lp_tipText = auto_gf_TipNOTD_lp_tipText;

    // Automatic Variable Declarations
    const int autoEAEDBE9F_ae = 8;
    int autoEAEDBE9F_var;

    // Implementation
    autoEAEDBE9F_var = 1;
    for ( ; autoEAEDBE9F_var <= autoEAEDBE9F_ae; autoEAEDBE9F_var += 1 ) {
        if ((gv_playerXP[autoEAEDBE9F_var] < lp_tipThreshold)) {
            SoundPlay(SoundLink("UI_TipButtonAppear", -1), PlayerGroupSingle(autoEAEDBE9F_var), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(autoEAEDBE9F_var), c_messageAreaDirective, (StringExternal("Param/Value/3FAE88EC") + lp_tipText));
        }

    }
    Wait(8.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

trigger auto_gf_TipLocalNOTD_Trigger = null;
int auto_gf_TipLocalNOTD_lp_tipThreshold;
int auto_gf_TipLocalNOTD_lp_tipPlayer;
text auto_gf_TipLocalNOTD_lp_tipText;

void gf_TipLocalNOTD (int lp_tipThreshold, int lp_tipPlayer, text lp_tipText) {
    auto_gf_TipLocalNOTD_lp_tipThreshold = lp_tipThreshold;
    auto_gf_TipLocalNOTD_lp_tipPlayer = lp_tipPlayer;
    auto_gf_TipLocalNOTD_lp_tipText = lp_tipText;

    if (auto_gf_TipLocalNOTD_Trigger == null) {
        auto_gf_TipLocalNOTD_Trigger = TriggerCreate("auto_gf_TipLocalNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipLocalNOTD_Trigger, false, false);
}

bool auto_gf_TipLocalNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_tipThreshold = auto_gf_TipLocalNOTD_lp_tipThreshold;
    int lp_tipPlayer = auto_gf_TipLocalNOTD_lp_tipPlayer;
    text lp_tipText = auto_gf_TipLocalNOTD_lp_tipText;

    // Automatic Variable Declarations
    // Implementation
    if ((gv_playerXP[lp_tipPlayer] < lp_tipThreshold)) {
        SoundPlay(SoundLink("UI_TipButtonAppear", -1), PlayerGroupSingle(lp_tipPlayer), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(lp_tipPlayer), c_messageAreaDirective, (StringExternal("Param/Value/C7CA12A0") + lp_tipText));
    }

    Wait(9.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

trigger auto_gf_CreateItemNOTD_Trigger = null;
string auto_gf_CreateItemNOTD_lp_itemToBeCreated;
int auto_gf_CreateItemNOTD_lp_quantity;

void gf_CreateItemNOTD (string lp_itemToBeCreated, int lp_quantity) {
    auto_gf_CreateItemNOTD_lp_itemToBeCreated = lp_itemToBeCreated;
    auto_gf_CreateItemNOTD_lp_quantity = lp_quantity;

    if (auto_gf_CreateItemNOTD_Trigger == null) {
        auto_gf_CreateItemNOTD_Trigger = TriggerCreate("auto_gf_CreateItemNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateItemNOTD_Trigger, false, false);
}

bool auto_gf_CreateItemNOTD_TriggerFunc (bool testConds, bool runActions) {
    string lp_itemToBeCreated = auto_gf_CreateItemNOTD_lp_itemToBeCreated;
    int lp_quantity = auto_gf_CreateItemNOTD_lp_quantity;

    // Variable Declarations
    bool lv_createAnimation;
    point lv_itemSpawnPoint;
    unit lv_itemDropPod;

    // Automatic Variable Declarations
    int auto85AA9F7C_n;
    int auto85AA9F7C_i;
    unitgroup auto44751A4A_g;
    int auto44751A4A_u;
    unit auto44751A4A_var;

    // Variable Initialization
    lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());

    // Implementation
    auto85AA9F7C_n = lp_quantity;
    for (auto85AA9F7C_i = 1; auto85AA9F7C_i <= auto85AA9F7C_n; auto85AA9F7C_i += 1) {
        lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());
        while ((PointPathingPassable(lv_itemSpawnPoint) == false)) {
            lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());
        }
        lv_createAnimation = false;
        auto44751A4A_g = gv_marines;
        auto44751A4A_u = UnitGroupCount(auto44751A4A_g, c_unitCountAll);
        for (;; auto44751A4A_u -= 1) {
            auto44751A4A_var = UnitGroupUnitFromEnd(auto44751A4A_g, auto44751A4A_u);
            if (auto44751A4A_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto44751A4A_var), lv_itemSpawnPoint) <= 15.0)) {
                lv_createAnimation = true;
            }

        }
        if ((lv_createAnimation == true)) {
            UnitCreate(1, "TerranDropPod", 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
            lv_itemDropPod = UnitLastCreated();
            Wait(1.45, c_timeReal);
            UnitKill(lv_itemDropPod);
            UnitCreate(1, lp_itemToBeCreated, 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
        }
        else {
            UnitCreate(1, lp_itemToBeCreated, 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
        }
        if (((UnitGetType(UnitLastCreated()) == "C2Armor") || (UnitGetType(UnitLastCreated()) == "C4Armor") || (UnitGetType(UnitLastCreated()) == "Flamethrower") || (UnitGetType(UnitLastCreated()) == "SniperRifle") || (UnitGetType(UnitLastCreated()) == "GaussRifle") || (UnitGetType(UnitLastCreated()) == "Shotgun") || (UnitGetType(UnitLastCreated()) == "MP9A2SubMachineGun") || (UnitGetType(UnitLastCreated()) == "Chaingun") || (UnitGetType(UnitLastCreated()) == "LaserRifle") || (UnitGetType(UnitLastCreated()) == "UA420AssaultRifle") || (UnitGetType(UnitLastCreated()) == "L3GrenadeLauncher") || (UnitGetType(UnitLastCreated()) == "StingerMK3") || (UnitGetType(UnitLastCreated()) == "BarrettM112") || (UnitGetType(UnitLastCreated()) == "M5PulseRifle"))) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "ColonistSupplyCrate", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "AmmoBox")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "AmmoBox", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "Shiva")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "Shiva", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "Medpack")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupHealth100", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "AntiVenom")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupHealth100", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "Bandage")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupRestorationCharge", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "Helium3Canister")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupPlasmaRounds", 0, "");
        }
        else if (((UnitGetType(UnitLastCreated()) == "APAmmo") || (UnitGetType(UnitLastCreated()) == "FMJAmmo") || (UnitGetType(UnitLastCreated()) == "HEAmmo") || (UnitGetType(UnitLastCreated()) == "HPAmmo"))) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "Crate", 1, "");
        }
        else if (true) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "Crate", 0, "");
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

trigger auto_gf_CreateItemLocalNOTD_Trigger = null;
string auto_gf_CreateItemLocalNOTD_lp_itemToBeCreated;
int auto_gf_CreateItemLocalNOTD_lp_quantity;
region auto_gf_CreateItemLocalNOTD_lp_deploymentArea;

void gf_CreateItemLocalNOTD (string lp_itemToBeCreated, int lp_quantity, region lp_deploymentArea) {
    auto_gf_CreateItemLocalNOTD_lp_itemToBeCreated = lp_itemToBeCreated;
    auto_gf_CreateItemLocalNOTD_lp_quantity = lp_quantity;
    auto_gf_CreateItemLocalNOTD_lp_deploymentArea = lp_deploymentArea;

    if (auto_gf_CreateItemLocalNOTD_Trigger == null) {
        auto_gf_CreateItemLocalNOTD_Trigger = TriggerCreate("auto_gf_CreateItemLocalNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateItemLocalNOTD_Trigger, false, false);
}

bool auto_gf_CreateItemLocalNOTD_TriggerFunc (bool testConds, bool runActions) {
    string lp_itemToBeCreated = auto_gf_CreateItemLocalNOTD_lp_itemToBeCreated;
    int lp_quantity = auto_gf_CreateItemLocalNOTD_lp_quantity;
    region lp_deploymentArea = auto_gf_CreateItemLocalNOTD_lp_deploymentArea;

    // Variable Declarations
    bool lv_createAnimation;
    point lv_itemSpawnPoint;
    unit lv_itemDropPod;

    // Automatic Variable Declarations
    int auto447EA4F6_n;
    int auto447EA4F6_i;
    unitgroup autoDD28384E_g;
    int autoDD28384E_u;
    unit autoDD28384E_var;

    // Variable Initialization
    lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());

    // Implementation
    auto447EA4F6_n = lp_quantity;
    for (auto447EA4F6_i = 1; auto447EA4F6_i <= auto447EA4F6_n; auto447EA4F6_i += 1) {
        lv_itemSpawnPoint = RegionRandomPoint(lp_deploymentArea);
        lv_createAnimation = false;
        autoDD28384E_g = gv_marines;
        autoDD28384E_u = UnitGroupCount(autoDD28384E_g, c_unitCountAll);
        for (;; autoDD28384E_u -= 1) {
            autoDD28384E_var = UnitGroupUnitFromEnd(autoDD28384E_g, autoDD28384E_u);
            if (autoDD28384E_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(autoDD28384E_var), lv_itemSpawnPoint) <= 15.0)) {
                lv_createAnimation = true;
            }

        }
        if ((lv_createAnimation == true)) {
            UnitCreate(1, "TerranDropPod", 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
            lv_itemDropPod = UnitLastCreated();
            Wait(1.45, c_timeReal);
            UnitKill(lv_itemDropPod);
            UnitCreate(1, lp_itemToBeCreated, 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
        }
        else {
            UnitCreate(1, lp_itemToBeCreated, 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
        }
        if (((UnitGetType(UnitLastCreated()) == "C2Armor") || (UnitGetType(UnitLastCreated()) == "C4Armor") || (UnitGetType(UnitLastCreated()) == "Flamethrower") || (UnitGetType(UnitLastCreated()) == "SniperRifle") || (UnitGetType(UnitLastCreated()) == "GaussRifle") || (UnitGetType(UnitLastCreated()) == "Shotgun") || (UnitGetType(UnitLastCreated()) == "MP9A2SubMachineGun") || (UnitGetType(UnitLastCreated()) == "Chaingun") || (UnitGetType(UnitLastCreated()) == "LaserRifle") || (UnitGetType(UnitLastCreated()) == "UA420AssaultRifle") || (UnitGetType(UnitLastCreated()) == "L3GrenadeLauncher") || (UnitGetType(UnitLastCreated()) == "StingerMK3") || (UnitGetType(UnitLastCreated()) == "BarrettM112") || (UnitGetType(UnitLastCreated()) == "M5PulseRifle"))) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "ColonistSupplyCrate", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "AmmoBox")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "AmmoBox", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "Medpack")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupHealth100", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "AntiVenom")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupHealth100", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "Bandage")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupRestorationCharge", 0, "");
        }
        else if ((UnitGetType(UnitLastCreated()) == "Helium3Canister")) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "PickupPlasmaRounds", 0, "");
        }
        else if (((UnitGetType(UnitLastCreated()) == "APAmmo") || (UnitGetType(UnitLastCreated()) == "FMJAmmo") || (UnitGetType(UnitLastCreated()) == "HEAmmo") || (UnitGetType(UnitLastCreated()) == "HPAmmo"))) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "Crate", 1, "");
        }
        else if (true) {
            libNtve_gf_UnitSetVariation(UnitLastCreated(), "Crate", 0, "");
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

trigger auto_gf_SmartSpawnNOTD_Trigger = null;
string auto_gf_SmartSpawnNOTD_lp_spawningUnit;
fixed auto_gf_SmartSpawnNOTD_lp_spawnRange;

void gf_SmartSpawnNOTD (string lp_spawningUnit, fixed lp_spawnRange) {
    auto_gf_SmartSpawnNOTD_lp_spawningUnit = lp_spawningUnit;
    auto_gf_SmartSpawnNOTD_lp_spawnRange = lp_spawnRange;

    if (auto_gf_SmartSpawnNOTD_Trigger == null) {
        auto_gf_SmartSpawnNOTD_Trigger = TriggerCreate("auto_gf_SmartSpawnNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_SmartSpawnNOTD_Trigger, false, false);
}

bool auto_gf_SmartSpawnNOTD_TriggerFunc (bool testConds, bool runActions) {
    string lp_spawningUnit = auto_gf_SmartSpawnNOTD_lp_spawningUnit;
    fixed lp_spawnRange = auto_gf_SmartSpawnNOTD_lp_spawnRange;

    // Variable Declarations
    point lv_unitSpawnPoint;
    unit lv_spawnUnit;
    bool lv_spawnPointReset;

    // Automatic Variable Declarations
    const int auto7948FB3E_n = 2;
    int auto7948FB3E_i;
    unitgroup auto9AA0BD6D_g;
    int auto9AA0BD6D_u;
    unit auto9AA0BD6D_var;

    // Variable Initialization
    lv_unitSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), lp_spawnRange));

    // Implementation
    for (auto7948FB3E_i = 1; auto7948FB3E_i <= auto7948FB3E_n; auto7948FB3E_i += 1) {
        auto9AA0BD6D_g = gv_marines;
        auto9AA0BD6D_u = UnitGroupCount(auto9AA0BD6D_g, c_unitCountAll);
        for (;; auto9AA0BD6D_u -= 1) {
            auto9AA0BD6D_var = UnitGroupUnitFromEnd(auto9AA0BD6D_g, auto9AA0BD6D_u);
            if (auto9AA0BD6D_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto9AA0BD6D_var), lv_unitSpawnPoint) < 5.0)) {
                lv_spawnPointReset = true;
            }

        }
        if ((lv_spawnPointReset == true)) {
            lv_unitSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), lp_spawnRange));
        }

    }
    UnitCreate(1, lp_spawningUnit, 0, 14, lv_unitSpawnPoint, libNtve_gf_RandomAngle());
    lv_spawnUnit = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, lv_spawnUnit);
    Wait(0.25, c_timeGame);
    if ((UnitGetType(lv_spawnUnit) == "ZombieLevel12")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "ZombieLevel22")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "HulkBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "SeekerBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "UltraliskBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "RoachBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Devourer2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Slasher2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowSlasher", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Immortal22")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowImmortal", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "TitanBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowTitan", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "BanelingBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Blindling2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowBlindling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Beastling2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowBeastling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "InfestorTerran2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowInfestedMarine", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Hugger2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
    }
    return true;
}

trigger auto_gf_AwardPlayerXPNOTD_Trigger = null;
int auto_gf_AwardPlayerXPNOTD_lp_xPAwarded;

void gf_AwardPlayerXPNOTD (int lp_xPAwarded) {
    auto_gf_AwardPlayerXPNOTD_lp_xPAwarded = lp_xPAwarded;

    if (auto_gf_AwardPlayerXPNOTD_Trigger == null) {
        auto_gf_AwardPlayerXPNOTD_Trigger = TriggerCreate("auto_gf_AwardPlayerXPNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardPlayerXPNOTD_Trigger, false, false);
}

bool auto_gf_AwardPlayerXPNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_xPAwarded = auto_gf_AwardPlayerXPNOTD_lp_xPAwarded;

    // Variable Declarations
    int lv_xPAwarded;
    int lv_localIntA;
    int lv_localHitPar;

    // Automatic Variable Declarations
    const int autoF0C12D9C_ae = 8;
    int autoF0C12D9C_var;

    // Variable Initialization
    lv_xPAwarded = FixedToInt((IntToFixed(lp_xPAwarded) * gv_classLimitMultiplier));
    lv_localIntA = 1;

    // Implementation
    while ((lv_localIntA < 9)) {
        if (((UnitIsAlive(gv_marineHero[lv_localIntA]) == true)) && (PlayerStatus(lv_localIntA) == c_playerStatusActive)) {
            gv_playerXP[lv_localIntA] += lv_xPAwarded;
            lv_localHitPar = gv_hitPar;
            if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Technician")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 11.0));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Flamethrower3")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 11.0));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "TychusChaingun")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 16.0));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Medic")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 1.25));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Rifleman")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 1.0));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "GhostLaserLines")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 0.7));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Spectre")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 0.8));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "DominionKillTeam")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 15.0));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "ChemicalExpert")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 1.6));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Pathfinder")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 0.7));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Engineer")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 1.0));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Commando")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 1.0));
            }
            else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "PsiOps")) {
                lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * 1.0));
            }
            if ((gv_playerRating[lv_localIntA] >= 1800)) {
                lv_localHitPar = FixedToInt((IntToFixed(lv_localHitPar) * 0.6));
            }
            else if ((gv_playerRating[lv_localIntA] >= 1700)) {
                lv_localHitPar = FixedToInt((IntToFixed(lv_localHitPar) * 0.7));
            }
            else if ((gv_playerRating[lv_localIntA] >= 1600)) {
                lv_localHitPar = FixedToInt((IntToFixed(lv_localHitPar) * 0.8));
            }
            if ((gv_nightmare == true)) {
                lv_localHitPar = (lv_localHitPar * 2);
            }

            if ((gv_playerRating[lv_localIntA] >= 2100) && (gv_hitsTaken[lv_localIntA] >= lv_localHitPar) && (gv_squadRating > 1600)) {
                gv_playerRating[lv_localIntA] -= 6;
            }
            else if ((gv_playerRating[lv_localIntA] >= 1900) && (gv_hitsTaken[lv_localIntA] >= lv_localHitPar) && (gv_squadRating > 1600)) {
                gv_playerRating[lv_localIntA] -= 4;
            }
            else if ((gv_playerRating[lv_localIntA] >= 1800) && (gv_hitsTaken[lv_localIntA] >= lv_localHitPar) && (gv_squadRating > 1600)) {
                gv_playerRating[lv_localIntA] -= 3;
            }
            else if ((gv_playerRating[lv_localIntA] >= 1700) && (gv_hitsTaken[lv_localIntA] >= lv_localHitPar)) {
                gv_playerRating[lv_localIntA] -= 2;
            }
            else if ((gv_playerRating[lv_localIntA] >= 1600) && (gv_hitsTaken[lv_localIntA] >= lv_localHitPar)) {
                gv_playerRating[lv_localIntA] -= 1;
            }
        }
        else if ((UnitIsAlive(gv_playerPet[lv_localIntA]) == true) && (PlayerStatus(lv_localIntA) == c_playerStatusActive)) {
            gv_playerXP[lv_localIntA] += (lv_xPAwarded / 2);
        }
        gf_UIUpdateXP(lv_localIntA);
        lv_localIntA += 1;
    }
    lv_localIntA = 1;
    while ((lv_localIntA < 9)) {
        if ((PlayerStatus(lv_localIntA) == c_playerStatusLeft) && (UnitIsAlive(gv_marineHero[lv_localIntA]) == true)) {
            autoF0C12D9C_var = 1;
            for ( ; autoF0C12D9C_var <= autoF0C12D9C_ae; autoF0C12D9C_var += 1 ) {
                if ((gv_playerKarma[autoF0C12D9C_var] >= 1525) && (lv_localIntA != autoF0C12D9C_var)) {
                    libNtve_gf_SetAllianceOneWay(lv_localIntA, autoF0C12D9C_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
                else {
                    libNtve_gf_SetAllianceOneWay(lv_localIntA, autoF0C12D9C_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
            }
        }

        if (((PlayerType(lv_localIntA) == c_playerTypeUser) || (UnitIsAlive(gv_marineHero[lv_localIntA]) == true))) {
            libNtve_gf_SetDialogItemText(gv_statsPlayerCurrentXP[lv_localIntA], IntToText(gv_playerXP[lv_localIntA]), PlayerGroupAll());
            DialogControlSetPosition(gv_statsPlayerCurrentXP[lv_localIntA], PlayerGroupAll(), c_anchorTopLeft, gf_StatsXPLabelXPosition(lv_localIntA), 401);
            libNtve_gf_SetDialogItemText(gv_statsPlayerNextXP[lv_localIntA], IntToText(gv_rankRequirement[(gv_playerRank[lv_localIntA] + 1)]), PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(gv_statsPlayerNextLevelProgressBar[lv_localIntA], IntToFixed(gv_playerXP[lv_localIntA]), PlayerGroupAll());
        }

        lv_localIntA += 1;
    }
    return true;
}

trigger auto_gf_AwardRatingNOTD_Trigger = null;
int auto_gf_AwardRatingNOTD_lp_ratingAwarded;

void gf_AwardRatingNOTD (int lp_ratingAwarded) {
    auto_gf_AwardRatingNOTD_lp_ratingAwarded = lp_ratingAwarded;

    if (auto_gf_AwardRatingNOTD_Trigger == null) {
        auto_gf_AwardRatingNOTD_Trigger = TriggerCreate("auto_gf_AwardRatingNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardRatingNOTD_Trigger, false, false);
}

bool auto_gf_AwardRatingNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_ratingAwarded = auto_gf_AwardRatingNOTD_lp_ratingAwarded;

    // Automatic Variable Declarations
    const int autoF32C4A6D_ae = 8;
    int autoF32C4A6D_var;

    // Implementation
    autoF32C4A6D_var = 1;
    for ( ; autoF32C4A6D_var <= autoF32C4A6D_ae; autoF32C4A6D_var += 1 ) {
        if ((PlayerStatus(autoF32C4A6D_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[autoF32C4A6D_var]) == true)) {
            if ((gv_playerRating[autoF32C4A6D_var] >= 2000)) {
                if ((lp_ratingAwarded > 1)) {
                    gv_playerRating[autoF32C4A6D_var] += (lp_ratingAwarded / 2);
                }
                else if ((lp_ratingAwarded == 1) && (RandomInt(0, 3) != 1)) {
                    gv_playerRating[autoF32C4A6D_var] += lp_ratingAwarded;
                }
            }
            else {
                gv_playerRating[autoF32C4A6D_var] += lp_ratingAwarded;
            }
            gf_UIUpdatePortraitTooltip(autoF32C4A6D_var);
        }

    }
    return true;
}

trigger auto_gf_AwardKarmaNOTD_Trigger = null;
int auto_gf_AwardKarmaNOTD_lp_karmaAwarded;

void gf_AwardKarmaNOTD (int lp_karmaAwarded) {
    auto_gf_AwardKarmaNOTD_lp_karmaAwarded = lp_karmaAwarded;

    if (auto_gf_AwardKarmaNOTD_Trigger == null) {
        auto_gf_AwardKarmaNOTD_Trigger = TriggerCreate("auto_gf_AwardKarmaNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardKarmaNOTD_Trigger, false, false);
}

bool auto_gf_AwardKarmaNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_karmaAwarded = auto_gf_AwardKarmaNOTD_lp_karmaAwarded;

    // Automatic Variable Declarations
    const int auto4401535A_ae = 8;
    int auto4401535A_var;

    // Implementation
    auto4401535A_var = 1;
    for ( ; auto4401535A_var <= auto4401535A_ae; auto4401535A_var += 1 ) {
        if ((PlayerStatus(auto4401535A_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[auto4401535A_var]) == true)) {
            gv_playerKarma[auto4401535A_var] += lp_karmaAwarded;
            gf_UIUpdatePortraitTooltip(auto4401535A_var);
        }

    }
    return true;
}

trigger auto_gf_AwardMarineXPNOTD_Trigger = null;
fixed auto_gf_AwardMarineXPNOTD_lp_marineXPAwarded;

void gf_AwardMarineXPNOTD (fixed lp_marineXPAwarded) {
    auto_gf_AwardMarineXPNOTD_lp_marineXPAwarded = lp_marineXPAwarded;

    if (auto_gf_AwardMarineXPNOTD_Trigger == null) {
        auto_gf_AwardMarineXPNOTD_Trigger = TriggerCreate("auto_gf_AwardMarineXPNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardMarineXPNOTD_Trigger, false, false);
}

bool auto_gf_AwardMarineXPNOTD_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_marineXPAwarded = auto_gf_AwardMarineXPNOTD_lp_marineXPAwarded;

    // Automatic Variable Declarations
    const int autoA0FB5996_ae = 8;
    int autoA0FB5996_var;

    // Implementation
    autoA0FB5996_var = 1;
    for ( ; autoA0FB5996_var <= autoA0FB5996_ae; autoA0FB5996_var += 1 ) {
        if ((UnitIsAlive(gv_marineHero[autoA0FB5996_var]) == true)) {
            UnitSetPropertyFixed(gv_marineHero[autoA0FB5996_var], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[autoA0FB5996_var], c_unitPropXP, c_unitPropCurrent) + lp_marineXPAwarded));
            Wait(0.2, c_timeGame);
        }
        else if ((UnitIsAlive(gv_playerPet[autoA0FB5996_var]) == true)) {
            UnitSetPropertyFixed(gv_playerPet[autoA0FB5996_var], c_unitPropXP, (UnitGetPropertyFixed(gv_playerPet[autoA0FB5996_var], c_unitPropXP, c_unitPropCurrent) + lp_marineXPAwarded));
            Wait(0.2, c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_AwardCreditsNOTD_Trigger = null;
int auto_gf_AwardCreditsNOTD_lp_creditsAwarded;

void gf_AwardCreditsNOTD (int lp_creditsAwarded) {
    auto_gf_AwardCreditsNOTD_lp_creditsAwarded = lp_creditsAwarded;

    if (auto_gf_AwardCreditsNOTD_Trigger == null) {
        auto_gf_AwardCreditsNOTD_Trigger = TriggerCreate("auto_gf_AwardCreditsNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardCreditsNOTD_Trigger, false, false);
}

bool auto_gf_AwardCreditsNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_creditsAwarded = auto_gf_AwardCreditsNOTD_lp_creditsAwarded;

    // Variable Declarations
    int lv_creditAllocation;
    int lv_personalCreditAllocation;
    int lv_startingCredits;
    int lv_netCreditsAwarded;

    // Automatic Variable Declarations
    playergroup autoBCEEC12E_g;
    int autoBCEEC12E_var;

    // Variable Initialization
    lv_netCreditsAwarded = FixedToInt((IntToFixed(lp_creditsAwarded) * gv_classLimitMultiplier));

    // Implementation
    SoundPlay(SoundLink("UI_TerranNewUnitAcquired", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_creditAllocation = (lv_netCreditsAwarded / PlayerGroupCount(gv_marineSquad));
    if ((gv_totalPlayers == 1)) {
        lv_creditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.15));
    }
    else if ((gv_totalPlayers < 3)) {
        lv_creditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.35));
    }
    else if ((gv_totalPlayers < 5)) {
        lv_creditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.7));
    }
    autoBCEEC12E_g = gv_marineSquad;
    autoBCEEC12E_var = -1;
    while (true) {
        autoBCEEC12E_var = PlayerGroupNextPlayer(autoBCEEC12E_g, autoBCEEC12E_var);
        if (autoBCEEC12E_var < 0) { break; }
        lv_startingCredits = gv_playerCredits[autoBCEEC12E_var];
        lv_personalCreditAllocation = lv_creditAllocation;
        if ((UnitIsAlive(gv_marineHero[autoBCEEC12E_var]) == false) && (UnitIsAlive(gv_playerPet[autoBCEEC12E_var]) == true)) {
            lv_personalCreditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.75));
        }
        else if ((UnitIsAlive(gv_marineHero[autoBCEEC12E_var]) == false) && (UnitIsAlive(gv_playerPet[autoBCEEC12E_var]) == false)) {
            lv_personalCreditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.5));
        }
        if ((gv_playerXP[autoBCEEC12E_var] >= 120000)) {
            gv_playerCredits[autoBCEEC12E_var] += FixedToInt((IntToFixed(lv_personalCreditAllocation) * 2.2));
        }
        else if ((gv_playerXP[autoBCEEC12E_var] >= 80000)) {
            gv_playerCredits[autoBCEEC12E_var] += FixedToInt((IntToFixed(lv_personalCreditAllocation) * 1.9));
        }
        else if ((gv_playerXP[autoBCEEC12E_var] >= 40000)) {
            gv_playerCredits[autoBCEEC12E_var] += FixedToInt((IntToFixed(lv_personalCreditAllocation) * 1.6));
        }
        else if ((gv_playerXP[autoBCEEC12E_var] >= 10000)) {
            gv_playerCredits[autoBCEEC12E_var] += FixedToInt((IntToFixed(lv_personalCreditAllocation) * 1.3));
        }
        else if ((gv_playerXP[autoBCEEC12E_var] >= 5000)) {
            gv_playerCredits[autoBCEEC12E_var] += lv_personalCreditAllocation;
        }
        else if (true) {
            gv_playerCredits[autoBCEEC12E_var] += (lv_personalCreditAllocation / 2);
        }
        gv_playerLifeTimeCreditsAcquired[autoBCEEC12E_var] += (gv_playerCredits[autoBCEEC12E_var] - lv_startingCredits);
        PlayerModifyPropertyInt(autoBCEEC12E_var, c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerCredits[autoBCEEC12E_var]);
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashLabel[autoBCEEC12E_var], IntToText(gv_playerCredits[autoBCEEC12E_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_statsPlayerCashLabel[autoBCEEC12E_var], "HelpPanelListBoxItemTitle", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashAcquiredLabel[autoBCEEC12E_var], IntToText(gv_playerLifeTimeCreditsAcquired[autoBCEEC12E_var]), PlayerGroupAll());
        gf_UIUpdatePortraitTooltip(autoBCEEC12E_var);
    }
    return true;
}

trigger auto_gf_EndGameUINOTD_Trigger = null;

void gf_EndGameUINOTD () {
    if (auto_gf_EndGameUINOTD_Trigger == null) {
        auto_gf_EndGameUINOTD_Trigger = TriggerCreate("auto_gf_EndGameUINOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_EndGameUINOTD_Trigger, false, false);
}

bool auto_gf_EndGameUINOTD_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_dialogX;
    int lv_dialogY;
    int lv_dialogPositionY;
    int lv_itemSpacingX;
    int lv_itemSpacingY;
    int lv_itemIconXY;
    int lv_itemIconPositionY;
    int lv_playerNameTextX;
    int lv_playerNameTextY;
    int lv_playerNamePositionX;
    int lv_playerRankIconXY;
    int lv_playerRankPositionX;
    int lv_itemIconPositionX;
    int lv_itemX;
    int lv_itemTitleLabelX;
    int lv_itemTitleLabelY;
    int lv_itemTitleLabelPositionX;
    int lv_itemTitleLabelPositionY;
    int lv_itemBarPositionY;
    int lv_playerNamePositionY;
    int lv_itemBarX;
    int lv_itemBarY;
    int lv_itemBarPositionX;
    int lv_ratingPositiveItemBarX;
    int lv_ratingNegativeItemBarX;
    int lv_ratingPositiveItemBarPositionX;
    int lv_medalIconXY;
    int lv_finalTextX;
    int lv_finalTextY;
    int lv_finalTextXPosition;
    int lv_finalTextYPosition;
    int lv_victoryButtonX;
    int lv_victoryButtonY;
    int lv_victoryTextX;
    int lv_victoryTextY;
    int lv_victoryButtonPositionX;
    int lv_victoryButtonPositionY;
    int lv_victoryTextPositionX;
    int lv_victoryTextPositionY;
    int lv_iLocal;
    int lv_jLocal;
    color lv_redTint;
    string lv_victoryButtonImage;
    int[9] lv_rankIcon1;
    text lv_rankTitle;
    string lv_rankImage;

    // Automatic Variable Declarations
    const int auto0EB6EA9D_ae = 8;
    int auto0EB6EA9D_var;
    const int auto738DBD74_ae = 8;
    int auto738DBD74_var;
    const int auto14AF7363_ae = 8;
    int auto14AF7363_var;
    const int auto73CB4E9B_ae = 4;
    const int auto73CB4E9B_ai = 1;
    const int auto49978487_ae = 8;
    int auto49978487_var;
    const int autoC45C1CC6_ae = 8;
    int autoC45C1CC6_var;
    const int autoF283128E_ae = 8;
    int autoF283128E_var;
    const int autoF9DEE8F2_ae = 4;
    const int autoF9DEE8F2_ai = 1;
    const int auto3792FD60_ae = 8;
    int auto3792FD60_var;
    const int autoD293E7A2_ae = 3;
    int autoD293E7A2_var;

    // Variable Initialization
    lv_dialogPositionY = -150;
    lv_itemSpacingX = 5;
    lv_itemSpacingY = 5;
    lv_itemIconXY = 50;
    lv_itemIconPositionY = 10;
    lv_playerNameTextX = 169;
    lv_playerNameTextY = gv_playerNameTextY;
    lv_playerNamePositionX = ((lv_itemSpacingX * 1) + 110);
    lv_playerRankIconXY = gv_playerNameTextY;
    lv_playerRankPositionX = (lv_playerNamePositionX - (lv_playerRankIconXY + 5));
    lv_itemIconPositionX = (lv_playerNameTextX + (lv_playerNamePositionX + (lv_itemSpacingX * 3)));
    lv_itemX = gv_itemX;
    lv_itemTitleLabelX = (lv_itemX - lv_itemIconXY);
    lv_itemTitleLabelY = lv_itemIconXY;
    lv_itemTitleLabelPositionX = (lv_itemIconPositionX + lv_itemIconXY);
    lv_itemTitleLabelPositionY = (lv_itemIconPositionY + 15);
    lv_itemBarPositionY = ((lv_itemSpacingY * 3) + (lv_itemIconPositionY + lv_itemIconXY));
    lv_playerNamePositionY = (lv_itemBarPositionY + 5);
    lv_itemBarX = gv_itemX;
    lv_itemBarY = lv_playerNameTextY;
    lv_itemBarPositionX = lv_itemIconPositionX;
    lv_ratingPositiveItemBarX = ((lv_itemX * 5) / 6);
    lv_ratingNegativeItemBarX = (lv_itemX / 6);
    lv_ratingPositiveItemBarPositionX = (lv_itemIconPositionX + (lv_itemX / 6));
    lv_medalIconXY = lv_playerNameTextY;
    lv_finalTextX = 300;
    lv_finalTextY = lv_itemBarY;
    lv_finalTextYPosition = (((lv_playerNameTextY + lv_itemSpacingY) * 8) + ((lv_itemSpacingY * 2) + lv_itemBarPositionY));
    lv_victoryButtonX = 450;
    lv_victoryButtonY = 60;
    lv_victoryTextX = 450;
    lv_victoryTextY = lv_victoryButtonY;
    lv_victoryButtonPositionY = (((lv_finalTextY + lv_itemSpacingY) * 3) + ((lv_itemSpacingY * 0) + lv_finalTextYPosition));
    lv_victoryTextPositionX = (lv_victoryButtonPositionX + 50);
    lv_victoryTextPositionY = (lv_victoryButtonPositionY + 15);
    lv_redTint = Color(100.00, 19.61, 19.61);
    lv_victoryButtonImage = "NOTD Red Frames.dds";
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_rankIcon1[init_i] = c_invalidDialogControlId;
    }
    lv_rankTitle = StringExternal("Param/Value/074C6AA8");
    lv_rankImage = "Assets/Textures/btn-ability-terran-heal.dds";

    // Implementation
    DialogSetVisible(gv_raidUITeamStatus, PlayerGroupAll(), false);
    DialogSetVisible(gv_raidUITeamStatusDummy, PlayerGroupAll(), true);
    auto0EB6EA9D_var = 1;
    for ( ; auto0EB6EA9D_var <= auto0EB6EA9D_ae; auto0EB6EA9D_var += 1 ) {
        if ((UnitIsAlive(gv_marineHero[auto0EB6EA9D_var]) == true) && (PlayerStatus(auto0EB6EA9D_var) != c_playerStatusUnused)) {
            DialogSetVisible(gv_playerMedalsDialog[auto0EB6EA9D_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[auto0EB6EA9D_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_statsPlayerStatsDialog[auto0EB6EA9D_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_wModWeaponsModDialog[auto0EB6EA9D_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_talentTree[auto0EB6EA9D_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_spectatedDialog[auto0EB6EA9D_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_shellDialog[auto0EB6EA9D_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_ammoCounterDialog[auto0EB6EA9D_var], PlayerGroupAll(), false);
        }

    }
    Wait(1.0, c_timeGame);
    lv_dialogX = ((lv_itemSpacingX * 14) + ((lv_playerNameTextX + (4 * lv_itemX)) + 230));
    lv_dialogY = ((lv_itemSpacingY * 19) + ((lv_itemIconXY + (lv_itemBarY * 11)) + 100));
    lv_victoryButtonPositionX = ((lv_dialogX / 2) - (lv_victoryButtonX / 2));
    lv_finalTextXPosition = (lv_victoryButtonPositionX + 70);
    lv_victoryTextPositionX = (lv_victoryButtonPositionX + 27);
    DialogCreate(lv_dialogX, lv_dialogY, c_anchorCenter, 0, lv_dialogPositionY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    if ((gv_victory == true)) {
        lv_redTint = Color(100,100,100);
        lv_victoryButtonImage = "Assets/Textures/ui_research_frame_tooltip_protoss.dds";
    }

    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_dialogX, lv_dialogY, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, lv_redTint, c_triggerBlendModeNormal);
    gv_endGameDialog1 = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorRight, 41, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorRight, 41, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorRight, 41, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorRight, 51, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorRight, 51, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorRight, 51, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 80, c_anchorRight, 46, 0, StringExternal("Param/Value/6837AE6A"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_scrollEndGameUIButtons[1] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogCreate(lv_dialogX, lv_dialogY, c_anchorCenter, 0, lv_dialogPositionY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_dialogX, lv_dialogY, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, lv_redTint, c_triggerBlendModeNormal);
    gv_endGameDialog2 = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorRight, 41, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorRight, 41, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorRight, 41, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorRight, 51, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorRight, 51, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorRight, 51, 0, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 80, c_anchorRight, 46, 0, StringExternal("Param/Value/08DC0D2E"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_scrollEndGameUIButtons[2] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    auto738DBD74_var = 1;
    for ( ; auto738DBD74_var <= auto738DBD74_ae; auto738DBD74_var += 1 ) {
        if ((PlayerType(auto738DBD74_var) == c_playerTypeUser) && (PlayerStatus(auto738DBD74_var) != c_playerStatusUnused)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_playerRankIconXY, lv_playerRankIconXY, c_anchorTopLeft, lv_playerRankPositionX, (lv_playerNamePositionY + ((auto738DBD74_var - 1) * (gv_playerNameTextY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            lv_rankIcon1[auto738DBD74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_playerRankIconXY, lv_playerRankIconXY, c_anchorTopLeft, lv_playerRankPositionX, (lv_playerNamePositionY + ((auto738DBD74_var - 1) * (gv_playerNameTextY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\white32.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            if ((gv_playerDoctor[auto738DBD74_var] == true)) {
                lv_rankTitle = StringExternal("Param/Value/FEF9177A");
                lv_rankImage = "Assets\\Textures\\btn-ability-terran-heal.dds";
            }
            else {
                lv_rankTitle = gv_rankTitle[gv_playerRank[auto738DBD74_var]];
                lv_rankImage = gv_rankIcon[gv_playerRank[auto738DBD74_var]];
            }
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), lv_rankImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(lv_rankIcon1[auto738DBD74_var], lv_rankImage, PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_rankTitle, PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(lv_rankIcon1[auto738DBD74_var], lv_rankTitle, PlayerGroupAll());
        }

    }
    auto14AF7363_var = 1;
    for ( ; auto14AF7363_var <= auto14AF7363_ae; auto14AF7363_var += 1 ) {
        if ((PlayerType(auto14AF7363_var) == c_playerTypeUser) && (PlayerStatus(auto14AF7363_var) != c_playerStatusUnused)) {
            libNtve_gf_CreateDialogItemLabel(gv_endGameDialog1, lv_playerNameTextX, lv_playerNameTextY, c_anchorTopLeft, lv_playerNamePositionX, (lv_playerNamePositionY + ((auto14AF7363_var - 1) * (lv_playerNameTextY + lv_itemSpacingY))), PlayerName(auto14AF7363_var), Color(100,100,100), false, 0.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpPanelListBoxItemTitle", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_endGameDialog2, lv_playerNameTextX, lv_playerNameTextY, c_anchorTopLeft, lv_playerNamePositionX, (lv_playerNamePositionY + ((auto14AF7363_var - 1) * (lv_playerNameTextY + lv_itemSpacingY))), PlayerName(auto14AF7363_var), Color(100,100,100), false, 0.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpPanelListBoxItemTitle", PlayerGroupAll());
        }

    }
    lv_iLocal = 1;
    for ( ; ( (auto73CB4E9B_ai >= 0 && lv_iLocal <= auto73CB4E9B_ae) || (auto73CB4E9B_ai < 0 && lv_iLocal >= auto73CB4E9B_ae) ) ; lv_iLocal += auto73CB4E9B_ai ) {
        if ((lv_iLocal != 2) && (lv_iLocal != 3)) {
            auto3792FD60_var = 1;
            for ( ; auto3792FD60_var <= auto3792FD60_ae; auto3792FD60_var += 1 ) {
                libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((auto3792FD60_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_itemBarImages[lv_iLocal][auto3792FD60_var] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((auto3792FD60_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_itemBarImages[(lv_iLocal + 4)][auto3792FD60_var] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((auto3792FD60_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                gv_itemBarButtons[lv_iLocal][auto3792FD60_var] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((auto3792FD60_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                gv_itemBarButtons[(lv_iLocal + 4)][auto3792FD60_var] = DialogControlLastCreated();
            }
        }
        else {
            auto49978487_var = 1;
            for ( ; auto49978487_var <= auto49978487_ae; auto49978487_var += 1 ) {
                libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((auto49978487_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_itemBarImages[(lv_iLocal + 4)][auto49978487_var] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((auto49978487_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                gv_itemBarButtons[(lv_iLocal + 4)][auto49978487_var] = DialogControlLastCreated();
            }
            if ((lv_iLocal == 2)) {
                autoC45C1CC6_var = 1;
                for ( ; autoC45C1CC6_var <= autoC45C1CC6_ae; autoC45C1CC6_var += 1 ) {
                    libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_ratingNegativeItemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((autoC45C1CC6_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_itemBarRatingImages[autoC45C1CC6_var][2] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_ratingNegativeItemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((autoC45C1CC6_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    gv_itemBarRatingButtons[autoC45C1CC6_var][2] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_ratingPositiveItemBarX, lv_itemBarY, c_anchorTopLeft, lv_ratingPositiveItemBarPositionX, (lv_itemBarPositionY + ((autoC45C1CC6_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_itemBarRatingImages[autoC45C1CC6_var][1] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_ratingPositiveItemBarX, lv_itemBarY, c_anchorTopLeft, lv_ratingPositiveItemBarPositionX, (lv_itemBarPositionY + ((autoC45C1CC6_var - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    gv_itemBarRatingButtons[autoC45C1CC6_var][1] = DialogControlLastCreated();
                }
            }
            else if ((lv_iLocal == 3)) {
                autoF283128E_var = 1;
                for ( ; autoF283128E_var <= autoF283128E_ae; autoF283128E_var += 1 ) {
                    lv_jLocal = 1;
                    for ( ; ( (autoF9DEE8F2_ai >= 0 && lv_jLocal <= autoF9DEE8F2_ae) || (autoF9DEE8F2_ai < 0 && lv_jLocal >= autoF9DEE8F2_ae) ) ; lv_jLocal += autoF9DEE8F2_ai ) {
                        libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_medalIconXY, lv_medalIconXY, c_anchorTopLeft, (((lv_jLocal - 1) * (lv_medalIconXY + lv_itemSpacingX)) + lv_itemBarPositionX), (((lv_medalIconXY + lv_itemSpacingX) * (autoF283128E_var - 1)) + lv_itemBarPositionY), StringToText(""), "Assets/Textures/black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        gv_medalsItemImages[lv_jLocal][autoF283128E_var] = DialogControlLastCreated();
                        libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_medalIconXY, lv_medalIconXY, c_anchorTopLeft, (((lv_jLocal - 1) * (lv_medalIconXY + lv_itemSpacingX)) + lv_itemBarPositionX), (lv_itemBarPositionY + ((autoF283128E_var - 1) * (lv_medalIconXY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                        gv_medalsItemButtons[lv_jLocal][autoF283128E_var] = DialogControlLastCreated();
                    }
                }
            }
        }
        if ((lv_iLocal == 4)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "Assets\\Textures\\btn-tips-missioncase.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if ((lv_iLocal == 3)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "NOTD Medal Icons\\NOTD Medal T3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if ((lv_iLocal == 2)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "Assets\\Textures\\btn-tips-sellzergbiosamples.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if ((lv_iLocal == 1)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "Assets\\Textures\\btn-unit-terran-marineraynorhev.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        gv_itemIconImages[lv_iLocal] = DialogControlLastCreated();
        if ((lv_iLocal == 4)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "Assets\\Textures\\decal_terran_0001_01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if ((lv_iLocal == 3)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "Assets\\Textures\\campaign_decal_0001_03.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if ((lv_iLocal == 2)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "Assets\\Textures\\campaign_decal_0001_03.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        else if ((lv_iLocal == 1)) {
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemIconXY, lv_itemIconXY, c_anchorTopLeft, lv_itemIconPositionX, lv_itemIconPositionY, StringToText(""), "Assets\\Textures\\campaign_decal_0001_01.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }
        gv_itemIconImages[(lv_iLocal + 4)] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog1, lv_itemTitleLabelX, lv_itemTitleLabelY, c_anchorTopLeft, lv_itemTitleLabelPositionX, lv_itemTitleLabelPositionY, StringToText(""), Color(100,100,100), false, 0.0);
        gv_itemIconLabel[lv_iLocal] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog2, lv_itemTitleLabelX, lv_itemTitleLabelY, c_anchorTopLeft, lv_itemTitleLabelPositionX, lv_itemTitleLabelPositionY, StringToText(""), Color(100,100,100), false, 0.0);
        gv_itemIconLabel[(4 + lv_iLocal)] = DialogControlLastCreated();
        lv_itemBarPositionX += ((lv_itemSpacingX * 3) + lv_itemBarX);
        lv_itemIconPositionX += ((lv_itemSpacingX * 3) + lv_itemBarX);
        lv_itemTitleLabelPositionX += ((lv_itemSpacingX * 3) + lv_itemBarX);
        lv_ratingPositiveItemBarPositionX += ((lv_itemSpacingX * 3) + lv_itemBarX);
    }
    autoD293E7A2_var = 1;
    for ( ; autoD293E7A2_var <= autoD293E7A2_ae; autoD293E7A2_var += 1 ) {
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog1, lv_finalTextX, lv_finalTextY, c_anchorTopLeft, lv_finalTextXPosition, (lv_finalTextYPosition + ((lv_finalTextY + lv_itemSpacingY) * (autoD293E7A2_var - 1))), StringToText(""), Color(100,100,100), false, 0.0);
        gv_finalTextLabel[autoD293E7A2_var][1] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog2, lv_finalTextX, lv_finalTextY, c_anchorTopLeft, lv_finalTextXPosition, (lv_finalTextYPosition + ((lv_finalTextY + lv_itemSpacingY) * (autoD293E7A2_var - 1))), StringToText(""), Color(100,100,100), false, 0.0);
        gv_finalTextLabel[autoD293E7A2_var][2] = DialogControlLastCreated();
    }
    libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_victoryButtonX, lv_victoryButtonY, c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY, StringToText(""), lv_victoryButtonImage, c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_victoryButtonX, lv_victoryButtonY, c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY, StringToText(""), lv_victoryButtonImage, c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_victoryButtonX, lv_victoryButtonY, c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY, StringToText(""), lv_victoryButtonImage, c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_victoryButtonX, lv_victoryButtonY, c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY, StringToText(""), lv_victoryButtonImage, c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_victoryButtonX, lv_victoryButtonY, c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY, StringToText(""), StringToText(""), "");
    gv_victoryButton1 = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemButton(gv_endGameDialog2, lv_victoryButtonX, lv_victoryButtonY, c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY, StringToText(""), StringToText(""), "");
    gv_victoryButton2 = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    if ((gv_victory == true)) {
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog1, lv_victoryTextX, lv_victoryTextY, c_anchorTopLeft, lv_victoryTextPositionX, lv_victoryTextPositionY, StringExternal("Param/Value/D2629946"), Color(100,100,100), false, 0.0);
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog2, lv_victoryTextX, lv_victoryTextY, c_anchorTopLeft, lv_victoryTextPositionX, lv_victoryTextPositionY, StringExternal("Param/Value/05E61225"), Color(100,100,100), false, 0.0);
    }
    else {
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog1, lv_victoryTextX, lv_victoryTextY, c_anchorTopLeft, lv_victoryTextPositionX, lv_victoryTextPositionY, StringExternal("Param/Value/84A08CFE"), Color(100,100,100), false, 0.0);
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog2, lv_victoryTextX, lv_victoryTextY, c_anchorTopLeft, lv_victoryTextPositionX, lv_victoryTextPositionY, StringExternal("Param/Value/C6CB83D0"), Color(100,100,100), false, 0.0);
    }
    TriggerEnable(gt_ReturntoEarth, true);
    gf_EndGameUISetNOTD();
    return true;
}

trigger auto_gf_EndGameUISetNOTD_Trigger = null;

void gf_EndGameUISetNOTD () {
    if (auto_gf_EndGameUISetNOTD_Trigger == null) {
        auto_gf_EndGameUISetNOTD_Trigger = TriggerCreate("auto_gf_EndGameUISetNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_EndGameUISetNOTD_Trigger, false, false);
}

bool auto_gf_EndGameUISetNOTD_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int[9] lv_xPGained;
    int[9] lv_ratingGained;
    int lv_maxXP;
    int lv_minRating;
    int lv_maxRating;
    int lv_maxGamesPlayed;
    int lv_maxKills;
    int lv_maxHits;
    fixed lv_maxDamageTaken;
    int lv_maxWins;
    int[9] lv_totalWins;
    int lv_iLocal;
    int lv_jLocal;

    // Automatic Variable Declarations
    const int auto2C91E9DA_ae = 2;
    int auto2C91E9DA_var;
    const int autoFC5C40E2_ae = 8;
    int autoFC5C40E2_var;
    const int autoAE3BB609_ae = 8;
    int autoAE3BB609_var;
    const int autoD26FEFDD_ae = 8;
    int autoD26FEFDD_var;
    const int auto1E3AA120_ae = 8;
    int auto1E3AA120_var;
    const int auto62116798_ae = 8;
    const int auto62116798_ai = 1;
    const int autoFDB228BA_ae = 4;
    const int autoFDB228BA_ai = 1;
    const int autoD93C9B9F_ae = 8;
    const int autoD93C9B9F_ai = 1;

    // Variable Initialization

    // Implementation
    auto2C91E9DA_var = 1;
    for ( ; auto2C91E9DA_var <= auto2C91E9DA_ae; auto2C91E9DA_var += 1 ) {
        libNtve_gf_SetDialogItemText(gv_finalTextLabel[1][auto2C91E9DA_var], (StringExternal("Param/Value/8D1DE837") + IntToText(gv_squadRating)), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_finalTextLabel[1][auto2C91E9DA_var], "HeaderExtendedTemplate", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_finalTextLabel[2][auto2C91E9DA_var], (StringExternal("Param/Value/184B235F") + IntToText(gv_squadXP)), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_finalTextLabel[2][auto2C91E9DA_var], "HeaderExtendedTemplate", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_finalTextLabel[3][auto2C91E9DA_var], (StringExternal("Param/Value/BC194400") + gv_difficulty), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_finalTextLabel[3][auto2C91E9DA_var], "HeaderExtendedTemplate", PlayerGroupAll());
    }
    Wait(0.5, c_timeGame);
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[1], StringExternal("Param/Value/0B9F5196"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[2], StringExternal("Param/Value/2742EF10"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[3], StringExternal("Param/Value/598D3A7D"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[4], StringExternal("Param/Value/62ABEF4C"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[5], StringExternal("Param/Value/E4094F4F"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[6], StringExternal("Param/Value/1F2FB596"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[7], StringExternal("Param/Value/356240E9"), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_itemIconLabel[8], StringExternal("Param/Value/08DC2F1F"), PlayerGroupAll());
    autoFC5C40E2_var = 1;
    for ( ; autoFC5C40E2_var <= autoFC5C40E2_ae; autoFC5C40E2_var += 1 ) {
        libNtve_gf_SetDialogItemStyle(gv_itemIconLabel[autoFC5C40E2_var], "HelpPanelListBoxItemTitle", PlayerGroupAll());
    }
    autoAE3BB609_var = 1;
    for ( ; autoAE3BB609_var <= autoAE3BB609_ae; autoAE3BB609_var += 1 ) {
        lv_totalWins[autoAE3BB609_var] = (gv_survivalWin[autoAE3BB609_var] + (gv_sTWinNormal[autoAE3BB609_var] + (gv_sTWinNM[autoAE3BB609_var] + (gv_eCWinNormal[autoAE3BB609_var] + (gv_eCWinNM[autoAE3BB609_var] + (gv_aCWinNormal[autoAE3BB609_var] + gv_aCWinNM[autoAE3BB609_var]))))));
    }
    autoD26FEFDD_var = 1;
    for ( ; autoD26FEFDD_var <= autoD26FEFDD_ae; autoD26FEFDD_var += 1 ) {
        if ((PlayerStatus(autoD26FEFDD_var) != c_playerStatusUnused)) {
            lv_xPGained[autoD26FEFDD_var] = (gv_playerXP[autoD26FEFDD_var] - gv_startingXP[autoD26FEFDD_var]);
            if ((lv_xPGained[autoD26FEFDD_var] >= 0)) {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[1][autoD26FEFDD_var], (StringExternal("Param/Value/6FFC4D93") + IntToText(lv_xPGained[autoD26FEFDD_var])), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[1][autoD26FEFDD_var], IntToText(lv_xPGained[autoD26FEFDD_var]), PlayerGroupAll());
            }
            lv_ratingGained[autoD26FEFDD_var] = (gv_playerRating[autoD26FEFDD_var] - gv_startingRating[autoD26FEFDD_var]);
            if ((lv_ratingGained[autoD26FEFDD_var] >= 0)) {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[autoD26FEFDD_var][1], (StringExternal("Param/Value/07E6F2F0") + IntToText(lv_ratingGained[autoD26FEFDD_var])), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[autoD26FEFDD_var][2], (StringExternal("Param/Value/FA56F8FC") + IntToText(lv_ratingGained[autoD26FEFDD_var])), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[autoD26FEFDD_var][1], IntToText(lv_ratingGained[autoD26FEFDD_var]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[autoD26FEFDD_var][2], IntToText(lv_ratingGained[autoD26FEFDD_var]), PlayerGroupAll());
            }
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[4][autoD26FEFDD_var], IntToText(gv_playerGamesPlayed[autoD26FEFDD_var]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[5][autoD26FEFDD_var], IntToText(libNtve_gf_UnitGetPropertyKills(gv_marineHero[autoD26FEFDD_var], c_unitPropCurrent)), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[6][autoD26FEFDD_var], IntToText(gv_hitsTaken[autoD26FEFDD_var]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[7][autoD26FEFDD_var], IntToText(FixedToInt(gv_playerDamageTaken[autoD26FEFDD_var])), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[8][autoD26FEFDD_var], IntToText(lv_totalWins[autoD26FEFDD_var]), PlayerGroupAll());
        }

    }
    auto1E3AA120_var = 1;
    for ( ; auto1E3AA120_var <= auto1E3AA120_ae; auto1E3AA120_var += 1 ) {
        lv_minRating = MinI(lv_ratingGained[auto1E3AA120_var], lv_minRating);
        lv_minRating = MinI(0, lv_minRating);
        lv_maxRating = MaxI(lv_ratingGained[auto1E3AA120_var], lv_maxRating);
        lv_maxRating = MaxI(0, lv_maxRating);
        lv_maxXP = MaxI(lv_xPGained[auto1E3AA120_var], lv_maxXP);
        lv_maxGamesPlayed = MaxI(gv_playerGamesPlayed[auto1E3AA120_var], lv_maxGamesPlayed);
        lv_maxHits = MaxI(gv_hitsTaken[auto1E3AA120_var], lv_maxHits);
        lv_maxDamageTaken = MaxF(gv_playerDamageTaken[auto1E3AA120_var], lv_maxDamageTaken);
        lv_maxWins = MaxI(lv_totalWins[auto1E3AA120_var], lv_maxWins);
        lv_maxKills = MaxI(libNtve_gf_UnitGetPropertyKills(gv_marineHero[auto1E3AA120_var], c_unitPropCurrent), lv_maxKills);
    }
    lv_jLocal = 1;
    for ( ; ( (auto62116798_ai >= 0 && lv_jLocal <= auto62116798_ae) || (auto62116798_ai < 0 && lv_jLocal >= auto62116798_ae) ) ; lv_jLocal += auto62116798_ai ) {
        if ((lv_xPGained[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[1][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_protoss.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[1][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_xPGained[lv_jLocal]) / IntToFixed(lv_maxXP)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((gv_playerGamesPlayed[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[4][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_terran.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[4][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(gv_playerGamesPlayed[lv_jLocal]) / IntToFixed(lv_maxGamesPlayed)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((libNtve_gf_UnitGetPropertyKills(gv_marineHero[lv_jLocal], c_unitPropCurrent) > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[5][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_terran.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[5][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(libNtve_gf_UnitGetPropertyKills(gv_marineHero[lv_jLocal], c_unitPropCurrent)) / IntToFixed(lv_maxKills)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((gv_hitsTaken[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[6][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_backdrop_zerg.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[6][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(gv_hitsTaken[lv_jLocal]) / IntToFixed(lv_maxHits)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((gv_playerDamageTaken[lv_jLocal] > 1.0)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[7][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_backdrop_zerg.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[7][lv_jLocal], PlayerGroupAll(), FixedToInt(((gv_playerDamageTaken[lv_jLocal] / lv_maxDamageTaken) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((lv_totalWins[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[8][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_terran.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[8][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_totalWins[lv_jLocal]) / IntToFixed(lv_maxWins)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        lv_iLocal = 1;
        for ( ; ( (autoFDB228BA_ai >= 0 && lv_iLocal <= autoFDB228BA_ae) || (autoFDB228BA_ai < 0 && lv_iLocal >= autoFDB228BA_ae) ) ; lv_iLocal += autoFDB228BA_ai ) {
            libNtve_gf_SetDialogItemImage(gv_medalsItemImages[lv_iLocal][lv_jLocal], gv_medalsAwardedImages[lv_iLocal][lv_jLocal], PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_medalsItemButtons[lv_iLocal][lv_jLocal], gv_medalsAwardedText[lv_iLocal][lv_jLocal], PlayerGroupAll());
        }
    }
    lv_jLocal = 1;
    for ( ; ( (autoD93C9B9F_ai >= 0 && lv_jLocal <= autoD93C9B9F_ae) || (autoD93C9B9F_ai < 0 && lv_jLocal >= autoD93C9B9F_ae) ) ; lv_jLocal += autoD93C9B9F_ai ) {
        if ((lv_ratingGained[lv_jLocal] > 0)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarRatingImages[lv_jLocal][1], "Assets\\Textures\\ui_loadingbar_bar_highlighted_protoss.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarRatingImages[lv_jLocal][1], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_ratingGained[lv_jLocal]) / IntToFixed(lv_maxRating)) * ((5.0 / 6.0) * IntToFixed(gv_itemX)))), gv_playerNameTextY);
            DialogControlSetPosition(gv_itemBarRatingImages[lv_jLocal][1], PlayerGroupAll(), c_anchorTopLeft, 664, (75 + ((lv_jLocal - 1) * (25 + 5))));
        }
        else if ((lv_ratingGained[lv_jLocal] < 0) && (PlayerStatus(lv_jLocal) != c_playerStatusUnused)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarRatingImages[lv_jLocal][2], "Assets\\Textures\\ui_loadingbar_bar_backdrop_zerg.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarRatingImages[lv_jLocal][2], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_ratingGained[lv_jLocal]) / IntToFixed(lv_minRating)) * ((1.0 / 6.0) * IntToFixed(gv_itemX)))), gv_playerNameTextY);
            DialogControlSetPosition(gv_itemBarRatingImages[lv_jLocal][2], PlayerGroupAll(), c_anchorTopLeft, (614 + (50 - FixedToInt(((IntToFixed(lv_ratingGained[lv_jLocal]) / IntToFixed(lv_minRating)) * (IntToFixed(gv_itemX) / 6.0))))), (75 + ((lv_jLocal - 1) * (25 + 5))));
        }
    }
    return true;
}

trigger auto_gf_SetMedalVariables_Trigger = null;
int auto_gf_SetMedalVariables_lp_playerNo;
int auto_gf_SetMedalVariables_lp_medalID;

void gf_SetMedalVariables (int lp_playerNo, int lp_medalID) {
    auto_gf_SetMedalVariables_lp_playerNo = lp_playerNo;
    auto_gf_SetMedalVariables_lp_medalID = lp_medalID;

    if (auto_gf_SetMedalVariables_Trigger == null) {
        auto_gf_SetMedalVariables_Trigger = TriggerCreate("auto_gf_SetMedalVariables_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetMedalVariables_Trigger, false, false);
}

bool auto_gf_SetMedalVariables_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_SetMedalVariables_lp_playerNo;
    int lp_medalID = auto_gf_SetMedalVariables_lp_medalID;

    // Variable Declarations
    int lv_medalLevel;

    // Automatic Variable Declarations
    const int autoAA17FB20_ae = 4;
    int autoAA17FB20_var;

    // Variable Initialization

    // Implementation
    autoAA17FB20_var = 1;
    for ( ; autoAA17FB20_var <= autoAA17FB20_ae; autoAA17FB20_var += 1 ) {
        if ((gv_medalsAwarded[autoAA17FB20_var][lp_playerNo] == false)) {
            gv_medalsAwarded[autoAA17FB20_var][lp_playerNo] = true;
            if ((lp_medalID == 1)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/8C3FE1C6");
                lv_medalLevel = (gv_combatActionRibbon[lp_playerNo] / 50);
            }
            else if ((lp_medalID == 2)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/954FC6A2");
                lv_medalLevel = (gv_lifeSavingMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 3)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/35539152");
                lv_medalLevel = (gv_bronzeStar[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 4)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/E2A0EDAE");
                lv_medalLevel = (gv_silverStar[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 5)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/E2038E54");
                lv_medalLevel = (gv_legionOfMerit[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 6)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/7B69B49F");
                lv_medalLevel = (gv_distinguishedServiceMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 7)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/E3394F8F");
                lv_medalLevel = (gv_navyCross[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 8)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/151BA93C");
                lv_medalLevel = (gv_expeditionaryMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 9)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/7CA354C7");
                lv_medalLevel = (gv_superiorServiceMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 10)) {
                gv_medalsAwardedText[autoAA17FB20_var][lp_playerNo] = StringExternal("Param/Value/9834D560");
                lv_medalLevel = (gv_medalOfHonor[lp_playerNo] / 50);
            }
            if ((lv_medalLevel == 0)) {
                gv_medalsAwardedImages[autoAA17FB20_var][lp_playerNo] = "NOTD Medal Icons\\NOTD Medal T1.dds";
            }
            else if ((lv_medalLevel == 1)) {
                gv_medalsAwardedImages[autoAA17FB20_var][lp_playerNo] = "NOTD Medal Icons\\NOTD Medal T1.dds";
            }
            else if ((lv_medalLevel == 2)) {
                gv_medalsAwardedImages[autoAA17FB20_var][lp_playerNo] = "NOTD Medal Icons\\NOTD Medal T2.dds";
            }
            else if ((lv_medalLevel == 3)) {
                gv_medalsAwardedImages[autoAA17FB20_var][lp_playerNo] = "NOTD Medal Icons\\NOTD Medal T3.dds";
            }
            else if ((lv_medalLevel == 4)) {
                gv_medalsAwardedImages[autoAA17FB20_var][lp_playerNo] = "NOTD Medal Icons\\NOTD Medal T4.dds";
            }
            else if ((lv_medalLevel == 5)) {
                gv_medalsAwardedImages[autoAA17FB20_var][lp_playerNo] = "NOTD Medal Icons\\NOTD Medal T5.dds";
            }
            else if ((lv_medalLevel >= 6)) {
                gv_medalsAwardedImages[autoAA17FB20_var][lp_playerNo] = "NOTD Medal Icons\\NOTD Medal T6.dds";
            }
            break;
        }

    }
    return true;
}

trigger auto_gf_FlareAreaRecruit_Trigger = null;
point auto_gf_FlareAreaRecruit_lp_flarePoint;
fixed auto_gf_FlareAreaRecruit_lp_flareRadius;

void gf_FlareAreaRecruit (point lp_flarePoint, fixed lp_flareRadius) {
    auto_gf_FlareAreaRecruit_lp_flarePoint = lp_flarePoint;
    auto_gf_FlareAreaRecruit_lp_flareRadius = lp_flareRadius;

    if (auto_gf_FlareAreaRecruit_Trigger == null) {
        auto_gf_FlareAreaRecruit_Trigger = TriggerCreate("auto_gf_FlareAreaRecruit_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlareAreaRecruit_Trigger, false, false);
}

bool auto_gf_FlareAreaRecruit_TriggerFunc (bool testConds, bool runActions) {
    point lp_flarePoint = auto_gf_FlareAreaRecruit_lp_flarePoint;
    fixed lp_flareRadius = auto_gf_FlareAreaRecruit_lp_flareRadius;

    // Variable Declarations
    unit lv_roadFlare;

    // Automatic Variable Declarations
    const int autoB99B6698_ae = 8;
    int autoB99B6698_var;

    // Variable Initialization

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "RoadFlareFire", 0, 9, lp_flarePoint, lp_flarePoint);
    lv_roadFlare = UnitLastCreated();
    autoB99B6698_var = 1;
    for ( ; autoB99B6698_var <= autoB99B6698_ae; autoB99B6698_var += 1 ) {
        VisRevealArea(autoB99B6698_var, RegionCircle(lp_flarePoint, lp_flareRadius), 65.0, false);
    }
    Wait(65.0, c_timeReal);
    UnitKill(lv_roadFlare);
    return true;
}

void gf_EquipmentUpdateMarineWeight (int lp_ownerOfEquipment) {
    // Variable Declarations
    int lv_i;
    int lv_runningWeight;

    // Automatic Variable Declarations
    unitgroup autoD73EE829_g;
    int autoD73EE829_u;
    unit autoD73EE829_var;

    // Variable Initialization

    // Implementation
    gv_marineWeightPoints[lp_ownerOfEquipment] = 0;
    autoD73EE829_g = UnitInventoryGroup(gv_marineHero[lp_ownerOfEquipment]);
    autoD73EE829_u = UnitGroupCount(autoD73EE829_g, c_unitCountAll);
    for (;; autoD73EE829_u -= 1) {
        autoD73EE829_var = UnitGroupUnitFromEnd(autoD73EE829_g, autoD73EE829_u);
        if (autoD73EE829_var == null) { break; }
        if ((UnitInventoryContainer(autoD73EE829_var) == 2)) {
            gf_EquipmentUpdateMarineWeightPointPerItem(lp_ownerOfEquipment, autoD73EE829_var);
        }

    }
    gv_marineWeightPoints[lp_ownerOfEquipment] += gv_marineMags[lp_ownerOfEquipment];
    if ((gv_marineWeightPoints[lp_ownerOfEquipment] < 0)) {
        gv_marineWeightPoints[lp_ownerOfEquipment] = 0;
    }

    if (((UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Spectre") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "GhostLaserLines") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "PsiOps") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Medic") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Pathfinder"))) {
        gv_marineWeightPoints[lp_ownerOfEquipment] = FixedToInt((IntToFixed(gv_marineWeightPoints[lp_ownerOfEquipment]) * (0.6 - (IntToFixed(gv_statsStrength1[lp_ownerOfEquipment]) * 0.0075))));
    }
    else if (((UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "TychusChaingun") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "DominionKillTeam") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Flamethrower3") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Technician"))) {
        gv_marineWeightPoints[lp_ownerOfEquipment] = FixedToInt((IntToFixed(gv_marineWeightPoints[lp_ownerOfEquipment]) * (0.4 - (IntToFixed(gv_statsStrength1[lp_ownerOfEquipment]) * 0.0075))));
    }
    else if (((UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Rifleman") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Commando") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "ForwardObserver") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "Engineer") || (UnitGetType(gv_marineHero[lp_ownerOfEquipment]) == "ChemicalExpert"))) {
        gv_marineWeightPoints[lp_ownerOfEquipment] = FixedToInt((IntToFixed(gv_marineWeightPoints[lp_ownerOfEquipment]) * (0.5 - (IntToFixed(gv_statsStrength1[lp_ownerOfEquipment]) * 0.0075))));
    }
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight10", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight100", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight20", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight200", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight5", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight50", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight500", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1000", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2000", 2);
    lv_i = (gv_marineWeightPoints[lp_ownerOfEquipment] / 2000);
    lv_runningWeight = (gv_marineWeightPoints[lp_ownerOfEquipment] - (2000 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2000", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 1000);
    lv_runningWeight = (lv_runningWeight - (1000 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1000", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 500);
    lv_runningWeight = (lv_runningWeight - (500 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight500", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 200);
    lv_runningWeight = (lv_runningWeight - (200 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight200", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 100);
    lv_runningWeight = (lv_runningWeight - (100 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight100", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 50);
    lv_runningWeight = (lv_runningWeight - (50 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight50", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 20);
    lv_runningWeight = (lv_runningWeight - (20 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight20", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 10);
    lv_runningWeight = (lv_runningWeight - (10 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight10", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 5);
    lv_runningWeight = (lv_runningWeight - (5 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight5", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 2);
    lv_runningWeight = (lv_runningWeight - (2 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2", lp_ownerOfEquipment, lv_i);
    }

    lv_i = (lv_runningWeight / 1);
    lv_runningWeight = (lv_runningWeight - (1 * lv_i));
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1", lp_ownerOfEquipment, lv_i);
    }

}

int gf_GetEnhancementSlots (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(EventUnit()) == "Rifleman") || (UnitGetType(EventUnit()) == "TychusChaingun") || (UnitGetType(EventUnit()) == "GhostLaserLines") || (UnitGetType(EventUnit()) == "DominionKillTeam") || (UnitGetType(EventUnit()) == "Engineer") || (UnitGetType(EventUnit()) == "ChemicalExpert") || (UnitGetType(EventUnit()) == "Flamethrower3") || (UnitGetType(EventUnit()) == "Technician"))) {
        return 3;
    }
    else {
        return 2;
    }
    return 2;
}

int gf_GetInventorySlots (unit lp_hero) {
    // Automatic Variable Declarations
    // Implementation
    if (((UnitGetType(EventUnit()) == "GhostLaserLines") || (UnitGetType(EventUnit()) == "Engineer") || (UnitGetType(EventUnit()) == "Medic") || (UnitGetType(EventUnit()) == "Commando") || (UnitGetType(EventUnit()) == "ForwardObserver") || (UnitGetType(EventUnit()) == "PsiOps"))) {
        return 4;
    }

    if (((UnitGetType(EventUnit()) == "ChemicalExpert") || (UnitGetType(EventUnit()) == "Pathfinder") || (UnitGetType(EventUnit()) == "Flamethrower3"))) {
        return 5;
    }

    if (((UnitGetType(EventUnit()) == "Rifleman") || (UnitGetType(EventUnit()) == "TychusChaingun") || (UnitGetType(EventUnit()) == "DominionKillTeam") || (UnitGetType(EventUnit()) == "Technician"))) {
        return 6;
    }

    return 7;
}

void gf_EquipmentUpdateMarineWeightPointPerItem (int lp_ownerofEquipment, unit lp_item) {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitGetType(lp_item) == "Crowbar7")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((3.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "P45GaussPistol")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((3.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "GaussRifle")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((10.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "Flamethrower")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((15.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "Shotgun")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((10.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "SniperRifle")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((12.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "Chaingun")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((20.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "LaserRifle")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((20.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "L3GrenadeLauncher")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((12.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "C2Armor")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 15);
    }
    else if ((UnitGetType(lp_item) == "C4Armor")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 20);
    }
    else if ((UnitGetType(lp_item) == "ThermalSight")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 2);
    }
    else if ((UnitGetType(lp_item) == "OccularImplants")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 2);
    }
    else if ((UnitGetType(lp_item) == "PersonnelArcReactor")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 3);
    }
    else if ((UnitGetType(lp_item) == "RiotShield")) {
        gv_marineWeightPoints[lp_ownerofEquipment] += 5;
    }
    else if ((UnitGetType(lp_item) == "APAmmo")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 3);
    }
    else if ((UnitGetType(lp_item) == "FMJAmmo")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 3);
    }
    else if ((UnitGetType(lp_item) == "HEAmmo")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 3);
    }
    else if ((UnitGetType(lp_item) == "HPAmmo")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 3);
    }
    else if ((UnitGetType(lp_item) == "UA420AssaultRifle")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((10.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "M5PulseRifle")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((8.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "MP9A2SubMachineGun")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((5.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "BarrettM112")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((25.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "XM320GrenadeLauncher")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((10.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "StingerMK3")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((25.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "Shiva")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((20.0 * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else if ((UnitGetType(lp_item) == "HighCapacityClip")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 2);
    }
    else if ((UnitGetType(lp_item) == "NanoHealthAugment")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 3);
    }
    else if ((UnitGetType(lp_item) == "C6Armor")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 22);
    }
    else if ((UnitGetType(lp_item) == "ReactiveArmor")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 18);
    }
    else if ((UnitGetType(lp_item) == "KineticArmor")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 8);
    }
    else if ((UnitGetType(lp_item) == "XS4Armor")) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + 15);
    }
}

trigger auto_gf_DisableAttackEquippingWeapons_Trigger = null;
int auto_gf_DisableAttackEquippingWeapons_lp_inventoryOwner;
string auto_gf_DisableAttackEquippingWeapons_lp_equipment;

void gf_DisableAttackEquippingWeapons (int lp_inventoryOwner, string lp_equipment) {
    auto_gf_DisableAttackEquippingWeapons_lp_inventoryOwner = lp_inventoryOwner;
    auto_gf_DisableAttackEquippingWeapons_lp_equipment = lp_equipment;

    if (auto_gf_DisableAttackEquippingWeapons_Trigger == null) {
        auto_gf_DisableAttackEquippingWeapons_Trigger = TriggerCreate("auto_gf_DisableAttackEquippingWeapons_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisableAttackEquippingWeapons_Trigger, false, false);
}

bool auto_gf_DisableAttackEquippingWeapons_TriggerFunc (bool testConds, bool runActions) {
    int lp_inventoryOwner = auto_gf_DisableAttackEquippingWeapons_lp_inventoryOwner;
    string lp_equipment = auto_gf_DisableAttackEquippingWeapons_lp_equipment;

    // Variable Declarations
    unit lv_inventoryHero;
    fixed lv_boltPullWait;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_inventoryHero = gv_marineHero[lp_inventoryOwner];

    // Implementation
    if ((lp_equipment == "Crowbar7")) {
        lv_boltPullWait = 0.1;
    }
    else if ((lp_equipment == "P45GaussPistol")) {
        lv_boltPullWait = 0.3;
    }
    else if ((lp_equipment == "MP9A2SubMachineGun")) {
        lv_boltPullWait = 0.7;
    }
    else if (((UnitGetType(lv_inventoryHero) == "Rifleman") || (UnitGetType(lv_inventoryHero) == "Commando") || (UnitGetType(lv_inventoryHero) == "Spectre"))) {
        lv_boltPullWait = 1.2;
    }
    else if (true) {
        lv_boltPullWait = 2.2;
    }
    if ((gv_nightmare == true)) {
        lv_boltPullWait = (lv_boltPullWait * 2.0);
    }

    lv_boltPullWait *= gv_baseMarineSwitchingMultiplier[lp_inventoryOwner];
    if ((gv_playerRating[lp_inventoryOwner] > 2400)) {
        lv_boltPullWait *= 0.5;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 2200)) {
        lv_boltPullWait *= 0.6;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 2000)) {
        lv_boltPullWait *= 0.7;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 1800)) {
        lv_boltPullWait *= 0.8;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 1600)) {
        lv_boltPullWait *= 0.9;
    }
    CatalogFieldValueSet(c_gameCatalogBehavior, "WeaponSwitch", "Duration", lp_inventoryOwner, FixedToString(lv_boltPullWait, c_fixedPrecisionAny));
    UnitBehaviorAdd(lv_inventoryHero, "WeaponSwitch", lv_inventoryHero, 1);
    if ((UnitWeaponGet(lv_inventoryHero, 1) == "StingerMK3") && (gv_marineRounds[lp_inventoryOwner] < 10)) {
        UnitAbilityEnable(lv_inventoryHero, "attack", false);
    }

    Wait(lv_boltPullWait, c_timeGame);
    if ((UnitWeaponGet(lv_inventoryHero, 1) == "Shotgun")) {
        SoundPlayOnUnit(SoundLink("ShotgunPump", -1), PlayerGroupAll(), lv_inventoryHero, 15.0, 75.0, 0.0);
    }
    else {
        SoundPlayOnUnit(SoundLink("BoltPull", -1), PlayerGroupAll(), lv_inventoryHero, 15.0, 100.0, 0.0);
    }
    if ((UnitWeaponGet(lv_inventoryHero, 1) == "L3GrenadeLauncher")) {
        UnitAbilityEnable(lv_inventoryHero, "L3LaunchGrenade", true);
    }

    return true;
}

string gf_GetImageFileofHeroType (int lp_inventoryOwner) {
    // Variable Declarations
    string lv_heroClass;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_heroClass = UnitGetType(gv_marineHero[lp_inventoryOwner]);

    // Implementation
    if ((lv_heroClass == "Rifleman")) {
        return "Assets\\Textures\\btn-unit-terran-marineraynor.dds";
    }
    if ((lv_heroClass == "Medic")) {
        return "Assets\\Textures\\btn-unit-terran-medic.dds";
    }
    if ((lv_heroClass == "TychusChaingun")) {
        return "Assets\\Textures\\btn-unit-terran-marinetychus.dds";
    }
    if ((lv_heroClass == "GhostLaserLines")) {
        return "Assets\\Textures\\btn-unit-terran-ghost.dds";
    }
    if ((lv_heroClass == "Spectre")) {
        return "Assets\\Textures\\btn-unit-terran-spectre.dds";
    }
    if ((lv_heroClass == "DominionKillTeam")) {
        return "Assets\\Textures\\btn-unit-terran-marauderkillsquad.dds";
    }
    if ((lv_heroClass == "Engineer")) {
        return "Assets\\Textures\\btn-unit-terran-marauderswann.dds";
    }
    if ((lv_heroClass == "Commando")) {
        return "Assets\\Textures\\btn-unit-terran-marinemercenary.dds";
    }
    if ((lv_heroClass == "ForwardObserver")) {
        return "Assets\\Textures\\btn-unit-terran-marineraynorhev.dds";
    }
    if ((lv_heroClass == "Flamethrower3")) {
        return "Assets\\Textures\\btn-unit-terran-firebatmercenary.dds";
    }
    if ((lv_heroClass == "PsiOps")) {
        return "Assets\\Textures\\btn-unit-terran-nova.dds";
    }
    if ((lv_heroClass == "Technician")) {
        return "Assets/Textures/btn-unit-terran-vikingmercenary-assault.dds";
    }
    if ((lv_heroClass == "Pathfinder")) {
        return "Assets\\Textures\\btn-unit-terran-reaper.dds";
    }
    if ((lv_heroClass == "ChemicalExpert")) {
        return "Assets/Textures/btn-unit-terran-maraudermercenary.dds";
    }
    return "Assets\\Textures\\wireframe-terran-marine-raynorhev.dds";
}

int gf_GetBoughtItemOwner (unit lp_tempItem) {
    // Automatic Variable Declarations
    const int autoC303C68B_ae = 8;
    int autoC303C68B_var;
    unitgroup auto2974A40C_g;
    int auto2974A40C_u;
    unit auto2974A40C_var;

    // Implementation
    autoC303C68B_var = 1;
    for ( ; autoC303C68B_var <= autoC303C68B_ae; autoC303C68B_var += 1 ) {
        auto2974A40C_g = gv_shopItems[autoC303C68B_var];
        auto2974A40C_u = UnitGroupCount(auto2974A40C_g, c_unitCountAll);
        for (;; auto2974A40C_u -= 1) {
            auto2974A40C_var = UnitGroupUnitFromEnd(auto2974A40C_g, auto2974A40C_u);
            if (auto2974A40C_var == null) { break; }
            if ((lp_tempItem == auto2974A40C_var)) {
                return autoC303C68B_var;
            }

        }
    }
    return 0;
}

void gf_HEAmmoBurnDamage (int lp_firingMarineOwner) {
    // Variable Declarations
    fixed lv_weaponDamage;
    string lv_weaponType;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lv_weaponType == "SniperRifle")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "C10CanisterRifle", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "GaussRifle")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "GuassRifle", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "LaserRifle")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "LaserRifleDamage", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "Chaingun")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Chaingun", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "Crowbar7")) {
        lv_weaponDamage = 0.0;
    }
    else if ((lv_weaponType == "Flamethrower")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "InfernalFlameThrower", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "Shotgun")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Shotgun", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "P45GaussPistol")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "BarrettM112")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "BarrettM112", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "UA420AssaultRifle")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "UA420AssaultRifle", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "M5PulseRifle")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "M5PulseRifle", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "MP9A2SubMachineGun")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "MP9A2SubMachineGun", "Amount", lp_firingMarineOwner));
    }
    else if ((lv_weaponType == "StingerMK3")) {
        lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StingerMK3Damage", "Amount", lp_firingMarineOwner));
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "HEAmmoBurnDamage", "Amount", lp_firingMarineOwner, FixedToString((lv_weaponDamage * 0.05), c_fixedPrecisionAny));
}

void gf_PlayerColorChange (int lp_buyingPlayer) {
    // Variable Declarations
    int lv_colorCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colorCode = ModI(gv_playerColorCode[lp_buyingPlayer], 100);

    // Implementation
    if ((lv_colorCode == 1)) {
        PlayerSetColorIndex(lp_buyingPlayer, 0, true);
    }
    else if ((lv_colorCode == 2)) {
        PlayerSetColorIndex(lp_buyingPlayer, 1, true);
    }
    else if ((lv_colorCode == 3)) {
        PlayerSetColorIndex(lp_buyingPlayer, 2, true);
    }
    else if ((lv_colorCode == 4)) {
        PlayerSetColorIndex(lp_buyingPlayer, 3, true);
    }
    else if ((lv_colorCode == 5)) {
        PlayerSetColorIndex(lp_buyingPlayer, 4, true);
    }
    else if ((lv_colorCode == 6)) {
        PlayerSetColorIndex(lp_buyingPlayer, 5, true);
    }
    else if ((lv_colorCode == 7)) {
        PlayerSetColorIndex(lp_buyingPlayer, 6, true);
    }
    else if ((lv_colorCode == 8)) {
        PlayerSetColorIndex(lp_buyingPlayer, 7, true);
    }
    else if ((lv_colorCode == 9)) {
        PlayerSetColorIndex(lp_buyingPlayer, 15, true);
    }
    else if ((lv_colorCode == 10)) {
        PlayerSetColorIndex(lp_buyingPlayer, 9, true);
    }
    else if ((lv_colorCode == 11)) {
        PlayerSetColorIndex(lp_buyingPlayer, 10, true);
    }
    else if ((lv_colorCode == 12)) {
        PlayerSetColorIndex(lp_buyingPlayer, 11, true);
    }
    else if ((lv_colorCode == 13)) {
        PlayerSetColorIndex(lp_buyingPlayer, 12, true);
    }
    else if ((lv_colorCode == 14)) {
        PlayerSetColorIndex(lp_buyingPlayer, 13, true);
    }
    else if ((lv_colorCode == 15)) {
        PlayerSetColorIndex(lp_buyingPlayer, 14, true);
    }
}

void gf_CreatePet (int lp_owner, point lp_point) {
    // Variable Declarations
    int lv_petCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_petCode = ModI(gv_playerPetCode[lp_owner], 100);

    // Implementation
    if (((lv_petCode == 0) || (lv_petCode == 8))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Predator2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 1)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Brutalisk2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 2)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridProtoss", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 3)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "HybridZerg", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 4)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Hydralisk2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 5)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kerrigan2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 6)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingPet", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 7)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "MurlocMarine2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 9)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Tassadar2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 10)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TaurenSpaceMarine2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 11)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerraTron", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 12)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Zeratul2", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    else if ((lv_petCode == 13)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ArchonPet", c_unitCreateIgnorePlacement, lp_owner, lp_point);
    }
    gv_playerPet[lp_owner] = UnitLastCreated();
}

bool gf_BOInsigniaBought (int lp_owner) {
    // Automatic Variable Declarations
    // Implementation
    if ((ModI(gv_playerColorCode[lp_owner], 10000) >= 1000)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_KittensBought (int lp_owner) {
    // Variable Declarations
    int lv_colorCode;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_colorCode = gv_playerColorCode[lp_owner];

    // Implementation
    if ((ModI(lv_colorCode, 1000) >= 100)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_UpgradeBOInsigniaRank (int lp_owner) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_owner], "NOTD Rank Icons\\Black Ops Insignia.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_owner], StringExternal("Param/Value/B1F7B3D2"), PlayerGroupAll());
}

trigger auto_gf_CreateKittens_Trigger = null;
int auto_gf_CreateKittens_lp_owner;

void gf_CreateKittens (int lp_owner) {
    auto_gf_CreateKittens_lp_owner = lp_owner;

    if (auto_gf_CreateKittens_Trigger == null) {
        auto_gf_CreateKittens_Trigger = TriggerCreate("auto_gf_CreateKittens_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateKittens_Trigger, false, false);
}

bool auto_gf_CreateKittens_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_CreateKittens_lp_owner;

    // Variable Declarations
    point lv_point;

    // Automatic Variable Declarations
    const int auto93F613AA_n = 2;
    int auto93F613AA_i;

    // Variable Initialization
    lv_point = UnitGetPosition(gv_marineHero[lp_owner]);

    // Implementation
    if ((UnitIsAlive(gv_marineHero[lp_owner]) == false)) {
        lv_point = UnitGetPosition(gv_playerPet[lp_owner]);
    }

    for (auto93F613AA_i = 1; auto93F613AA_i <= auto93F613AA_n; auto93F613AA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kitten", 0, lp_owner, lv_point);
        UnitGroupAdd(gv_kittens[lp_owner], UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    return true;
}

bool gf_WeaponsModPointMax (int lp_playerNo) {
    // Automatic Variable Declarations
    // Implementation
    if (((ModI(gv_playerWeaponsMod2[lp_playerNo], 10000) / 100) < 20)) {
        return false;
    }
    else {
        return true;
    }
}

trigger auto_gf_RemoveBoughtItems_Trigger = null;
int auto_gf_RemoveBoughtItems_lp_playerNo;

void gf_RemoveBoughtItems (int lp_playerNo) {
    auto_gf_RemoveBoughtItems_lp_playerNo = lp_playerNo;

    if (auto_gf_RemoveBoughtItems_Trigger == null) {
        auto_gf_RemoveBoughtItems_Trigger = TriggerCreate("auto_gf_RemoveBoughtItems_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveBoughtItems_Trigger, false, false);
}

bool auto_gf_RemoveBoughtItems_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_RemoveBoughtItems_lp_playerNo;

    // Automatic Variable Declarations
    unitgroup autoF059F8E0_g;
    int autoF059F8E0_u;
    unit autoF059F8E0_var;

    // Implementation
    autoF059F8E0_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterItem), 0, 0, 0), 0);
    autoF059F8E0_u = UnitGroupCount(autoF059F8E0_g, c_unitCountAll);
    for (;; autoF059F8E0_u -= 1) {
        autoF059F8E0_var = UnitGroupUnitFromEnd(autoF059F8E0_g, autoF059F8E0_u);
        if (autoF059F8E0_var == null) { break; }
        if ((UnitBehaviorCount(autoF059F8E0_var, "ShopItem") == lp_playerNo)) {
            UnitRemove(autoF059F8E0_var);
        }

    }
    Wait(3.0, c_timeGame);
    return true;
}

trigger auto_gf_UpdateAmmoDialog_Trigger = null;
int auto_gf_UpdateAmmoDialog_lp_playerNumber;

void gf_UpdateAmmoDialog (int lp_playerNumber) {
    auto_gf_UpdateAmmoDialog_lp_playerNumber = lp_playerNumber;

    if (auto_gf_UpdateAmmoDialog_Trigger == null) {
        auto_gf_UpdateAmmoDialog_Trigger = TriggerCreate("auto_gf_UpdateAmmoDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateAmmoDialog_Trigger, false, false);
}

bool auto_gf_UpdateAmmoDialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNumber = auto_gf_UpdateAmmoDialog_lp_playerNumber;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lp_playerNumber][1], IntToText(gv_marineRounds[lp_playerNumber]), PlayerGroupActive());
    libNtve_gf_SetDialogItemStyle(gv_ammoCounterDialogItem[lp_playerNumber][1], "Kicker_Zerg", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lp_playerNumber][2], IntToText(gv_marineMags[lp_playerNumber]), PlayerGroupActive());
    libNtve_gf_SetDialogItemStyle(gv_ammoCounterDialogItem[lp_playerNumber][2], "Kicker_Zerg", PlayerGroupAll());
    return true;
}

trigger auto_gf_BadlyInjured_Trigger = null;
unit auto_gf_BadlyInjured_lp_injuredUnit;

void gf_BadlyInjured (unit lp_injuredUnit) {
    auto_gf_BadlyInjured_lp_injuredUnit = lp_injuredUnit;

    if (auto_gf_BadlyInjured_Trigger == null) {
        auto_gf_BadlyInjured_Trigger = TriggerCreate("auto_gf_BadlyInjured_TriggerFunc");
    }

    TriggerExecute(auto_gf_BadlyInjured_Trigger, false, false);
}

bool auto_gf_BadlyInjured_TriggerFunc (bool testConds, bool runActions) {
    unit lp_injuredUnit = auto_gf_BadlyInjured_lp_injuredUnit;

    // Variable Declarations
    unit lv_localUnitA;
    int lv_localIntA;
    playergroup lv_injuredPlayer;
    int lv_injuredTextTag;

    // Automatic Variable Declarations
    const int autoE9E3D706_n = 7;
    int autoE9E3D706_i;

    // Variable Initialization
    lv_localUnitA = lp_injuredUnit;
    lv_localIntA = UnitGetOwner(lv_localUnitA);
    lv_injuredPlayer = PlayerGroupSingle(lv_localIntA);
    lv_injuredTextTag = c_textTagNone;

    // Implementation
    gv_playerRecovery[lv_localIntA] = true;
    libNtve_gf_MakeUnitInvulnerable(lv_localUnitA, true);
    if ((gv_playerXP[lv_localIntA] > 500)) {
        UnitAbilityEnable(lv_localUnitA, "attack", false);
    }

    UnitSetPropertyFixed(lv_localUnitA, c_unitPropMovementSpeed, 0.6);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryCombat, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategorySpell, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryAlert, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryME, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryDoodad, true);
    if ((gv_fPS[lv_localIntA] == false)) {
        CameraPan(lv_localIntA, UnitGetPosition(gv_marineHero[lv_localIntA]), 0.0, -1, 10, false);
        CameraSetValue(lv_localIntA, c_cameraValueDistance, 20.0, 0.8, -1, 10);
    }

    SoundPlay(SoundLink("Heartbeat", -1), lv_injuredPlayer, 100.0, 0.0);
    gv_playerRating[lv_localIntA] -= 1;
    gv_playerLives[lv_localIntA] -= 1;
    libNtve_gf_SetDialogItemText(gv_statsPlayerLivesLeft[lv_localIntA], IntToText(gv_playerLives[lv_localIntA]), PlayerGroupAll());
    if ((gv_playerLives[lv_localIntA] == 1)) {
        TextTagCreate((StringExternal("Param/Value/431FEC2D") + (IntToText(gv_playerLives[lv_localIntA]) + StringExternal("Param/Value/B93CD477"))), 24, UnitGetPosition(lv_localUnitA), 1.5, true, false, PlayerGroupActive());
    }
    else {
        TextTagCreate((StringExternal("Param/Value/EADB924C") + (IntToText(gv_playerLives[lv_localIntA]) + StringExternal("Param/Value/10CB3A8D"))), 24, UnitGetPosition(lv_localUnitA), 1.5, true, false, PlayerGroupActive());
    }
    if ((gv_playerXP[lv_localIntA] <= 500) && (RandomInt(0, 2) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(lv_localIntA), c_messageAreaSubtitle, StringExternal("Param/Value/E2FE4ACA"));
    }

    lv_injuredTextTag = TextTagLastCreated();
    TextTagAttachToUnit(lv_injuredTextTag, lv_localUnitA, 1.5);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(lv_localUnitA));
    CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 1.0, 100.0, 1.5);
    for (autoE9E3D706_i = 1; autoE9E3D706_i <= autoE9E3D706_n; autoE9E3D706_i += 1) {
        if ((UnitIsAlive(lv_localUnitA) == true)) {
            UnitSetPropertyFixed(lv_localUnitA, c_unitPropLife, (UnitGetPropertyFixed(lv_localUnitA, c_unitPropLife, c_unitPropCurrent) + 5.0));
        }

        Wait(0.2, c_timeGame);
    }
    if ((UnitIsAlive(lv_localUnitA) == true)) {
        UnitSetPropertyFixed(lv_localUnitA, c_unitPropMovementSpeed, 1.1);
    }

    Wait(2.0, c_timeGame);
    if ((gv_fPS[lv_localIntA] == false)) {
        CameraSetValue(lv_localIntA, c_cameraValueDistance, 30.0, 1.0, -1, 10);
    }

    SoundChannelMute(lv_injuredPlayer, c_soundCategoryCombat, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategorySpell, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryAlert, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryME, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryDoodad, false);
    TextTagDestroy(lv_injuredTextTag);
    if ((UnitIsAlive(lv_localUnitA) == true)) {
        UnitResetSpeed(lv_localUnitA);
        UnitAbilityEnable(lv_localUnitA, "attack", true);
        libNtve_gf_MakeUnitInvulnerable(lv_localUnitA, false);
        gv_playerRecovery[UnitGetOwner(lv_localUnitA)] = false;
    }

    return true;
}

bool gf_AilmentResistanceCheck (unit lp_localUnitA) {
    // Variable Declarations
    unit lv_localUnitA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localUnitA = lp_localUnitA;

    // Implementation
    if ((((UnitHasBehavior(lv_localUnitA, "C2Armor") == false) && (UnitHasBehavior(lv_localUnitA, "C4Armor") == false) && (RandomFixed(0.001, 100.0) > (gv_statsEndurance2[UnitGetOwner(lp_localUnitA)] * 2.2))) || ((UnitHasBehavior(lv_localUnitA, "C2Armor") == true) && (RandomFixed(0.001, 100.0) > (40.0 + (gv_statsEndurance2[UnitGetOwner(lp_localUnitA)] * 2.2)))) || ((UnitHasBehavior(lv_localUnitA, "C4Armor") == true) && (RandomFixed(0.001, 100.0) > (20.0 + (gv_statsEndurance2[UnitGetOwner(lp_localUnitA)] * 2.2)))))) {
        return false;
    }
    else {
        return true;
    }
}

trigger auto_gf_DeathDisplay_Trigger = null;
string auto_gf_DeathDisplay_lp_damageEffect;
int auto_gf_DeathDisplay_lp_playerNumber;
unit auto_gf_DeathDisplay_lp_killer;

void gf_DeathDisplay (string lp_damageEffect, int lp_playerNumber, unit lp_killer) {
    auto_gf_DeathDisplay_lp_damageEffect = lp_damageEffect;
    auto_gf_DeathDisplay_lp_playerNumber = lp_playerNumber;
    auto_gf_DeathDisplay_lp_killer = lp_killer;

    if (auto_gf_DeathDisplay_Trigger == null) {
        auto_gf_DeathDisplay_Trigger = TriggerCreate("auto_gf_DeathDisplay_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeathDisplay_Trigger, false, false);
}

bool auto_gf_DeathDisplay_TriggerFunc (bool testConds, bool runActions) {
    string lp_damageEffect = auto_gf_DeathDisplay_lp_damageEffect;
    int lp_playerNumber = auto_gf_DeathDisplay_lp_playerNumber;
    unit lp_killer = auto_gf_DeathDisplay_lp_killer;

    // Automatic Variable Declarations
    // Implementation
    if (((UnitIsAlive(lp_killer) == true) || (((UnitGetOwner(libNtve_gf_KillingUnit()) >= 13) && (UnitGetOwner(libNtve_gf_KillingUnit()) <= 14)) == true))) {
        if ((UnitTypeTestFlag(UnitGetType(lp_killer), c_unitFlagHero) == true)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/4249554A") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/94FD8219")))) + (StringExternal("Param/Value/ADA92E45") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/7DFE6CBB")))));
        }
        else if ((UnitGetType(lp_killer) == "Zergling")) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/F84A1594") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/9391028D")))) + (StringExternal("Param/Value/3351C217") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/3FFD4D8E")))));
        }
        else if (((UnitGetType(lp_killer) == "ZombieLevel1") || (UnitGetType(lp_killer) == "ZombieLevel2"))) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/3AD8FB1C") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/180D65A7")))) + (StringExternal("Param/Value/3FD620B7") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/CEDBC58C")))));
        }
        else if ((lp_damageEffect == ("VolatileBurstU"))) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/D02CD6BD") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/B379046C")))) + (StringExternal("Param/Value/FE1B7DCF") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/CABB279C")))));
        }
        else if (((UnitGetType(lp_killer) == "Slasher") || (UnitGetType(lp_killer) == "Ultralisk"))) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/C153AC97") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/5A1C067F")))) + (StringExternal("Param/Value/734A76E0") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/F660AF19")))));
        }
        else if ((UnitGetType(lp_killer) == "InfestorTerran")) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/BFC1C33D") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/75AFF3F9")))) + (StringExternal("Param/Value/F90A1498") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/D812FCBE")))));
        }
        else if ((UnitGetType(lp_killer) == "BlackOps")) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/78A18E1F") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/0E475204")))) + (StringExternal("Param/Value/B86A09A5") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/EB73A4D1")))));
        }
        else if (true) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/3FB5F4E7") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/4CF5B2BA")))) + (StringExternal("Param/Value/87909C44") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/6B5C38B9")))));
        }
    }
    else if (((lp_damageEffect == ("StingerMK3DamageAllies")) || (lp_damageEffect == ("StingerMK3Damage")) || (lp_damageEffect == ("SatchelLevel1Damage")) || (lp_damageEffect == ("SatchelLevel2Damage")) || (lp_damageEffect == ("VultureSpiderMinesDamage")))) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/3B32AFB0") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/D6B0FABC")))) + StringExternal("Param/Value/4BBC15E6")));
    }
    else if ((UnitGetOwner(lp_killer) == lp_playerNumber)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/E62A5AE7") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/A00B091C")))) + StringExternal("Param/Value/0EC88977")));
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, ((PlayerName(lp_playerNumber) + (StringExternal("Param/Value/25579946") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/E9CBB60F")))) + StringExternal("Param/Value/3331F97F")));
    }
    return true;
}

trigger auto_gf_DeathRating_Trigger = null;
unit auto_gf_DeathRating_lp_deadMarine;
int auto_gf_DeathRating_lp_playerNumber;

void gf_DeathRating (unit lp_deadMarine, int lp_playerNumber) {
    auto_gf_DeathRating_lp_deadMarine = lp_deadMarine;
    auto_gf_DeathRating_lp_playerNumber = lp_playerNumber;

    if (auto_gf_DeathRating_Trigger == null) {
        auto_gf_DeathRating_Trigger = TriggerCreate("auto_gf_DeathRating_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeathRating_Trigger, false, false);
}

bool auto_gf_DeathRating_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadMarine = auto_gf_DeathRating_lp_deadMarine;
    int lp_playerNumber = auto_gf_DeathRating_lp_playerNumber;

    // Automatic Variable Declarations
    // Implementation
    gv_alivePlayers -= 1;
    return true;
}

trigger auto_gf_DeathCamera_Trigger = null;
region auto_gf_DeathCamera_lp_deathLocation;
unit auto_gf_DeathCamera_lp_deadMarine;
int auto_gf_DeathCamera_lp_playerNumber;

void gf_DeathCamera (region lp_deathLocation, unit lp_deadMarine, int lp_playerNumber) {
    auto_gf_DeathCamera_lp_deathLocation = lp_deathLocation;
    auto_gf_DeathCamera_lp_deadMarine = lp_deadMarine;
    auto_gf_DeathCamera_lp_playerNumber = lp_playerNumber;

    if (auto_gf_DeathCamera_Trigger == null) {
        auto_gf_DeathCamera_Trigger = TriggerCreate("auto_gf_DeathCamera_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeathCamera_Trigger, false, false);
}

bool auto_gf_DeathCamera_TriggerFunc (bool testConds, bool runActions) {
    region lp_deathLocation = auto_gf_DeathCamera_lp_deathLocation;
    unit lp_deadMarine = auto_gf_DeathCamera_lp_deadMarine;
    int lp_playerNumber = auto_gf_DeathCamera_lp_playerNumber;

    // Automatic Variable Declarations
    const int auto0565BA72_ae = 8;
    int auto0565BA72_var;

    // Implementation
    CameraLookAtUnit(lp_playerNumber, null);
    CameraFollowUnitGroup(lp_playerNumber, libNtve_gf_ConvertUnitToUnitGroup(gv_marineHero[lp_playerNumber]), false, false);
    CameraFollowUnitGroup(lp_playerNumber, libNtve_gf_ConvertUnitToUnitGroup(gv_playerPet[lp_playerNumber]), false, false);
    CameraApplyInfo(lp_playerNumber, CameraInfoDefault(), 2.0, -1, 10, true);
    CameraPan(lp_playerNumber, RegionGetCenter(lp_deathLocation), 0.0, -1, 10, false);
    CameraLockInput(lp_playerNumber, false);
    CameraShakeStart(lp_playerNumber, c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 1.6, 100.0, 0.7);
    if ((UnitGetType(lp_deadMarine) == "Flamethrower3")) {
        auto0565BA72_var = 1;
        for ( ; auto0565BA72_var <= auto0565BA72_ae; auto0565BA72_var += 1 ) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_marineHero[auto0565BA72_var]), RegionGetCenter(lp_deathLocation)) < 6.0)) {
                CameraShakeStart(auto0565BA72_var, c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 1.6, 100.0, 0.7);
            }

        }
    }
    return true;
}

trigger auto_gf_DeathDialogDestruction_Trigger = null;
int auto_gf_DeathDialogDestruction_lp_playerNumber;

void gf_DeathDialogDestruction (int lp_playerNumber) {
    auto_gf_DeathDialogDestruction_lp_playerNumber = lp_playerNumber;

    if (auto_gf_DeathDialogDestruction_Trigger == null) {
        auto_gf_DeathDialogDestruction_Trigger = TriggerCreate("auto_gf_DeathDialogDestruction_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeathDialogDestruction_Trigger, false, false);
}

bool auto_gf_DeathDialogDestruction_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNumber = auto_gf_DeathDialogDestruction_lp_playerNumber;

    // Automatic Variable Declarations
    // Implementation
    DialogDestroy(gv_talentTree[lp_playerNumber]);
    DialogDestroy(gv_statsPlayerStatsDialog[lp_playerNumber]);
    DialogDestroy(gv_statsPlayerStatsDialogStats[lp_playerNumber]);
    DialogDestroy(gv_wModWeaponsModDialog[lp_playerNumber]);
    DialogDestroy(gv_shellDialog[lp_playerNumber]);
    DialogDestroy(gv_ammoCounterDialog[lp_playerNumber]);
    return true;
}

trigger auto_gf_RankUp_Trigger = null;

void gf_RankUp () {
    if (auto_gf_RankUp_Trigger == null) {
        auto_gf_RankUp_Trigger = TriggerCreate("auto_gf_RankUp_TriggerFunc");
    }

    TriggerExecute(auto_gf_RankUp_Trigger, false, false);
}

bool auto_gf_RankUp_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rankUpTextTag;
    actor lv_rankUpActor;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_rankUpTextTag = c_textTagNone;

    // Implementation
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupAll(), 200.0, 0.0);
    libNtve_gf_AttachModelToUnit(gv_marineHero[gv_rankUpPlayer], "RankUp", "Ref_Center");
    lv_rankUpActor = libNtve_gf_ActorLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (PlayerName(gv_rankUpPlayer) + (StringExternal("Param/Value/D40821C3") + gv_rankFullTitle[gv_playerRank[gv_rankUpPlayer]])));
    TextTagCreate(StringExternal("Param/Value/0E5EDA3D"), 45, UnitGetPosition(gv_marineHero[gv_rankUpPlayer]), 3.0, true, false, PlayerGroupAll());
    lv_rankUpTextTag = TextTagLastCreated();
    TextTagAttachToUnit(lv_rankUpTextTag, gv_marineHero[gv_rankUpPlayer], 3.25);
    TextTagSetBackgroundImage(lv_rankUpTextTag, gv_rankIcon[gv_playerRank[gv_rankUpPlayer]], false);
    TextTagShowBackground(lv_rankUpTextTag, true);
    Wait(15.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TextTagDestroy(lv_rankUpTextTag);
    libNtve_gf_KillModel(lv_rankUpActor);
    libNtve_gf_SetDialogItemText(gv_statsPlayerNextLevelPromotionLabel[gv_rankUpPlayer], gv_rankFullTitle[(gv_playerRank[gv_rankUpPlayer] + 1)], PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsPlayerCurrentXP[gv_rankUpPlayer], IntToText(gv_playerXP[gv_rankUpPlayer]), PlayerGroupAll());
    DialogControlSetPosition(gv_statsPlayerCurrentXP[gv_rankUpPlayer], PlayerGroupAll(), c_anchorTopLeft, gf_StatsXPLabelXPosition(gv_rankUpPlayer), 401);
    libNtve_gf_SetDialogItemText(gv_statsPlayerNextXP[gv_rankUpPlayer], IntToText(gv_rankRequirement[(gv_playerRank[gv_rankUpPlayer] + 1)]), PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(gv_statsPlayerNextLevelProgressBar[gv_rankUpPlayer], IntToFixed(gv_rankRequirement[(gv_playerRank[gv_rankUpPlayer] + 1)]), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_statsPlayerNextLevelProgressBar[gv_rankUpPlayer], IntToFixed(gv_playerXP[gv_rankUpPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerMedalsPlayerNameLabel[gv_rankUpPlayer], (gv_rankTitle[gv_playerRank[gv_rankUpPlayer]] + PlayerName(gv_rankUpPlayer)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsPlayerNameLabel[gv_rankUpPlayer], (gv_rankTitle[gv_playerRank[gv_rankUpPlayer]] + PlayerName(gv_rankUpPlayer)), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_talentTreePlayerNameLabel[gv_rankUpPlayer], (gv_rankTitle[gv_playerRank[gv_rankUpPlayer]] + PlayerName(gv_rankUpPlayer)), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_talentTreeRankIcon[gv_rankUpPlayer], gv_rankIcon[gv_playerRank[gv_rankUpPlayer]], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_playerMedalsRankIcon[gv_rankUpPlayer], gv_rankIcon[gv_playerRank[gv_rankUpPlayer]], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_statsRankIcon[gv_rankUpPlayer], gv_rankIcon[gv_playerRank[gv_rankUpPlayer]], PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[gv_rankUpPlayer], gv_rankIcon[gv_playerRank[gv_rankUpPlayer]], PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[gv_rankUpPlayer], gv_rankFullTitle[gv_playerRank[gv_rankUpPlayer]], PlayerGroupAll());
    return true;
}

trigger auto_gf_AIDataDifficultyEdit_Trigger = null;

void gf_AIDataDifficultyEdit () {
    if (auto_gf_AIDataDifficultyEdit_Trigger == null) {
        auto_gf_AIDataDifficultyEdit_Trigger = TriggerCreate("auto_gf_AIDataDifficultyEdit_TriggerFunc");
    }

    TriggerExecute(auto_gf_AIDataDifficultyEdit_Trigger, false, false);
}

bool auto_gf_AIDataDifficultyEdit_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_agronBurrowChance;

    // Automatic Variable Declarations
    const int auto16986484_ae = 8;
    int auto16986484_var;

    // Variable Initialization

    // Implementation
    if ((gv_noNewbie == false)) {
        lv_agronBurrowChance = "0";
    }
    else if ((gv_noNewbie == true) && (gv_nightmare == false)) {
        lv_agronBurrowChance = "0.2";
    }
    else if ((gv_noNewbie == true) && (gv_nightmare == true)) {
        lv_agronBurrowChance = "0.5";
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "BurrowOnDeathAgron", "Chance", 14, lv_agronBurrowChance);
    CatalogFieldValueSet(c_gameCatalogEffect, "BurrowOnDeathAgron", "Chance", 13, lv_agronBurrowChance);
    auto16986484_var = 1;
    for ( ; auto16986484_var <= auto16986484_ae; auto16986484_var += 1 ) {
        TechTreeBehaviorAllow(auto16986484_var, "UnburrowDisallowAgron", false);
    }
    return true;
}

bool gf_PreCinematicProcessing () {
    // Automatic Variable Declarations
    const int auto3F8FF7D0_ae = 8;
    int auto3F8FF7D0_var;
    unitgroup auto5379B719_g;
    int auto5379B719_u;
    unit auto5379B719_var;
    unitgroup autoC44EBA38_g;
    int autoC44EBA38_u;
    unit autoC44EBA38_var;
    unitgroup autoE493B063_g;
    int autoE493B063_u;
    unit autoE493B063_var;
    const int autoA044D35E_ae = 5;
    int autoA044D35E_var;
    unitgroup autoAE61A6F1_g;
    int autoAE61A6F1_u;
    unit autoAE61A6F1_var;
    const int autoEB5AAE13_ae = 8;
    int autoEB5AAE13_var;
    const int auto9A4033E6_ae = 8;
    int auto9A4033E6_var;

    // Implementation
    auto3F8FF7D0_var = 1;
    for ( ; auto3F8FF7D0_var <= auto3F8FF7D0_ae; auto3F8FF7D0_var += 1 ) {
        if ((DialogIsVisible(gv_raidUITeamStatus, auto3F8FF7D0_var) == true)) {
            gv_iLikeItOpen[auto3F8FF7D0_var] = true;
        }
        else {
            gv_iLikeItOpen[auto3F8FF7D0_var] = false;
        }
        gv_talentTreeOpen[auto3F8FF7D0_var] = false;
        DialogSetVisible(gv_talentTree[auto3F8FF7D0_var], PlayerGroupAll(), false);
        DialogSetVisible(gv_statsPlayerStatsDialog[auto3F8FF7D0_var], PlayerGroupAll(), false);
        DialogSetVisible(gv_statsPlayerStatsDialogStats[auto3F8FF7D0_var], PlayerGroupAll(), false);
        DialogSetVisible(gv_playerMedalsDialog[auto3F8FF7D0_var], PlayerGroupAll(), false);
        DialogSetVisible(gv_wModWeaponsModDialog[auto3F8FF7D0_var], PlayerGroupAll(), false);
        DialogSetVisible(gv_shellDialog[auto3F8FF7D0_var], PlayerGroupAll(), false);
        DialogSetVisible(gv_ammoCounterDialog[auto3F8FF7D0_var], PlayerGroupSingle(auto3F8FF7D0_var), false);
        libNtve_gf_MakeUnitInvulnerable(gv_playerPet[auto3F8FF7D0_var], true);
        UnitBehaviorAdd(gv_playerPet[auto3F8FF7D0_var], "CutsceneFreeze", gv_playerPet[auto3F8FF7D0_var], 1);
        libNtve_gf_MakeUnitInvulnerable(gv_x1Guardian[auto3F8FF7D0_var], true);
        UnitBehaviorAdd(gv_x1Guardian[auto3F8FF7D0_var], "CutsceneFreeze", gv_x1Guardian[auto3F8FF7D0_var], 1);
        libNtve_gf_MakeUnitInvulnerable(gv_marineHero[auto3F8FF7D0_var], true);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroupSelected(auto3F8FF7D0_var), gv_unitsSelected[auto3F8FF7D0_var]);
        UnitGroupSelect(gv_unitsSelected[auto3F8FF7D0_var], auto3F8FF7D0_var, false);
        CameraLockInput(auto3F8FF7D0_var, true);
        if ((UnitGetPropertyFixed(gv_marineHero[auto3F8FF7D0_var], c_unitPropLifePercent, c_unitPropCurrent) < 75.0)) {
            UnitSetPropertyFixed(gv_marineHero[auto3F8FF7D0_var], c_unitPropLifePercent, 100.0);
        }

        if ((UnitGetType(gv_marineHero[auto3F8FF7D0_var]) == "Commando")) {
            UnitBehaviorRemove(gv_marineHero[auto3F8FF7D0_var], "AdrenalineLevel1AttackSpeedHidden", 30);
            UnitBehaviorRemove(gv_marineHero[auto3F8FF7D0_var], "AdrenalineLevel2AttackSpeedHidden", 30);
            UnitBehaviorRemove(gv_marineHero[auto3F8FF7D0_var], "AdrenalineLevel3AttackSpeedHidden", 30);
            UnitBehaviorRemove(gv_marineHero[auto3F8FF7D0_var], "AdrenalineLevel1", 1);
            UnitBehaviorRemove(gv_marineHero[auto3F8FF7D0_var], "AdrenalineLevel2", 1);
            UnitBehaviorRemove(gv_marineHero[auto3F8FF7D0_var], "AdrenalineLevel3", 1);
        }

    }
    auto5379B719_g = gv_colonists;
    auto5379B719_u = UnitGroupCount(auto5379B719_g, c_unitCountAll);
    for (;; auto5379B719_u -= 1) {
        auto5379B719_var = UnitGroupUnitFromEnd(auto5379B719_g, auto5379B719_u);
        if (auto5379B719_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto5379B719_var, true);
    }
    DialogSetVisible(gv_teamUIMedalsButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_teamUIStatsButton, PlayerGroupAll(), false);
    DialogSetVisible(gv_raidUITeamStatus, PlayerGroupAll(), false);
    DialogSetVisible(gv_raidUITeamStatusDummy, PlayerGroupAll(), false);
    DialogSetVisible(gv_raidUIMedalsSubtab, PlayerGroupAll(), false);
    UIClearBattleNetButtonOffset(PlayerGroupAll());
    autoC44EBA38_g = gv_zombieWave;
    autoC44EBA38_u = UnitGroupCount(autoC44EBA38_g, c_unitCountAll);
    for (;; autoC44EBA38_u -= 1) {
        autoC44EBA38_var = UnitGroupUnitFromEnd(autoC44EBA38_g, autoC44EBA38_u);
        if (autoC44EBA38_var == null) { break; }
        UnitBehaviorAdd(autoC44EBA38_var, "CutsceneFreeze", autoC44EBA38_var, 1);
    }
    autoE493B063_g = gv_blackOps;
    autoE493B063_u = UnitGroupCount(autoE493B063_g, c_unitCountAll);
    for (;; autoE493B063_u -= 1) {
        autoE493B063_var = UnitGroupUnitFromEnd(autoE493B063_g, autoE493B063_u);
        if (autoE493B063_var == null) { break; }
        UnitBehaviorAdd(autoE493B063_var, "CutsceneFreeze", autoE493B063_var, 1);
    }
    autoA044D35E_var = 1;
    for ( ; autoA044D35E_var <= autoA044D35E_ae; autoA044D35E_var += 1 ) {
        UnitBehaviorAdd(gv_infestor[autoA044D35E_var], "CutsceneFreeze", gv_infestor[autoA044D35E_var], 1);
    }
    autoAE61A6F1_g = gv_marines;
    autoAE61A6F1_u = UnitGroupCount(autoAE61A6F1_g, c_unitCountAll);
    for (;; autoAE61A6F1_u -= 1) {
        autoAE61A6F1_var = UnitGroupUnitFromEnd(autoAE61A6F1_g, autoAE61A6F1_u);
        if (autoAE61A6F1_var == null) { break; }
        UnitBehaviorAdd(autoAE61A6F1_var, "CutsceneFreeze", autoAE61A6F1_var, 1);
        UnitBehaviorAddPlayer(autoAE61A6F1_var, "CutsceneRegen", 1, 1);
    }
    autoEB5AAE13_var = 1;
    for ( ; autoEB5AAE13_var <= autoEB5AAE13_ae; autoEB5AAE13_var += 1 ) {
        if ((gv_gunshipCinematicActive[autoEB5AAE13_var] == true) && (gv_gameUIHidden[autoEB5AAE13_var] == true)) {
            libNtve_gf_HideGameUI(true, PlayerGroupSingle(autoEB5AAE13_var));
            gv_gameUIHidden[autoEB5AAE13_var] = false;
        }

    }
    gv_cinematicMode = true;
    auto9A4033E6_var = 1;
    for ( ; auto9A4033E6_var <= auto9A4033E6_ae; auto9A4033E6_var += 1 ) {
        if ((gv_gameUIHidden[auto9A4033E6_var] == false)) {
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(auto9A4033E6_var));
            gv_gameUIHidden[auto9A4033E6_var] = true;
        }

    }
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    return true;
}

bool gf_PostCinematicProcessing () {
    // Automatic Variable Declarations
    unitgroup auto94C0FEE8_g;
    int auto94C0FEE8_u;
    unit auto94C0FEE8_var;
    unitgroup auto5D1DFE08_g;
    int auto5D1DFE08_u;
    unit auto5D1DFE08_var;
    const int autoF13D603A_ae = 5;
    int autoF13D603A_var;
    unitgroup auto41886124_g;
    int auto41886124_u;
    unit auto41886124_var;
    const int autoBABB9275_ae = 8;
    int autoBABB9275_var;
    const int autoBE0EF8D6_ae = 8;
    int autoBE0EF8D6_var;
    unitgroup auto2778F9AF_g;
    int auto2778F9AF_u;
    unit auto2778F9AF_var;
    const int auto9B723AF8_ae = 8;
    int auto9B723AF8_var;

    // Implementation
    auto94C0FEE8_g = gv_zombieWave;
    auto94C0FEE8_u = UnitGroupCount(auto94C0FEE8_g, c_unitCountAll);
    for (;; auto94C0FEE8_u -= 1) {
        auto94C0FEE8_var = UnitGroupUnitFromEnd(auto94C0FEE8_g, auto94C0FEE8_u);
        if (auto94C0FEE8_var == null) { break; }
        UnitBehaviorRemove(auto94C0FEE8_var, "CutsceneFreeze", 1);
    }
    auto5D1DFE08_g = gv_blackOps;
    auto5D1DFE08_u = UnitGroupCount(auto5D1DFE08_g, c_unitCountAll);
    for (;; auto5D1DFE08_u -= 1) {
        auto5D1DFE08_var = UnitGroupUnitFromEnd(auto5D1DFE08_g, auto5D1DFE08_u);
        if (auto5D1DFE08_var == null) { break; }
        UnitBehaviorRemove(auto5D1DFE08_var, "CutsceneFreeze", 1);
    }
    autoF13D603A_var = 1;
    for ( ; autoF13D603A_var <= autoF13D603A_ae; autoF13D603A_var += 1 ) {
        UnitBehaviorRemove(gv_infestor[autoF13D603A_var], "CutsceneFreeze", 1);
    }
    auto41886124_g = gv_marines;
    auto41886124_u = UnitGroupCount(auto41886124_g, c_unitCountAll);
    for (;; auto41886124_u -= 1) {
        auto41886124_var = UnitGroupUnitFromEnd(auto41886124_g, auto41886124_u);
        if (auto41886124_var == null) { break; }
        UnitBehaviorRemove(auto41886124_var, "CutsceneRegen", 1);
        UnitBehaviorRemove(auto41886124_var, "CutsceneFreeze", 1);
    }
    autoBABB9275_var = 1;
    for ( ; autoBABB9275_var <= autoBABB9275_ae; autoBABB9275_var += 1 ) {
        CameraLockInput(autoBABB9275_var, false);
        if ((gv_gameUIHidden[autoBABB9275_var] == true)) {
            libNtve_gf_HideGameUI(true, PlayerGroupSingle(autoBABB9275_var));
            gv_gameUIHidden[autoBABB9275_var] = false;
        }

    }
    gv_cinematicMode = false;
    DialogSetVisible(gv_teamUIStatsButton, PlayerGroupAll(), true);
    autoBE0EF8D6_var = 1;
    for ( ; autoBE0EF8D6_var <= autoBE0EF8D6_ae; autoBE0EF8D6_var += 1 ) {
        if ((gv_gunshipCinematicActive[autoBE0EF8D6_var] == true) && (gv_gameUIHidden[autoBE0EF8D6_var] == false)) {
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(autoBE0EF8D6_var));
            gv_gameUIHidden[autoBE0EF8D6_var] = true;
        }

    }
    UISetBattleNetButtonOffset(PlayerGroupAll(), 8, 253);
    auto2778F9AF_g = gv_colonists;
    auto2778F9AF_u = UnitGroupCount(auto2778F9AF_g, c_unitCountAll);
    for (;; auto2778F9AF_u -= 1) {
        auto2778F9AF_var = UnitGroupUnitFromEnd(auto2778F9AF_g, auto2778F9AF_u);
        if (auto2778F9AF_var == null) { break; }
        libNtve_gf_MakeUnitInvulnerable(auto2778F9AF_var, false);
    }
    auto9B723AF8_var = 1;
    for ( ; auto9B723AF8_var <= auto9B723AF8_ae; auto9B723AF8_var += 1 ) {
        if ((gv_playerXP[auto9B723AF8_var] >= 2000)) {
            DialogSetVisible(gv_teamUIMedalsButton, PlayerGroupSingle(auto9B723AF8_var), true);
        }

        if ((gv_iLikeItOpen[auto9B723AF8_var] == true)) {
            DialogSetVisible(gv_raidUITeamStatus, PlayerGroupSingle(auto9B723AF8_var), true);
        }
        else {
            DialogSetVisible(gv_raidUITeamStatusDummy, PlayerGroupSingle(auto9B723AF8_var), true);
        }
        DialogSetVisible(gv_shellDialog[auto9B723AF8_var], PlayerGroupSingle(auto9B723AF8_var), true);
        DialogSetVisible(gv_ammoCounterDialog[auto9B723AF8_var], PlayerGroupSingle(auto9B723AF8_var), true);
        libNtve_gf_MakeUnitInvulnerable(gv_playerPet[auto9B723AF8_var], false);
        UnitBehaviorRemove(gv_playerPet[auto9B723AF8_var], "CutsceneFreeze", 1);
        libNtve_gf_MakeUnitInvulnerable(gv_x1Guardian[auto9B723AF8_var], false);
        UnitBehaviorRemove(gv_x1Guardian[auto9B723AF8_var], "CutsceneFreeze", 1);
        libNtve_gf_MakeUnitInvulnerable(gv_marineHero[auto9B723AF8_var], false);
        UnitGroupSelect(gv_unitsSelected[auto9B723AF8_var], auto9B723AF8_var, true);
        UnitGroupClear(gv_unitsSelected[auto9B723AF8_var]);
        if ((UnitGetType(gv_marineHero[auto9B723AF8_var]) == "Commando")) {
            UnitBehaviorRemove(gv_marineHero[auto9B723AF8_var], "AdrenalineLevel1AttackSpeedHidden", 30);
            UnitBehaviorRemove(gv_marineHero[auto9B723AF8_var], "AdrenalineLevel2AttackSpeedHidden", 30);
            UnitBehaviorRemove(gv_marineHero[auto9B723AF8_var], "AdrenalineLevel3AttackSpeedHidden", 30);
            UnitBehaviorRemove(gv_marineHero[auto9B723AF8_var], "AdrenalineLevel1", 1);
            UnitBehaviorRemove(gv_marineHero[auto9B723AF8_var], "AdrenalineLevel2", 1);
            UnitBehaviorRemove(gv_marineHero[auto9B723AF8_var], "AdrenalineLevel3", 1);
        }

        CameraApplyInfo(auto9B723AF8_var, CameraInfoDefault(), 0.0, -1, 10, true);
        if ((UnitIsAlive(gv_marineHero[auto9B723AF8_var]) == true)) {
            CameraPan(auto9B723AF8_var, UnitGetPosition(gv_marineHero[auto9B723AF8_var]), 0.0, -1, 10, false);
        }
        else if ((UnitIsAlive(gv_playerPet[auto9B723AF8_var]) == true)) {
            CameraPan(auto9B723AF8_var, UnitGetPosition(gv_playerPet[auto9B723AF8_var]), 0.0, -1, 10, false);
        }
        else if (true) {
            CameraPan(auto9B723AF8_var, UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 0.0, -1, 10, false);
        }
    }
    TriggerExecute(gt_NOTDCamera, true, false);
    return true;
}

trigger auto_gf_ZombieAIWorldEvents_Trigger = null;

void gf_ZombieAIWorldEvents () {
    if (auto_gf_ZombieAIWorldEvents_Trigger == null) {
        auto_gf_ZombieAIWorldEvents_Trigger = TriggerCreate("auto_gf_ZombieAIWorldEvents_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZombieAIWorldEvents_Trigger, false, false);
}

bool auto_gf_ZombieAIWorldEvents_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto8B3226D9_g;
    int auto8B3226D9_u;
    unit auto8B3226D9_var;

    // Implementation
    while ((gv_nOTDShutdown == false)) {
        Wait(4.0, c_timeGame);
        auto8B3226D9_g = gv_zombieWave;
        auto8B3226D9_u = UnitGroupCount(auto8B3226D9_g, c_unitCountAll);
        for (;; auto8B3226D9_u -= 1) {
            auto8B3226D9_var = UnitGroupUnitFromEnd(auto8B3226D9_g, auto8B3226D9_u);
            if (auto8B3226D9_var == null) { break; }
            if ((UnitGetPropertyFixed(auto8B3226D9_var, c_unitPropLife, c_unitPropCurrent) <= 2.0)) {
                UnitKill(auto8B3226D9_var);
            }

            if (((UnitHasBehavior(auto8B3226D9_var, "TauntLevel12") == true) || (UnitHasBehavior(auto8B3226D9_var, "TauntLevel22") == true) || (UnitHasBehavior(auto8B3226D9_var, "TauntLevel32") == true) || (UnitHasBehavior(auto8B3226D9_var, "LookAttack") == true) || (UnitHasBehavior(auto8B3226D9_var, "ImYourFatherTauntedLevel1") == true) || (UnitHasBehavior(auto8B3226D9_var, "MindMeld2") == true) || (UnitHasBehavior(auto8B3226D9_var, "MindMeld") == true) || (UnitHasBehavior(auto8B3226D9_var, "ComplianceMatrix") == true) || (((UnitGetOwner(auto8B3226D9_var) >= 1) && (UnitGetOwner(auto8B3226D9_var) <= 9)) == true))) {
            }
            else {
                if (((UnitGetType(auto8B3226D9_var) == "InfestedAbominationBurrowed") || (UnitGetType(auto8B3226D9_var) == "RoachBurrowed") || (UnitGetType(auto8B3226D9_var) == "Devourer2") || (UnitGetType(auto8B3226D9_var) == "Slasher2") || (UnitGetType(auto8B3226D9_var) == "ZerglingBurrowed") || (UnitGetType(auto8B3226D9_var) == "Hugger2") || (UnitGetType(auto8B3226D9_var) == "Perses"))) {
                    UnitIssueOrder(auto8B3226D9_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 5.0))), c_orderQueueReplace);
                }
                else if ((gv_huntMode == true)) {
                    UnitIssueOrder(auto8B3226D9_var, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), c_orderQueueReplace);
                }
            }
            Wait(0.01, c_timeGame);
        }
        if ((((UnitGroupCount(gv_marines, c_unitCountAlive) <= 0) && (gv_wave >= 1)) || (gv_gameOver == true))) {
            gv_nOTDShutdown = true;
            gv_gameOver = true;
            gf_GameOverInit();
        }

    }
    return true;
}

trigger auto_gf_BlackMaskApplication_Trigger = null;

void gf_BlackMaskApplication () {
    if (auto_gf_BlackMaskApplication_Trigger == null) {
        auto_gf_BlackMaskApplication_Trigger = TriggerCreate("auto_gf_BlackMaskApplication_TriggerFunc");
    }

    TriggerExecute(auto_gf_BlackMaskApplication_Trigger, false, false);
}

bool auto_gf_BlackMaskApplication_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4952E0D0_ae = 8;
    int auto4952E0D0_var;

    // Implementation
    while ((gv_nOTDShutdown == false)) {
        if ((gv_noNewbie == true)) {
            auto4952E0D0_var = 1;
            for ( ; auto4952E0D0_var <= auto4952E0D0_ae; auto4952E0D0_var += 1 ) {
                VisExploreArea(auto4952E0D0_var, RegionEntireMap(), false, false);
            }
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_GameOverInit_Trigger = null;

void gf_GameOverInit () {
    if (auto_gf_GameOverInit_Trigger == null) {
        auto_gf_GameOverInit_Trigger = TriggerCreate("auto_gf_GameOverInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_GameOverInit_Trigger, false, false);
}

bool auto_gf_GameOverInit_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto99D74A07_ae = 8;
    int auto99D74A07_var;
    unitgroup autoF1267FC5_g;
    int autoF1267FC5_u;
    unit autoF1267FC5_var;
    const int auto39F9D892_ae = 8;
    int auto39F9D892_var;
    const int autoE888C219_ae = 8;
    int autoE888C219_var;

    // Implementation
    gv_gameOver = true;
    if ((gv_wave >= 16)) {
        gv_waveXPReward = 10;
    }
    else if ((gv_wave >= 13)) {
        gv_waveXPReward = 8;
    }
    else if ((gv_wave >= 10)) {
        gv_waveXPReward = 6;
    }
    else if ((gv_wave >= 7)) {
        gv_waveXPReward = 4;
    }
    else if ((gv_wave >= 5)) {
        gv_waveXPReward = 2;
    }
    auto99D74A07_var = 1;
    for ( ; auto99D74A07_var <= auto99D74A07_ae; auto99D74A07_var += 1 ) {
        gv_playerKarma[auto99D74A07_var] += 1;
        gf_UIUpdateXP(auto99D74A07_var);
    }
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    TriggerExecute(gt_GameOverCheck, true, false);
    if ((gv_victory == true)) {
        SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "VictoryMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/02F14065"));
        TriggerExecute(gt_VictoryBonus, true, true);
    }
    else {
        SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_EndCreditsO", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        if ((RandomInt(0, 1) == 1)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/DEFC0404"));
        }
        else {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/C6FDB822"));
        }
        GameSetLighting("NOTDGameOverLight", 5.0);
    }
    gf_AutoSaveLong();
    Wait(5.5, c_timeReal);
    autoF1267FC5_g = gv_zombieWave;
    autoF1267FC5_u = UnitGroupCount(autoF1267FC5_g, c_unitCountAll);
    for (;; autoF1267FC5_u -= 1) {
        autoF1267FC5_var = UnitGroupUnitFromEnd(autoF1267FC5_g, autoF1267FC5_u);
        if (autoF1267FC5_var == null) { break; }
        UnitIssueOrder(autoF1267FC5_var, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    auto39F9D892_var = 1;
    for ( ; auto39F9D892_var <= auto39F9D892_ae; auto39F9D892_var += 1 ) {
        if ((gv_playerXP[auto39F9D892_var] < 500)) {
            UIDisplayMessage(PlayerGroupSingle(auto39F9D892_var), c_messageAreaDirective, StringExternal("Param/Value/E405D451"));
        }

    }
    autoE888C219_var = 1;
    for ( ; autoE888C219_var <= autoE888C219_ae; autoE888C219_var += 1 ) {
        if ((PlayerStatus(autoE888C219_var) != c_playerStatusUnused) && (UnitIsAlive(gv_marineHero[autoE888C219_var]) == true)) {
            DialogSetVisible(gv_ammoCounterDialog[autoE888C219_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_talentTree[autoE888C219_var], PlayerGroupAll(), false);
        }

    }
    CinematicFade(false, 3.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(3.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_EndGameUINOTD();
    TriggerEnable(gt_ReturntoEarth, true);
    if ((gv_victory == true) && (gv_storyline == 1)) {
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/3D74E3DA"));
        Wait(7.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/2CE8F35C"));
        Wait(10.0, c_timeReal);
    }
    else {
        Wait(5.0, c_timeReal);
    }
    TriggerExecute(gt_NOTDCreditsRoll, true, false);
    gv_eND = true;
    return true;
}

point gf_RandomPointatGroundHeight (region lp_region, fixed lp_groundHeight) {
    // Variable Declarations
    point lv_randomPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_randomPoint = RegionRandomPoint(lp_region);

    // Implementation
    if ((WorldHeight(c_heightMapGround, lv_randomPoint) < lp_groundHeight)) {
        return lv_randomPoint;
    }
    else {
        return gf_RandomPointatGroundHeight(lp_region, lp_groundHeight);
    }
}

trigger auto_gf_ClassCreationMaster_Trigger = null;

void gf_ClassCreationMaster () {
    if (auto_gf_ClassCreationMaster_Trigger == null) {
        auto_gf_ClassCreationMaster_Trigger = TriggerCreate("auto_gf_ClassCreationMaster_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClassCreationMaster_Trigger, false, false);
}

bool auto_gf_ClassCreationMaster_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;
    int lv_classPoints;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPlayer = gv_talentTreePlayer;

    // Implementation
    CameraApplyInfo(gv_talentTreePlayer, CameraInfoDefault(), 0.0, -1, 10, true);
    CameraPan(gv_talentTreePlayer, UnitGetPosition(gv_marineHero[gv_talentTreePlayer]), 0.0, -1, 10, false);
    CameraSetValue(gv_talentTreePlayer, c_cameraValueFarClip, 75.0, 0.0, -1, 10);
    CameraSetValue(gv_talentTreePlayer, c_cameraValueDistance, 30.0, 0.0, -1, 10);
    UISetFrameVisible(PlayerGroupSingle(gv_talentTreePlayer), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupSingle(gv_talentTreePlayer), c_syncFrameTypeInventoryPanel, true);
    UISetFrameVisible(PlayerGroupSingle(gv_talentTreePlayer), c_syncFrameTypeMinimapPanel, true);
    UISetFrameVisible(PlayerGroupSingle(gv_talentTreePlayer), c_syncFrameTypeCharacterSheetButton, true);
    CameraLockInput(gv_talentTreePlayer, false);
    UnitSetPropertyFixed(gv_marineHero[gv_talentTreePlayer], c_unitPropLevel, 1.0);
    DialogDestroy(gv_classSelectionDialog[gv_talentTreePlayer]);
    DialogCreate(66, 66, c_anchorBottom, -500, 230, true);
    gv_equipment[gv_talentTreePlayer] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 66, 66, c_anchorTopLeft, 0, 0, StringExternal("Param/Value/8CBD54AB"), StringToText(""), "");
    gv_equipmentButton[gv_talentTreePlayer] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 66, 66, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_techtree_iconframe_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 60, 60, c_anchorTopLeft, 0, 0, StringToText(""), gf_GetImageFileofHeroType(gv_talentTreePlayer), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(gv_talentTreePlayer), true);
    DialogSetVisible(gv_ammoCounterDialog[gv_talentTreePlayer], PlayerGroupSingle(gv_talentTreePlayer), true);
    gf_UIUpdatePortraitTooltip(gv_talentTreePlayer);
    gv_playerKarma[gv_talentTreePlayer] -= 1;
    UnitAbilityEnable(gv_marineHero[gv_talentTreePlayer], "Reload", false);
    UnitFlashSelection(gv_marineHero[gv_talentTreePlayer], 5.0);
    UnitControlGroupAddUnit(gv_talentTreePlayer, 1, gv_marineHero[gv_talentTreePlayer]);
    UnitSelect(gv_marineHero[gv_talentTreePlayer], gv_talentTreePlayer, true);
    gv_marineWeightTolerance[gv_talentTreePlayer] += gf_GetClassWeight(UnitGetType(gv_marineHero[gv_talentTreePlayer]));
    lv_classPoints = gf_GetClassCP(gv_talentTreePlayer, UnitGetType(gv_marineHero[gv_talentTreePlayer]));
    if ((lv_classPoints >= 10)) {
        SoundPlay(gf_GetClassColor2(gv_talentTreePlayer, UnitGetType(gv_marineHero[gv_talentTreePlayer])), PlayerGroupActive(), 100.0, 0.0);
        UnitSetPropertyFixed(gv_marineHero[gv_talentTreePlayer], c_unitPropLevel, 2.0);
        UnitSetPropertyFixed(gv_marineHero[gv_talentTreePlayer], c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_marineHero[gv_talentTreePlayer], c_unitPropShieldsMax, c_unitPropNormal) + 10.0));
    }
    else if ((lv_classPoints >= 5)) {
        UnitSetPropertyFixed(gv_marineHero[gv_talentTreePlayer], c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_marineHero[gv_talentTreePlayer], c_unitPropShieldsMax, c_unitPropNormal) + 10.0));
    }
    if ((lv_classPoints >= 20)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "ShieldBonus", gv_marineHero[lv_localPlayer], 1);
    }

    if ((lv_classPoints >= 40)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "SightBonus", gv_marineHero[lv_localPlayer], 1);
    }

    PlayerSetColorIndex(gv_talentTreePlayer, gf_GetClassColor(gv_talentTreePlayer, UnitGetType(gv_marineHero[gv_talentTreePlayer])), true);
    if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Rifleman")) {
        gv_classDiversity[1] = true;
        gv_classCount[1] += 1;
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Medic")) {
        gv_classDiversity[2] = true;
        gv_classCount[2] += 1;
        UnitIssueOrder(gv_marineHero[gv_talentTreePlayer], Order(AbilityCommand("LearnMedic", 1)), c_orderQueueReplace);
        if ((gv_navyCrossMode == false)) {
            UnitInventoryCreate(gv_marineHero[gv_talentTreePlayer], "Bandage");
            libNtve_gf_UnitSetVariation(UnitInventoryLastCreated(), "PickupRestorationCharge", 1, "");
        }

        if ((PlayerGroupCount(PlayerGroupActive()) > 2)) {
            gv_playerMedicPlayed[gv_talentTreePlayer] += 1;
            if ((RandomInt(0, 3) == 1)) {
                gv_playerKarma[gv_talentTreePlayer] += 1;
            }

        }

        if ((gv_playerMedicPoints[gv_talentTreePlayer] >= 10)) {
            gv_playerDoctor[gv_talentTreePlayer] = true;
            UnitSetTeamColorIndex(gv_marineHero[gv_talentTreePlayer], 0);
            UnitSetScale(gv_marineHero[gv_talentTreePlayer], 113.0, 113.0, 113.0);
            gf_UISetDoctorTitle(gv_talentTreePlayer);
        }
        else if ((gv_playerMedicPoints[gv_talentTreePlayer] >= 5)) {
            UnitSetTeamColorIndex(gv_marineHero[gv_talentTreePlayer], 2);
            gv_playerDoctor[gv_talentTreePlayer] = true;
        }
    }
    else if (((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "TychusChaingun") || (UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Flamethrower3") || (UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Technician"))) {
        gv_classDiversity[3] = true;
        if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "TychusChaingun")) {
            gv_classCount[3] += 1;
        }
        else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Flamethrower3")) {
            gv_classCount[4] += 1;
        }
        else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Technician")) {
            gv_classCount[5] += 1;
        }
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Spectre")) {
        TriggerEnable(gt_Backstab, true);
        gv_classDiversity[4] = true;
        gv_classCount[6] += 1;
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "GhostLaserLines")) {
        gv_classDiversity[5] = true;
        gv_classCount[7] += 1;
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "DominionKillTeam")) {
        gv_classDiversity[6] = true;
        gv_classCount[8] += 1;
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "ForwardObserver")) {
        gv_classDiversity[6] = true;
        gv_classCount[9] += 1;
        TechTreeAbilityAllow(gv_talentTreePlayer, AbilityCommand("FlamethrowerGear", 0), false);
        TechTreeAbilityAllow(gv_talentTreePlayer, AbilityCommand("MarksmanGear", 0), false);
        TechTreeAbilityAllow(gv_talentTreePlayer, AbilityCommand("SlowRoast", 0), false);
        TechTreeAbilityAllow(gv_talentTreePlayer, AbilityCommand("VeteransFocus", 0), false);
        TriggerEnable(gt_SurveillanceFlares, true);
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "ChemicalExpert")) {
        gv_classDiversity[6] = true;
        gv_classCount[10] += 1;
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Engineer")) {
        gv_classDiversity[7] = true;
        gv_classCount[11] += 1;
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Pathfinder")) {
        gv_classDiversity[7] = true;
        gv_classCount[12] += 1;
        UnitIssueOrder(gv_marineHero[gv_talentTreePlayer], Order(AbilityCommand("LearnPathfinder", 6)), c_orderQueueReplace);
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "Commando")) {
        gv_classDiversity[8] = true;
        gv_classCount[13] += 1;
    }
    else if ((UnitGetType(gv_marineHero[gv_talentTreePlayer]) == "PsiOps")) {
        gv_classDiversity[8] = true;
        gv_classCount[14] += 1;
    }
    gf_PlayerColorChange(gv_talentTreePlayer);
    if ((gv_classLimitBroken == false)) {
        gf_ClassLimitCheck2();
    }

    if ((gf_KittensBought(gv_talentTreePlayer) == true)) {
        gf_CreateKittens(gv_talentTreePlayer);
    }

    if ((gv_playerRating[lv_localPlayer] >= 2300)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "RatingSpeedBonus7", gv_marineHero[lv_localPlayer], 1);
    }
    else if ((gv_playerRating[lv_localPlayer] >= 2100)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "RatingSpeedBonus6", gv_marineHero[lv_localPlayer], 1);
    }
    else if ((gv_playerRating[lv_localPlayer] >= 1900)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "RatingSpeedBonus5", gv_marineHero[lv_localPlayer], 1);
    }
    else if ((gv_playerRating[lv_localPlayer] >= 1800)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "RatingSpeedBonus4", gv_marineHero[lv_localPlayer], 1);
    }
    else if ((gv_playerRating[lv_localPlayer] >= 1700)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "RatingSpeedBonus3", gv_marineHero[lv_localPlayer], 1);
    }
    else if ((gv_playerRating[lv_localPlayer] >= 1600)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "RatingSpeedBonus2", gv_marineHero[lv_localPlayer], 1);
    }
    if ((gv_medalOfHonor[lv_localPlayer] >= 150)) {
        UnitBehaviorAdd(gv_marineHero[lv_localPlayer], "RatingSpeedBonus2", gv_marineHero[lv_localPlayer], 1);
    }

    Wait(5.0, c_timeReal);
    UnitSelect(gv_marineHero[lv_localPlayer], lv_localPlayer, true);
    UIClearMessages(PlayerGroupSingle(lv_localPlayer), c_messageAreaDirective);
    Wait(12.0, c_timeReal);
    return true;
}

fixed gf_GetClassWeight (string lp_class) {
    // Automatic Variable Declarations
    // Implementation
    if (((lp_class == "Rifleman") || (lp_class == "ForwardObserver") || (lp_class == "Engineer") || (lp_class == "Pathfinder") || (lp_class == "Commando") || (lp_class == "ChemicalExpert"))) {
        return 0.01;
    }
    else if (((lp_class == "PsiOps") || (lp_class == "Medic") || (lp_class == "Spectre") || (lp_class == "GhostLaserLines"))) {
        return 0.012;
    }
    else if (((lp_class == "TychusChaingun") || (lp_class == "DominionKillTeam") || (lp_class == "Technician") || (lp_class == "Flamethrower3"))) {
        return 0.008;
    }
    return 0.01;
}

int gf_GetClassCP (int lp_player, string lp_class) {
    // Automatic Variable Declarations
    string auto1E180296_val;

    // Implementation
    auto1E180296_val = lp_class;
    if (auto1E180296_val == "Rifleman") {
        return gv_playerRiflemanPoints[lp_player];
    }
    else if (auto1E180296_val == "Medic") {
        return gv_playerMedicPoints[lp_player];
    }
    else if (auto1E180296_val == "TychusChaingun") {
        return gv_playerAssaultFlamerTechPoints[lp_player];
    }
    else if (auto1E180296_val == "Spectre") {
        return gv_playerReconPoints[lp_player];
    }
    else if (auto1E180296_val == "GhostLaserLines") {
        return gv_playerMarksmanPoints[lp_player];
    }
    else if (auto1E180296_val == "DominionKillTeam") {
        return gv_playerDemoFOChemPoints[lp_player];
    }
    else if (auto1E180296_val == "Engineer") {
        return gv_playerEngineerPathfinderPoints[lp_player];
    }
    else if (auto1E180296_val == "Commando") {
        return gv_playerCommandoPsiOpsPoints[lp_player];
    }
    else if (auto1E180296_val == "Flamethrower3") {
        return gv_playerAssaultFlamerTechPoints[lp_player];
    }
    else if (auto1E180296_val == "ForwardObserver") {
        return gv_playerDemoFOChemPoints[lp_player];
    }
    else if (auto1E180296_val == "Technician") {
        return gv_playerAssaultFlamerTechPoints[lp_player];
    }
    else if (auto1E180296_val == "ChemicalExpert") {
        return gv_playerDemoFOChemPoints[lp_player];
    }
    else if (auto1E180296_val == "Pathfinder") {
        return gv_playerEngineerPathfinderPoints[lp_player];
    }
    else if (auto1E180296_val == "PsiOps") {
        return gv_playerCommandoPsiOpsPoints[lp_player];
    }
    else {
        return 0;
    }
}

int gf_GetClassColor (int lp_player, string lp_class) {
    // Automatic Variable Declarations
    string autoBC1BF5F0_val;

    // Implementation
    autoBC1BF5F0_val = lp_class;
    if (autoBC1BF5F0_val == "Rifleman") {
        return 10;
    }
    else if (autoBC1BF5F0_val == "Medic") {
        return 3;
    }
    else if (autoBC1BF5F0_val == "TychusChaingun") {
        return 2;
    }
    else if (autoBC1BF5F0_val == "Spectre") {
        return 4;
    }
    else if (autoBC1BF5F0_val == "GhostLaserLines") {
        return 5;
    }
    else if (autoBC1BF5F0_val == "DominionKillTeam") {
        return 12;
    }
    else if (autoBC1BF5F0_val == "Engineer") {
        return 11;
    }
    else if (autoBC1BF5F0_val == "Commando") {
        return 1;
    }
    else if (autoBC1BF5F0_val == "Flamethrower3") {
        return 6;
    }
    else if (autoBC1BF5F0_val == "ForwardObserver") {
        return 7;
    }
    else if (autoBC1BF5F0_val == "Technician") {
        return 9;
    }
    else if (autoBC1BF5F0_val == "ChemicalExpert") {
        return 13;
    }
    else if (autoBC1BF5F0_val == "Pathfinder") {
        return 14;
    }
    else if (autoBC1BF5F0_val == "PsiOps") {
        return 8;
    }
    else {
        return 0;
    }
}

soundlink gf_GetClassColor2 (int lp_player, string lp_class) {
    // Automatic Variable Declarations
    string auto108E0580_val;

    // Implementation
    auto108E0580_val = lp_class;
    if (auto108E0580_val == "Rifleman") {
        return SoundLink("Marine_StimPackVO", 0);
    }
    else if (auto108E0580_val == "Medic") {
        return SoundLink("Medic_Ready", 0);
    }
    else if (auto108E0580_val == "TychusChaingun") {
        return SoundLink("Viking_Pissed", 5);
    }
    else if (auto108E0580_val == "Spectre") {
        return SoundLink("Spectre_Ready", 0);
    }
    else if (auto108E0580_val == "GhostLaserLines") {
        return SoundLink("Ghost_Pissed", 12);
    }
    else if (auto108E0580_val == "DominionKillTeam") {
        return SoundLink("Marauder_Ready", 4);
    }
    else if (auto108E0580_val == "Engineer") {
        return SoundLink("Swann_Ready", 0);
    }
    else if (auto108E0580_val == "Commando") {
        return SoundLink("Tosh_Ready", -1);
    }
    else if (auto108E0580_val == "Flamethrower3") {
        return SoundLink("Firebat_Pissed", 7);
    }
    else if (auto108E0580_val == "ForwardObserver") {
        return SoundLink("Diamondback_Ready", -1);
    }
    else if (auto108E0580_val == "Technician") {
        return SoundLink("Thor_Pissed", 7);
    }
    else if (auto108E0580_val == "ChemicalExpert") {
        return SoundLink("Marauder_What", -1);
    }
    else if (auto108E0580_val == "Pathfinder") {
        return SoundLink("Reaper_Ready", -1);
    }
    else if (auto108E0580_val == "PsiOps") {
        return SoundLink("Nova_Ready", -1);
    }
    else {
        return null;
    }
}

void gf_BootCampMarineCreation () {
    // Automatic Variable Declarations
    // Implementation
    gv_marineSelected[1] = true;
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(1));
    gv_gameUIHidden[1] = false;
    libNtve_gf_SwooshCamera(1, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(2), 0.0);
    UnitCreate(1, "Rifleman", 0, 1, PointFromId(2), 90.0);
    gv_marineHero[1] = UnitLastCreated();
    gf_StatsUpdateHeroImage(1);
    gf_StatsSetBehaviors(1);
    gf_UISetPlayerRankNameIconXP(1);
    gf_UIInitializePlayerLifePortrait(1);
    UnitGroupAdd(gv_marines, gv_marineHero[1]);
    UnitInventoryCreate(gv_marineHero[1], "Crowbar7");
    libNtve_gf_UnitSetVariation(UnitInventoryLastCreated(), "ColonistSupplyCrate", 0, "");
    gv_talentTreePlayer = 1;
    gf_ClassCreationMaster();
    gf_TalentTreeCreation();
    DialogSetVisible(gv_ammoCounterDialog[1], PlayerGroupAll(), true);
}

trigger auto_gf_BootCampEnvironmentalChanges_Trigger = null;

void gf_BootCampEnvironmentalChanges () {
    if (auto_gf_BootCampEnvironmentalChanges_Trigger == null) {
        auto_gf_BootCampEnvironmentalChanges_Trigger = TriggerCreate("auto_gf_BootCampEnvironmentalChanges_TriggerFunc");
    }

    TriggerExecute(auto_gf_BootCampEnvironmentalChanges_Trigger, false, false);
}

bool auto_gf_BootCampEnvironmentalChanges_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    GameSetLighting("UnknownLight", 0.0);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(25), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(63), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(80), true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(81), true);
    return true;
}

trigger auto_gf_ClassLimitCheck2_Trigger = null;

void gf_ClassLimitCheck2 () {
    if (auto_gf_ClassLimitCheck2_Trigger == null) {
        auto_gf_ClassLimitCheck2_Trigger = TriggerCreate("auto_gf_ClassLimitCheck2_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClassLimitCheck2_Trigger, false, false);
}

bool auto_gf_ClassLimitCheck2_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_classCycle;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_classCycle = 3;

    // Implementation
    while ((lv_classCycle < 15)) {
        if ((gv_classCount[lv_classCycle] > 2) && (gv_noNewbie == true) && (gv_classLimitBroken == false)) {
            gv_classLimitBroken = true;
            gv_classLimitMultiplier = 0.6;
            SoundPlay(SoundLink("TUIWarning", -1), PlayerGroupAll(), 125.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/0D23902A"));
            lv_classCycle += 15;
        }

        lv_classCycle += 1;
    }
    return true;
}

trigger auto_gf_Task1ObjectivesandMovement_Trigger = null;

void gf_Task1ObjectivesandMovement () {
    if (auto_gf_Task1ObjectivesandMovement_Trigger == null) {
        auto_gf_Task1ObjectivesandMovement_Trigger = TriggerCreate("auto_gf_Task1ObjectivesandMovement_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task1ObjectivesandMovement_Trigger, false, false);
}

bool auto_gf_Task1ObjectivesandMovement_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gv_wave = 1;
    TriggerEnable(gt_ManualSave, true);
    gf_RadioNOTD(StringExternal("Param/Value/94911515"), StringExternal("Param/Value/E3B170A7"));
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/CE526FA4"), StringExternal("Param/Value/18172BEA"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(3)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1200.0, 270.0);
    gv_objectivePing = PingLastCreated();
    UnitCreate(1, "ShapeArrowPointer", 0, 0, RegionGetCenter(RegionFromId(3)), 45.0);
    UnitSetTeamColorIndex(UnitLastCreated(), 7);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_objectiveArrow = UnitLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/AD301717"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_EntersTowerA, true);
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(3)), 7.0);
    return true;
}

trigger auto_gf_Task2ItemsandInventory_Trigger = null;

void gf_Task2ItemsandInventory () {
    if (auto_gf_Task2ItemsandInventory_Trigger == null) {
        auto_gf_Task2ItemsandInventory_Trigger = TriggerCreate("auto_gf_Task2ItemsandInventory_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task2ItemsandInventory_Trigger, false, false);
}

bool auto_gf_Task2ItemsandInventory_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto171BB97E_g;
    int auto171BB97E_u;
    unit auto171BB97E_var;

    // Implementation
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitRemove(gv_objectiveArrow);
    PingDestroy(gv_objectivePing);
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/CDDA0A7D"), StringExternal("Param/Value/3B008BF7"));
    Wait(2.0, c_timeReal);
    gf_CreateItemLocalNOTD("Medpack", 2, RegionCircle(PointFromId(2), 7.0));
    Wait(4.0, c_timeReal);
    gf_CreateItemLocalNOTD("Bandage", 2, RegionCircle(PointFromId(2), 7.0));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/A7FCD3ED"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(1.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/0A4C9DA1"), StringExternal("Param/Value/24B87432"));
    Wait(3.0, c_timeReal);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/6F59BD20"), StringExternal("Param/Value/9F2A6C0E"));
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/83A3D90B"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_Task2PredatorKillXP, true);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_UnitCreateFacingPoint(1, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(4)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    Wait(0.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(5)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/7264C48C"), StringExternal("Param/Value/262521F4"));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/E7D36C67"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    while (!((UnitGetPropertyFixed(gv_marineHero[1], c_unitPropLifePercent, c_unitPropCurrent) > 90.0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/6EB1DDED"), StringExternal("Param/Value/9A5D458D"));
    Wait(3.0, c_timeReal);
    gf_CreateItemLocalNOTD("GaussRifle", 1, RegionCircle(PointFromId(2), 7.0));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/67E03F64"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(2.5, c_timeReal);
    auto171BB97E_g = UnitGroup("GaussRifle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto171BB97E_u = UnitGroupCount(auto171BB97E_g, c_unitCountAll);
    for (;; auto171BB97E_u -= 1) {
        auto171BB97E_var = UnitGroupUnitFromEnd(auto171BB97E_g, auto171BB97E_u);
        if (auto171BB97E_var == null) { break; }
        PlayerCreateEffectUnit(1, "LaserDesignatorLevel1Set", auto171BB97E_var);
    }
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/F5F39036"), StringExternal("Param/Value/59FC1B4F"));
    while (!((UnitWeaponCheck(gv_marineHero[1], 1, c_targetFilterAir) == true))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/BADD894B"), StringExternal("Param/Value/BC3FF069"));
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/2F101352"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_UnitCreateFacingPoint(1, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(4)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    Wait(0.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(5)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    Wait(2.5, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/2C6B1AEB"), StringExternal("Param/Value/297C7D34"));
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_RadioNOTD(StringExternal("Param/Value/96F77187"), StringExternal("Param/Value/DE76A40B"));
    TriggerEnable(gt_Task2PredatorKillXP, false);
    Wait(3.0, c_timeReal);
    if ((UnitGetPropertyFixed(gv_marineHero[1], c_unitPropLifePercent, c_unitPropCurrent) < 80.0)) {
        gf_RadioNOTD(StringExternal("Param/Value/77C5A8C3"), StringExternal("Param/Value/7D93B2EA"));
        ObjectiveDestroy(gv_primaryObjective);
        ObjectiveCreate(StringExternal("Param/Value/3A3FC0F3"), StringToText(""), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
    }
    else {
        gf_RadioNOTD(StringExternal("Param/Value/A4111F13"), StringExternal("Param/Value/4BA2FE78"));
    }
    while (!((UnitGetPropertyFixed(gv_marineHero[1], c_unitPropLifePercent, c_unitPropCurrent) > 90.0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_Task3EvasiveManeuversArtillery();
    return true;
}

trigger auto_gf_Task3EvasiveManeuversArtillery_Trigger = null;

void gf_Task3EvasiveManeuversArtillery () {
    if (auto_gf_Task3EvasiveManeuversArtillery_Trigger == null) {
        auto_gf_Task3EvasiveManeuversArtillery_Trigger = TriggerCreate("auto_gf_Task3EvasiveManeuversArtillery_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task3EvasiveManeuversArtillery_Trigger, false, false);
}

bool auto_gf_Task3EvasiveManeuversArtillery_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF79F124A_n = 7;
    int autoF79F124A_i;
    unitgroup auto1B8C2229_g;
    int auto1B8C2229_u;
    unit auto1B8C2229_var;

    // Implementation
    gf_RadioNOTD(StringExternal("Param/Value/33B22918"), StringExternal("Param/Value/386433ED"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveCreate(StringExternal("Param/Value/252B4910"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    for (autoF79F124A_i = 1; autoF79F124A_i <= autoF79F124A_n; autoF79F124A_i += 1) {
        Wait(3.5, c_timeReal);
        gf_Task3FireMission();
    }
    Wait(6.0, c_timeReal);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(0.5, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/2B6A5FF0"), StringExternal("Param/Value/57CABF5C"));
    gf_AwardMarineXPNOTD(100.0);
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_RadioNOTD(StringExternal("Param/Value/216CF0F9"), StringExternal("Param/Value/6364D1BE"));
    Wait(2.0, c_timeReal);
    gf_CreateItemLocalNOTD("C2Armor", 1, RegionCircle(UnitGetPosition(gv_marineHero[1]), 7.0));
    ObjectiveCreate(StringExternal("Param/Value/C6C6E50C"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(2.5, c_timeReal);
    auto1B8C2229_g = UnitGroup("C2Armor", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto1B8C2229_u = UnitGroupCount(auto1B8C2229_g, c_unitCountAll);
    for (;; auto1B8C2229_u -= 1) {
        auto1B8C2229_var = UnitGroupUnitFromEnd(auto1B8C2229_g, auto1B8C2229_u);
        if (auto1B8C2229_var == null) { break; }
        PlayerCreateEffectUnit(1, "LaserDesignatorLevel1Set", auto1B8C2229_var);
    }
    Wait(2.0, c_timeReal);
    while (!((UnitGetPropertyFixed(gv_marineHero[1], c_unitPropLifeArmor, c_unitPropCurrent) > 1.0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/13C897AF"), StringExternal("Param/Value/4679EA60"));
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveCreate(StringExternal("Param/Value/A0AA9BA4"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    libNtve_gf_UnitCreateFacingPoint(2, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(3)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAddUnitGroup(gv_zombieWave, UnitLastCreatedGroup());
    Wait(0.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(2, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(4)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAddUnitGroup(gv_zombieWave, UnitLastCreatedGroup());
    Wait(0.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(2, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(5)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAddUnitGroup(gv_zombieWave, UnitLastCreatedGroup());
    Wait(0.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(2, "Predator2", c_unitCreateIgnorePlacement, 14, RegionGetCenter(RegionFromId(6)), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAddUnitGroup(gv_zombieWave, UnitLastCreatedGroup());
    Wait(4.0, c_timeReal);
    gf_Task3BrokenArrow();
    Wait(25.0, c_timeReal);
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardMarineXPNOTD(100.0);
    gf_RadioNOTD(StringExternal("Param/Value/9FB27B6B"), StringExternal("Param/Value/4D07D6DD"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    Wait(3.0, c_timeReal);
    if ((gv_talentsAvailable[1] > 0)) {
        gf_RadioNOTD(StringExternal("Param/Value/B85F0507"), StringExternal("Param/Value/3887F809"));
        ObjectiveCreate(StringExternal("Param/Value/B7A1035A"), StringToText(""), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
    }

    while (!((gv_talentsAvailable[1] == 0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(1.0, c_timeReal);
    gf_Task3bUnderstandingAilments();
    return true;
}

trigger auto_gf_Task3FireMission_Trigger = null;

void gf_Task3FireMission () {
    if (auto_gf_Task3FireMission_Trigger == null) {
        auto_gf_Task3FireMission_Trigger = TriggerCreate("auto_gf_Task3FireMission_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task3FireMission_Trigger, false, false);
}

bool auto_gf_Task3FireMission_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofForwardObserver;
    fixed lv_barrageTimeInterval;
    int lv_randomInteger;
    unitgroup lv_unitsinRegion;
    point lv_fireMissionTarget;
    point lv_randomPoint;

    // Automatic Variable Declarations
    const int auto5C1755D0_ae = 15;
    int auto5C1755D0_var;
    unitgroup auto41E718CC_g;
    int auto41E718CC_u;
    unit auto41E718CC_var;

    // Variable Initialization
    lv_ownerofForwardObserver = 9;
    lv_barrageTimeInterval = (3.0 / IntToFixed(15));
    lv_unitsinRegion = UnitGroupEmpty();
    lv_fireMissionTarget = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_marineHero[1]), 7.0));

    // Implementation
    PlayerCreateEffectPoint(9, "ForwardObserverLaunch", lv_fireMissionTarget);
    PlayerCreateEffectPoint(9, "ForwardObserverShellFlight", lv_fireMissionTarget);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", lv_fireMissionTarget, ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0, 270.0);
    PlayerCreateEffectPoint(9, "FireMissionLevel1CreatePersistent", lv_fireMissionTarget);
    Wait(1.0, c_timeGame);
    PlayerCreateEffectPoint(9, "ForwardObserverShellFlight", lv_fireMissionTarget);
    Wait(2.0, c_timeGame);
    auto5C1755D0_var = 1;
    for ( ; auto5C1755D0_var <= auto5C1755D0_ae; auto5C1755D0_var += 1 ) {
        lv_randomInteger = RandomInt(1, 3);
        lv_randomPoint = RegionRandomPoint(RegionCircle(lv_fireMissionTarget, 7.0));
        if (true) {
            if ((lv_randomInteger == 1)) {
                PlayerCreateEffectPoint(9, "FireMissionLevel3DamageVar1", lv_randomPoint);
            }
            else if ((lv_randomInteger == 2)) {
                PlayerCreateEffectPoint(9, "FireMissionLevel3DamageVar2", lv_randomPoint);
            }
            else if ((lv_randomInteger == 3)) {
                PlayerCreateEffectPoint(9, "FireMissionLevel3DamageVar3", lv_randomPoint);
            }
        }
        auto41E718CC_g = gv_marines;
        auto41E718CC_u = UnitGroupCount(auto41E718CC_g, c_unitCountAll);
        for (;; auto41E718CC_u -= 1) {
            auto41E718CC_var = UnitGroupUnitFromEnd(auto41E718CC_g, auto41E718CC_u);
            if (auto41E718CC_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto41E718CC_var), lv_randomPoint) <= 3.0)) {
                CameraShakeStart(UnitGetOwner(auto41E718CC_var), c_cameraPositionTarget, c_cameraDirectionZ, 1.5, 2.0, 100.0, 1.2);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(auto41E718CC_var), lv_randomPoint) <= 5.0)) {
                CameraShakeStart(UnitGetOwner(auto41E718CC_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.75, 2.0, 100.0, 1.0);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(auto41E718CC_var), lv_randomPoint) <= 7.0)) {
                CameraShakeStart(UnitGetOwner(auto41E718CC_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.35, 2.0, 100.0, 0.75);
            }
        }
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

trigger auto_gf_Task3BrokenArrow_Trigger = null;

void gf_Task3BrokenArrow () {
    if (auto_gf_Task3BrokenArrow_Trigger == null) {
        auto_gf_Task3BrokenArrow_Trigger = TriggerCreate("auto_gf_Task3BrokenArrow_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task3BrokenArrow_Trigger, false, false);
}

bool auto_gf_Task3BrokenArrow_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_cASPoint;
    int lv_localIntA;

    // Automatic Variable Declarations
    const int auto1EFEB93A_n = 10;
    int auto1EFEB93A_i;

    // Variable Initialization
    lv_localIntA = 1;

    // Implementation
    while ((lv_localIntA < 5)) {
        Wait(5.0, c_timeReal);
        for (auto1EFEB93A_i = 1; auto1EFEB93A_i <= auto1EFEB93A_n; auto1EFEB93A_i += 1) {
            lv_cASPoint = RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(gv_marines), 20.0));
            while ((!((((PointGetX(lv_cASPoint) >= 10) && (PointGetX(lv_cASPoint) <= 246)) && ((PointGetY(lv_cASPoint) >= 10) && (PointGetY(lv_cASPoint) <= 246)))))) {
                lv_cASPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 15.0));
            }
        }
        PlayerCreateEffectPoint(9, "Initial", lv_cASPoint);
        lv_localIntA += 1;
    }
    return true;
}

trigger auto_gf_Task3bUnderstandingAilments_Trigger = null;

void gf_Task3bUnderstandingAilments () {
    if (auto_gf_Task3bUnderstandingAilments_Trigger == null) {
        auto_gf_Task3bUnderstandingAilments_Trigger = TriggerCreate("auto_gf_Task3bUnderstandingAilments_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task3bUnderstandingAilments_Trigger, false, false);
}

bool auto_gf_Task3bUnderstandingAilments_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_RadioNOTD(StringExternal("Param/Value/76840C9B"), StringExternal("Param/Value/47819839"));
    Wait(2.0, c_timeReal);
    gf_CreateItemLocalNOTD("Bandage", 2, RegionCircle(UnitGetPosition(gv_marineHero[1]), 7.0));
    Wait(2.0, c_timeReal);
    gf_CreateItemLocalNOTD("AntiVenom", 2, RegionCircle(UnitGetPosition(gv_marineHero[1]), 7.0));
    Wait(3.5, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/0B93F77B"), StringExternal("Param/Value/0CF16949"));
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("Marine_Stimpack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorAddPlayer(gv_marineHero[1], "Venom", 14, 1);
    ObjectiveCreate(StringExternal("Param/Value/185EC9B4"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    while (!((UnitHasBehavior(gv_marineHero[1], "Venom") == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/66278503"), StringExternal("Param/Value/2A0473DF"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    SoundPlay(SoundLink("Marine_Stimpack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorAddPlayer(gv_marineHero[1], "OpenWound", 14, 1);
    ObjectiveCreate(StringExternal("Param/Value/D43BE7F4"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    while (!((UnitHasBehavior(gv_marineHero[1], "OpenWound") == false))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/69BBC90F"), StringExternal("Param/Value/85267806"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    SoundPlay(SoundLink("Marine_Stimpack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorAddPlayer(gv_marineHero[1], "Cripple", 14, 1);
    Wait(1.3, c_timeReal);
    SoundPlay(SoundLink("TScene11Warfield017", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    ObjectiveCreate(StringExternal("Param/Value/7C6B4F4C"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gf_RadioNOTD(StringExternal("Param/Value/08C8DA64"), StringExternal("Param/Value/7E04B23A"));
    Wait(9.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/ED781BBC"), StringExternal("Param/Value/94D52857"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Marine_Stimpack", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorRemove(gv_marineHero[1], "Cripple", 1);
    ObjectiveDestroy(gv_primaryObjective);
    Wait(4.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/830EF764"), StringExternal("Param/Value/981D6D80"));
    CameraSetBounds(PlayerGroupActive(), RegionFromId(15), true);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(28)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1200.0, 270.0);
    gv_objectivePing = PingLastCreated();
    UnitCreate(1, "ShapeArrowPointer", 0, 0, RegionGetCenter(RegionFromId(28)), 45.0);
    UnitSetTeamColorIndex(UnitLastCreated(), 7);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_objectiveArrow = UnitLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/E3879EB6"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(28)), 3.0);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_marineHero[1]), RegionGetCenter(RegionFromId(28))) < 2.5))) {
        Wait(1.0, c_timeGame);
    }
    gf_Task4ObstaclesandHexMissions();
    return true;
}

trigger auto_gf_Task4ObstaclesandHexMissions_Trigger = null;

void gf_Task4ObstaclesandHexMissions () {
    if (auto_gf_Task4ObstaclesandHexMissions_Trigger == null) {
        auto_gf_Task4ObstaclesandHexMissions_Trigger = TriggerCreate("auto_gf_Task4ObstaclesandHexMissions_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task4ObstaclesandHexMissions_Trigger, false, false);
}

bool auto_gf_Task4ObstaclesandHexMissions_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoA24A2726_n = 5;
    int autoA24A2726_i;

    // Implementation
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitRemove(gv_objectiveArrow);
    Wait(1.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/86F65944"), StringExternal("Param/Value/431D2B4B"));
    Wait(1.0, c_timeReal);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(25), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(63), false);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(80), false);
    PlayerCreateEffectUnit(1, "LaserDesignatorLevel1Set", UnitFromId(25));
    Wait(0.2, c_timeReal);
    PlayerCreateEffectUnit(1, "LaserDesignatorLevel1Set", UnitFromId(63));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/C27F6EF3"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    while (!((libNtve_gf_UnitInRegion(gv_marineHero[1], RegionFromId(25)) == true))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(gv_objectivePing);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/3D879F9E"), StringExternal("Param/Value/3ED14D37"));
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    for (autoA24A2726_i = 1; autoA24A2726_i <= autoA24A2726_n; autoA24A2726_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Predator2", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(RegionFromId(26)), UnitGetPosition(gv_marineHero[1]));
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(0.1, c_timeReal);
    }
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    gf_AwardMarineXPNOTD(120.0);
    PlayerCreateEffectUnit(1, "LaserDesignatorLevel1Set", UnitFromId(81));
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(81), false);
    gf_RadioNOTD(StringExternal("Param/Value/ACF6093B"), StringExternal("Param/Value/8859C62C"));
    while (!((libNtve_gf_UnitInRegion(gv_marineHero[1], RegionFromId(23)) == true))) {
        Wait(1.0, c_timeGame);
    }
    CameraSetBounds(PlayerGroupActive(), RegionFromId(10), true);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/637CB362"), StringExternal("Param/Value/CC7FB2A5"));
    Wait(1.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(11)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1200.0, 270.0);
    gv_objectivePing = PingLastCreated();
    UnitCreate(1, "ShapeArrowPointer", 0, 0, RegionGetCenter(RegionFromId(11)), 45.0);
    UnitSetTeamColorIndex(UnitLastCreated(), 7);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_objectiveArrow = UnitLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/5539A9E3"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(11)), 3.0);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_marineHero[1]), RegionGetCenter(RegionFromId(11))) < 2.5))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitRemove(gv_objectiveArrow);
    Wait(1.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/F47D7C3C"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gv_oMCount = 0;
    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-building-terran-surveillancestation.dds", StringExternal("Param/Value/D2B06EB4"), 25, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(1, 0, true);
    libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Protoss, true);
    TriggerEnable(gt_Task4ActivatingTacticalArenaHexTerminal1, true);
    return true;
}

trigger auto_gf_Task5ItemReconandDefensiveSetup_Trigger = null;

void gf_Task5ItemReconandDefensiveSetup () {
    if (auto_gf_Task5ItemReconandDefensiveSetup_Trigger == null) {
        auto_gf_Task5ItemReconandDefensiveSetup_Trigger = TriggerCreate("auto_gf_Task5ItemReconandDefensiveSetup_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task5ItemReconandDefensiveSetup_Trigger, false, false);
}

bool auto_gf_Task5ItemReconandDefensiveSetup_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1568D507_n = 10;
    int auto1568D507_i;
    const int auto9ABB6A5F_n = 8;
    int auto9ABB6A5F_i;
    unitgroup autoBAD1225D_g;
    int autoBAD1225D_u;
    unit autoBAD1225D_var;
    const int autoE95AD8DD_n = 12;
    int autoE95AD8DD_i;

    // Implementation
    gv_arenaSpawnZones[1] = RegionFromId(30);
    gv_arenaSpawnZones[2] = RegionFromId(33);
    gv_arenaSpawnZones[3] = RegionFromId(40);
    gv_arenaSpawnZones[4] = RegionFromId(36);
    gv_arenaSpawnZones[5] = RegionFromId(38);
    gv_arenaSpawnZones[6] = RegionFromId(39);
    Wait(2.0, c_timeReal);
    libNtve_gf_ShowHideBossBar(false, 1);
    gf_RadioNOTD(StringExternal("Param/Value/5019DDCC"), StringExternal("Param/Value/6498D1BA"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/3783F576"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TimerStart(gv_globalTimer[1], 120.0, false, c_timeReal);
    TimerWindowCreate(gv_globalTimer[1], StringExternal("Param/Value/4FAFE788"), true, false);
    gv_globalTimerWindow[1] = TimerWindowLastCreated();
    TimerWindowShow(gv_globalTimerWindow[1], PlayerGroupActive(), true);
    gf_CreateItemLocalNOTD("Medpack", 2, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("M5PulseRifle", 1, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("RoadFlare", 3, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("C4Armor", 1, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("OccularImplants", 2, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("Magazine", 5, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("AmmoBox", 2, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("HighCapacityClip", 1, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("Bandage", 1, RegionCircle(PointFromId(490), 25.0));
    Wait(1.0, c_timeReal);
    gf_CreateItemLocalNOTD("UA420AssaultRifle", 1, RegionCircle(PointFromId(490), 25.0));
    gf_RadioNOTD(StringExternal("Param/Value/562EC93D"), StringExternal("Param/Value/913CFDB6"));
    Wait(81.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/0AE41EA3"), StringExternal("Param/Value/8DD17C06"));
    Wait(30.0, c_timeReal);
    TimerWindowShow(gv_globalTimerWindow[1], PlayerGroupActive(), false);
    TimerWindowDestroy(gv_globalTimerWindow[1]);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_RadioNOTD(StringExternal("Param/Value/EDFB641A"), StringExternal("Param/Value/04CDA134"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    TriggerEnable(gt_Task5PredatorKillXP, true);
    ObjectiveCreate(StringExternal("Param/Value/BD0EEAD5"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    for (auto1568D507_i = 1; auto1568D507_i <= auto1568D507_n; auto1568D507_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Predator2", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(gv_arenaSpawnZones[RandomInt(1, 6)]), UnitGetPosition(gv_marineHero[1]));
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(0.2, c_timeReal);
    }
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_Task5PredatorKillXP, false);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/CED36A85"), StringExternal("Param/Value/3685A7D1"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    for (auto9ABB6A5F_i = 1; auto9ABB6A5F_i <= auto9ABB6A5F_n; auto9ABB6A5F_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Marine", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(gv_arenaSpawnZones[RandomInt(1, 6)]), UnitGetPosition(gv_marineHero[1]));
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(0.5, c_timeReal);
    }
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/1F90B363"), StringExternal("Param/Value/63C20375"));
    Wait(3.0, c_timeReal);
    gf_CreateItemLocalNOTD("SniperRifle", 1, RegionCircle(UnitGetPosition(gv_marineHero[1]), 3.0));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/BD1C9467"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(2.5, c_timeReal);
    autoBAD1225D_g = UnitGroup("SniperRifle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBAD1225D_u = UnitGroupCount(autoBAD1225D_g, c_unitCountAll);
    for (;; autoBAD1225D_u -= 1) {
        autoBAD1225D_var = UnitGroupUnitFromEnd(autoBAD1225D_g, autoBAD1225D_u);
        if (autoBAD1225D_var == null) { break; }
        PlayerCreateEffectUnit(1, "LaserDesignatorLevel1Set", autoBAD1225D_var);
    }
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/BB32689B"), StringExternal("Param/Value/9FA84C84"));
    while (!((UnitWeaponCheck(gv_marineHero[1], 1, c_targetFilterRawResource) == true))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(1.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_RadioNOTD(StringExternal("Param/Value/812CC641"), StringExternal("Param/Value/EE4D9AB8"));
    Wait(2.0, c_timeReal);
    ObjectiveCreate(StringExternal("Param/Value/AB4F6213"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    for (autoE95AD8DD_i = 1; autoE95AD8DD_i <= autoE95AD8DD_n; autoE95AD8DD_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Drone3", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(gv_arenaSpawnZones[RandomInt(1, 6)]), UnitGetPosition(gv_marineHero[1]));
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(1.0, c_timeReal);
    }
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/1C6DCD9F"), StringExternal("Param/Value/1C445E48"));
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(27)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 1200.0, 270.0);
    gv_objectivePing = PingLastCreated();
    UnitCreate(1, "ShapeArrowPointer", 0, 0, RegionGetCenter(RegionFromId(27)), 45.0);
    UnitSetTeamColorIndex(UnitLastCreated(), 7);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_objectiveArrow = UnitLastCreated();
    ObjectiveCreate(StringExternal("Param/Value/71849F5A"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(27)), 3.0);
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_marineHero[1]), RegionGetCenter(RegionFromId(27))) < 2.5))) {
        Wait(1.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitRemove(gv_objectiveArrow);
    Wait(1.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/2608A7AA"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gv_oMCount = 0;
    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-building-terran-surveillancestation.dds", StringExternal("Param/Value/95BD5918"), 25, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(1, 0, true);
    libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Protoss, true);
    TriggerEnable(gt_Task5ActivatingTacticalArenaHexTerminal2, true);
    return true;
}

trigger auto_gf_Task6BossFight_Trigger = null;

void gf_Task6BossFight () {
    if (auto_gf_Task6BossFight_Trigger == null) {
        auto_gf_Task6BossFight_Trigger = TriggerCreate("auto_gf_Task6BossFight_TriggerFunc");
    }

    TriggerExecute(auto_gf_Task6BossFight_Trigger, false, false);
}

bool auto_gf_Task6BossFight_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_AwardMarineXPNOTD(1000.0);
    Wait(2.0, c_timeReal);
    libNtve_gf_ShowHideBossBar(false, 1);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/DF8E8508"), StringExternal("Param/Value/E53EEBE4"));
    Wait(7.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/1956BB31"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Ivax", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(gv_arenaSpawnZones[RandomInt(1, 6)]), UnitGetPosition(gv_marineHero[1]));
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    gv_boss = UnitLastCreated();
    PingCreate(PlayerGroupActive(), "PingBoss", UnitGetPosition(gv_boss), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 180.0);
    PingSetUnit(PingLastCreated(), gv_boss);
    libNtve_gf_DisplayBossBar(3, "Assets\\Textures\\wireframe-terran-thor.dds", StringExternal("Param/Value/13984BE5"), 100, PlayerGroupActive());
    libNtve_gf_SetBossBarBoss(3, gv_boss, true);
    libNtve_gf_SetBossBarRace(3, libNtve_ge_BossBarRace_Protoss, true);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/B658BA85"), StringExternal("Param/Value/8DC4509D"));
    while (!((UnitGroupCount(gv_zombieWave, c_unitCountAlive) == 0))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroyAll();
    libNtve_gf_ShowHideBossBar(false, 3);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_BootCampComplete();
    return true;
}

trigger auto_gf_BootCampComplete_Trigger = null;

void gf_BootCampComplete () {
    if (auto_gf_BootCampComplete_Trigger == null) {
        auto_gf_BootCampComplete_Trigger = TriggerCreate("auto_gf_BootCampComplete_TriggerFunc");
    }

    TriggerExecute(auto_gf_BootCampComplete_Trigger, false, false);
}

bool auto_gf_BootCampComplete_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    gf_RadioNOTD(StringExternal("Param/Value/08DFFF8D"), StringExternal("Param/Value/A0721614"));
    gv_bootCampComplete[1] = 1;
    gf_AwardPlayerXPNOTD(1);
    gf_Save(1, gv_bankSize);
    Wait(6.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/DAEB38FA"), StringExternal("Param/Value/1D5B1B97"));
    ObjectiveDestroy(gv_primaryObjective);
    Wait(6.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/D731AB50"), StringExternal("Param/Value/FF972CD1"));
    Wait(6.0, c_timeReal);
    CinematicFade(false, 3.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    TriggerExecute(gt_AutoSave, true, false);
    Wait(6.0, c_timeReal);
    GameOver(1, c_gameOverVictory, false, false);
    return true;
}

trigger auto_gf_TrainingFieldInitialize_Trigger = null;

void gf_TrainingFieldInitialize () {
    if (auto_gf_TrainingFieldInitialize_Trigger == null) {
        auto_gf_TrainingFieldInitialize_Trigger = TriggerCreate("auto_gf_TrainingFieldInitialize_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrainingFieldInitialize_Trigger, false, false);
}

bool auto_gf_TrainingFieldInitialize_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto4B43BDE9_ae = 8;
    int auto4B43BDE9_var;

    // Implementation
    gv_trainingFieldMode = true;
    TriggerExecute(gt_TrainingFieldClassSelectionUI, false, false);
    TriggerEnable(gt_TrainingFieldClassCreation, true);
    gf_TrainingFieldEnvironmentalChanges();
    gf_ZombieAIWorldEvents();
    gf_BlackMaskApplication();
    CameraSetBounds(PlayerGroupActive(), RegionFromId(31), true);
    auto4B43BDE9_var = 1;
    for ( ; auto4B43BDE9_var <= auto4B43BDE9_ae; auto4B43BDE9_var += 1 ) {
        if ((PlayerStatus(auto4B43BDE9_var) == c_playerStatusActive)) {
            VisExploreArea(auto4B43BDE9_var, RegionCircle(PointFromId(136), 3.0), true, false);
            VisRevealArea(auto4B43BDE9_var, RegionCircle(PointFromId(136), 3.0), 90.0, false);
            CameraLockInput(auto4B43BDE9_var, true);
            UISetFrameVisible(PlayerGroupSingle(auto4B43BDE9_var), c_syncFrameTypeCommandPanel, false);
            UISetFrameVisible(PlayerGroupSingle(auto4B43BDE9_var), c_syncFrameTypeMinimapPanel, false);
            UISetFrameVisible(PlayerGroupSingle(auto4B43BDE9_var), c_syncFrameTypeCharacterSheetButton, false);
            libNtve_gf_SwooshCamera(auto4B43BDE9_var, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(136), 0.0);
        }

    }
    return true;
}

trigger auto_gf_TrainingFieldEnvironmentalChanges_Trigger = null;

void gf_TrainingFieldEnvironmentalChanges () {
    if (auto_gf_TrainingFieldEnvironmentalChanges_Trigger == null) {
        auto_gf_TrainingFieldEnvironmentalChanges_Trigger = TriggerCreate("auto_gf_TrainingFieldEnvironmentalChanges_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrainingFieldEnvironmentalChanges_Trigger, false, false);
}

bool auto_gf_TrainingFieldEnvironmentalChanges_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    GameSetLighting("NOTDDarkness", 0.0);
    gv_zone[0] = RegionFromId(31);
    gv_zone[1] = RegionFromId(42);
    gv_zone[2] = RegionFromId(32);
    gv_zone[3] = RegionFromId(24);
    return true;
}

trigger auto_gf_SurvivalSpawn_Trigger = null;
string auto_gf_SurvivalSpawn_lp_spawningUnit;
region auto_gf_SurvivalSpawn_lp_spawnRegion;

void gf_SurvivalSpawn (string lp_spawningUnit, region lp_spawnRegion) {
    auto_gf_SurvivalSpawn_lp_spawningUnit = lp_spawningUnit;
    auto_gf_SurvivalSpawn_lp_spawnRegion = lp_spawnRegion;

    if (auto_gf_SurvivalSpawn_Trigger == null) {
        auto_gf_SurvivalSpawn_Trigger = TriggerCreate("auto_gf_SurvivalSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_SurvivalSpawn_Trigger, false, false);
}

bool auto_gf_SurvivalSpawn_TriggerFunc (bool testConds, bool runActions) {
    string lp_spawningUnit = auto_gf_SurvivalSpawn_lp_spawningUnit;
    region lp_spawnRegion = auto_gf_SurvivalSpawn_lp_spawnRegion;

    // Variable Declarations
    point lv_unitSpawnPoint;
    unit lv_spawnUnit;
    bool lv_spawnPointReset;

    // Automatic Variable Declarations
    const int auto18976534_n = 3;
    int auto18976534_i;
    unitgroup auto3A867E2D_g;
    int auto3A867E2D_u;
    unit auto3A867E2D_var;

    // Variable Initialization

    // Implementation
    for (auto18976534_i = 1; auto18976534_i <= auto18976534_n; auto18976534_i += 1) {
        auto3A867E2D_g = gv_marines;
        auto3A867E2D_u = UnitGroupCount(auto3A867E2D_g, c_unitCountAll);
        for (;; auto3A867E2D_u -= 1) {
            auto3A867E2D_var = UnitGroupUnitFromEnd(auto3A867E2D_g, auto3A867E2D_u);
            if (auto3A867E2D_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto3A867E2D_var), lv_unitSpawnPoint) < 8.0)) {
                lv_spawnPointReset = true;
            }

        }
        if ((lv_spawnPointReset == true)) {
            lv_unitSpawnPoint = RegionRandomPoint(lp_spawnRegion);
        }

    }
    UnitCreate(1, lp_spawningUnit, 0, 14, lv_unitSpawnPoint, libNtve_gf_RandomAngle());
    lv_spawnUnit = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, lv_spawnUnit);
    Wait(0.25, c_timeGame);
    if ((UnitGetType(lv_spawnUnit) == "ZombieLevel12")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "ZombieLevel22")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "HulkBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "SeekerBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "UltraliskBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "RoachBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Devourer2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Slasher2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowSlasher", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Immortal22")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowImmortal", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "TitanBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowTitan", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "BanelingBurrowed")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Blindling2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowBlindling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Beastling2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowBeastling", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "InfestorTerran2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowInfestedMarine", 0)), c_orderQueueReplace);
    }
    else if ((UnitGetType(lv_spawnUnit) == "Hugger2")) {
        UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
    }
    return true;
}

trigger auto_gf_FieldBegins_Trigger = null;

void gf_FieldBegins () {
    if (auto_gf_FieldBegins_Trigger == null) {
        auto_gf_FieldBegins_Trigger = TriggerCreate("auto_gf_FieldBegins_TriggerFunc");
    }

    TriggerExecute(auto_gf_FieldBegins_Trigger, false, false);
}

bool auto_gf_FieldBegins_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    TriggerEnable(gt_Scenario1, true);
    TriggerEnable(gt_Scenario2, true);
    TriggerEnable(gt_Scenario3, true);
    TriggerEnable(gt_Scenario4, true);
    TriggerEnable(gt_Scenario5, true);
    TriggerEnable(gt_Scenario6, true);
    TriggerEnable(gt_Day, true);
    TriggerEnable(gt_Night, true);
    TriggerEnable(gt_Hunt, true);
    Wait(4.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/6FB89E1B"), StringExternal("Param/Value/34B6D37A"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    HelpPanelAddTip(PlayerGroupAll(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/BF0FF753"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/F282AAE4"), StringExternal("Param/Value/777EBD6B"), "Assets\\Textures\\btn-tips-missioncase.dds");
    Wait(5.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    Wait(1.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/A7FB6EFA"), StringExternal("Param/Value/9B6E2830"));
    Wait(2.0, c_timeReal);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(37)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 8.0, 270.0);
    SoundPlay(SoundLink("Ping", -1), PlayerGroupAll(), 50.0, 0.0);
    Wait(0.8, c_timeReal);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(43)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 8.0, 270.0);
    Wait(0.8, c_timeReal);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(47)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 8.0, 270.0);
    Wait(15.0, c_timeReal);
    TipAlertPanelClear(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Class Select Override
//--------------------------------------------------------------------------------------------------
bool gt_ClassSelectOverride_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((PlayerHandle(EventPlayer()) == "1-S2-1-431521"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_classSelection = StringToInt(EventChatMessage(false));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassSelectOverride_Init () {
    gt_ClassSelectOverride = TriggerCreate("gt_ClassSelectOverride_Func");
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "1", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "2", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "3", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "4", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "5", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "6", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "7", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "8", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "9", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "10", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "11", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "12", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "13", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "14", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Path to Military Base
//--------------------------------------------------------------------------------------------------
bool gt_ShowPathtoMilitaryBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_newbies;
    int lv_localLoop;

    // Automatic Variable Declarations
    playergroup auto383CB3C4_g;
    int auto383CB3C4_var;
    const int auto59DF204F_ae = 18;
    const int auto59DF204F_ai = 1;

    // Variable Initialization
    lv_newbies = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto383CB3C4_g = gv_marineSquad;
    auto383CB3C4_var = -1;
    while (true) {
        auto383CB3C4_var = PlayerGroupNextPlayer(auto383CB3C4_g, auto383CB3C4_var);
        if (auto383CB3C4_var < 0) { break; }
        if ((gv_playerXP[auto383CB3C4_var] < 500)) {
            PlayerGroupAdd(lv_newbies, auto383CB3C4_var);
        }

    }
    while ((ObjectiveGetState(gv_primaryObjective) == c_objectiveStateActive)) {
        lv_localLoop = 1;
        for ( ; ( (auto59DF204F_ai >= 0 && lv_localLoop <= auto59DF204F_ae) || (auto59DF204F_ai < 0 && lv_localLoop >= auto59DF204F_ae) ) ; lv_localLoop += auto59DF204F_ai ) {
            PingCreate(lv_newbies, "PingArrow", gv_pathtoMilitaryBase[lv_localLoop], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 2.0);
            PingSetScale(PingLastCreated(), 0.5);
            Wait(0.1, c_timeReal);
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPathtoMilitaryBase_Init () {
    gt_ShowPathtoMilitaryBase = TriggerCreate("gt_ShowPathtoMilitaryBase_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: NOTD Initialize
//--------------------------------------------------------------------------------------------------
bool gt_NOTDInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rankSearch;
    int lv_GenericA;
    unitgroup lv_localUnit1;
    unit lv_localUnitA;
    int lv_localTextTag;
    unitgroup lv_mineZombies;

    // Automatic Variable Declarations
    playergroup autoF5BC26B3_g;
    int autoF5BC26B3_var;
    const int autoAE7ACCCF_n = 8;
    int autoAE7ACCCF_i;
    const int auto5F65F6FE_ae = 8;
    int auto5F65F6FE_var;
    const int autoCAC5494A_n = 8;
    int autoCAC5494A_i;
    const int auto57478644_ae = 28;
    int auto57478644_var;

    // Variable Initialization
    lv_rankSearch = 1;
    lv_GenericA = 1;
    lv_localUnit1 = UnitGroupEmpty();
    lv_localTextTag = c_textTagNone;
    lv_mineZombies = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((GameIsTestMap(false) == true)) {
        GameCheatAllow(c_gameCheatAny, true);
    }
    else {
        GameCheatAllow(c_gameCheatAny, false);
    }
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    GameSetSpeedValueMinimum(c_gameSpeedFaster);
    gf_NOTDEnvironment();
    TimerStart(gv_nOTDGameTime, 10800.0, false, c_timeReal);
    gf_RankVariableIntialization();
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    UISetResourceTradeCountdownTime(10800);
    gf_PlayerAlliances();
    autoF5BC26B3_g = PlayerGroupActive();
    autoF5BC26B3_var = -1;
    while (true) {
        autoF5BC26B3_var = PlayerGroupNextPlayer(autoF5BC26B3_g, autoF5BC26B3_var);
        if (autoF5BC26B3_var < 0) { break; }
        if ((PlayerType(autoF5BC26B3_var) == c_playerTypeUser)) {
            PlayerGroupAdd(gv_marineSquad, autoF5BC26B3_var);
            gv_totalPlayers += 1;
            CameraLockInput(autoF5BC26B3_var, true);
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(autoF5BC26B3_var));
            gv_gameUIHidden[autoF5BC26B3_var] = true;
        }

    }
    gv_alivePlayers = gv_totalPlayers;
    Wait(1.0, c_timeReal);
    gf_StatsLoadPlayerStats();
    gf_WModLoadPlayerWeaponModPoints();
    lv_GenericA = 1;
    for (autoAE7ACCCF_i = 1; autoAE7ACCCF_i <= autoAE7ACCCF_n; autoAE7ACCCF_i += 1) {
        if ((PlayerStatus(lv_GenericA) == c_playerStatusActive) && (PlayerType(lv_GenericA) == c_playerTypeUser)) {
            gv_playerXP[lv_GenericA] = gv_playerBankData[1][lv_GenericA];
            gv_playerRating[lv_GenericA] = gv_playerBankData[2][lv_GenericA];
            gv_playerGamesPlayed[lv_GenericA] = gv_playerBankData[3][lv_GenericA];
            if ((gv_totalPlayers > 1)) {
                gv_playerGamesPlayed[lv_GenericA] = (gv_playerGamesPlayed[lv_GenericA] + 1);
            }

            gv_playerMedicPlayed[lv_GenericA] = gv_playerBankData[4][lv_GenericA];
            gv_playerKarma[lv_GenericA] = gv_playerBankData[5][lv_GenericA];
            if ((gv_playerStats[lv_GenericA] < 100000)) {
                gv_playerStats[lv_GenericA] = 100000;
            }

            gv_playerCredits[lv_GenericA] = gv_playerBankData[7][lv_GenericA];
            gv_playerLifeTimeCreditsAcquired[lv_GenericA] = gv_playerBankData[8][lv_GenericA];
            if ((gv_playerLifeTimeCreditsAcquired[lv_GenericA] < gv_playerCredits[lv_GenericA])) {
                gv_playerLifeTimeCreditsAcquired[lv_GenericA] = gv_playerCredits[lv_GenericA];
            }

            if ((gv_playerCredits[lv_GenericA] > 10000)) {
                gv_playerCredits[lv_GenericA] = 10000;
            }

            gv_combatActionRibbon[lv_GenericA] = gv_playerBankData[11][lv_GenericA];
            gv_lifeSavingMedal[lv_GenericA] = gv_playerBankData[12][lv_GenericA];
            gv_bronzeStar[lv_GenericA] = gv_playerBankData[13][lv_GenericA];
            gv_silverStar[lv_GenericA] = gv_playerBankData[14][lv_GenericA];
            gv_legionOfMerit[lv_GenericA] = gv_playerBankData[15][lv_GenericA];
            gv_distinguishedServiceMedal[lv_GenericA] = gv_playerBankData[16][lv_GenericA];
            gv_navyCross[lv_GenericA] = gv_playerBankData[17][lv_GenericA];
            gv_expeditionaryMedal[lv_GenericA] = gv_playerBankData[18][lv_GenericA];
            gv_superiorServiceMedal[lv_GenericA] = gv_playerBankData[19][lv_GenericA];
            gv_medalOfHonor[lv_GenericA] = gv_playerBankData[20][lv_GenericA];
            gv_playerColorCode[lv_GenericA] = gv_playerBankData[29][lv_GenericA];
            gv_playerPetCode[lv_GenericA] = gv_playerBankData[30][lv_GenericA];
            gv_eCWinNormal[lv_GenericA] = gv_playerBankData[31][lv_GenericA];
            gv_eCWinNM[lv_GenericA] = gv_playerBankData[32][lv_GenericA];
            gv_aCWinNormal[lv_GenericA] = gv_playerBankData[33][lv_GenericA];
            gv_aCWinNM[lv_GenericA] = gv_playerBankData[34][lv_GenericA];
            gv_sTWinNormal[lv_GenericA] = gv_playerBankData[35][lv_GenericA];
            gv_sTWinNM[lv_GenericA] = gv_playerBankData[36][lv_GenericA];
            gv_survivalWin[lv_GenericA] = gv_playerBankData[37][lv_GenericA];
            gv_eCSpeed[lv_GenericA] = gv_playerBankData[38][lv_GenericA];
            gv_aCSpeed[lv_GenericA] = gv_playerBankData[39][lv_GenericA];
            gv_sTSpeed[lv_GenericA] = gv_playerBankData[40][lv_GenericA];
            gv_eCNMSpeed[lv_GenericA] = gv_playerBankData[41][lv_GenericA];
            gv_aCNMSpeed[lv_GenericA] = gv_playerBankData[42][lv_GenericA];
            gv_sTNMSpeed[lv_GenericA] = gv_playerBankData[43][lv_GenericA];
            gv_survivalWinNM[lv_GenericA] = gv_playerBankData[44][lv_GenericA];
            gv_bootCampComplete[lv_GenericA] = gv_playerBankData[45][lv_GenericA];
            if ((gv_playerRating[lv_GenericA] < 500)) {
                gv_playerRating[lv_GenericA] = 1500;
            }

            if ((gv_playerKarma[lv_GenericA] < 500)) {
                gv_playerKarma[lv_GenericA] = 1500;
            }

            gv_playerKarma[lv_GenericA] = libNtve_gf_ArithmeticIntClamp(gv_playerKarma[lv_GenericA], 1000, 2000);
            gv_playerRating[lv_GenericA] = libNtve_gf_ArithmeticIntClamp(gv_playerRating[lv_GenericA], 1000, 2500);
            while ((lv_rankSearch < 17) && (gv_playerXP[lv_GenericA] >= gv_rankRequirement[(lv_rankSearch + 1)])) {
                lv_rankSearch += 1;
            }
            gv_playerRank[lv_GenericA] = lv_rankSearch;
            lv_rankSearch = 1;
            if ((gv_playerRank[lv_GenericA] == 1)) {
                PlayerSetColorIndex(lv_GenericA, 13, true);
            }

        }

        gf_SetCombatKnifeDamage(lv_GenericA);
        lv_GenericA += 1;
    }
    gf_AmmoUICreation();
    gf_DifficultyHackerCheck();
    gf_UIInitializeStartingCareerStats();
    TriggerExecute(gt_CreateMedalsDialog, true, true);
    TriggerExecute(gt_CreateStatsDialog, true, false);
    TriggerExecute(gt_CreateWeaponsModDialog, true, false);
    TriggerExecute(gt_CreateTeamStatusDialog, true, false);
    auto5F65F6FE_var = 1;
    for ( ; auto5F65F6FE_var <= auto5F65F6FE_ae; auto5F65F6FE_var += 1 ) {
        PlayerModifyPropertyInt(auto5F65F6FE_var, c_playerPropCustom, c_playerPropOperSetTo, gv_playerXP[auto5F65F6FE_var]);
        PlayerOptionOverride(auto5F65F6FE_var, "simplecommandcard", "0");
        PlayerOptionOverride(auto5F65F6FE_var, "selectuncontrolable", "1");
        PlayerOptionOverride(auto5F65F6FE_var, "commandhotkeytext", "1");
    }
    if ((gv_bootCampComplete[1] == 0)) {
        TriggerExecute(gt_BootCampInitialize, true, false);
    }
    else {
        gf_TrainingFieldInitialize();
    }
    Wait(2.0, c_timeReal);
    gf_PeriodicTeamUIUpdate();
    lv_GenericA = 1;
    for (autoCAC5494A_i = 1; autoCAC5494A_i <= autoCAC5494A_n; autoCAC5494A_i += 1) {
        auto57478644_var = 21;
        for ( ; auto57478644_var <= auto57478644_ae; auto57478644_var += 1 ) {
            if ((gv_playerBankData[auto57478644_var][lv_GenericA] > 1000)) {
                gv_playerBankData[auto57478644_var][lv_GenericA] = 0;
            }
            else if ((gv_playerBankData[auto57478644_var][lv_GenericA] > 500)) {
                gv_playerBankData[auto57478644_var][lv_GenericA] = 500;
            }
        }
        gv_playerRiflemanPoints[lv_GenericA] = gv_playerBankData[21][lv_GenericA];
        gv_playerMedicPoints[lv_GenericA] = gv_playerBankData[22][lv_GenericA];
        gv_playerAssaultFlamerTechPoints[lv_GenericA] = gv_playerBankData[23][lv_GenericA];
        gv_playerReconPoints[lv_GenericA] = gv_playerBankData[24][lv_GenericA];
        gv_playerMarksmanPoints[lv_GenericA] = gv_playerBankData[25][lv_GenericA];
        gv_playerDemoFOChemPoints[lv_GenericA] = gv_playerBankData[26][lv_GenericA];
        gv_playerEngineerPathfinderPoints[lv_GenericA] = gv_playerBankData[27][lv_GenericA];
        gv_playerCommandoPsiOpsPoints[lv_GenericA] = gv_playerBankData[28][lv_GenericA];
        lv_GenericA += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NOTDInitialize_Init () {
    gt_NOTDInitialize = TriggerCreate("gt_NOTDInitialize_Func");
    TriggerAddEventTimeElapsed(gt_NOTDInitialize, 0.001, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NOTD Camera
//--------------------------------------------------------------------------------------------------
bool gt_NOTDCamera_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto3BB11CC4_ae = 8;
    int auto3BB11CC4_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3BB11CC4_var = 1;
    for ( ; auto3BB11CC4_var <= auto3BB11CC4_ae; auto3BB11CC4_var += 1 ) {
        CameraSetValue(auto3BB11CC4_var, c_cameraValueFarClip, 75.0, 0.0, -1, 10);
        CameraSetValue(auto3BB11CC4_var, c_cameraValueDistance, 30.0, 0.0, -1, 10);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NOTDCamera_Init () {
    gt_NOTDCamera = TriggerCreate("gt_NOTDCamera_Func");
    TriggerEnable(gt_NOTDCamera, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storyline Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_StorylineDialogCreation_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoBF93564D_ae = 8;
    int autoBF93564D_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF93564D_var = 1;
    for ( ; autoBF93564D_var <= autoBF93564D_ae; autoBF93564D_var += 1 ) {
        if ((PlayerType(autoBF93564D_var) == c_playerTypeUser)) {
            DialogSetVisible(gv_ammoCounterDialog[autoBF93564D_var], PlayerGroupAll(), false);
            if ((gv_playerXP[autoBF93564D_var] < 500)) {
                gv_survivalUnlocked = false;
            }
            if ((gv_playerXP[autoBF93564D_var] < 3500)) {
                gv_secTeamUnlocked = false;
            }
            if ((gv_playerXP[autoBF93564D_var] < 1000)) {
                gv_alphaCompanyUnlocked = false;
                break;
            }
        }

    }
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    DialogCreate(1225, 1135, c_anchorCenter, 0, 0, true);
    gv_storylineSelectionDialog = DialogLastCreated();
    DialogSetImageVisible(gv_storylineSelectionDialog, false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 1225, 1135, c_anchorTopLeft, -20, 0, StringToText(""), "Assets\\Textures\\ui_replay_frame_detail_protoss.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 500, 125, c_anchorTopLeft, 195, 47, StringExternal("Param/Value/E3B9B232"), Color(0,0,0), false, 0.0);
    libNtve_gf_CreateDialogItemButton(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 120, StringExternal("Param/Value/5E6E3510"), StringExternal("Param/Value/FB03FCCC"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_storylineSelectionDialogChoices[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 120, StringToText(""), "Assets\\Textures\\ui_battlereports_hansonendb.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_storylineSelectionDialogImages[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 287, StringExternal("Param/Value/83164692"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 317, StringExternal("Param/Value/D3FA09CA"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    libNtve_gf_CreateDialogItemButton(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 440, StringExternal("Param/Value/D155B206"), StringExternal("Param/Value/C6EA6BC6"), "");
    gv_storylineSelectionDialogChoices[2] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    if ((gv_alphaCompanyUnlocked == false)) {
        libNtve_gf_CreateDialogItemImage(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 440, StringToText(""), "Assets\\Textures\\ui_battlereports_charbattlefield.dds", c_triggerImageTypeNormal, false, ColorWithAlpha(19.22, 19.22, 19.22, 49.41), c_triggerBlendModeNormal);
        gv_storylineSelectionDialogImages[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 275, 250, c_anchorTopLeft, 835, 480, StringExternal("Param/Value/5951BBB1"), Color(100.00, 0.00, 0.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 605, StringExternal("Param/Value/8A003625"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 635, StringExternal("Param/Value/3FA55DFE"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemImage(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 440, StringToText(""), "Assets\\Textures\\ui_battlereports_charbattlefield.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_storylineSelectionDialogImages[2] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 605, StringExternal("Param/Value/99110314"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 635, StringExternal("Param/Value/A4CB44F9"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    }
    libNtve_gf_CreateDialogItemButton(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 760, StringExternal("Param/Value/39243CAB"), StringExternal("Param/Value/7A8160A7"), "");
    gv_storylineSelectionDialogChoices[3] = DialogControlLastCreated();
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    if ((gv_secTeamUnlocked == false)) {
        libNtve_gf_CreateDialogItemImage(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 760, StringToText(""), "Assets\\Textures\\ui_battlereports_toshendb.dds", c_triggerImageTypeNormal, false, ColorWithAlpha(18.82, 18.82, 18.82, 49.02), c_triggerBlendModeNormal);
        gv_storylineSelectionDialogImages[3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 275, 250, c_anchorTopLeft, 835, 790, StringExternal("Param/Value/958DEDC7"), Color(100.00, 0.00, 0.00), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 920, StringExternal("Param/Value/72B67975"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 950, StringExternal("Param/Value/7F66F770"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    }
    else {
        libNtve_gf_CreateDialogItemImage(gv_storylineSelectionDialog, 935, 310, c_anchorTopLeft, 125, 760, StringToText(""), "Assets\\Textures\\ui_battlereports_toshendb.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_storylineSelectionDialogImages[3] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 920, StringExternal("Param/Value/248E821C"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 900, 100, c_anchorTopLeft, 150, 950, StringExternal("Param/Value/9CA64ECD"), Color(150*100/255,150*100/255,30*100/255), false, 2.0);
    }
    if ((gv_survivalUnlocked == true)) {
        libNtve_gf_CreateDialogItemButton(gv_storylineSelectionDialog, 200, 56, c_anchorTopLeft, 855, 40, StringExternal("Param/Value/7D1A1A72"), StringExternal("Param/Value/21408444"), "");
        gv_storylineSelectionDialogChoices[4] = DialogControlLastCreated();
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libNtve_gf_CreateDialogItemImage(gv_storylineSelectionDialog, 200, 56, c_anchorTopLeft, 855, 40, StringToText(""), "Assets\\Textures\\ui_techtree_buttonframe_disabled.dds", c_triggerImageTypeNormal, false, ColorWithAlpha(100.00, 100.00, 100.00, 0.00), c_triggerBlendModeNormal);
        gv_storylineSelectionDialogImages[4] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_storylineSelectionDialog, 191, 60, c_anchorTopLeft, 877, 53, StringExternal("Param/Value/31A6F9B8"), Color(100,100,100), false, 2.0);
    }

    DialogSetVisible(gv_storylineSelectionDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorylineDialogCreation_Init () {
    gt_StorylineDialogCreation = TriggerCreate("gt_StorylineDialogCreation_Func");
    TriggerEnable(gt_StorylineDialogCreation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storyline Selection
//--------------------------------------------------------------------------------------------------
bool gt_StorylineSelection_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto1B59C1A8_ae = 3;
    int auto1B59C1A8_var;

    // Conditions
    if (testConds) {
        if (!(((EventPlayer() == 1) || (EventPlayer() == 2) || (EventPlayer() == 3)))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_storylineSelectionDialogChoices[1]) || ((EventDialogControl() == gv_storylineSelectionDialogChoices[2]) && (gv_alphaCompanyUnlocked == true)) || ((EventDialogControl() == gv_storylineSelectionDialogChoices[3]) && (gv_secTeamUnlocked == true)) || ((EventDialogControl() == gv_storylineSelectionDialogChoices[4]) && (gv_survivalUnlocked == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto1B59C1A8_var = 1;
    for ( ; auto1B59C1A8_var <= auto1B59C1A8_ae; auto1B59C1A8_var += 1 ) {
        if ((EventDialogControl() != gv_storylineSelectionDialogChoices[auto1B59C1A8_var])) {
            DialogControlFadeTransparency(gv_storylineSelectionDialogImages[auto1B59C1A8_var], PlayerGroupAll(), 0.5, 80.0);
        }
    }
    Wait(1.0, c_timeGame);
    DialogSetVisible(gv_storylineSelectionDialog, PlayerGroupAll(), false);
    if ((EventDialogControl() == gv_storylineSelectionDialogChoices[4]) && (gv_survivalUnlocked == true)) {
        gv_storyline = 4;
        Wait(2.1, c_timeGame);
        TriggerExecute(gt_TrainingFieldClassSelectionUI, true, false);
    }
    else {
        if ((EventDialogControl() == gv_storylineSelectionDialogChoices[1])) {
            gv_storyline = 1;
            TriggerExecute(gt_BootCampInitialize, true, false);
        }
        else if ((EventDialogControl() == gv_storylineSelectionDialogChoices[2]) && (gv_alphaCompanyUnlocked == true)) {
            GameSetLighting("NOTDAlphaCompanyLight", 1.0);
            gv_storyline = 2;
        }
        else if ((EventDialogControl() == gv_storylineSelectionDialogChoices[3]) && (gv_secTeamUnlocked == true)) {
            GameSetLighting("NOTDSecTeamLight", 1.0);
            gv_storyline = 3;
        }
        gf_ClassSelectionUI();
    }
    PlayerModifyPropertyInt(14, c_playerPropVespene, c_playerPropOperSetTo, gv_storyline);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorylineSelection_Init () {
    gt_StorylineSelection = TriggerCreate("gt_StorylineSelection_Func");
    TriggerAddEventDialogControl(gt_StorylineSelection, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorylineSelection, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorylineSelection, 3, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manual Save
//--------------------------------------------------------------------------------------------------
bool gt_ManualSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerNo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerNo = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_wave >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_playerXP[lv_playerNo] - gv_startingXP[lv_playerNo]) > 350)) {
        GameOver(lv_playerNo, c_gameOverDefeat, true, true);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(lv_playerNo) + StringExternal("Param/Value/FE25BC6C")));
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupSingle(lv_playerNo), c_messageAreaDebug, (StringExternal("Param/Value/3CA19E89") + (PlayerName(lv_playerNo) + StringExternal("Param/Value/556EE5F6"))));
        SoundPlay(SoundLink("UI_ScoreScreenMissionSummary", -1), PlayerGroupSingle(lv_playerNo), 50.0, 0.0);
        gf_Save(lv_playerNo, gv_bankSize);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ManualSave_Init () {
    gt_ManualSave = TriggerCreate("gt_ManualSave_Func");
    TriggerEnable(gt_ManualSave, false);
    TriggerAddEventChatMessage(gt_ManualSave, EventPlayer(), "-save", true);
    TriggerAddEventChatMessage(gt_ManualSave, EventPlayer(), "-s", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Save
//--------------------------------------------------------------------------------------------------
bool gt_AutoSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_saveGroup;

    // Automatic Variable Declarations
    playergroup auto2F1B28A9_g;
    int auto2F1B28A9_var;
    playergroup autoEB75747D_g;
    int autoEB75747D_var;

    // Variable Initialization
    lv_saveGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F1B28A9_g = PlayerGroupActive();
    auto2F1B28A9_var = -1;
    while (true) {
        auto2F1B28A9_var = PlayerGroupNextPlayer(auto2F1B28A9_g, auto2F1B28A9_var);
        if (auto2F1B28A9_var < 0) { break; }
        if ((PlayerStatus(auto2F1B28A9_var) == c_playerStatusActive) && (PlayerType(auto2F1B28A9_var) == c_playerTypeUser)) {
            PlayerGroupAdd(lv_saveGroup, auto2F1B28A9_var);
        }

    }
    autoEB75747D_g = lv_saveGroup;
    autoEB75747D_var = -1;
    while (true) {
        autoEB75747D_var = PlayerGroupNextPlayer(autoEB75747D_g, autoEB75747D_var);
        if (autoEB75747D_var < 0) { break; }
        Wait(0.5, c_timeReal);
        if (((gv_playerXP[autoEB75747D_var] - gv_startingXP[autoEB75747D_var]) > 350)) {
            GameOver(autoEB75747D_var, c_gameOverDefeat, true, true);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(autoEB75747D_var) + StringExternal("Param/Value/5B0AD226")));
            SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if (true) {
            gf_Save(autoEB75747D_var, gv_bankSize);
        }
    }
    PlayerGroupClear(lv_saveGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSave_Init () {
    gt_AutoSave = TriggerCreate("gt_AutoSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Init - Load Player
//--------------------------------------------------------------------------------------------------
bool gt_MapInitLoadPlayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_playerGroup;

    // Automatic Variable Declarations
    playergroup autoE6752EB6_g;
    int autoE6752EB6_var;
    playergroup auto4688FD68_g;
    int auto4688FD68_var;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoE6752EB6_g = PlayerGroupAll();
    autoE6752EB6_var = -1;
    while (true) {
        autoE6752EB6_var = PlayerGroupNextPlayer(autoE6752EB6_g, autoE6752EB6_var);
        if (autoE6752EB6_var < 0) { break; }
        if (((PlayerStatus(autoE6752EB6_var) == c_playerStatusActive) && (PlayerType(autoE6752EB6_var) == c_playerTypeUser))) {
            PlayerGroupAdd(lv_playerGroup, autoE6752EB6_var);
        }

    }
    auto4688FD68_g = lv_playerGroup;
    auto4688FD68_var = -1;
    while (true) {
        auto4688FD68_var = PlayerGroupNextPlayer(auto4688FD68_g, auto4688FD68_var);
        if (auto4688FD68_var < 0) { break; }
        gf_LoadPlayerBankFile(auto4688FD68_var, gv_originalBankSize, gv_bankSize);
        Wait(0.001, c_timeGame);
        gf_LoadPlayerBackupBankFile(auto4688FD68_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitLoadPlayer_Init () {
    gt_MapInitLoadPlayer = TriggerCreate("gt_MapInitLoadPlayer_Func");
    TriggerAddEventMapInit(gt_MapInitLoadPlayer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Team Status - Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateTeamStatusDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerItemSpacePositionX;
    int lv_playerItemSpacePositionY;
    int lv_playerItemSizeX;
    int lv_playerItemSizeY;
    int lv_playerItemOffsetX;
    int lv_playerItemOffsetY;
    int lv_portraitBorderSizeXY;
    int lv_portraitBorderImageSizeXY;
    int lv_portraitBorderPositionXPrimary;
    int lv_portraitBorderPositionXSecondary;
    int lv_portraitBorderPositionY;
    int lv_portraitSizeXY;
    int lv_portraitPositionXPrimary;
    int lv_portraitPositionXSecondary;
    int lv_portraitPositionY;
    int lv_topLifeEnergyBarSizeX;
    int lv_topLifeEnergyBarSizeY;
    int lv_topLifeEnergyBarPositionXPrimary;
    int lv_topLifeEnergyBarPositionXSecondary;
    int lv_playerRankIconSizeXY;
    int lv_playerRankIconPositionXPrimary;
    int lv_playerRankIconPositionXSecondary;
    int lv_playerNamePositionXPrimary;
    int lv_playerNamePositionXSecondary;
    int lv_playerNamePositionY;
    int lv_playerRankIconPositionY;
    int lv_lifeManaMidSlashPositionX;
    int lv_lifeCurrentMidSlashMaxPositionY;
    int lv_debuffBorderPositionXPrimary;
    int lv_debuffBorderPositionXSecondary;
    int lv_debuffBorderPositionY;
    int lv_debuffBorderSizeXY;
    int lv_debuffIconPositionXPrimary;
    int lv_debuffIconPositionXSecondary;
    int lv_debuffIconPositionY;
    int lv_debuffIconSizeXY;
    int lv_xPPositionXPrimary;
    int lv_xPPositionXSecondary;
    int lv_xPPositionY;
    int lv_i;

    // Automatic Variable Declarations
    const int autoF27FADA7_ae = 8;
    int autoF27FADA7_var;
    const int autoEEC5FA2D_ae = 3;
    const int autoEEC5FA2D_ai = 1;
    const int auto25200327_ae = 8;
    int auto25200327_var;

    // Variable Initialization
    lv_playerItemSpacePositionX = 2;
    lv_playerItemSpacePositionY = 2;
    lv_playerItemSizeX = ((gv_raidUISizeX / 2) - (lv_playerItemSpacePositionX * 2));
    lv_playerItemSizeY = ((gv_raidUISizeY - (lv_playerItemSpacePositionY * 5)) / 4);
    lv_playerItemOffsetX = (gv_raidUISizeX / 2);
    lv_playerItemOffsetY = (lv_playerItemSizeY + 2);
    lv_portraitBorderSizeXY = lv_playerItemSizeY;
    lv_portraitBorderImageSizeXY = (lv_portraitBorderSizeXY + 14);
    lv_portraitBorderPositionXPrimary = (lv_playerItemSpacePositionX + 0);
    lv_portraitBorderPositionXSecondary = (lv_portraitBorderPositionXPrimary + lv_playerItemOffsetX);
    lv_portraitBorderPositionY = (lv_playerItemSpacePositionY + 40);
    lv_portraitSizeXY = (lv_portraitBorderSizeXY - 6);
    lv_portraitPositionXPrimary = (lv_portraitBorderPositionXPrimary + 3);
    lv_portraitPositionXSecondary = (lv_portraitPositionXPrimary + lv_playerItemOffsetX);
    lv_portraitPositionY = (lv_playerItemSpacePositionY + 43);
    lv_topLifeEnergyBarSizeX = ((lv_playerItemSizeX - 2) - (lv_portraitBorderSizeXY + 0));
    lv_topLifeEnergyBarSizeY = FixedToInt((IntToFixed(lv_playerItemSizeY) / 3.0));
    lv_topLifeEnergyBarPositionXPrimary = (lv_portraitBorderPositionXPrimary + lv_portraitBorderSizeXY);
    lv_topLifeEnergyBarPositionXSecondary = (lv_portraitBorderPositionXSecondary + lv_portraitBorderSizeXY);
    lv_playerRankIconSizeXY = lv_topLifeEnergyBarSizeY;
    lv_playerRankIconPositionXPrimary = (lv_topLifeEnergyBarPositionXPrimary - 0);
    lv_playerRankIconPositionXSecondary = (lv_topLifeEnergyBarPositionXSecondary - 0);
    lv_playerNamePositionXPrimary = ((lv_topLifeEnergyBarPositionXPrimary - 0) + 0);
    lv_playerNamePositionXSecondary = ((lv_topLifeEnergyBarPositionXSecondary - 0) + 0);
    lv_playerNamePositionY = (lv_playerItemSpacePositionY + 45);
    lv_playerRankIconPositionY = (lv_playerItemSpacePositionY + (lv_playerItemSizeY - (lv_playerRankIconSizeXY - 40)));
    lv_lifeManaMidSlashPositionX = ((lv_topLifeEnergyBarPositionXPrimary + 15) + ((lv_topLifeEnergyBarSizeX / 20) * 9));
    lv_lifeCurrentMidSlashMaxPositionY = ((lv_playerItemSpacePositionY + 45) + lv_topLifeEnergyBarSizeY);
    lv_debuffBorderPositionXPrimary = ((lv_portraitBorderPositionXPrimary + lv_portraitBorderSizeXY) + 3);
    lv_debuffBorderPositionXSecondary = (lv_debuffBorderPositionXPrimary + lv_playerItemOffsetX);
    lv_debuffBorderPositionY = (lv_lifeCurrentMidSlashMaxPositionY - 2);
    lv_debuffBorderSizeXY = (lv_playerItemSizeY / 4);
    lv_debuffIconPositionXPrimary = (lv_debuffBorderPositionXPrimary + 1);
    lv_debuffIconPositionXSecondary = (lv_debuffIconPositionXPrimary + lv_playerItemOffsetX);
    lv_debuffIconPositionY = (lv_debuffBorderPositionY + 1);
    lv_debuffIconSizeXY = (lv_debuffBorderSizeXY - 2);
    lv_xPPositionXPrimary = (lv_playerRankIconPositionXPrimary + lv_playerRankIconSizeXY);
    lv_xPPositionXSecondary = (lv_xPPositionXPrimary + lv_playerItemOffsetX);
    lv_xPPositionY = (lv_playerRankIconPositionY + 5);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_teamStatusLifeBarLength = IntToFixed(lv_topLifeEnergyBarSizeX);
    gv_teamStatusLifeBarThickness = lv_topLifeEnergyBarSizeY;
    DialogCreate(gv_raidUISizeX, ((gv_raidUISizeY + 55) * 2), c_anchorBottomRight, -254, 286, true);
    gv_raidUITeamStatusDummy = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, ((gv_raidUISizeY + 50) * 2), c_anchorTopRight, 224, 10, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_bucket_long_left.dds", c_triggerImageTypeNormal, false, Color(80.39, 80.39, 80.39), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 224, ((gv_raidUISizeY + 50) * 2), c_anchorTopRight, 0, 10, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_bucket_long_middle.dds", c_triggerImageTypeNormal, false, Color(80.39, 80.39, 80.39), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTop, -16, 345, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTop, -16, 345, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTop, -16, 345, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorTop, -16, 360, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorTop, -16, 360, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorTop, -16, 360, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 80, c_anchorTop, -16, 345, StringExternal("Param/Value/51D7CC67"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_teamStatusButtonClosed = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    DialogCreate(gv_raidUISizeX, ((gv_raidUISizeY + 55) * 2), c_anchorBottomRight, 0, 286, true);
    gv_raidUITeamStatus = DialogLastCreated();
    DialogSetImage(gv_raidUITeamStatus, "Assets\\Textures\\archonstatue_diffuse.dds");
    DialogSetImageVisible(gv_raidUITeamStatus, false);
    DialogSetVisible(gv_raidUITeamStatus, PlayerGroupAll(), false);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 50, ((gv_raidUISizeY + 50) * 2), c_anchorTopRight, 224, 10, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_bucket_long_left.dds", c_triggerImageTypeNormal, false, Color(80.39, 80.39, 80.39), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 224, ((gv_raidUISizeY + 50) * 2), c_anchorTopRight, 0, 10, StringToText(""), "Assets\\Textures\\ui_battlenet_challenge_frame_bucket_long_middle.dds", c_triggerImageTypeNormal, false, Color(80.39, 80.39, 80.39), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTop, -16, 345, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTop, -16, 345, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 40, 80, c_anchorTop, -16, 345, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorTop, -16, 360, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorTop, -16, 360, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 20, 50, c_anchorTop, -16, 360, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 30, 80, c_anchorTop, -16, 345, StringExternal("Param/Value/224B0220"), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_teamStatusButtonOpened = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 129, 44, c_anchorBottomRight, 129, 30, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_medalsDialogButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 129, 44, c_anchorBottomRight, 129, 30, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 129, 33, c_anchorBottomRight, 104, 28, StringExternal("Param/Value/83291A14"), Color(100,100,100), false, 0.0);
    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 129, 44, c_anchorBottomRight, 10, 30, StringToText(""), StringToText(""), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_statsDialogButton = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 129, 44, c_anchorBottomRight, 3, 30, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 129, 34, c_anchorBottomRight, -29, 27, StringExternal("Param/Value/FBD0B825"), Color(100,100,100), false, 0.0);
    autoF27FADA7_var = 1;
    for ( ; autoF27FADA7_var <= autoF27FADA7_ae; autoF27FADA7_var += 1 ) {
        libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, lv_portraitSizeXY, lv_portraitSizeXY, c_anchorTopLeft, lv_portraitPositionXSecondary, lv_portraitPositionY, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_teamStatusPortraitImages[autoF27FADA7_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, lv_portraitBorderImageSizeXY, lv_portraitBorderImageSizeXY, c_anchorTopLeft, (lv_portraitBorderPositionXSecondary - 7), (lv_portraitBorderPositionY - 7), StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(58.82, 58.82, 58.82), c_triggerBlendModeAdd);
        libNtve_gf_CreateDialogItemButton(gv_raidUITeamStatus, lv_portraitBorderSizeXY, lv_portraitBorderSizeXY, c_anchorTopLeft, lv_portraitBorderPositionXSecondary, lv_portraitBorderPositionY, gv_teamStatusPortraitTooltip[autoF27FADA7_var], StringToText(""), "");
        gv_teamStatusPortraitButton[autoF27FADA7_var] = DialogControlLastCreated();
        DialogControlFadeTransparency(gv_teamStatusPortraitButton[autoF27FADA7_var], PlayerGroupAll(), 0.0, 100.0);
        libNtve_gf_CreateDialogItemLabel(gv_raidUITeamStatus, lv_topLifeEnergyBarSizeX, lv_playerItemSizeY, c_anchorTopLeft, lv_playerNamePositionXSecondary, lv_playerNamePositionY, StringToText(""), Color(100,100,100), false, 0.0);
        gv_teamStatusPlayerName[autoF27FADA7_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
        libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, lv_topLifeEnergyBarSizeX, lv_topLifeEnergyBarSizeY, c_anchorTopLeft, lv_topLifeEnergyBarPositionXSecondary, (lv_playerItemSpacePositionY + (lv_topLifeEnergyBarSizeY + 40)), StringToText(""), "Life Bar - Red.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, 0, 0, c_anchorTopLeft, lv_topLifeEnergyBarPositionXSecondary, (lv_playerItemSpacePositionY + (lv_topLifeEnergyBarSizeY + 40)), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_teamStatusLifeBar[autoF27FADA7_var] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_raidUITeamStatus, lv_topLifeEnergyBarSizeX, lv_playerItemSizeY, c_anchorTopLeft, (lv_lifeManaMidSlashPositionX + lv_playerItemOffsetX), lv_lifeCurrentMidSlashMaxPositionY, StringExternal("Param/Value/298DEFFE"), Color(100,100,100), false, 0.0);
        gv_teamStatusLifeMidSlash[autoF27FADA7_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
        libNtve_gf_CreateDialogItemButton(gv_raidUITeamStatus, lv_topLifeEnergyBarSizeX, lv_topLifeEnergyBarSizeY, c_anchorTopLeft, lv_topLifeEnergyBarPositionXSecondary, (lv_playerItemSpacePositionY + (lv_topLifeEnergyBarSizeY + 40)), StringToText(""), StringToText(""), "");
        gv_teamStatusLifeButton[autoF27FADA7_var] = DialogControlLastCreated();
        DialogControlFadeTransparency(gv_teamStatusLifeButton[autoF27FADA7_var], PlayerGroupAll(), 0.0, 100.0);
        lv_i = 0;
        for ( ; ( (autoEEC5FA2D_ai >= 0 && lv_i <= autoEEC5FA2D_ae) || (autoEEC5FA2D_ai < 0 && lv_i >= autoEEC5FA2D_ae) ) ; lv_i += autoEEC5FA2D_ai ) {
            libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, lv_debuffIconSizeXY, lv_debuffIconSizeXY, c_anchorTopLeft, (lv_debuffIconPositionXSecondary + (lv_debuffBorderSizeXY * lv_i)), (lv_debuffIconPositionY + 0), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_teamStatusDebuffsBackground[lv_i][autoF27FADA7_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, lv_debuffIconSizeXY, lv_debuffIconSizeXY, c_anchorTopLeft, (lv_debuffIconPositionXSecondary + (lv_debuffBorderSizeXY * lv_i)), (lv_debuffIconPositionY + 0), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100.00, 0.00, 0.00), c_triggerBlendModeNormal);
            gv_teamStatusDebuffs[lv_i][autoF27FADA7_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, (lv_debuffBorderSizeXY + 6), (lv_debuffBorderSizeXY + 6), c_anchorTopLeft, ((lv_debuffBorderPositionXSecondary - 3) + (lv_debuffBorderSizeXY * lv_i)), (lv_debuffBorderPositionY - 3), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            gv_teamStatusDebuffsBorder[lv_i][autoF27FADA7_var] = DialogControlLastCreated();
        }
        libNtve_gf_CreateDialogItemLabel(gv_raidUITeamStatus, lv_topLifeEnergyBarSizeX, lv_topLifeEnergyBarSizeY, c_anchorTopLeft, lv_xPPositionXSecondary, lv_xPPositionY, StringToText(""), Color(100,100,100), false, 0.0);
        gv_teamStatusXP[autoF27FADA7_var] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
        gf_UIUpdateXP(autoF27FADA7_var);
        libNtve_gf_CreateDialogItemButton(gv_raidUITeamStatus, lv_topLifeEnergyBarSizeX, lv_topLifeEnergyBarSizeY, c_anchorTopLeft, lv_topLifeEnergyBarPositionXSecondary, ((lv_playerItemSpacePositionY + 40) + (lv_topLifeEnergyBarSizeY * 2)), StringToText(""), StringToText(""), "");
        gv_teamStatusXPButton[autoF27FADA7_var] = DialogControlLastCreated();
        DialogControlFadeTransparency(gv_teamStatusXPButton[autoF27FADA7_var], PlayerGroupAll(), 0.0, 100.0);
        libNtve_gf_CreateDialogItemImage(gv_raidUITeamStatus, lv_playerRankIconSizeXY, lv_playerRankIconSizeXY, c_anchorTopLeft, lv_playerRankIconPositionXSecondary, lv_playerRankIconPositionY, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        gv_teamStatusRankIcon[autoF27FADA7_var] = DialogControlLastCreated();
        lv_playerItemSpacePositionY += lv_playerItemOffsetY;
        lv_portraitBorderPositionY += lv_playerItemOffsetY;
        lv_portraitPositionY += lv_playerItemOffsetY;
        lv_playerRankIconPositionY += lv_playerItemOffsetY;
        lv_playerNamePositionY += lv_playerItemOffsetY;
        lv_debuffBorderPositionY += lv_playerItemOffsetY;
        lv_debuffIconPositionY += lv_playerItemOffsetY;
        lv_lifeCurrentMidSlashMaxPositionY += lv_playerItemOffsetY;
        lv_xPPositionY += lv_playerItemOffsetY;
    }
    auto25200327_var = 1;
    for ( ; auto25200327_var <= auto25200327_ae; auto25200327_var += 1 ) {
        if ((PlayerType(auto25200327_var) == c_playerTypeUser)) {
            gf_UISetPlayerRankNameIconXP(auto25200327_var);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTeamStatusDialog_Init () {
    gt_CreateTeamStatusDialog = TriggerCreate("gt_CreateTeamStatusDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Team Status Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleTeamStatusDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_teamStatusButtonOpened) || (EventDialogControl() == gv_teamStatusButtonClosed)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_raidUITeamStatus, lv_triggeringPlayer) == false)) {
        DialogSetVisible(gv_raidUIMedalsSubtab, PlayerGroupSingle(lv_triggeringPlayer), false);
        DialogSetVisible(gv_raidUITeamStatus, PlayerGroupSingle(lv_triggeringPlayer), true);
        DialogSetVisible(gv_wModWeaponsModDialog[lv_triggeringPlayer], PlayerGroupSingle(lv_triggeringPlayer), false);
        DialogSetVisible(gv_raidUITeamStatusDummy, PlayerGroupSingle(lv_triggeringPlayer), false);
    }
    else {
        DialogSetVisible(gv_raidUITeamStatus, PlayerGroupSingle(lv_triggeringPlayer), false);
        DialogSetVisible(gv_raidUITeamStatusDummy, PlayerGroupSingle(lv_triggeringPlayer), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleTeamStatusDialog_Init () {
    gt_ToggleTeamStatusDialog = TriggerCreate("gt_ToggleTeamStatusDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleTeamStatusDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Life Bar MIA - Player Has Left Game
//--------------------------------------------------------------------------------------------------
bool gt_UpdateLifeBarMIAPlayerHasLeftGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupRemove(gv_marineSquad, EventPlayer());
    if ((UnitIsAlive(gv_marineHero[lv_triggeringPlayer]) == false)) {
        libNtve_gf_SetDialogItemText(gv_teamStatusLifeMidSlash[lv_triggeringPlayer], StringExternal("Param/Value/07BC9DA1"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(gv_teamStatusLifeMidSlash[lv_triggeringPlayer], StringExternal("Param/Value/74450808"), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateLifeBarMIAPlayerHasLeftGame_Init () {
    gt_UpdateLifeBarMIAPlayerHasLeftGame = TriggerCreate("gt_UpdateLifeBarMIAPlayerHasLeftGame_Func");
    TriggerAddEventPlayerLeft(gt_UpdateLifeBarMIAPlayerHasLeftGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Status Clicked - Talent Tree
//--------------------------------------------------------------------------------------------------
bool gt_TeamStatusClickedTalentTree_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_talentTreeOwner;
    int lv_triggeringPlayer;
    bool lv_iAmLookingAtMedals;
    bool lv_iAmLookingAtStats;
    bool lv_iAmLookingAtTalents;

    // Automatic Variable Declarations
    const int auto9E811429_ae = 8;
    int auto9E811429_var;
    const int auto610ECA20_ae = 8;
    int auto610ECA20_var;
    const int autoDF7CB496_ae = 8;
    int autoDF7CB496_var;
    const int auto88156349_ae = 8;
    int auto88156349_var;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_teamStatusPortraitButton[1]) || (EventDialogControl() == gv_teamStatusPortraitButton[2]) || (EventDialogControl() == gv_teamStatusPortraitButton[3]) || (EventDialogControl() == gv_teamStatusPortraitButton[4]) || (EventDialogControl() == gv_teamStatusPortraitButton[5]) || (EventDialogControl() == gv_teamStatusPortraitButton[6]) || (EventDialogControl() == gv_teamStatusPortraitButton[7]) || (EventDialogControl() == gv_teamStatusPortraitButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E811429_var = 1;
    for ( ; auto9E811429_var <= auto9E811429_ae; auto9E811429_var += 1 ) {
        if ((PlayerStatus(auto9E811429_var) != c_playerStatusUnused)) {
            if ((EventDialogControl() == gv_teamStatusPortraitButton[auto9E811429_var])) {
                lv_talentTreeOwner = auto9E811429_var;
            }

            if ((DialogIsVisible(gv_playerMedalsDialog[auto9E811429_var], lv_triggeringPlayer) == true)) {
                lv_iAmLookingAtMedals = true;
            }
            else if ((DialogIsVisible(gv_statsPlayerStatsDialog[auto9E811429_var], lv_triggeringPlayer) == true)) {
                lv_iAmLookingAtStats = true;
            }
            else if ((DialogIsVisible(gv_talentTree[auto9E811429_var], lv_triggeringPlayer) == true)) {
                lv_iAmLookingAtTalents = true;
            }
        }

    }
    if ((lv_iAmLookingAtMedals == true)) {
        if ((DialogIsVisible(gv_playerMedalsDialog[lv_talentTreeOwner], lv_triggeringPlayer) == true)) {
            DialogSetVisible(gv_playerMedalsDialog[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), false);
        }
        else {
            auto610ECA20_var = 1;
            for ( ; auto610ECA20_var <= auto610ECA20_ae; auto610ECA20_var += 1 ) {
                if ((PlayerStatus(auto610ECA20_var) != c_playerStatusUnused)) {
                    DialogSetVisible(gv_talentTree[auto610ECA20_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_playerMedalsDialog[auto610ECA20_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_statsPlayerStatsDialog[auto610ECA20_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[auto610ECA20_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_wModWeaponsModDialog[auto610ECA20_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                }

            }
            DialogSetVisible(gv_playerMedalsDialog[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    else if ((lv_iAmLookingAtStats == true)) {
        if ((DialogIsVisible(gv_statsPlayerStatsDialog[lv_talentTreeOwner], lv_triggeringPlayer) == true)) {
            DialogSetVisible(gv_statsPlayerStatsDialog[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), false);
        }
        else {
            autoDF7CB496_var = 1;
            for ( ; autoDF7CB496_var <= autoDF7CB496_ae; autoDF7CB496_var += 1 ) {
                if ((PlayerStatus(autoDF7CB496_var) != c_playerStatusUnused)) {
                    DialogSetVisible(gv_talentTree[autoDF7CB496_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_playerMedalsDialog[autoDF7CB496_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_statsPlayerStatsDialog[autoDF7CB496_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[autoDF7CB496_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_wModWeaponsModDialog[autoDF7CB496_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                }

            }
            DialogSetVisible(gv_statsPlayerStatsDialog[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), true);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    else if (true) {
        if ((DialogIsVisible(gv_talentTree[lv_talentTreeOwner], lv_triggeringPlayer) == true)) {
            DialogSetVisible(gv_talentTree[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), false);
        }
        else {
            auto88156349_var = 1;
            for ( ; auto88156349_var <= auto88156349_ae; auto88156349_var += 1 ) {
                if ((PlayerStatus(auto88156349_var) != c_playerStatusUnused)) {
                    DialogSetVisible(gv_talentTree[auto88156349_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_playerMedalsDialog[auto88156349_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_statsPlayerStatsDialog[auto88156349_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[auto88156349_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                    DialogSetVisible(gv_wModWeaponsModDialog[auto88156349_var], PlayerGroupSingle(lv_triggeringPlayer), false);
                }

            }
            DialogSetVisible(gv_talentTree[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamStatusClickedTalentTree_Init () {
    gt_TeamStatusClickedTalentTree = TriggerCreate("gt_TeamStatusClickedTalentTree_Func");
    TriggerAddEventDialogControl(gt_TeamStatusClickedTalentTree, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Medals Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateMedalsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogSizeX;
    int lv_dialogSizeY;
    int lv_dialogOffsetX;
    int lv_dialogOffsetY;
    int lv_spacingX;
    int lv_spacingY;
    int lv_playerNameY;
    int lv_iLocal;
    int lv_medalItemX2;
    int lv_medalItemX;
    int lv_medalItemY;
    int lv_medalImageXY;
    int lv_medalItemOffsetY;
    int lv_medalItemXPositionPrimary;
    int lv_medalItemXPositionSecondary;
    int lv_medalNameX;
    int lv_medalNameY;
    int lv_medalNamePositionXPrimary;
    int lv_medalNamePositionXSecondary;
    int lv_medalProgressPointXY;
    int lv_medalProgressBarX;
    int lv_medalProgressBarY;
    int lv_medalProgressSubbarSpacingX;
    int lv_medalProgressSubbarSpacingY;
    int lv_medalProgressSubBarX;
    int lv_medalProgressSubBarY;
    int lv_jLocal;
    int lv_medalProgressSubBarPositionXPrimary;
    int lv_medalProgressSubBarPositionXSecondary;
    int lv_medalProgressSubBarPositionY;
    int lv_medalProgressPointPositionXPrimary;
    int lv_medalProgressPointPositionXSecondary;
    int lv_medalProgressPointPositionY;

    // Automatic Variable Declarations
    const int auto71031E25_ae = 8;
    int auto71031E25_var;
    const int auto3937F14A_ae = 10;
    const int auto3937F14A_ai = 1;
    const int auto711448E5_ae = 9;
    const int auto711448E5_ai = 1;
    const int auto56138A62_ae = 9;
    const int auto56138A62_ai = 1;

    // Variable Initialization
    lv_dialogSizeX = 690;
    lv_dialogSizeY = 610;
    lv_dialogOffsetX = 273;
    lv_dialogOffsetY = 433;
    lv_spacingX = 5;
    lv_spacingY = 5;
    lv_playerNameY = 40;
    lv_medalItemX2 = FixedToInt(((((IntToFixed(lv_dialogSizeX) - (IntToFixed(lv_spacingX) * 4.0)) * 5.0) / 6.0) / 2.0));
    lv_medalItemX = lv_medalItemX2;
    lv_medalItemY = 80;
    lv_medalImageXY = lv_medalItemY;
    lv_medalItemOffsetY = ((lv_playerNameY + 75) + (lv_spacingY * 2));
    lv_medalItemXPositionPrimary = ((lv_spacingX + 17) + ((lv_dialogOffsetX / 4) / 2));
    lv_medalItemXPositionSecondary = (lv_medalItemXPositionPrimary + (lv_medalItemX + (2 * lv_spacingX)));
    lv_medalNameX = (lv_medalItemX - lv_medalImageXY);
    lv_medalNameY = (lv_medalItemY / 2);
    lv_medalNamePositionXPrimary = (lv_medalItemXPositionPrimary + lv_medalImageXY);
    lv_medalNamePositionXSecondary = (lv_medalItemXPositionSecondary + lv_medalImageXY);
    lv_medalProgressPointXY = (lv_medalItemY / 2);
    lv_medalProgressBarX = (lv_medalItemX - (lv_medalImageXY + lv_medalProgressPointXY));
    lv_medalProgressBarY = (lv_medalItemY / 2);
    lv_medalProgressSubbarSpacingX = 3;
    lv_medalProgressSubbarSpacingY = 10;
    lv_medalProgressSubBarX = ((lv_medalProgressBarX - (lv_medalProgressSubbarSpacingX * 10)) / 9);
    lv_medalProgressSubBarY = ((lv_medalNameY - 1) - (lv_medalProgressSubbarSpacingY * 2));
    lv_medalProgressSubBarPositionXPrimary = (lv_medalNamePositionXPrimary + lv_spacingX);
    lv_medalProgressSubBarPositionXSecondary = (lv_medalNamePositionXSecondary + lv_spacingX);
    lv_medalProgressSubBarPositionY = (lv_medalItemOffsetY + ((lv_medalItemY / 2) + lv_medalProgressSubbarSpacingY));
    lv_medalProgressPointPositionXPrimary = (lv_medalNamePositionXPrimary + lv_medalProgressBarX);
    lv_medalProgressPointPositionXSecondary = (lv_medalNamePositionXSecondary + lv_medalProgressBarX);
    lv_medalProgressPointPositionY = (lv_medalItemOffsetY + (lv_medalItemY / 2));

    // Actions
    if (!runActions) {
        return true;
    }

    auto71031E25_var = 1;
    for ( ; auto71031E25_var <= auto71031E25_ae; auto71031E25_var += 1 ) {
        lv_medalItemOffsetY = ((lv_playerNameY + 47) + (lv_spacingY * 2));
        lv_medalProgressSubBarPositionY = (lv_medalItemOffsetY + ((lv_medalItemY / 2) + lv_medalProgressSubbarSpacingY));
        lv_medalProgressPointPositionY = (lv_medalItemOffsetY + (lv_medalItemY / 2));
        if ((PlayerType(auto71031E25_var) == c_playerTypeUser) && (PlayerStatus(auto71031E25_var) == c_playerStatusActive)) {
            DialogCreate(lv_dialogSizeX, lv_dialogSizeY, c_anchorBottomRight, lv_dialogOffsetX, lv_dialogOffsetY, true);
            gv_playerMedalsDialog[auto71031E25_var] = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_dialogSizeX, lv_dialogSizeY, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 50, c_anchorTop, 178, 29, StringExternal("Param/Value/445EA3AC"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemButton(gv_playerMedalsDialog[auto71031E25_var], 34, 34, c_anchorTopRight, 40, 30, StringToText(""), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_playerMedalsCloseButtons[auto71031E25_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], 34, 34, c_anchorTopRight, 40, 30, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_closebutton_normalandpressed.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
            lv_iLocal = 1;
            for ( ; ( (auto3937F14A_ai >= 0 && lv_iLocal <= auto3937F14A_ae) || (auto3937F14A_ai < 0 && lv_iLocal >= auto3937F14A_ae) ) ; lv_iLocal += auto3937F14A_ai ) {
                if ((ModI(lv_iLocal, 2) == 1)) {
                    libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalImageXY - 4), (lv_medalImageXY - 4), c_anchorTopLeft, (lv_medalItemXPositionPrimary + 2), (lv_medalItemOffsetY + 2), StringToText(""), "NOTD Medal Icons\\NOTD Medal T1.dds", c_triggerImageTypeNormal, false, Color(49.02, 49.02, 49.02), c_triggerBlendModeAdd);
                    gv_playerMedalsImage[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    gv_playerMedalsMedalItems[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_playerMedalsDialog[auto71031E25_var], 50, 50, c_anchorTopLeft, (lv_medalNamePositionXPrimary - 29), (lv_medalItemOffsetY + 5), StringToText(""), Color(100,100,100), false, 0.0);
                    gv_playerMedalsMedalPoints[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_playerMedalsDialog[auto71031E25_var], lv_medalNameX, lv_medalNameY, c_anchorTopLeft, lv_medalNamePositionXPrimary, (lv_medalItemOffsetY + 3), StringToText(""), Color(100,100,100), false, 0.0);
                    gv_playerMedalsMedalName[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalProgressBarX + 12), (lv_medalProgressBarY + 2), c_anchorTopLeft, (lv_medalNamePositionXPrimary - 6), (lv_medalProgressPointPositionY - 6), StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
                    lv_jLocal = 1;
                    for ( ; ( (auto56138A62_ai >= 0 && lv_jLocal <= auto56138A62_ae) || (auto56138A62_ai < 0 && lv_jLocal >= auto56138A62_ae) ) ; lv_jLocal += auto56138A62_ai ) {
                        libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalProgressSubBarX * 3), lv_medalProgressSubBarY, c_anchorTopLeft, ((FixedToInt((IntToFixed(lv_medalProgressSubBarX) * -1.0)) + lv_medalProgressSubBarPositionXPrimary) + ((lv_medalProgressSubbarSpacingX + lv_medalProgressSubBarX) * (lv_jLocal - 1))), (lv_medalProgressSubBarPositionY - 5), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        gv_playerMedalsMedalProgressSubBar[lv_jLocal][lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    }
                    libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalProgressPointXY + 11), (lv_medalProgressPointXY + 12), c_anchorTopLeft, (lv_medalProgressPointPositionXPrimary - 6), (lv_medalProgressPointPositionY - 11), StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_playerMedalsDialog[auto71031E25_var], 50, 50, c_anchorTopLeft, (lv_medalProgressPointPositionXPrimary + 11), (lv_medalProgressPointPositionY + 6), StringExternal("Param/Value/F57B0703"), Color(100,100,100), false, 0.0);
                    gv_playerMedalsMedalProgressPoints[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                }
                else {
                    libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalImageXY - 4), (lv_medalImageXY - 4), c_anchorTopLeft, (lv_medalItemXPositionSecondary + 2), (lv_medalItemOffsetY + 2), StringToText(""), "NOTD Medal Icons\\NOTD Medal T1.dds", c_triggerImageTypeNormal, false, Color(49.02, 49.02, 49.02), c_triggerBlendModeAdd);
                    gv_playerMedalsImage[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    gv_playerMedalsMedalItems[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_playerMedalsDialog[auto71031E25_var], 50, 50, c_anchorTopLeft, (lv_medalNamePositionXSecondary - 29), (lv_medalItemOffsetY + 5), StringToText(""), Color(100,100,100), false, 0.0);
                    gv_playerMedalsMedalPoints[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemLabel(gv_playerMedalsDialog[auto71031E25_var], lv_medalNameX, lv_medalNameY, c_anchorTopLeft, lv_medalNamePositionXSecondary, (lv_medalItemOffsetY + 3), StringToText(""), Color(100,100,100), false, 0.0);
                    gv_playerMedalsMedalName[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalProgressBarX + 12), (lv_medalProgressBarY + 2), c_anchorTopLeft, (lv_medalNamePositionXSecondary - 6), (lv_medalProgressPointPositionY - 6), StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
                    lv_jLocal = 1;
                    for ( ; ( (auto711448E5_ai >= 0 && lv_jLocal <= auto711448E5_ae) || (auto711448E5_ai < 0 && lv_jLocal >= auto711448E5_ae) ) ; lv_jLocal += auto711448E5_ai ) {
                        libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalProgressSubBarX * 3), lv_medalProgressSubBarY, c_anchorTopLeft, ((FixedToInt((IntToFixed(lv_medalProgressSubBarX) * -1.0)) + lv_medalProgressSubBarPositionXSecondary) + ((lv_medalProgressSubbarSpacingX + lv_medalProgressSubBarX) * (lv_jLocal - 1))), (lv_medalProgressSubBarPositionY - 5), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
                        gv_playerMedalsMedalProgressSubBar[lv_jLocal][lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    }
                    libNtve_gf_CreateDialogItemImage(gv_playerMedalsDialog[auto71031E25_var], (lv_medalProgressPointXY + 12), (lv_medalProgressPointXY + 12), c_anchorTopLeft, (lv_medalProgressPointPositionXSecondary - 6), (lv_medalProgressPointPositionY - 11), StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
                    libNtve_gf_CreateDialogItemLabel(gv_playerMedalsDialog[auto71031E25_var], 50, 50, c_anchorTopLeft, (lv_medalProgressPointPositionXSecondary + 11), (lv_medalProgressPointPositionY + 6), StringExternal("Param/Value/83D82517"), Color(100,100,100), false, 0.0);
                    gv_playerMedalsMedalProgressPoints[lv_iLocal][auto71031E25_var] = DialogControlLastCreated();
                    lv_medalItemOffsetY += (lv_medalItemY + 3);
                    lv_medalProgressSubBarPositionY += (lv_medalItemY + 3);
                    lv_medalProgressPointPositionY += (lv_medalItemY + 3);
                }
            }
            gf_PlayerMedalsSetMedalItems(auto71031E25_var);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 43, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 43, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 43, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 51, 10, StringExternal("Param/Value/65CFB7ED"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 129, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 137, 10, StringExternal("Param/Value/C4BB7400"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 129, 25, StringExternal("Param/Value/0DD8811D"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_playerMedalsStatsTabButtons[auto71031E25_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 198, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 206, 10, StringExternal("Param/Value/625B317B"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 198, 25, StringExternal("Param/Value/F6A170A8"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_playerMedalsTalentsTabButtons[auto71031E25_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 290, 32, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 290, 32, StringToText(""), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_playerMedalsScrollPreviousButtons[auto71031E25_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 323, 32, StringToText(""), gv_rankIcon[gv_playerRank[auto71031E25_var]], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_playerMedalsRankIcon[auto71031E25_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 375, 33, c_anchorBottomLeft, 356, 25, (gv_rankTitle[gv_playerRank[auto71031E25_var]] + PlayerName(auto71031E25_var)), Color(100.00, 100.00, 0.00), false, 0.0);
            gv_playerMedalsPlayerNameLabel[auto71031E25_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomRight, 80, 32, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 33, 33, c_anchorBottomRight, 80, 32, StringToText(""), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_playerMedalsScrollNextButtons[auto71031E25_var] = DialogControlLastCreated();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMedalsDialog_Init () {
    gt_CreateMedalsDialog = TriggerCreate("gt_CreateMedalsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Medals Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleMedalsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    unitgroup lv_medalsUnitsSelected;
    int lv_medalsIWantOpen;
    bool lv_medalsUnitConfirmed;
    bool lv_medalsIsOpen;

    // Automatic Variable Declarations
    const int auto6C5069FB_ae = 8;
    int auto6C5069FB_var;
    const int auto855BBC85_ae = 8;
    int auto855BBC85_var;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_medalsUnitsSelected = UnitGroupSelected(lv_triggeringPlayer);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_medalsDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C5069FB_var = 1;
    for ( ; auto6C5069FB_var <= auto6C5069FB_ae; auto6C5069FB_var += 1 ) {
        if ((PlayerStatus(auto6C5069FB_var) != c_playerStatusUnused)) {
            DialogSetVisible(gv_talentTree[auto6C5069FB_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            DialogSetVisible(gv_statsPlayerStatsDialog[auto6C5069FB_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[auto6C5069FB_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            DialogSetVisible(gv_wModWeaponsModDialog[auto6C5069FB_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            if ((lv_medalsUnitConfirmed == false) && (UnitGroupHasUnit(lv_medalsUnitsSelected, gv_marineHero[auto6C5069FB_var]) == true)) {
                if ((gv_marineHero[auto6C5069FB_var] == gv_marineHero[lv_triggeringPlayer])) {
                    lv_medalsUnitConfirmed = true;
                }

                lv_medalsIWantOpen = auto6C5069FB_var;
            }

        }

    }
    if ((lv_medalsIWantOpen <= 0)) {
        lv_medalsIWantOpen = lv_triggeringPlayer;
    }

    auto855BBC85_var = 1;
    for ( ; auto855BBC85_var <= auto855BBC85_ae; auto855BBC85_var += 1 ) {
        if ((auto855BBC85_var != lv_medalsIWantOpen) && (PlayerStatus(auto855BBC85_var) != c_playerStatusUnused)) {
            DialogSetVisible(gv_playerMedalsDialog[auto855BBC85_var], PlayerGroupSingle(lv_triggeringPlayer), false);
        }

    }
    if ((DialogIsVisible(gv_playerMedalsDialog[lv_medalsIWantOpen], lv_triggeringPlayer) == false)) {
        DialogSetVisible(gv_playerMedalsDialog[lv_medalsIWantOpen], PlayerGroupSingle(lv_triggeringPlayer), true);
    }
    else {
        DialogSetVisible(gv_playerMedalsDialog[lv_medalsIWantOpen], PlayerGroupSingle(lv_triggeringPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleMedalsDialog_Init () {
    gt_ToggleMedalsDialog = TriggerCreate("gt_ToggleMedalsDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleMedalsDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Close/Show Medal Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CloseShowMedalDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iLocal;
    bool lv_scrolled;

    // Automatic Variable Declarations
    const int auto985B738C_ae = 8;
    int auto985B738C_var;
    const int auto6E9C97F8_ae = 8;
    int auto6E9C97F8_var;
    const int auto170D1E9E_ae = 8;
    int auto170D1E9E_var;
    const int auto84BC4414_ae = 8;
    int auto84BC4414_var;
    const int autoF438CCBB_ae = 1;
    const int autoF438CCBB_ai = -1;
    int auto70177C3F_ae;
    const int auto70177C3F_ai = -1;
    const int auto55F0DBCE_ae = 8;
    int auto55F0DBCE_var;
    const int auto74CE6071_ae = 8;
    const int auto74CE6071_ai = 1;
    int auto6178E7C8_ae;
    const int auto6178E7C8_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[1]) || (DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[2]) || (DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[3]) || (DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[4]) || (DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[5]) || (DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[6]) || (DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[7]) || (DialogControlGetDialog(EventDialogControl()) == gv_playerMedalsDialog[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto985B738C_var = 1;
    for ( ; auto985B738C_var <= auto985B738C_ae; auto985B738C_var += 1 ) {
        if ((EventDialogControl() == gv_playerMedalsCloseButtons[auto985B738C_var])) {
            DialogSetVisible(gv_playerMedalsDialog[auto985B738C_var], PlayerGroupSingle(EventPlayer()), false);
            break;
        }

    }
    auto6E9C97F8_var = 1;
    for ( ; auto6E9C97F8_var <= auto6E9C97F8_ae; auto6E9C97F8_var += 1 ) {
        if ((EventDialogControl() == gv_playerMedalsStatsTabButtons[auto6E9C97F8_var])) {
            DialogSetVisible(gv_playerMedalsDialog[auto6E9C97F8_var], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_statsPlayerStatsDialog[auto6E9C97F8_var], PlayerGroupSingle(EventPlayer()), true);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[auto6E9C97F8_var], PlayerGroupSingle(EventPlayer()), true);
            break;
        }

    }
    auto170D1E9E_var = 1;
    for ( ; auto170D1E9E_var <= auto170D1E9E_ae; auto170D1E9E_var += 1 ) {
        if ((EventDialogControl() == gv_playerMedalsTalentsTabButtons[auto170D1E9E_var])) {
            DialogSetVisible(gv_playerMedalsDialog[auto170D1E9E_var], PlayerGroupSingle(EventPlayer()), false);
            DialogSetVisible(gv_talentTree[auto170D1E9E_var], PlayerGroupSingle(EventPlayer()), true);
            break;
        }

    }
    auto84BC4414_var = 1;
    for ( ; auto84BC4414_var <= auto84BC4414_ae; auto84BC4414_var += 1 ) {
        if ((EventDialogControl() == gv_playerMedalsScrollPreviousButtons[auto84BC4414_var])) {
            lv_iLocal = (auto84BC4414_var - 1);
            for ( ; ( (autoF438CCBB_ai >= 0 && lv_iLocal <= autoF438CCBB_ae) || (autoF438CCBB_ai < 0 && lv_iLocal >= autoF438CCBB_ae) ) ; lv_iLocal += autoF438CCBB_ai ) {
                if ((PlayerType(lv_iLocal) == c_playerTypeUser)) {
                    DialogSetVisible(gv_playerMedalsDialog[auto84BC4414_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_playerMedalsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    lv_scrolled = true;
                    break;
                }

                break;
            }
            if ((lv_scrolled == false)) {
                auto70177C3F_ae = (auto84BC4414_var + 1);
                lv_iLocal = 8;
                for ( ; ( (auto70177C3F_ai >= 0 && lv_iLocal <= auto70177C3F_ae) || (auto70177C3F_ai < 0 && lv_iLocal >= auto70177C3F_ae) ) ; lv_iLocal += auto70177C3F_ai ) {
                    if ((PlayerType(lv_iLocal) == c_playerTypeUser)) {
                        DialogSetVisible(gv_playerMedalsDialog[auto84BC4414_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_playerMedalsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        break;
                    }

                    break;
                }
            }

            break;
        }

    }
    auto55F0DBCE_var = 1;
    for ( ; auto55F0DBCE_var <= auto55F0DBCE_ae; auto55F0DBCE_var += 1 ) {
        if ((EventDialogControl() == gv_playerMedalsScrollNextButtons[auto55F0DBCE_var])) {
            lv_iLocal = (auto55F0DBCE_var + 1);
            for ( ; ( (auto74CE6071_ai >= 0 && lv_iLocal <= auto74CE6071_ae) || (auto74CE6071_ai < 0 && lv_iLocal >= auto74CE6071_ae) ) ; lv_iLocal += auto74CE6071_ai ) {
                if ((PlayerType(lv_iLocal) == c_playerTypeUser)) {
                    DialogSetVisible(gv_playerMedalsDialog[auto55F0DBCE_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_playerMedalsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    lv_scrolled = true;
                    break;
                }

                break;
            }
            if ((lv_scrolled == false)) {
                auto6178E7C8_ae = (auto55F0DBCE_var - 1);
                lv_iLocal = 1;
                for ( ; ( (auto6178E7C8_ai >= 0 && lv_iLocal <= auto6178E7C8_ae) || (auto6178E7C8_ai < 0 && lv_iLocal >= auto6178E7C8_ae) ) ; lv_iLocal += auto6178E7C8_ai ) {
                    if ((PlayerType(lv_iLocal) == c_playerTypeUser)) {
                        DialogSetVisible(gv_playerMedalsDialog[auto55F0DBCE_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_playerMedalsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        break;
                    }

                    break;
                }
            }

            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CloseShowMedalDialog_Init () {
    gt_CloseShowMedalDialog = TriggerCreate("gt_CloseShowMedalDialog_Func");
    TriggerAddEventDialogControl(gt_CloseShowMedalDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Stats Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateStatsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogX;
    int lv_dialogY;
    int lv_dialogOffsetX;
    int lv_dialogOffsetY;
    int lv_pentagonCenterPointX;
    int lv_pentagonCenterPointY;
    int lv_pentagonRadius;
    int lv_pentagon1stPointX;
    int lv_pentagon1stPointY;
    int lv_pentagon2ndPointX;
    int lv_pentagon2ndPointY;
    int lv_pentagon3rdPointX;
    int lv_pentagon3rdPointY;
    int lv_pentagon4thPointX;
    int lv_pentagon4thPointY;
    int lv_pentagon5thPointX;
    int lv_pentagon5thPointY;
    int lv_heroSizeXY;
    int lv_heroOffsetX;
    int lv_heroOffsetY;
    int lv_statImageBorderSizeXY;
    int lv_statImageArrowSizeXY;
    int lv_statImageSizeXY;
    int lv_stat1stImageBorderOffsetX;
    int lv_stat1stImageBorderOffsetY;
    int lv_stat1stImageOffsetX;
    int lv_stat1stImageOffsetY;
    int lv_stat1stDecreOffsetX;
    int lv_stat1stDecreOffsetY;
    int lv_stat1stIncreOffsetX;
    int lv_stat1stIncreOffsetY;
    int lv_stat2ndImageBorderOffsetX;
    int lv_stat2ndImageBorderOffsetY;
    int lv_stat2ndImageOffsetX;
    int lv_stat2ndImageOffsetY;
    int lv_stat2ndDecreOffsetX;
    int lv_stat2ndDecreOffsetY;
    int lv_stat2ndIncreOffsetX;
    int lv_stat2ndIncreOffsetY;
    int lv_stat3rdImageBorderOffsetX;
    int lv_stat3rdImageBorderOffsetY;
    int lv_stat3rdImageOffsetX;
    int lv_stat3rdImageOffsetY;
    int lv_stat3rdDecreOffsetX;
    int lv_stat3rdDecreOffsetY;
    int lv_stat3rdIncreOffsetX;
    int lv_stat3rdIncreOffsetY;
    int lv_stat4thImageBorderOffsetX;
    int lv_stat4thImageBorderOffsetY;
    int lv_stat4thImageOffsetX;
    int lv_stat4thImageOffsetY;
    int lv_stat4thDecreOffsetX;
    int lv_stat4thDecreOffsetY;
    int lv_stat4thIncreOffsetX;
    int lv_stat4thIncreOffsetY;
    int lv_stat5thImageBorderOffsetX;
    int lv_stat5thImageBorderOffsetY;
    int lv_stat5thImageOffsetX;
    int lv_stat5thImageOffsetY;
    int lv_stat5thDecreOffsetX;
    int lv_stat5thDecreOffsetY;
    int lv_stat5thIncreOffsetX;
    int lv_stat5thIncreOffsetY;
    int lv_statsFromMedals;
    string lv_file;
    int lv_i;
    int lv_xPosition;

    // Automatic Variable Declarations
    const int autoD307EE74_ae = 8;
    int autoD307EE74_var;
    const int auto57D3B49F_ae = 19;
    const int auto57D3B49F_ai = 1;

    // Variable Initialization
    lv_dialogX = 690;
    lv_dialogY = 610;
    lv_dialogOffsetX = 273;
    lv_dialogOffsetY = 433;
    lv_pentagonCenterPointX = 310;
    lv_pentagonCenterPointY = 241;
    lv_pentagonRadius = 120;
    lv_pentagon1stPointX = 461;
    lv_pentagon1stPointY = 131;
    lv_pentagon2ndPointX = 461;
    lv_pentagon2ndPointY = 186;
    lv_pentagon3rdPointX = 461;
    lv_pentagon3rdPointY = 241;
    lv_pentagon4thPointX = 461;
    lv_pentagon4thPointY = 296;
    lv_pentagon5thPointX = 461;
    lv_pentagon5thPointY = 351;
    lv_heroSizeXY = 150;
    lv_heroOffsetX = (lv_pentagonCenterPointX - (lv_heroSizeXY / 2));
    lv_heroOffsetY = (lv_pentagonCenterPointY - (lv_heroSizeXY / 2));
    lv_statImageBorderSizeXY = 60;
    lv_statImageArrowSizeXY = 40;
    lv_statImageSizeXY = 36;
    lv_stat1stImageBorderOffsetX = (lv_pentagon1stPointX - (lv_statImageBorderSizeXY / 2));
    lv_stat1stImageBorderOffsetY = (lv_pentagon1stPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat1stImageOffsetX = (lv_pentagon1stPointX - (lv_statImageSizeXY / 2));
    lv_stat1stImageOffsetY = (lv_pentagon1stPointY - (lv_statImageSizeXY / 2));
    lv_stat1stDecreOffsetX = (lv_stat1stImageBorderOffsetX - lv_statImageArrowSizeXY);
    lv_stat1stDecreOffsetY = (lv_pentagon1stPointY - (lv_statImageArrowSizeXY / 2));
    lv_stat1stIncreOffsetX = (lv_stat1stImageBorderOffsetX + lv_statImageBorderSizeXY);
    lv_stat1stIncreOffsetY = lv_stat1stDecreOffsetY;
    lv_stat2ndImageBorderOffsetX = (lv_pentagon2ndPointX - (lv_statImageBorderSizeXY / 2));
    lv_stat2ndImageBorderOffsetY = (lv_pentagon2ndPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat2ndImageOffsetX = (lv_pentagon2ndPointX - (lv_statImageSizeXY / 2));
    lv_stat2ndImageOffsetY = (lv_pentagon2ndPointY - (lv_statImageSizeXY / 2));
    lv_stat2ndDecreOffsetX = (lv_stat2ndImageBorderOffsetX - lv_statImageArrowSizeXY);
    lv_stat2ndDecreOffsetY = (lv_pentagon2ndPointY - (lv_statImageArrowSizeXY / 2));
    lv_stat2ndIncreOffsetX = (lv_stat2ndImageBorderOffsetX + lv_statImageBorderSizeXY);
    lv_stat2ndIncreOffsetY = lv_stat2ndDecreOffsetY;
    lv_stat3rdImageBorderOffsetX = (lv_pentagon3rdPointX - (lv_statImageBorderSizeXY / 2));
    lv_stat3rdImageBorderOffsetY = (lv_pentagon3rdPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat3rdImageOffsetX = (lv_pentagon3rdPointX - (lv_statImageSizeXY / 2));
    lv_stat3rdImageOffsetY = (lv_pentagon3rdPointY - (lv_statImageSizeXY / 2));
    lv_stat3rdDecreOffsetX = (lv_stat3rdImageBorderOffsetX - lv_statImageArrowSizeXY);
    lv_stat3rdDecreOffsetY = (lv_pentagon3rdPointY - (lv_statImageArrowSizeXY / 2));
    lv_stat3rdIncreOffsetX = (lv_stat3rdImageBorderOffsetX + lv_statImageBorderSizeXY);
    lv_stat3rdIncreOffsetY = lv_stat3rdDecreOffsetY;
    lv_stat4thImageBorderOffsetX = (lv_pentagon4thPointX - (lv_statImageBorderSizeXY / 2));
    lv_stat4thImageBorderOffsetY = (lv_pentagon4thPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat4thImageOffsetX = (lv_pentagon4thPointX - (lv_statImageSizeXY / 2));
    lv_stat4thImageOffsetY = (lv_pentagon4thPointY - (lv_statImageSizeXY / 2));
    lv_stat4thDecreOffsetX = (lv_stat4thImageBorderOffsetX - lv_statImageArrowSizeXY);
    lv_stat4thDecreOffsetY = (lv_pentagon4thPointY - (lv_statImageArrowSizeXY / 2));
    lv_stat4thIncreOffsetX = (lv_stat4thImageBorderOffsetX + lv_statImageBorderSizeXY);
    lv_stat4thIncreOffsetY = lv_stat4thDecreOffsetY;
    lv_stat5thImageBorderOffsetX = (lv_pentagon5thPointX - (lv_statImageBorderSizeXY / 2));
    lv_stat5thImageBorderOffsetY = (lv_pentagon5thPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat5thImageOffsetX = (lv_pentagon5thPointX - (lv_statImageSizeXY / 2));
    lv_stat5thImageOffsetY = (lv_pentagon5thPointY - (lv_statImageSizeXY / 2));
    lv_stat5thDecreOffsetX = (lv_stat5thImageBorderOffsetX - lv_statImageArrowSizeXY);
    lv_stat5thDecreOffsetY = (lv_pentagon5thPointY - (lv_statImageArrowSizeXY / 2));
    lv_stat5thIncreOffsetX = (lv_stat5thImageBorderOffsetX + lv_statImageBorderSizeXY);
    lv_stat5thIncreOffsetY = lv_stat5thDecreOffsetY;
    lv_file = "Assets\\Textures\\ui_research_frame_available_arrow_right.dds";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    autoD307EE74_var = 1;
    for ( ; autoD307EE74_var <= autoD307EE74_ae; autoD307EE74_var += 1 ) {
        if ((PlayerType(autoD307EE74_var) == c_playerTypeUser) && (PlayerStatus(autoD307EE74_var) == c_playerStatusActive)) {
            lv_statsFromMedals = 0;
            if ((gv_playerBankData[11][autoD307EE74_var] >= 150)) {
                lv_statsFromMedals += 1;
            }

            if ((gv_playerBankData[20][autoD307EE74_var] >= 150)) {
                lv_statsFromMedals += 1;
            }

            lv_i = 12;
            for ( ; ( (auto57D3B49F_ai >= 0 && lv_i <= auto57D3B49F_ae) || (auto57D3B49F_ai < 0 && lv_i >= auto57D3B49F_ae) ) ; lv_i += auto57D3B49F_ai ) {
                if ((gv_playerBankData[lv_i][autoD307EE74_var] >= 30)) {
                    lv_statsFromMedals += 1;
                }

            }
            gv_statsTotalStats[autoD307EE74_var] = (((gv_playerRank[autoD307EE74_var] * 2) + lv_statsFromMedals) - (gv_statsStrength1[autoD307EE74_var] + (gv_statsEndurance2[autoD307EE74_var] + (gv_statsAgility3[autoD307EE74_var] + (gv_statsPerception4[autoD307EE74_var] + gv_statsIntelligence5[autoD307EE74_var])))));
            DialogCreate(lv_dialogX, lv_dialogY, c_anchorBottomRight, lv_dialogOffsetX, lv_dialogOffsetY, true);
            gv_statsPlayerStatsDialog[autoD307EE74_var] = DialogLastCreated();
            DialogSetImageVisible(gv_statsPlayerStatsDialog[autoD307EE74_var], false);
            DialogSetVisible(gv_statsPlayerStatsDialog[autoD307EE74_var], PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), lv_dialogX, lv_dialogY, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 300, 300, c_anchorTopLeft, 291, 29, StringExternal("Param/Value/F87CFB3B"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialog[autoD307EE74_var], 34, 34, c_anchorTopRight, 40, 30, StringToText(""), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerStatCloseButton[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialog[autoD307EE74_var], 34, 34, c_anchorTopRight, 40, 30, StringToText(""), "Assets\\Textures\\ui_ingame_resourcesharing_closebutton_normalandpressed.dds", c_triggerImageTypeNormal, true, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 460, 200, c_anchorBottomLeft, 85, -44, StringExternal("Param/Value/1CAC6BE8"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 460, 200, c_anchorBottomLeft, 390, -44, IntToText(gv_playerLives[autoD307EE74_var]), Color(100,100,100), false, 0.0);
            gv_statsPlayerLivesLeft[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(gv_statsPlayerLivesLeft[autoD307EE74_var], "HelpPanelListBoxItemTitle", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 600, 50, c_anchorTopLeft, 85, 428, StringExternal("Param/Value/F97C2BBB"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 600, 50, c_anchorTopLeft, 390, 428, gv_rankFullTitle[(gv_playerRank[autoD307EE74_var] + 1)], Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpPanelListBoxItemTitle", PlayerGroupAll());
            gv_statsPlayerNextLevelPromotionLabel[autoD307EE74_var] = DialogControlLastCreated();
            DialogControlCreate(gv_statsPlayerStatsDialog[autoD307EE74_var], c_triggerControlTypeProgressBar);
            gv_statsPlayerNextLevelProgressBar[autoD307EE74_var] = DialogControlLastCreated();
            DialogControlSetSize(gv_statsPlayerNextLevelProgressBar[autoD307EE74_var], PlayerGroupAll(), 520, 37);
            DialogControlSetPosition(gv_statsPlayerNextLevelProgressBar[autoD307EE74_var], PlayerGroupAll(), c_anchorTopLeft, 85, 391);
            libNtve_gf_SetDialogItemMaximumValue(gv_statsPlayerNextLevelProgressBar[autoD307EE74_var], IntToFixed(gv_rankRequirement[(gv_playerRank[autoD307EE74_var] + 1)]), PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(gv_statsPlayerNextLevelProgressBar[autoD307EE74_var], 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(gv_statsPlayerNextLevelProgressBar[autoD307EE74_var], IntToFixed(gv_playerXP[autoD307EE74_var]), PlayerGroupAll());
            lv_xPosition = gf_StatsXPLabelXPosition(autoD307EE74_var);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 300, 52, c_anchorTopLeft, lv_xPosition, 401, (IntToText(gv_playerXP[autoD307EE74_var]) + (StringToText("") + StringToText(""))), Color(100,100,100), false, 2.0);
            gv_statsPlayerCurrentXP[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 300, 52, c_anchorTopLeft, 330, 401, StringExternal("Param/Value/5A1E58F7"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 300, 52, c_anchorTopLeft, 340, 401, (StringToText("") + (StringToText("") + IntToText(gv_rankRequirement[(gv_playerRank[autoD307EE74_var] + 1)]))), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            gv_statsPlayerNextXP[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 460, 200, c_anchorBottomLeft, 85, -69, StringExternal("Param/Value/A45AE382"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 460, 200, c_anchorBottomLeft, 390, -69, IntToText(gv_playerCredits[autoD307EE74_var]), Color(100,100,100), false, 0.0);
            gv_statsPlayerCashLabel[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(gv_statsPlayerCashLabel[autoD307EE74_var], "HelpPanelListBoxItemTitle", PlayerGroupAll());
            if ((gv_playerCredits[autoD307EE74_var] <= 0)) {
                PlayerModifyPropertyInt(autoD307EE74_var, c_playerPropTerrazine, c_playerPropOperSetTo, 0);
            }
            else {
                PlayerModifyPropertyInt(autoD307EE74_var, c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerCredits[autoD307EE74_var]);
            }
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 600, 200, c_anchorBottomLeft, 85, -94, StringExternal("Param/Value/DC5589B6"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[autoD307EE74_var], 600, 200, c_anchorBottomLeft, 390, -94, IntToText(gv_playerLifeTimeCreditsAcquired[autoD307EE74_var]), Color(100,100,100), false, 0.0);
            gv_statsPlayerCashAcquiredLabel[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(gv_statsPlayerCashAcquiredLabel[autoD307EE74_var], "HelpPanelListBoxItemTitle", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialog[autoD307EE74_var], 50, 50, c_anchorTopLeft, 180, 191, StringToText(""), "Assets\\Textures\\btn-ability-terran-experiencedplasmagun.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_statsPlayerStatsStatsHeroImage[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialog[autoD307EE74_var], 60, 60, c_anchorTopLeft, 175, 186, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialog[autoD307EE74_var], 50, 50, c_anchorTopLeft, 180, 191, StringExternal("Param/Value/2F8ED3CC"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerStatsStatsButton[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialog[autoD307EE74_var], 50, 50, c_anchorTopLeft, 180, 241, StringToText(""), "Assets\\Textures\\btn-ability-terran-experiencedplasmagun.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialog[autoD307EE74_var], 60, 60, c_anchorTopLeft, 175, 236, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialog[autoD307EE74_var], 50, 50, c_anchorTopLeft, 180, 241, StringExternal("Param/Value/353923EF"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModWeaponsModButton[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 43, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            if ((gv_playerXP[autoD307EE74_var] < 2000)) {
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoD307EE74_var), false);
            }

            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 51, 10, StringExternal("Param/Value/12A78CC7"), Color(100,100,100), false, 0.0);
            if ((gv_playerXP[autoD307EE74_var] < 2000)) {
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoD307EE74_var), false);
            }

            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 94, 48, c_anchorBottomLeft, 43, 25, StringExternal("Param/Value/C45021CB"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsMedalsTabButtons[autoD307EE74_var] = DialogControlLastCreated();
            if ((gv_playerXP[autoD307EE74_var] < 2000)) {
                DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(autoD307EE74_var), false);
            }

            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 129, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 129, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 129, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 77, 48, c_anchorBottomLeft, 137, 10, StringExternal("Param/Value/36BEC14D"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 198, 25, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 206, 10, StringExternal("Param/Value/835F6571"), Color(100,100,100), false, 0.0);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 96, 48, c_anchorBottomLeft, 198, 25, StringExternal("Param/Value/0BE35C72"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsTalentsTabButtons[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 290, 32, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 290, 32, StringToText(""), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsScrollPreviousButtons[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomLeft, 323, 32, StringToText(""), gv_rankIcon[gv_playerRank[autoD307EE74_var]], c_triggerImageTypeNormal, false, Color(100.00, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_statsRankIcon[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 375, 33, c_anchorBottomLeft, 356, 25, (gv_rankTitle[gv_playerRank[autoD307EE74_var]] + PlayerName(autoD307EE74_var)), Color(100.00, 100.00, 0.00), false, 0.0);
            gv_statsPlayerNameLabel[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 33, 33, c_anchorBottomRight, 80, 32, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 33, 33, c_anchorBottomRight, 80, 32, StringToText(""), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsScrollNextButtons[autoD307EE74_var] = DialogControlLastCreated();
            DialogCreate(lv_dialogX, lv_dialogY, c_anchorBottomRight, lv_dialogOffsetX, lv_dialogOffsetY, true);
            gv_statsPlayerStatsDialogStats[autoD307EE74_var] = DialogLastCreated();
            DialogSetImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], "Assets\\Textures\\black.dds");
            DialogSetImageVisible(gv_statsPlayerStatsDialogStats[autoD307EE74_var], false);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[autoD307EE74_var], PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialogStats[autoD307EE74_var], 500, 50, c_anchorTop, 104, 80, (StringExternal("Param/Value/8ED563C8") + IntToText(gv_statsTotalStats[autoD307EE74_var])), Color(100,100,100), false, 0.0);
            gv_statsPlayerStatAvailableLabel[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(gv_statsPlayerStatAvailableLabel[autoD307EE74_var], "HelpPanelListBoxItemTitle", PlayerGroupActive());
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_heroSizeXY, lv_heroSizeXY, c_anchorTopLeft, lv_heroOffsetX, lv_heroOffsetY, StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            gv_statsPlayerHeroImage[autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stImageBorderOffsetX, lv_stat1stImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat1stImageOffsetX, lv_stat1stImageOffsetY, StringToText(""), "Strength.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialogStats[autoD307EE74_var], 200, 200, c_anchorTopLeft, lv_pentagon1stPointX, lv_pentagon1stPointY, StringExternal("Param/Value/B15BDEED"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_statsPlayerStatLabel[1][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stImageBorderOffsetX, lv_stat1stImageBorderOffsetY, StringExternal("Param/Value/428B6248"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat1stDecreOffsetX, lv_stat1stDecreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
            gv_statsPlayerDecreImage[1][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stDecreOffsetX, lv_stat1stDecreOffsetY, StringExternal("Param/Value/3B84ED84"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerDecreButton[1][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat1stIncreOffsetX, lv_stat1stIncreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_statsPlayerIncreImage[1][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stIncreOffsetX, lv_stat1stIncreOffsetY, StringExternal("Param/Value/4D0B16FD"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerIncreButton[1][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndImageBorderOffsetX, lv_stat2ndImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat2ndImageOffsetX, lv_stat2ndImageOffsetY, StringToText(""), "Endurance.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialogStats[autoD307EE74_var], 200, 200, c_anchorTopLeft, lv_pentagon2ndPointX, lv_pentagon2ndPointY, StringExternal("Param/Value/5C1D1DCE"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_statsPlayerStatLabel[2][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndImageBorderOffsetX, lv_stat2ndImageBorderOffsetY, StringExternal("Param/Value/F6C699AD"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat2ndDecreOffsetX, lv_stat2ndDecreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
            gv_statsPlayerDecreImage[2][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndDecreOffsetX, lv_stat2ndDecreOffsetY, StringExternal("Param/Value/E3B7256B"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerDecreButton[2][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat2ndIncreOffsetX, lv_stat2ndIncreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_statsPlayerIncreImage[2][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndIncreOffsetX, lv_stat2ndIncreOffsetY, StringExternal("Param/Value/F7FBBAF9"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerIncreButton[2][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdImageBorderOffsetX, lv_stat3rdImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat3rdImageOffsetX, lv_stat3rdImageOffsetY, StringToText(""), "Agility.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialogStats[autoD307EE74_var], 200, 200, c_anchorTopLeft, lv_pentagon3rdPointX, lv_pentagon3rdPointY, StringExternal("Param/Value/5C265D87"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_statsPlayerStatLabel[3][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdImageBorderOffsetX, lv_stat3rdImageBorderOffsetY, StringExternal("Param/Value/CC26501C"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat3rdDecreOffsetX, lv_stat3rdDecreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
            gv_statsPlayerDecreImage[3][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdDecreOffsetX, lv_stat3rdDecreOffsetY, StringExternal("Param/Value/6F6393C3"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerDecreButton[3][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat3rdIncreOffsetX, lv_stat3rdDecreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_statsPlayerIncreImage[3][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdIncreOffsetX, lv_stat3rdIncreOffsetY, StringExternal("Param/Value/A7B90EEC"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerIncreButton[3][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thImageBorderOffsetX, lv_stat4thImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat4thImageOffsetX, lv_stat4thImageOffsetY, StringToText(""), "Perception.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialogStats[autoD307EE74_var], 200, 200, c_anchorTopLeft, lv_pentagon4thPointX, lv_pentagon4thPointY, StringExternal("Param/Value/97B07695"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_statsPlayerStatLabel[4][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thImageBorderOffsetX, lv_stat4thImageBorderOffsetY, StringExternal("Param/Value/23CF1D86"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat4thDecreOffsetX, lv_stat4thDecreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
            gv_statsPlayerDecreImage[4][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thDecreOffsetX, lv_stat4thDecreOffsetY, StringExternal("Param/Value/32831676"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerDecreButton[4][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat4thIncreOffsetX, lv_stat4thIncreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_statsPlayerIncreImage[4][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thIncreOffsetX, lv_stat4thIncreOffsetY, StringExternal("Param/Value/06D92E11"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerIncreButton[4][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thImageBorderOffsetX, lv_stat5thImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat5thImageOffsetX, lv_stat5thImageOffsetY, StringToText(""), "Intelligence.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialogStats[autoD307EE74_var], 200, 200, c_anchorTopLeft, lv_pentagon5thPointX, lv_pentagon5thPointY, StringExternal("Param/Value/B60D651B"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_statsPlayerStatLabel[5][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thImageBorderOffsetX, lv_stat5thImageBorderOffsetY, StringExternal("Param/Value/F5C2082B"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat5thDecreOffsetX, lv_stat5thDecreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            libNtve_gf_SetDialogItemRotation(DialogControlLastCreated(), 180, PlayerGroupAll());
            gv_statsPlayerDecreImage[5][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thDecreOffsetX, lv_stat5thDecreOffsetY, StringExternal("Param/Value/C85A2102"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerDecreButton[5][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageArrowSizeXY, lv_statImageArrowSizeXY, c_anchorTopLeft, lv_stat5thIncreOffsetX, lv_stat5thIncreOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_statsPlayerIncreImage[5][autoD307EE74_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_statsPlayerStatsDialogStats[autoD307EE74_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thIncreOffsetX, lv_stat5thIncreOffsetY, StringExternal("Param/Value/04901857"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_statsPlayerIncreButton[5][autoD307EE74_var] = DialogControlLastCreated();
            gf_StatsUpdateAllStatsText(autoD307EE74_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateStatsDialog_Init () {
    gt_CreateStatsDialog = TriggerCreate("gt_CreateStatsDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Stats Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleStatsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    unitgroup lv_statsUnitsSelected;
    int lv_statsIWantOpen;
    bool lv_statsUnitConfirmed;
    bool lv_statsIsOpen;

    // Automatic Variable Declarations
    const int auto241C7495_ae = 8;
    int auto241C7495_var;
    const int auto449637D9_ae = 8;
    int auto449637D9_var;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_statsUnitsSelected = UnitGroupSelected(lv_triggeringPlayer);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statsDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto241C7495_var = 1;
    for ( ; auto241C7495_var <= auto241C7495_ae; auto241C7495_var += 1 ) {
        if ((PlayerStatus(auto241C7495_var) != c_playerStatusUnused)) {
            DialogSetVisible(gv_talentTree[auto241C7495_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            DialogSetVisible(gv_playerMedalsDialog[auto241C7495_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            DialogSetVisible(gv_wModWeaponsModDialog[auto241C7495_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            if ((lv_statsUnitConfirmed == false) && (UnitGroupHasUnit(lv_statsUnitsSelected, gv_marineHero[auto241C7495_var]) == true)) {
                if ((gv_marineHero[auto241C7495_var] == gv_marineHero[lv_triggeringPlayer])) {
                    lv_statsUnitConfirmed = true;
                }

                lv_statsIWantOpen = auto241C7495_var;
            }

        }

    }
    auto449637D9_var = 1;
    for ( ; auto449637D9_var <= auto449637D9_ae; auto449637D9_var += 1 ) {
        if ((auto449637D9_var != lv_statsIWantOpen) && (PlayerStatus(auto449637D9_var) != c_playerStatusUnused)) {
            DialogSetVisible(gv_statsPlayerStatsDialog[auto449637D9_var], PlayerGroupSingle(lv_triggeringPlayer), false);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[auto449637D9_var], PlayerGroupSingle(lv_triggeringPlayer), false);
        }

    }
    if ((DialogIsVisible(gv_statsPlayerStatsDialog[lv_statsIWantOpen], lv_triggeringPlayer) == false)) {
        DialogSetVisible(gv_statsPlayerStatsDialog[lv_statsIWantOpen], PlayerGroupSingle(lv_triggeringPlayer), true);
        DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_statsIWantOpen], PlayerGroupSingle(lv_triggeringPlayer), true);
    }
    else {
        DialogSetVisible(gv_statsPlayerStatsDialog[lv_statsIWantOpen], PlayerGroupSingle(lv_triggeringPlayer), false);
        DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_statsIWantOpen], PlayerGroupSingle(lv_triggeringPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleStatsDialog_Init () {
    gt_ToggleStatsDialog = TriggerCreate("gt_ToggleStatsDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleStatsDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify Hero Stats
//--------------------------------------------------------------------------------------------------
bool gt_ModifyHeroStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_clickingPlayer;
    bool lv_continue;
    int lv_strEnAgPeIn;
    int lv_ownerofDialogItem;
    bool lv_incre;
    bool lv_decre;
    bool lv_close;
    int lv_iLocal;
    bool lv_scrolled;

    // Automatic Variable Declarations
    const int autoC7D9A91C_ae = 8;
    int autoC7D9A91C_var;
    const int auto303EBE0F_ae = 1;
    const int auto303EBE0F_ai = -1;
    int autoF3A63BD9_ae;
    const int autoF3A63BD9_ai = -1;
    const int auto03B11FD3_ae = 8;
    int auto03B11FD3_var;
    const int autoDA8F2915_ae = 8;
    const int autoDA8F2915_ai = 1;
    int auto17F69554_ae;
    const int auto17F69554_ai = 1;
    const int autoCAF6B035_ae = 8;
    int autoCAF6B035_var;
    const int auto55D9A034_ae = 8;
    int auto55D9A034_var;
    const int autoAFB8FC5E_ae = 8;
    int autoAFB8FC5E_var;
    const int autoC20626CA_ae = 8;
    int autoC20626CA_var;
    const int auto89A35D9B_ae = 8;
    int auto89A35D9B_var;
    const int auto7553133E_ae = 8;
    int auto7553133E_var;
    const int auto728BACC3_ae = 8;
    int auto728BACC3_var;
    const int auto35DF0839_ae = 8;
    int auto35DF0839_var;
    const int autoD10B270F_ae = 8;
    int autoD10B270F_var;
    const int autoFE7C6F86_ae = 8;
    int autoFE7C6F86_var;
    const int autoCDB4B8DB_ae = 8;
    int autoCDB4B8DB_var;
    const int autoB6E5E373_ae = 8;
    int autoB6E5E373_var;
    const int autoA06C4270_ae = 8;
    int autoA06C4270_var;

    // Variable Initialization
    lv_clickingPlayer = EventPlayer();
    lv_continue = true;

    // Conditions
    if (testConds) {
        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[1]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[2]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[3]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[4]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[5]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[6]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[7]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialogStats[8]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[1]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[2]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[3]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[4]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[5]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[6]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[7]) || (DialogControlGetDialog(EventDialogControl()) == gv_statsPlayerStatsDialog[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC7D9A91C_var = 1;
    for ( ; autoC7D9A91C_var <= autoC7D9A91C_ae; autoC7D9A91C_var += 1 ) {
        if ((EventDialogControl() == gv_statsScrollPreviousButtons[autoC7D9A91C_var])) {
            lv_iLocal = (autoC7D9A91C_var - 1);
            for ( ; ( (auto303EBE0F_ai >= 0 && lv_iLocal <= auto303EBE0F_ae) || (auto303EBE0F_ai < 0 && lv_iLocal >= auto303EBE0F_ae) ) ; lv_iLocal += auto303EBE0F_ai ) {
                if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                    DialogSetVisible(gv_statsPlayerStatsDialog[autoC7D9A91C_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[autoC7D9A91C_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_wModWeaponsModDialog[autoC7D9A91C_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_statsPlayerStatsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    lv_scrolled = true;
                    break;
                }

            }
            if ((lv_scrolled == false)) {
                autoF3A63BD9_ae = (autoC7D9A91C_var + 1);
                lv_iLocal = 8;
                for ( ; ( (autoF3A63BD9_ai >= 0 && lv_iLocal <= autoF3A63BD9_ae) || (autoF3A63BD9_ai < 0 && lv_iLocal >= autoF3A63BD9_ae) ) ; lv_iLocal += autoF3A63BD9_ai ) {
                    if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                        DialogSetVisible(gv_statsPlayerStatsDialog[autoC7D9A91C_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_statsPlayerStatsDialogStats[autoC7D9A91C_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_wModWeaponsModDialog[autoC7D9A91C_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_statsPlayerStatsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        break;
                    }

                }
            }

            break;
        }

    }
    auto03B11FD3_var = 1;
    for ( ; auto03B11FD3_var <= auto03B11FD3_ae; auto03B11FD3_var += 1 ) {
        if ((EventDialogControl() == gv_statsScrollNextButtons[auto03B11FD3_var])) {
            lv_iLocal = (auto03B11FD3_var + 1);
            for ( ; ( (autoDA8F2915_ai >= 0 && lv_iLocal <= autoDA8F2915_ae) || (autoDA8F2915_ai < 0 && lv_iLocal >= autoDA8F2915_ae) ) ; lv_iLocal += autoDA8F2915_ai ) {
                if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                    DialogSetVisible(gv_statsPlayerStatsDialog[auto03B11FD3_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[auto03B11FD3_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_wModWeaponsModDialog[auto03B11FD3_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_statsPlayerStatsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    lv_scrolled = true;
                    break;
                }

            }
            if ((lv_scrolled == false)) {
                auto17F69554_ae = (auto03B11FD3_var - 1);
                lv_iLocal = 1;
                for ( ; ( (auto17F69554_ai >= 0 && lv_iLocal <= auto17F69554_ae) || (auto17F69554_ai < 0 && lv_iLocal >= auto17F69554_ae) ) ; lv_iLocal += auto17F69554_ai ) {
                    if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                        DialogSetVisible(gv_statsPlayerStatsDialog[auto03B11FD3_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_statsPlayerStatsDialogStats[auto03B11FD3_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_wModWeaponsModDialog[auto03B11FD3_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_statsPlayerStatsDialog[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        break;
                    }

                }
            }

            break;
        }

    }
    autoCAF6B035_var = 1;
    for ( ; autoCAF6B035_var <= autoCAF6B035_ae; autoCAF6B035_var += 1 ) {
        if ((EventDialogControl() == gv_statsPlayerStatCloseButton[autoCAF6B035_var])) {
            lv_close = true;
            DialogSetVisible(gv_statsPlayerStatsDialog[autoCAF6B035_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[autoCAF6B035_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_wModWeaponsModDialog[autoCAF6B035_var], PlayerGroupSingle(lv_clickingPlayer), false);
            break;
        }

    }
    auto55D9A034_var = 1;
    for ( ; auto55D9A034_var <= auto55D9A034_ae; auto55D9A034_var += 1 ) {
        if ((EventDialogControl() == gv_statsMedalsTabButtons[auto55D9A034_var])) {
            lv_close = true;
            DialogSetVisible(gv_statsPlayerStatsDialog[auto55D9A034_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[auto55D9A034_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_wModWeaponsModDialog[auto55D9A034_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_playerMedalsDialog[auto55D9A034_var], PlayerGroupSingle(lv_clickingPlayer), true);
            break;
        }

    }
    autoAFB8FC5E_var = 1;
    for ( ; autoAFB8FC5E_var <= autoAFB8FC5E_ae; autoAFB8FC5E_var += 1 ) {
        if ((EventDialogControl() == gv_statsTalentsTabButtons[autoAFB8FC5E_var])) {
            lv_close = true;
            DialogSetVisible(gv_statsPlayerStatsDialog[autoAFB8FC5E_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[autoAFB8FC5E_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_wModWeaponsModDialog[autoAFB8FC5E_var], PlayerGroupSingle(lv_clickingPlayer), false);
            DialogSetVisible(gv_talentTree[autoAFB8FC5E_var], PlayerGroupSingle(lv_clickingPlayer), true);
            break;
        }

    }
    if ((lv_close == false) && (gv_wave <= 2)) {
        autoC20626CA_var = 1;
        for ( ; autoC20626CA_var <= autoC20626CA_ae; autoC20626CA_var += 1 ) {
            if ((EventDialogControl() == gv_statsPlayerIncreButton[1][autoC20626CA_var])) {
                lv_continue = false;
                lv_strEnAgPeIn = 1;
                lv_ownerofDialogItem = autoC20626CA_var;
                lv_incre = true;
                break;
            }

        }
        auto89A35D9B_var = 1;
        for ( ; auto89A35D9B_var <= auto89A35D9B_ae; auto89A35D9B_var += 1 ) {
            if ((lv_continue == true)) {
                if ((EventDialogControl() == gv_statsPlayerDecreButton[1][auto89A35D9B_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 1;
                    lv_ownerofDialogItem = auto89A35D9B_var;
                    lv_decre = true;
                    break;
                }

            }

        }
        if ((lv_continue == true)) {
            auto7553133E_var = 1;
            for ( ; auto7553133E_var <= auto7553133E_ae; auto7553133E_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerIncreButton[2][auto7553133E_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 2;
                    lv_ownerofDialogItem = auto7553133E_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto728BACC3_var = 1;
            for ( ; auto728BACC3_var <= auto728BACC3_ae; auto728BACC3_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerDecreButton[2][auto728BACC3_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 2;
                    lv_ownerofDialogItem = auto728BACC3_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto35DF0839_var = 1;
            for ( ; auto35DF0839_var <= auto35DF0839_ae; auto35DF0839_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerIncreButton[3][auto35DF0839_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 3;
                    lv_ownerofDialogItem = auto35DF0839_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            autoD10B270F_var = 1;
            for ( ; autoD10B270F_var <= autoD10B270F_ae; autoD10B270F_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerDecreButton[3][autoD10B270F_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 3;
                    lv_ownerofDialogItem = autoD10B270F_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            autoFE7C6F86_var = 1;
            for ( ; autoFE7C6F86_var <= autoFE7C6F86_ae; autoFE7C6F86_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerIncreButton[4][autoFE7C6F86_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 4;
                    lv_ownerofDialogItem = autoFE7C6F86_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            autoCDB4B8DB_var = 1;
            for ( ; autoCDB4B8DB_var <= autoCDB4B8DB_ae; autoCDB4B8DB_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerDecreButton[4][autoCDB4B8DB_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 4;
                    lv_ownerofDialogItem = autoCDB4B8DB_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            autoB6E5E373_var = 1;
            for ( ; autoB6E5E373_var <= autoB6E5E373_ae; autoB6E5E373_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerIncreButton[5][autoB6E5E373_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 5;
                    lv_ownerofDialogItem = autoB6E5E373_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            autoA06C4270_var = 1;
            for ( ; autoA06C4270_var <= autoA06C4270_ae; autoA06C4270_var += 1 ) {
                if ((EventDialogControl() == gv_statsPlayerDecreButton[5][autoA06C4270_var])) {
                    lv_continue = false;
                    lv_strEnAgPeIn = 5;
                    lv_ownerofDialogItem = autoA06C4270_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_ownerofDialogItem == lv_clickingPlayer)) {
            if (((lv_strEnAgPeIn == 1) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_statsStrength1[lv_ownerofDialogItem] < 9) && (gv_statsTotalStats[lv_ownerofDialogItem] > 0))) {
                    gf_StatsAddStrength(lv_ownerofDialogItem);
                    gf_StatsUpdateStrengthText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] -= 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_statsStrength1[lv_ownerofDialogItem] > 0))) {
                    gf_StatsRemoveStrength(lv_ownerofDialogItem);
                    gf_StatsUpdateStrengthText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] += 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_strEnAgPeIn == 2) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_statsEndurance2[lv_ownerofDialogItem] < 9) && (gv_statsTotalStats[lv_ownerofDialogItem] > 0))) {
                    gf_StatsAddEndurance(lv_ownerofDialogItem);
                    gf_StatsUpdateEnduranceText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] -= 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_statsEndurance2[lv_ownerofDialogItem] > 0))) {
                    gf_StatsRemoveEndurance(lv_ownerofDialogItem);
                    gf_StatsUpdateEnduranceText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] += 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_strEnAgPeIn == 3) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_statsAgility3[lv_ownerofDialogItem] < 9) && (gv_statsTotalStats[lv_ownerofDialogItem] > 0))) {
                    gf_StatsAddAgility(lv_ownerofDialogItem);
                    gf_StatsUpdateAgilityText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] -= 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_statsAgility3[lv_ownerofDialogItem] > 0))) {
                    gf_StatsRemoveAgility(lv_ownerofDialogItem);
                    gf_StatsUpdateAgilityText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] += 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_strEnAgPeIn == 4) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_statsPerception4[lv_ownerofDialogItem] < 9) && (gv_statsTotalStats[lv_ownerofDialogItem] > 0))) {
                    gf_StatsAddPerception(lv_ownerofDialogItem);
                    gf_StatsUpdatePerceptionText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] -= 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_statsPerception4[lv_ownerofDialogItem] > 0))) {
                    gf_StatsRemovePerception(lv_ownerofDialogItem);
                    gf_StatsUpdatePerceptionText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] += 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_strEnAgPeIn == 5) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_statsIntelligence5[lv_ownerofDialogItem] < 9) && (gv_statsTotalStats[lv_ownerofDialogItem] > 0))) {
                    gf_StatsAddIntelligence(lv_ownerofDialogItem);
                    gf_StatsUpdateIntelligenceText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] -= 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_statsIntelligence5[lv_ownerofDialogItem] > 0))) {
                    gf_StatsRemoveIntelligence(lv_ownerofDialogItem);
                    gf_StatsUpdateIntelligenceText(lv_ownerofDialogItem);
                    gv_statsTotalStats[lv_ownerofDialogItem] += 1;
                    gf_StatsUpdateAvailableStatsText(lv_ownerofDialogItem);
                }
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModifyHeroStats_Init () {
    gt_ModifyHeroStats = TriggerCreate("gt_ModifyHeroStats_Func");
    TriggerAddEventDialogControl(gt_ModifyHeroStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Weapons Mod Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateWeaponsModDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dialogX;
    int lv_dialogY;
    int lv_dialogOffsetX;
    int lv_dialogOffsetY;
    int lv_pentagonCenterPointX;
    int lv_pentagonCenterPointY;
    int lv_pentagonRadius;
    int lv_pentagon1stPointX;
    int lv_pentagon1stPointY;
    int lv_pentagon2ndPointX;
    int lv_pentagon2ndPointY;
    int lv_pentagon3rdPointX;
    int lv_pentagon3rdPointY;
    int lv_pentagon4thPointX;
    int lv_pentagon4thPointY;
    int lv_pentagon5thPointX;
    int lv_pentagon5thPointY;
    int lv_pentagon6thPointX;
    int lv_pentagon6thPointY;
    int lv_pentagon7thPointX;
    int lv_pentagon7thPointY;
    int lv_heroSizeXY;
    int lv_heroOffsetX;
    int lv_heroOffsetY;
    int lv_statImageBorderSizeXY;
    int lv_statImageBorderSizeXY2;
    int lv_statImageSizeXY;
    int lv_stat1stImageBorderOffsetX;
    int lv_stat1stImageBorderOffsetY;
    int lv_stat1stImageOffsetX;
    int lv_stat1stImageOffsetY;
    int lv_stat1stDecreOffsetX;
    int lv_stat1stDecreOffsetY;
    int lv_stat1stIncreOffsetX;
    int lv_stat1stIncreOffsetY;
    int lv_stat2ndImageBorderOffsetX;
    int lv_stat2ndImageBorderOffsetY;
    int lv_stat2ndImageOffsetX;
    int lv_stat2ndImageOffsetY;
    int lv_stat2ndDecreOffsetX;
    int lv_stat2ndDecreOffsetY;
    int lv_stat2ndIncreOffsetX;
    int lv_stat2ndIncreOffsetY;
    int lv_stat3rdImageBorderOffsetX;
    int lv_stat3rdImageBorderOffsetY;
    int lv_stat3rdImageOffsetX;
    int lv_stat3rdImageOffsetY;
    int lv_stat3rdDecreOffsetX;
    int lv_stat3rdDecreOffsetY;
    int lv_stat3rdIncreOffsetX;
    int lv_stat3rdIncreOffsetY;
    int lv_stat4thImageBorderOffsetX;
    int lv_stat4thImageBorderOffsetY;
    int lv_stat4thImageOffsetX;
    int lv_stat4thImageOffsetY;
    int lv_stat4thDecreOffsetX;
    int lv_stat4thDecreOffsetY;
    int lv_stat4thIncreOffsetX;
    int lv_stat4thIncreOffsetY;
    int lv_stat5thImageBorderOffsetX;
    int lv_stat5thImageBorderOffsetY;
    int lv_stat5thImageOffsetX;
    int lv_stat5thImageOffsetY;
    int lv_stat5thDecreOffsetX;
    int lv_stat5thDecreOffsetY;
    int lv_stat5thIncreOffsetX;
    int lv_stat5thIncreOffsetY;
    int lv_stat6thImageBorderOffsetX;
    int lv_stat6thImageBorderOffsetY;
    int lv_stat6thImageOffsetX;
    int lv_stat6thImageOffsetY;
    int lv_stat6thDecreOffsetX;
    int lv_stat6thDecreOffsetY;
    int lv_stat6thIncreOffsetX;
    int lv_stat6thIncreOffsetY;
    int lv_stat7thImageBorderOffsetX;
    int lv_stat7thImageBorderOffsetY;
    int lv_stat7thImageOffsetX;
    int lv_stat7thImageOffsetY;
    int lv_stat7thDecreOffsetX;
    int lv_stat7thDecreOffsetY;
    int lv_stat7thIncreOffsetX;
    int lv_stat7thIncreOffsetY;
    string lv_rightArrowFile;
    string lv_leftArrowFile;
    int lv_i;

    // Automatic Variable Declarations
    const int auto488AF33C_ae = 8;
    int auto488AF33C_var;

    // Variable Initialization
    lv_dialogX = 690;
    lv_dialogY = 610;
    lv_dialogOffsetX = 273;
    lv_dialogOffsetY = 433;
    lv_pentagonCenterPointX = 310;
    lv_pentagonCenterPointY = 241;
    lv_pentagonRadius = 120;
    lv_pentagon1stPointX = 471;
    lv_pentagon1stPointY = 123;
    lv_pentagon2ndPointX = 471;
    lv_pentagon2ndPointY = 161;
    lv_pentagon3rdPointX = 471;
    lv_pentagon3rdPointY = 199;
    lv_pentagon4thPointX = 471;
    lv_pentagon4thPointY = 237;
    lv_pentagon5thPointX = 471;
    lv_pentagon5thPointY = 275;
    lv_pentagon6thPointX = 471;
    lv_pentagon6thPointY = 313;
    lv_pentagon7thPointX = 471;
    lv_pentagon7thPointY = 351;
    lv_heroSizeXY = 150;
    lv_heroOffsetX = (lv_pentagonCenterPointX - (lv_heroSizeXY / 2));
    lv_heroOffsetY = (lv_pentagonCenterPointY - (lv_heroSizeXY / 2));
    lv_statImageBorderSizeXY = 34;
    lv_statImageBorderSizeXY2 = 46;
    lv_statImageSizeXY = 30;
    lv_stat1stImageBorderOffsetX = (lv_pentagon1stPointX - (lv_statImageBorderSizeXY2 / 2));
    lv_stat1stImageBorderOffsetY = (lv_pentagon1stPointY - (lv_statImageBorderSizeXY2 / 2));
    lv_stat1stImageOffsetX = (lv_pentagon1stPointX - (lv_statImageSizeXY / 2));
    lv_stat1stImageOffsetY = (lv_pentagon1stPointY - (lv_statImageSizeXY / 2));
    lv_stat1stDecreOffsetX = (lv_pentagon1stPointX - (lv_statImageBorderSizeXY + (lv_statImageSizeXY / 2)));
    lv_stat1stDecreOffsetY = (lv_pentagon1stPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat1stIncreOffsetX = (lv_pentagon1stPointX + (lv_statImageSizeXY / 2));
    lv_stat1stIncreOffsetY = lv_stat1stDecreOffsetY;
    lv_stat2ndImageBorderOffsetX = (lv_pentagon2ndPointX - (lv_statImageBorderSizeXY2 / 2));
    lv_stat2ndImageBorderOffsetY = (lv_pentagon2ndPointY - (lv_statImageBorderSizeXY2 / 2));
    lv_stat2ndImageOffsetX = (lv_pentagon2ndPointX - (lv_statImageSizeXY / 2));
    lv_stat2ndImageOffsetY = (lv_pentagon2ndPointY - (lv_statImageSizeXY / 2));
    lv_stat2ndDecreOffsetX = (lv_pentagon2ndPointX - (lv_statImageBorderSizeXY + (lv_statImageSizeXY / 2)));
    lv_stat2ndDecreOffsetY = (lv_pentagon2ndPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat2ndIncreOffsetX = (lv_pentagon2ndPointX + (lv_statImageSizeXY / 2));
    lv_stat2ndIncreOffsetY = lv_stat2ndDecreOffsetY;
    lv_stat3rdImageBorderOffsetX = (lv_pentagon3rdPointX - (lv_statImageBorderSizeXY2 / 2));
    lv_stat3rdImageBorderOffsetY = (lv_pentagon3rdPointY - (lv_statImageBorderSizeXY2 / 2));
    lv_stat3rdImageOffsetX = (lv_pentagon3rdPointX - (lv_statImageSizeXY / 2));
    lv_stat3rdImageOffsetY = (lv_pentagon3rdPointY - (lv_statImageSizeXY / 2));
    lv_stat3rdDecreOffsetX = (lv_pentagon3rdPointX - (lv_statImageBorderSizeXY + (lv_statImageSizeXY / 2)));
    lv_stat3rdDecreOffsetY = (lv_pentagon3rdPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat3rdIncreOffsetX = (lv_pentagon3rdPointX + (lv_statImageSizeXY / 2));
    lv_stat3rdIncreOffsetY = lv_stat3rdDecreOffsetY;
    lv_stat4thImageBorderOffsetX = (lv_pentagon4thPointX - (lv_statImageBorderSizeXY2 / 2));
    lv_stat4thImageBorderOffsetY = (lv_pentagon4thPointY - (lv_statImageBorderSizeXY2 / 2));
    lv_stat4thImageOffsetX = (lv_pentagon4thPointX - (lv_statImageSizeXY / 2));
    lv_stat4thImageOffsetY = (lv_pentagon4thPointY - (lv_statImageSizeXY / 2));
    lv_stat4thDecreOffsetX = (lv_pentagon4thPointX - (lv_statImageBorderSizeXY + (lv_statImageSizeXY / 2)));
    lv_stat4thDecreOffsetY = (lv_pentagon4thPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat4thIncreOffsetX = (lv_pentagon4thPointX + (lv_statImageSizeXY / 2));
    lv_stat4thIncreOffsetY = lv_stat4thDecreOffsetY;
    lv_stat5thImageBorderOffsetX = (lv_pentagon5thPointX - (lv_statImageBorderSizeXY2 / 2));
    lv_stat5thImageBorderOffsetY = (lv_pentagon5thPointY - (lv_statImageBorderSizeXY2 / 2));
    lv_stat5thImageOffsetX = (lv_pentagon5thPointX - (lv_statImageSizeXY / 2));
    lv_stat5thImageOffsetY = (lv_pentagon5thPointY - (lv_statImageSizeXY / 2));
    lv_stat5thDecreOffsetX = (lv_pentagon5thPointX - (lv_statImageBorderSizeXY + (lv_statImageSizeXY / 2)));
    lv_stat5thDecreOffsetY = (lv_pentagon5thPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat5thIncreOffsetX = (lv_pentagon5thPointX + (lv_statImageSizeXY / 2));
    lv_stat5thIncreOffsetY = (lv_pentagon5thPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat6thImageBorderOffsetX = (lv_pentagon6thPointX - (lv_statImageBorderSizeXY2 / 2));
    lv_stat6thImageBorderOffsetY = (lv_pentagon6thPointY - (lv_statImageBorderSizeXY2 / 2));
    lv_stat6thImageOffsetX = (lv_pentagon6thPointX - (lv_statImageSizeXY / 2));
    lv_stat6thImageOffsetY = (lv_pentagon6thPointY - (lv_statImageSizeXY / 2));
    lv_stat6thDecreOffsetX = (lv_pentagon6thPointX - (lv_statImageBorderSizeXY + (lv_statImageSizeXY / 2)));
    lv_stat6thDecreOffsetY = (lv_pentagon6thPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat6thIncreOffsetX = (lv_pentagon6thPointX + (0 + (lv_statImageSizeXY / 2)));
    lv_stat6thIncreOffsetY = lv_stat6thDecreOffsetY;
    lv_stat7thImageBorderOffsetX = (lv_pentagon7thPointX - (lv_statImageBorderSizeXY2 / 2));
    lv_stat7thImageBorderOffsetY = (lv_pentagon7thPointY - (lv_statImageBorderSizeXY2 / 2));
    lv_stat7thImageOffsetX = (lv_pentagon7thPointX - (lv_statImageSizeXY / 2));
    lv_stat7thImageOffsetY = (lv_pentagon7thPointY - (lv_statImageSizeXY / 2));
    lv_stat7thDecreOffsetX = (lv_pentagon7thPointX - (lv_statImageBorderSizeXY + (lv_statImageSizeXY / 2)));
    lv_stat7thDecreOffsetY = (lv_pentagon7thPointY - (lv_statImageBorderSizeXY / 2));
    lv_stat7thIncreOffsetX = (lv_pentagon7thPointX + (lv_statImageSizeXY / 2));
    lv_stat7thIncreOffsetY = lv_stat7thDecreOffsetY;
    lv_rightArrowFile = "Assets\\Textures\\ui_research_frame_available_arrow_right.dds";
    lv_leftArrowFile = "Assets\\Textures\\ui_research_frame_available_arrow_left.dds";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto488AF33C_var = 1;
    for ( ; auto488AF33C_var <= auto488AF33C_ae; auto488AF33C_var += 1 ) {
        if ((PlayerType(auto488AF33C_var) == c_playerTypeUser) && (PlayerStatus(auto488AF33C_var) == c_playerStatusActive)) {
            gf_WModModPointRecalculate(auto488AF33C_var);
            DialogCreate(lv_dialogX, lv_dialogY, c_anchorBottomRight, lv_dialogOffsetX, lv_dialogOffsetY, true);
            gv_wModWeaponsModDialog[auto488AF33C_var] = DialogLastCreated();
            DialogSetImageVisible(gv_wModWeaponsModDialog[auto488AF33C_var], false);
            DialogSetVisible(gv_wModWeaponsModDialog[auto488AF33C_var], PlayerGroupAll(), false);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 500, 50, c_anchorTop, 103, 80, (StringExternal("Param/Value/A432C503") + IntToText(gv_wModTotalPointsLeft[auto488AF33C_var])), Color(100,100,100), false, 0.0);
            gv_wModWeaponPointsAvailableLabel[auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_SetDialogItemStyle(gv_wModWeaponPointsAvailableLabel[auto488AF33C_var], "HelpPanelListBoxItemTitle", PlayerGroupActive());
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_heroSizeXY, lv_heroSizeXY, c_anchorTopLeft, lv_heroOffsetX, lv_heroOffsetY, StringToText(""), "Assets\\Textures\\btn-ability-terran-experiencedplasmagun.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY2, lv_statImageBorderSizeXY2, c_anchorTopLeft, lv_stat1stImageBorderOffsetX, lv_stat1stImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat1stImageOffsetX, lv_stat1stImageOffsetY, StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-u238rounds.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 200, 200, c_anchorTopLeft, lv_pentagon1stPointX, lv_pentagon1stPointY, StringExternal("Param/Value/2E5BE805"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_wModWeaponPointsLabels[1][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stImageBorderOffsetX, lv_stat1stImageBorderOffsetY, StringExternal("Param/Value/77F61930"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stDecreOffsetX, lv_stat1stDecreOffsetY, StringToText(""), lv_leftArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerDecreImage[1][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stDecreOffsetX, lv_stat1stDecreOffsetY, StringExternal("Param/Value/E4CC912D"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerDecreButton[1][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stIncreOffsetX, lv_stat1stIncreOffsetY, StringToText(""), lv_rightArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerIncreImage[1][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat1stIncreOffsetX, lv_stat1stIncreOffsetY, StringExternal("Param/Value/5F96732A"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerIncreButton[1][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY2, lv_statImageBorderSizeXY2, c_anchorTopLeft, lv_stat2ndImageBorderOffsetX, lv_stat2ndImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat2ndImageOffsetX, lv_stat2ndImageOffsetY, StringToText(""), "Assets\\Textures\\btn-upgrade-terran-infantryweaponslevel3.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 200, 200, c_anchorTopLeft, lv_pentagon2ndPointX, lv_pentagon2ndPointY, StringExternal("Param/Value/3A6FEEEA"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_wModWeaponPointsLabels[2][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndImageBorderOffsetX, lv_stat2ndImageBorderOffsetY, StringExternal("Param/Value/3450B631"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndDecreOffsetX, lv_stat2ndDecreOffsetY, StringToText(""), lv_leftArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerDecreImage[2][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndDecreOffsetX, lv_stat2ndDecreOffsetY, StringExternal("Param/Value/82DC8602"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerDecreButton[2][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndIncreOffsetX, lv_stat2ndIncreOffsetY, StringToText(""), lv_rightArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerIncreImage[2][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat2ndIncreOffsetX, lv_stat2ndIncreOffsetY, StringExternal("Param/Value/58B936D2"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerIncreButton[2][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY2, lv_statImageBorderSizeXY2, c_anchorTopLeft, lv_stat3rdImageBorderOffsetX, lv_stat3rdImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat3rdImageOffsetX, lv_stat3rdImageOffsetY, StringToText(""), "Assets\\Textures\\ui-editoricon-previewer_reload.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 200, 200, c_anchorTopLeft, lv_pentagon3rdPointX, lv_pentagon3rdPointY, StringExternal("Param/Value/CE662C8E"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_wModWeaponPointsLabels[3][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdImageBorderOffsetX, lv_stat3rdImageBorderOffsetY, StringExternal("Param/Value/898A4EB0"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdDecreOffsetX, lv_stat3rdDecreOffsetY, StringToText(""), lv_leftArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerDecreImage[3][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdDecreOffsetX, lv_stat3rdDecreOffsetY, StringExternal("Param/Value/38425026"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerDecreButton[3][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdIncreOffsetX, lv_stat3rdDecreOffsetY, StringToText(""), lv_rightArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerIncreImage[3][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat3rdIncreOffsetX, lv_stat3rdIncreOffsetY, StringExternal("Param/Value/DA4770CC"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerIncreButton[3][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY2, lv_statImageBorderSizeXY2, c_anchorTopLeft, lv_stat4thImageBorderOffsetX, lv_stat4thImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat4thImageOffsetX, lv_stat4thImageOffsetY, StringToText(""), "Assets\\Textures\\btn-command-returncargo.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 200, 200, c_anchorTopLeft, lv_pentagon4thPointX, lv_pentagon4thPointY, StringExternal("Param/Value/4A5EB678"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_wModWeaponPointsLabels[4][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thImageBorderOffsetX, lv_stat4thImageBorderOffsetY, StringExternal("Param/Value/D4E15474"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thDecreOffsetX, lv_stat4thDecreOffsetY, StringToText(""), lv_leftArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerDecreImage[4][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thDecreOffsetX, lv_stat4thDecreOffsetY, StringExternal("Param/Value/55EBB440"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerDecreButton[4][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thIncreOffsetX, lv_stat4thIncreOffsetY, StringToText(""), lv_rightArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerIncreImage[4][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat4thIncreOffsetX, lv_stat4thIncreOffsetY, StringExternal("Param/Value/D8687AD8"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerIncreButton[4][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY2, lv_statImageBorderSizeXY2, c_anchorTopLeft, lv_stat5thImageBorderOffsetX, lv_stat5thImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat5thImageOffsetX, lv_stat5thImageOffsetY, StringToText(""), "Assets\\Textures\\stimboltorange.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 200, 200, c_anchorTopLeft, lv_pentagon5thPointX, lv_pentagon5thPointY, StringExternal("Param/Value/42EF4D13"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_wModWeaponPointsLabels[5][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thImageBorderOffsetX, lv_stat5thImageBorderOffsetY, StringExternal("Param/Value/C51B7735"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thDecreOffsetX, lv_stat5thDecreOffsetY, StringToText(""), lv_leftArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerDecreImage[5][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thDecreOffsetX, lv_stat5thDecreOffsetY, StringExternal("Param/Value/1035FFC5"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerDecreButton[5][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thIncreOffsetX, lv_stat5thIncreOffsetY, StringToText(""), lv_rightArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerIncreImage[5][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat5thIncreOffsetX, lv_stat5thIncreOffsetY, StringExternal("Param/Value/1B690CBF"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerIncreButton[5][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY2, lv_statImageBorderSizeXY2, c_anchorTopLeft, lv_stat6thImageBorderOffsetX, lv_stat6thImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat6thImageOffsetX, lv_stat6thImageOffsetY, StringToText(""), "Assets\\Textures\\btn-techupgrade-terran-rapiddeployment.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 200, 200, c_anchorTopLeft, lv_pentagon6thPointX, lv_pentagon6thPointY, StringExternal("Param/Value/C576C883"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_wModWeaponPointsLabels[6][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat6thImageBorderOffsetX, lv_stat6thImageBorderOffsetY, StringExternal("Param/Value/39DF35B5"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat6thDecreOffsetX, lv_stat6thDecreOffsetY, StringToText(""), lv_leftArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerDecreImage[6][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat6thDecreOffsetX, lv_stat6thDecreOffsetY, StringExternal("Param/Value/D0E96759"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerDecreButton[6][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat6thIncreOffsetX, lv_stat6thIncreOffsetY, StringToText(""), lv_rightArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerIncreImage[6][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat6thIncreOffsetX, lv_stat6thIncreOffsetY, StringExternal("Param/Value/F6ECC9EC"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerIncreButton[6][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY2, lv_statImageBorderSizeXY2, c_anchorTopLeft, lv_stat7thImageBorderOffsetX, lv_stat7thImageBorderOffsetY, StringToText(""), "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", c_triggerImageTypeHorizontalBorder, true, Color(68.63, 68.63, 68.63), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageSizeXY, lv_statImageSizeXY, c_anchorTopLeft, lv_stat7thImageOffsetX, lv_stat7thImageOffsetY, StringToText(""), "Assets\\Textures\\btn-minimap-ping.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_wModWeaponsModDialog[auto488AF33C_var], 200, 200, c_anchorTopLeft, lv_pentagon7thPointX, lv_pentagon7thPointY, StringExternal("Param/Value/6DDAE03F"), Color(254*100/255,138*100/255,14*100/255), false, 0.0);
            gv_wModWeaponPointsLabels[7][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat7thImageBorderOffsetX, lv_stat7thImageBorderOffsetY, StringExternal("Param/Value/3267FD73"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat7thDecreOffsetX, lv_stat7thDecreOffsetY, StringToText(""), lv_leftArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerDecreImage[7][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat7thDecreOffsetX, lv_stat7thDecreOffsetY, StringExternal("Param/Value/A5547EA9"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerDecreButton[7][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemImage(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat7thIncreOffsetX, lv_stat7thIncreOffsetY, StringToText(""), lv_rightArrowFile, c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
            gv_wModPlayerIncreImage[7][auto488AF33C_var] = DialogControlLastCreated();
            libNtve_gf_CreateDialogItemButton(gv_wModWeaponsModDialog[auto488AF33C_var], lv_statImageBorderSizeXY, lv_statImageBorderSizeXY, c_anchorTopLeft, lv_stat7thIncreOffsetX, lv_stat7thDecreOffsetY, StringExternal("Param/Value/375CF7C4"), StringToText(""), "");
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            gv_wModPlayerIncreButton[7][auto488AF33C_var] = DialogControlLastCreated();
            gf_WModUpdateAllWeaponsModText(auto488AF33C_var);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateWeaponsModDialog_Init () {
    gt_CreateWeaponsModDialog = TriggerCreate("gt_CreateWeaponsModDialog_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Weapons Mod Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleWeaponsModDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_clickingPlayer;
    int lv_iLocal;

    // Automatic Variable Declarations
    const int auto09207764_ae = 8;
    int auto09207764_var;
    const int autoCCC5E1B0_ae = 8;
    const int autoCCC5E1B0_ai = 1;
    const int autoCC78EF8E_ae = 8;
    const int autoCC78EF8E_ai = 1;

    // Variable Initialization
    lv_clickingPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_wModWeaponsModButton[1]) || (EventDialogControl() == gv_wModWeaponsModButton[2]) || (EventDialogControl() == gv_wModWeaponsModButton[3]) || (EventDialogControl() == gv_wModWeaponsModButton[4]) || (EventDialogControl() == gv_wModWeaponsModButton[5]) || (EventDialogControl() == gv_wModWeaponsModButton[6]) || (EventDialogControl() == gv_wModWeaponsModButton[7]) || (EventDialogControl() == gv_wModWeaponsModButton[8]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[1]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[2]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[3]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[4]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[5]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[6]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[7]) || (EventDialogControl() == gv_statsPlayerStatsStatsButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto09207764_var = 1;
    for ( ; auto09207764_var <= auto09207764_ae; auto09207764_var += 1 ) {
        if ((EventDialogControl() == gv_wModWeaponsModButton[auto09207764_var])) {
            lv_iLocal = 1;
            for ( ; ( (autoCCC5E1B0_ai >= 0 && lv_iLocal <= autoCCC5E1B0_ae) || (autoCCC5E1B0_ai < 0 && lv_iLocal >= autoCCC5E1B0_ae) ) ; lv_iLocal += autoCCC5E1B0_ai ) {
                if ((PlayerStatus(lv_iLocal) != c_playerStatusUnused)) {
                    DialogSetVisible(gv_statsPlayerStatsDialogStats[lv_iLocal], PlayerGroupSingle(lv_clickingPlayer), false);
                }

            }
            DialogSetVisible(gv_wModWeaponsModDialog[auto09207764_var], PlayerGroupSingle(lv_clickingPlayer), true);
            break;
        }

        if ((EventDialogControl() == gv_statsPlayerStatsStatsButton[auto09207764_var])) {
            lv_iLocal = 1;
            for ( ; ( (autoCC78EF8E_ai >= 0 && lv_iLocal <= autoCC78EF8E_ae) || (autoCC78EF8E_ai < 0 && lv_iLocal >= autoCC78EF8E_ae) ) ; lv_iLocal += autoCC78EF8E_ai ) {
                if ((PlayerStatus(lv_iLocal) != c_playerStatusUnused)) {
                    DialogSetVisible(gv_wModWeaponsModDialog[lv_iLocal], PlayerGroupSingle(lv_clickingPlayer), false);
                }

            }
            DialogSetVisible(gv_statsPlayerStatsDialogStats[auto09207764_var], PlayerGroupSingle(lv_clickingPlayer), true);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleWeaponsModDialog_Init () {
    gt_ToggleWeaponsModDialog = TriggerCreate("gt_ToggleWeaponsModDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleWeaponsModDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify Weapons
//--------------------------------------------------------------------------------------------------
bool gt_ModifyWeapons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_clickingPlayer;
    bool lv_continue;
    int lv_raDmgReSwSpWpSh;
    int lv_ownerofDialogItem;
    bool lv_incre;
    bool lv_decre;

    // Automatic Variable Declarations
    const int autoEF8A4C32_ae = 8;
    int autoEF8A4C32_var;
    const int autoC13D7051_ae = 8;
    int autoC13D7051_var;
    const int autoA93B5921_ae = 8;
    int autoA93B5921_var;
    const int auto58EA6768_ae = 8;
    int auto58EA6768_var;
    const int auto2C240B20_ae = 8;
    int auto2C240B20_var;
    const int auto3E7BAB96_ae = 8;
    int auto3E7BAB96_var;
    const int autoE7CEB293_ae = 8;
    int autoE7CEB293_var;
    const int auto8A1B2451_ae = 8;
    int auto8A1B2451_var;
    const int auto920AAE83_ae = 8;
    int auto920AAE83_var;
    const int auto0062C2E5_ae = 8;
    int auto0062C2E5_var;
    const int autoB6826D90_ae = 8;
    int autoB6826D90_var;
    const int auto0F57E5CC_ae = 8;
    int auto0F57E5CC_var;
    const int auto95D77BB8_ae = 8;
    int auto95D77BB8_var;
    const int auto1D18A420_ae = 8;
    int auto1D18A420_var;

    // Variable Initialization
    lv_clickingPlayer = EventPlayer();
    lv_continue = true;

    // Conditions
    if (testConds) {
        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[1]) || (DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[2]) || (DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[3]) || (DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[4]) || (DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[5]) || (DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[6]) || (DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[7]) || (DialogControlGetDialog(EventDialogControl()) == gv_wModWeaponsModDialog[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_wave <= 3) || (gv_trainingFieldMode == true))) {
        autoEF8A4C32_var = 1;
        for ( ; autoEF8A4C32_var <= autoEF8A4C32_ae; autoEF8A4C32_var += 1 ) {
            if ((EventDialogControl() == gv_wModPlayerIncreButton[1][autoEF8A4C32_var])) {
                lv_continue = false;
                lv_raDmgReSwSpWpSh = 1;
                lv_ownerofDialogItem = autoEF8A4C32_var;
                lv_incre = true;
                break;
            }

        }
        autoC13D7051_var = 1;
        for ( ; autoC13D7051_var <= autoC13D7051_ae; autoC13D7051_var += 1 ) {
            if ((lv_continue == true)) {
                if ((EventDialogControl() == gv_wModPlayerDecreButton[1][autoC13D7051_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 1;
                    lv_ownerofDialogItem = autoC13D7051_var;
                    lv_decre = true;
                    break;
                }

            }

        }
        if ((lv_continue == true) && (gv_wave <= 3)) {
            autoA93B5921_var = 1;
            for ( ; autoA93B5921_var <= autoA93B5921_ae; autoA93B5921_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerIncreButton[2][autoA93B5921_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 2;
                    lv_ownerofDialogItem = autoA93B5921_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto58EA6768_var = 1;
            for ( ; auto58EA6768_var <= auto58EA6768_ae; auto58EA6768_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerDecreButton[2][auto58EA6768_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 2;
                    lv_ownerofDialogItem = auto58EA6768_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto2C240B20_var = 1;
            for ( ; auto2C240B20_var <= auto2C240B20_ae; auto2C240B20_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerIncreButton[3][auto2C240B20_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 3;
                    lv_ownerofDialogItem = auto2C240B20_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto3E7BAB96_var = 1;
            for ( ; auto3E7BAB96_var <= auto3E7BAB96_ae; auto3E7BAB96_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerDecreButton[3][auto3E7BAB96_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 3;
                    lv_ownerofDialogItem = auto3E7BAB96_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            autoE7CEB293_var = 1;
            for ( ; autoE7CEB293_var <= autoE7CEB293_ae; autoE7CEB293_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerIncreButton[4][autoE7CEB293_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 4;
                    lv_ownerofDialogItem = autoE7CEB293_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto8A1B2451_var = 1;
            for ( ; auto8A1B2451_var <= auto8A1B2451_ae; auto8A1B2451_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerDecreButton[4][auto8A1B2451_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 4;
                    lv_ownerofDialogItem = auto8A1B2451_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto920AAE83_var = 1;
            for ( ; auto920AAE83_var <= auto920AAE83_ae; auto920AAE83_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerIncreButton[5][auto920AAE83_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 5;
                    lv_ownerofDialogItem = auto920AAE83_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto0062C2E5_var = 1;
            for ( ; auto0062C2E5_var <= auto0062C2E5_ae; auto0062C2E5_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerDecreButton[5][auto0062C2E5_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 5;
                    lv_ownerofDialogItem = auto0062C2E5_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            autoB6826D90_var = 1;
            for ( ; autoB6826D90_var <= autoB6826D90_ae; autoB6826D90_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerIncreButton[6][autoB6826D90_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 6;
                    lv_ownerofDialogItem = autoB6826D90_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto0F57E5CC_var = 1;
            for ( ; auto0F57E5CC_var <= auto0F57E5CC_ae; auto0F57E5CC_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerDecreButton[6][auto0F57E5CC_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 6;
                    lv_ownerofDialogItem = auto0F57E5CC_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto95D77BB8_var = 1;
            for ( ; auto95D77BB8_var <= auto95D77BB8_ae; auto95D77BB8_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerIncreButton[7][auto95D77BB8_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 7;
                    lv_ownerofDialogItem = auto95D77BB8_var;
                    lv_incre = true;
                    break;
                }

            }
        }

        if ((lv_continue == true)) {
            auto1D18A420_var = 1;
            for ( ; auto1D18A420_var <= auto1D18A420_ae; auto1D18A420_var += 1 ) {
                if ((EventDialogControl() == gv_wModPlayerDecreButton[7][auto1D18A420_var])) {
                    lv_continue = false;
                    lv_raDmgReSwSpWpSh = 7;
                    lv_ownerofDialogItem = auto1D18A420_var;
                    lv_decre = true;
                    break;
                }

            }
        }

        if ((lv_ownerofDialogItem == lv_clickingPlayer)) {
            if (((lv_raDmgReSwSpWpSh == 1) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_wModRange1[lv_ownerofDialogItem] < 9) && (gv_wModTotalPointsNegative[lv_ownerofDialogItem] > gv_wModTotalPointsPositive[lv_ownerofDialogItem]))) {
                    if ((gv_wModRange1[lv_ownerofDialogItem] > 4)) {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] += 1;
                    }
                    else {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] -= 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] += 1;
                    }
                    gv_wModRange1[lv_ownerofDialogItem] += 1;
                    gf_WModSetRange(gv_wModRange1[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsRangeText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_wModRange1[lv_ownerofDialogItem] > 1) && (((gv_wModTotalPointsLeft[lv_ownerofDialogItem] > 0) && (gv_wModRange1[lv_ownerofDialogItem] < 6)) || ((gv_wModRange1[lv_ownerofDialogItem] > 5))))) {
                    if ((gv_wModRange1[lv_ownerofDialogItem] < 6)) {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] += 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] -= 1;
                    }
                    else {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] -= 1;
                    }
                    gv_wModRange1[lv_ownerofDialogItem] -= 1;
                    gf_WModSetRange(gv_wModRange1[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsRangeText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_raDmgReSwSpWpSh == 2) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_wModDamage2[lv_ownerofDialogItem] < 9) && (gv_wModTotalPointsNegative[lv_ownerofDialogItem] > gv_wModTotalPointsPositive[lv_ownerofDialogItem]))) {
                    if ((gv_wModDamage2[lv_ownerofDialogItem] > 4)) {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] += 1;
                    }
                    else {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] -= 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] += 1;
                    }
                    gv_wModDamage2[lv_ownerofDialogItem] += 1;
                    gf_WModSetDamage(gv_wModDamage2[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsDamageText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_wModDamage2[lv_ownerofDialogItem] > 1) && (((gv_wModTotalPointsLeft[lv_ownerofDialogItem] > 0) && (gv_wModDamage2[lv_ownerofDialogItem] < 6)) || ((gv_wModDamage2[lv_ownerofDialogItem] > 5))))) {
                    if ((gv_wModDamage2[lv_ownerofDialogItem] < 6)) {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] += 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] -= 1;
                    }
                    else {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] -= 1;
                    }
                    gv_wModDamage2[lv_ownerofDialogItem] -= 1;
                    gf_WModSetDamage(gv_wModDamage2[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsDamageText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_raDmgReSwSpWpSh == 3) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_wModReload3[lv_ownerofDialogItem] < 9) && (gv_wModTotalPointsNegative[lv_ownerofDialogItem] > gv_wModTotalPointsPositive[lv_ownerofDialogItem]))) {
                    if ((gv_wModReload3[lv_ownerofDialogItem] > 4)) {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] += 1;
                    }
                    else {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] -= 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] += 1;
                    }
                    gv_wModReload3[lv_ownerofDialogItem] += 1;
                    gf_WModSetReloadTime(gv_wModReload3[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsReloadText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_wModReload3[lv_ownerofDialogItem] > 1) && (((gv_wModTotalPointsLeft[lv_ownerofDialogItem] > 0) && (gv_wModReload3[lv_ownerofDialogItem] < 6)) || ((gv_wModReload3[lv_ownerofDialogItem] > 5))))) {
                    if ((gv_wModReload3[lv_ownerofDialogItem] < 6)) {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] += 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] -= 1;
                    }
                    else {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] -= 1;
                    }
                    gv_wModReload3[lv_ownerofDialogItem] -= 1;
                    gf_WModSetReloadTime(gv_wModReload3[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsReloadText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_raDmgReSwSpWpSh == 4) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_wModSwitch4[lv_ownerofDialogItem] < 9) && (gv_wModTotalPointsNegative[lv_ownerofDialogItem] > gv_wModTotalPointsPositive[lv_ownerofDialogItem]))) {
                    if ((gv_wModSwitch4[lv_ownerofDialogItem] > 4)) {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] += 1;
                    }
                    else {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] -= 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] += 1;
                    }
                    gv_wModSwitch4[lv_ownerofDialogItem] += 1;
                    gf_WModSetSwitchTime(gv_wModSwitch4[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsSwitchText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_wModSwitch4[lv_ownerofDialogItem] > 1) && (((gv_wModTotalPointsLeft[lv_ownerofDialogItem] > 0) && (gv_wModSwitch4[lv_ownerofDialogItem] < 6)) || ((gv_wModSwitch4[lv_ownerofDialogItem] > 5))))) {
                    if ((gv_wModSwitch4[lv_ownerofDialogItem] < 6)) {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] += 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] -= 1;
                    }
                    else {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] -= 1;
                    }
                    gv_wModSwitch4[lv_ownerofDialogItem] -= 1;
                    gf_WModSetSwitchTime(gv_wModSwitch4[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsSwitchText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_raDmgReSwSpWpSh == 5) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_wModSpeed5[lv_ownerofDialogItem] < 9) && (gv_wModTotalPointsNegative[lv_ownerofDialogItem] > gv_wModTotalPointsPositive[lv_ownerofDialogItem]))) {
                    if ((gv_wModSpeed5[lv_ownerofDialogItem] > 4)) {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] += 1;
                    }
                    else {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] -= 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] += 1;
                    }
                    gv_wModSpeed5[lv_ownerofDialogItem] += 1;
                    gf_WModSetAttackSpeed(gv_wModSpeed5[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsSpeedText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_wModSpeed5[lv_ownerofDialogItem] > 1) && (((gv_wModTotalPointsLeft[lv_ownerofDialogItem] > 0) && (gv_wModSpeed5[lv_ownerofDialogItem] < 6)) || ((gv_wModSpeed5[lv_ownerofDialogItem] > 5))))) {
                    if ((gv_wModSpeed5[lv_ownerofDialogItem] < 6)) {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] += 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] -= 1;
                    }
                    else {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] -= 1;
                    }
                    gv_wModSpeed5[lv_ownerofDialogItem] -= 1;
                    gf_WModSetAttackSpeed(gv_wModSpeed5[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsSpeedText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_raDmgReSwSpWpSh == 6) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_wModWeight6[lv_ownerofDialogItem] < 9) && (gv_wModTotalPointsNegative[lv_ownerofDialogItem] > gv_wModTotalPointsPositive[lv_ownerofDialogItem]))) {
                    if ((gv_wModWeight6[lv_ownerofDialogItem] > 4)) {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] += 1;
                    }
                    else {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] -= 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] += 1;
                    }
                    gv_wModWeight6[lv_ownerofDialogItem] += 1;
                    gf_WModSetWeightPoint(gv_wModWeight6[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsWeightText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_wModWeight6[lv_ownerofDialogItem] > 1) && (((gv_wModTotalPointsLeft[lv_ownerofDialogItem] > 0) && (gv_wModWeight6[lv_ownerofDialogItem] < 6)) || ((gv_wModWeight6[lv_ownerofDialogItem] > 5))))) {
                    if ((gv_wModWeight6[lv_ownerofDialogItem] < 6)) {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] += 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] -= 1;
                    }
                    else {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] -= 1;
                    }
                    gv_wModWeight6[lv_ownerofDialogItem] -= 1;
                    gf_WModSetWeightPoint(gv_wModWeight6[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsWeightText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
            }
            else if (((lv_raDmgReSwSpWpSh == 7) && (UnitIsValid(gv_marineHero[lv_ownerofDialogItem]) == true) && (UnitIsAlive(gv_marineHero[lv_ownerofDialogItem]) == true))) {
                if (((lv_incre == true) && (gv_wModSplash7[lv_ownerofDialogItem] < 9) && (gv_wModTotalPointsNegative[lv_ownerofDialogItem] > gv_wModTotalPointsPositive[lv_ownerofDialogItem]))) {
                    if ((gv_wModSplash7[lv_ownerofDialogItem] > 4)) {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] += 1;
                    }
                    else {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] -= 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] += 1;
                    }
                    gv_wModSplash7[lv_ownerofDialogItem] += 1;
                    gf_WeaponsModSetSplashRadius(gv_wModSplash7[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsSplashText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
                else if (((lv_decre == true) && (gv_wModSplash7[lv_ownerofDialogItem] > 1) && (((gv_wModTotalPointsLeft[lv_ownerofDialogItem] > 0) && (gv_wModSplash7[lv_ownerofDialogItem] < 6)) || ((gv_wModSplash7[lv_ownerofDialogItem] > 5))))) {
                    if ((gv_wModSplash7[lv_ownerofDialogItem] < 6)) {
                        gv_wModTotalPointsNegative[lv_ownerofDialogItem] += 1;
                        gv_wModTotalPointsLeft[lv_ownerofDialogItem] -= 1;
                    }
                    else {
                        gv_wModTotalPointsPositive[lv_ownerofDialogItem] -= 1;
                    }
                    gv_wModSplash7[lv_ownerofDialogItem] -= 1;
                    gf_WeaponsModSetSplashRadius(gv_wModSplash7[lv_ownerofDialogItem], lv_ownerofDialogItem);
                    gf_WModUpdateWeaponsSplashText(lv_ownerofDialogItem);
                    gf_WModUpdateAvailableWModPointsText(lv_ownerofDialogItem);
                }
            }
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModifyWeapons_Init () {
    gt_ModifyWeapons = TriggerCreate("gt_ModifyWeapons_Func");
    TriggerAddEventDialogControl(gt_ModifyWeapons, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Tree Toggle
//--------------------------------------------------------------------------------------------------
bool gt_TalentTreeToggle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selectingPlayer;
    int lv_ownerofHero;

    // Automatic Variable Declarations
    const int autoCED2E5C4_ae = 8;
    int autoCED2E5C4_var;

    // Variable Initialization
    lv_selectingPlayer = EventPlayer();
    lv_ownerofHero = gf_NOTDOwnerofUnit(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_talentTreeOpen[lv_ownerofHero] == false)) {
        gv_talentTreeOpen[lv_ownerofHero] = true;
        autoCED2E5C4_var = 1;
        for ( ; autoCED2E5C4_var <= autoCED2E5C4_ae; autoCED2E5C4_var += 1 ) {
            if (((PlayerType(autoCED2E5C4_var) == c_playerTypeUser) || (UnitIsAlive(gv_marineHero[autoCED2E5C4_var]) == true))) {
                DialogSetVisible(gv_talentTree[autoCED2E5C4_var], PlayerGroupSingle(lv_selectingPlayer), false);
                DialogSetVisible(gv_playerMedalsDialog[autoCED2E5C4_var], PlayerGroupSingle(lv_selectingPlayer), false);
                DialogSetVisible(gv_statsPlayerStatsDialog[autoCED2E5C4_var], PlayerGroupSingle(lv_selectingPlayer), false);
                DialogSetVisible(gv_statsPlayerStatsDialogStats[autoCED2E5C4_var], PlayerGroupSingle(lv_selectingPlayer), false);
                DialogSetVisible(gv_wModWeaponsModDialog[autoCED2E5C4_var], PlayerGroupSingle(lv_selectingPlayer), false);
            }

        }
        DialogSetVisible(gv_talentTree[lv_ownerofHero], PlayerGroupSingle(lv_selectingPlayer), true);
    }
    else {
        gv_talentTreeOpen[lv_ownerofHero] = false;
        DialogSetVisible(gv_talentTree[lv_ownerofHero], PlayerGroupSingle(lv_selectingPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentTreeToggle_Init () {
    gt_TalentTreeToggle = TriggerCreate("gt_TalentTreeToggle_Func");
    TriggerAddEventUnitAbility(gt_TalentTreeToggle, null, AbilityCommand("Talents", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Selection
//--------------------------------------------------------------------------------------------------
bool gt_TalentSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggPlayer;
    int lv_usedItem;
    int lv_itemNo;
    int lv_ownerofTalentTree;
    bool lv_notTalent;
    int lv_iLocal;
    bool lv_scrolled;

    // Automatic Variable Declarations
    const int autoB8170BC7_ae = 8;
    int autoB8170BC7_var;
    const int autoC64C6463_ae = 8;
    int autoC64C6463_var;
    const int auto732A9417_ae = 8;
    int auto732A9417_var;
    const int auto46994513_ae = 1;
    const int auto46994513_ai = -1;
    int autoCB57DA90_ae;
    const int autoCB57DA90_ai = -1;
    const int auto26B34D41_ae = 8;
    int auto26B34D41_var;
    const int auto5E0B09BB_ae = 8;
    const int auto5E0B09BB_ai = 1;
    int autoAC5F5B72_ae;
    const int autoAC5F5B72_ai = 1;
    const int auto438CD547_ae = 8;
    int auto438CD547_var;
    const int auto47520BBE_ae = 10;
    const int auto47520BBE_ai = 1;
    const int autoB1499978_ae = 8;
    int autoB1499978_var;

    // Variable Initialization
    lv_triggPlayer = EventPlayer();
    lv_usedItem = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((DialogControlGetDialog(lv_usedItem) == gv_talentTree[1]) || (DialogControlGetDialog(lv_usedItem) == gv_talentTree[2]) || (DialogControlGetDialog(lv_usedItem) == gv_talentTree[3]) || (DialogControlGetDialog(lv_usedItem) == gv_talentTree[4]) || (DialogControlGetDialog(lv_usedItem) == gv_talentTree[5]) || (DialogControlGetDialog(lv_usedItem) == gv_talentTree[6]) || (DialogControlGetDialog(lv_usedItem) == gv_talentTree[7]) || (DialogControlGetDialog(lv_usedItem) == gv_talentTree[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoB8170BC7_var = 1;
    for ( ; autoB8170BC7_var <= autoB8170BC7_ae; autoB8170BC7_var += 1 ) {
        if ((EventDialogControl() == gv_talentTreeMedalsTabButtons[autoB8170BC7_var])) {
            lv_notTalent = true;
            DialogSetVisible(gv_talentTree[autoB8170BC7_var], PlayerGroupSingle(lv_triggPlayer), false);
            DialogSetVisible(gv_playerMedalsDialog[autoB8170BC7_var], PlayerGroupSingle(lv_triggPlayer), true);
            break;
        }

    }
    autoC64C6463_var = 1;
    for ( ; autoC64C6463_var <= autoC64C6463_ae; autoC64C6463_var += 1 ) {
        if ((EventDialogControl() == gv_talentTreeStatsTabButtons[autoC64C6463_var])) {
            lv_notTalent = true;
            DialogSetVisible(gv_talentTree[autoC64C6463_var], PlayerGroupSingle(lv_triggPlayer), false);
            DialogSetVisible(gv_statsPlayerStatsDialog[autoC64C6463_var], PlayerGroupSingle(lv_triggPlayer), true);
            DialogSetVisible(gv_statsPlayerStatsDialogStats[autoC64C6463_var], PlayerGroupSingle(lv_triggPlayer), true);
            break;
        }

    }
    auto732A9417_var = 1;
    for ( ; auto732A9417_var <= auto732A9417_ae; auto732A9417_var += 1 ) {
        if ((EventDialogControl() == gv_talentTreeScrollPreviousButtons[auto732A9417_var])) {
            lv_iLocal = (auto732A9417_var - 1);
            for ( ; ( (auto46994513_ai >= 0 && lv_iLocal <= auto46994513_ae) || (auto46994513_ai < 0 && lv_iLocal >= auto46994513_ae) ) ; lv_iLocal += auto46994513_ai ) {
                if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                    DialogSetVisible(gv_talentTree[auto732A9417_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_talentTree[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    lv_scrolled = true;
                    break;
                }

            }
            if ((lv_scrolled == false)) {
                autoCB57DA90_ae = (auto732A9417_var + 1);
                lv_iLocal = 8;
                for ( ; ( (autoCB57DA90_ai >= 0 && lv_iLocal <= autoCB57DA90_ae) || (autoCB57DA90_ai < 0 && lv_iLocal >= autoCB57DA90_ae) ) ; lv_iLocal += autoCB57DA90_ai ) {
                    if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                        DialogSetVisible(gv_talentTree[auto732A9417_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_talentTree[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        break;
                    }

                }
            }

            break;
        }

    }
    auto26B34D41_var = 1;
    for ( ; auto26B34D41_var <= auto26B34D41_ae; auto26B34D41_var += 1 ) {
        if ((EventDialogControl() == gv_talentTreeScrollNextButtons[auto26B34D41_var])) {
            lv_iLocal = (auto26B34D41_var + 1);
            for ( ; ( (auto5E0B09BB_ai >= 0 && lv_iLocal <= auto5E0B09BB_ae) || (auto5E0B09BB_ai < 0 && lv_iLocal >= auto5E0B09BB_ae) ) ; lv_iLocal += auto5E0B09BB_ai ) {
                if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                    DialogSetVisible(gv_talentTree[auto26B34D41_var], PlayerGroupSingle(EventPlayer()), false);
                    DialogSetVisible(gv_talentTree[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                    lv_scrolled = true;
                    break;
                }

            }
            if ((lv_scrolled == false)) {
                autoAC5F5B72_ae = (auto26B34D41_var - 1);
                lv_iLocal = 1;
                for ( ; ( (autoAC5F5B72_ai >= 0 && lv_iLocal <= autoAC5F5B72_ae) || (autoAC5F5B72_ai < 0 && lv_iLocal >= autoAC5F5B72_ae) ) ; lv_iLocal += autoAC5F5B72_ai ) {
                    if ((UnitIsAlive(gv_marineHero[lv_iLocal]) == true)) {
                        DialogSetVisible(gv_talentTree[auto26B34D41_var], PlayerGroupSingle(EventPlayer()), false);
                        DialogSetVisible(gv_talentTree[lv_iLocal], PlayerGroupSingle(EventPlayer()), true);
                        break;
                    }

                }
            }

            break;
        }

    }
    auto438CD547_var = 1;
    for ( ; auto438CD547_var <= auto438CD547_ae; auto438CD547_var += 1 ) {
        if ((DialogControlGetDialog(lv_usedItem) == gv_talentTree[auto438CD547_var]) && (lv_notTalent == false)) {
            lv_ownerofTalentTree = auto438CD547_var;
            break;
        }

    }
    if (((lv_notTalent == false) && ((lv_ownerofTalentTree == lv_triggPlayer) || ((lv_ownerofTalentTree != lv_triggPlayer) && ((PlayerGetAlliance(lv_ownerofTalentTree, c_allianceIdControl, lv_triggPlayer) == true) || (PlayerGetAlliance(lv_triggPlayer, c_allianceIdControl, lv_ownerofTalentTree) == true)))) && (gv_talentsAvailable[lv_ownerofTalentTree] > 0))) {
        lv_itemNo = 0;
        for ( ; ( (auto47520BBE_ai >= 0 && lv_itemNo <= auto47520BBE_ae) || (auto47520BBE_ai < 0 && lv_itemNo >= auto47520BBE_ae) ) ; lv_itemNo += auto47520BBE_ai ) {
            if ((lv_usedItem == gv_talentTreeItem[lv_ownerofTalentTree][lv_itemNo])) {
                break;
            }

        }
        if ((lv_itemNo != 0)) {
            gf_UpdateTalentSystem(lv_itemNo, lv_ownerofTalentTree);
        }

    }

    autoB1499978_var = 1;
    for ( ; autoB1499978_var <= autoB1499978_ae; autoB1499978_var += 1 ) {
        if ((EventDialogControl() == gv_talentTreeCloseButtons[autoB1499978_var])) {
            DialogSetVisible(gv_talentTree[autoB1499978_var], PlayerGroupSingle(lv_triggPlayer), false);
            gv_talentTreeOpen[autoB1499978_var] = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentSelection_Init () {
    gt_TalentSelection = TriggerCreate("gt_TalentSelection_Func");
    TriggerAddEventDialogControl(gt_TalentSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Backstab
//--------------------------------------------------------------------------------------------------
bool gt_Backstab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_ownerofAttackingUnit;
    fixed lv_damage;
    int lv_backstabTextTag;
    fixed lv_backstabTextHeightOffset;
    fixed lv_angleofAttackedUnit;
    fixed lv_angleofAttackingUnit;
    fixed lv_correctedAngleofAttack;

    // Automatic Variable Declarations
    const int autoBF7B6407_n = 10;
    int autoBF7B6407_i;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_ownerofAttackingUnit = gf_NOTDOwnerofUnit(lv_attackingUnit);
    lv_damage = EventUnitDamageAmount();
    lv_backstabTextTag = c_textTagNone;
    lv_backstabTextHeightOffset = 1.5;
    lv_angleofAttackedUnit = UnitGetFacing(lv_attackedUnit);
    lv_angleofAttackingUnit = AngleBetweenPoints(UnitGetPosition(lv_attackedUnit), UnitGetPosition(lv_attackingUnit));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_attackingUnit, "Backstab") == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_attackedUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_angleofAttackedUnit < 0.0)) {
        lv_angleofAttackedUnit += 360.0;
    }

    if ((lv_angleofAttackingUnit < 0.0)) {
        lv_angleofAttackingUnit += 360.0;
    }

    lv_correctedAngleofAttack = (lv_angleofAttackingUnit - lv_angleofAttackedUnit);
    if ((lv_correctedAngleofAttack < 0.0)) {
        lv_correctedAngleofAttack += 360.0;
    }

    if ((lv_correctedAngleofAttack >= 90.0) && (lv_correctedAngleofAttack <= 270.0)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "Backstab", "Amount", lv_ownerofAttackingUnit, FixedToString((lv_damage * 0.5), c_fixedPrecisionAny));
        PlayerCreateEffectUnit(lv_ownerofAttackingUnit, "Backstab", lv_attackedUnit);
        TextTagCreate(((StringExternal("Param/Value/BB7F61D6") + FixedToText((lv_damage * 0.5), 0)) + StringExternal("Param/Value/54C65657")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
        lv_backstabTextTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        TextTagAttachToUnit(lv_backstabTextTag, lv_attackingUnit, lv_backstabTextHeightOffset);
        for (autoBF7B6407_i = 1; autoBF7B6407_i <= autoBF7B6407_n; autoBF7B6407_i += 1) {
            Wait(0.1, c_timeGame);
            lv_backstabTextHeightOffset += 0.1;
            TextTagAttachToUnit(lv_backstabTextTag, lv_attackingUnit, lv_backstabTextHeightOffset);
        }
        TextTagDestroy(lv_backstabTextTag);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Backstab_Init () {
    gt_Backstab = TriggerCreate("gt_Backstab_Func");
    TriggerEnable(gt_Backstab, false);
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "Shotgun");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "Crowbar2");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "CombatKnifeDamage");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "Predator");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "AutoTurret");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "LongboltMissileU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critical Strike
//--------------------------------------------------------------------------------------------------
bool gt_CriticalStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_ownerofAttackingUnit;
    string lv_classofAttackingUnit;
    int lv_criticalTalentLevel;
    int lv_criticalTalentLevel2;
    int lv_criticalTalentLevel3;
    fixed lv_damage;
    int lv_critTextTag;
    fixed lv_critTextHeightOffset;
    int lv_heroLevel;
    string lv_damagingEffect;
    fixed lv_criticalStrikeDamage;
    int lv_rankofHero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_ownerofAttackingUnit = gf_NOTDOwnerofUnit(lv_attackingUnit);
    lv_classofAttackingUnit = UnitGetType(lv_attackingUnit);
    lv_criticalTalentLevel = gv_talentLevel[1][lv_ownerofAttackingUnit];
    lv_criticalTalentLevel2 = gv_talentLevel[2][lv_ownerofAttackingUnit];
    lv_criticalTalentLevel3 = gv_talentLevel[7][lv_ownerofAttackingUnit];
    lv_damage = EventUnitDamageAmount();
    lv_critTextTag = c_textTagNone;
    lv_critTextHeightOffset = 1.5;
    lv_heroLevel = UnitLevel(lv_attackingUnit);
    lv_damagingEffect = EventUnitDamageEffect();
    lv_criticalStrikeDamage = lv_damage;
    lv_rankofHero = UnitLevel(lv_attackingUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, lv_attackingUnit) == true))) {
            return false;
        }

        if (!((((EventUnitDamageEffect() != "CombatKnifeDamage") && (EventUnitDamageEffect() != "CombatKnifeDamagevsDemetersCocoon") && ((((lv_classofAttackingUnit == "Rifleman")) && (RandomFixed(0.001, 100.0) <= ((IntToFixed(lv_criticalTalentLevel) * 10.0) + (IntToFixed(gv_statsPerception4[lv_ownerofAttackingUnit]) / 1.0)))) || (((lv_classofAttackingUnit == "GhostLaserLines")) && (RandomFixed(0.001, 100.0) <= ((IntToFixed(lv_criticalTalentLevel3) * 10.0) + (IntToFixed(gv_statsPerception4[lv_ownerofAttackingUnit]) / 1.0)))) || ((lv_classofAttackingUnit == "TychusChaingun") && (((UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel1") == false) && (UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel2") == false) && (UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel3") == false) && (RandomFixed(0.001, 100.0) <= (((IntToFixed(lv_criticalTalentLevel2) * 10.0) + (0.0 + (gf_HarvesterofSorrowCheck(lv_attackingUnit) * 40.0))) + (IntToFixed(gv_statsPerception4[lv_ownerofAttackingUnit]) / 1.0)))) || ((UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel1") == true) && (lv_criticalTalentLevel2 > 0) && (RandomFixed(0.001, 100.0) <= (((IntToFixed(lv_criticalTalentLevel2) * 10.0) + (5.0 + (gf_HarvesterofSorrowCheck(lv_attackingUnit) * 40.0))) + (IntToFixed(gv_statsPerception4[lv_ownerofAttackingUnit]) / 1.0)))) || ((UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel2") == true) && (lv_criticalTalentLevel2 > 0) && (RandomFixed(0.001, 100.0) <= (((IntToFixed(lv_criticalTalentLevel2) * 10.0) + (10.0 + (gf_HarvesterofSorrowCheck(lv_attackingUnit) * 40.0))) + (IntToFixed(gv_statsPerception4[lv_ownerofAttackingUnit]) / 1.0)))) || ((UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel3") == true) && (lv_criticalTalentLevel2 > 0) && (RandomFixed(0.001, 100.0) <= (((IntToFixed(lv_criticalTalentLevel2) * 10.0) + (15.0 + (gf_HarvesterofSorrowCheck(lv_attackingUnit) * 40.0))) + (IntToFixed(gv_statsPerception4[lv_ownerofAttackingUnit]) / 1.0)))))) || ((lv_classofAttackingUnit != "Rifleman") && (lv_classofAttackingUnit != "GhostLaserLines") && (lv_classofAttackingUnit != "TychusChaingun") && (RandomFixed(0.001, 100.0) <= IntToFixed(gv_statsPerception4[lv_ownerofAttackingUnit]))))) || (((EventUnitDamageEffect() == "CombatKnifeDamage") || (EventUnitDamageEffect() == "CombatKnifeDamagevsDemetersCocoon")) && (RandomFixed(0.001, 100.0) <= (IntToFixed(lv_heroLevel) * 3.0)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_damagingEffect == "PrecisionShotLevel1Damage") || (lv_damagingEffect == "PrecisionShotLevel2Damage"))) {
        lv_criticalStrikeDamage /= 2.0;
    }

    if ((UnitGetPropertyFixed(lv_attackedUnit, c_unitPropLife, c_unitPropCurrent) > 0.0)) {
        UnitCreateEffectUnit(lv_attackingUnit, "CriticalStrike", lv_attackedUnit);
        UnitCreateEffectUnit(lv_attackingUnit, "ApplyCriticalStrikeDummy", lv_attackedUnit);
        if ((UnitHasBehavior(lv_attackingUnit, "BloodFrenzyLevel1") == true)) {
            UnitBehaviorAdd(lv_attackedUnit, "BloodFrenzySlow", lv_attackingUnit, 1);
        }

        if ((UnitHasBehavior(lv_attackingUnit, "BloodFrenzyLevel2") == true)) {
            UnitBehaviorAdd(lv_attackedUnit, "BloodFrenzySlow", lv_attackingUnit, 1);
        }

        if ((UnitHasBehavior(lv_attackingUnit, "HarvesterofSorrow") == true) && ((UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel1") == true) || (UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel2") == true) || (UnitHasBehavior(lv_attackingUnit, "ConcentratedFireLevel3") == true))) {
            UnitBehaviorAdd(lv_attackedUnit, "HarvesterofSorrowTarget", lv_attackingUnit, 1);
        }

    }

    CatalogFieldValueSet(c_gameCatalogEffect, "CriticalStrike", "Amount", lv_ownerofAttackingUnit, FixedToString(lv_criticalStrikeDamage, c_fixedPrecisionAny));
    TextTagCreate((FixedToText((lv_damage + lv_criticalStrikeDamage), 0) + StringExternal("Param/Value/296CE093")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
    lv_critTextTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagAttachToUnit(lv_critTextTag, lv_attackingUnit, lv_critTextHeightOffset);
    TextTagSetVelocity(lv_critTextTag, 0.5, 90.0);
    Wait(1.0, c_timeGame);
    TextTagDestroy(lv_critTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CriticalStrike_Init () {
    gt_CriticalStrike = TriggerCreate("gt_CriticalStrike_Func");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "Shotgun");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "Crowbar2");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "CombatKnifeDamage");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "CombatKnifeDamagevsDemetersCocoon");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "PrecisionShotLevel2Damage");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "PrecisionShotLevel1Damage");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "GrenadeLevel1Damage");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "GrenadeLevel2Damage");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeAny, c_unitDamageEither, "RepulseDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grenade Launcher Fire Up End
//--------------------------------------------------------------------------------------------------
bool gt_GrenadeLauncherFireUpEnd_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FireUpGrenadesLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FireUpGrenadesLevel12", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FireUpGrenadesLevel13", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrenadeLauncherFireUpEnd_Init () {
    gt_GrenadeLauncherFireUpEnd = TriggerCreate("gt_GrenadeLauncherFireUpEnd_Func");
    TriggerAddEventUnitBehaviorChange(gt_GrenadeLauncherFireUpEnd, null, "FocusedFire", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sonic Trap - Limit 5
//--------------------------------------------------------------------------------------------------
bool gt_SonicTrapLimit5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_riflemanOwner;

    // Automatic Variable Declarations
    unitgroup auto006122E7_g;
    int auto006122E7_u;
    unit auto006122E7_var;

    // Variable Initialization
    lv_riflemanOwner = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_sonicTrap[lv_riflemanOwner], EventUnitCreatedUnit());
    if ((UnitGroupCount(gv_sonicTrap[lv_riflemanOwner], c_unitCountAlive) > 5)) {
        auto006122E7_g = gv_sonicTrap[lv_riflemanOwner];
        auto006122E7_u = UnitGroupCount(auto006122E7_g, c_unitCountAll);
        for (;; auto006122E7_u -= 1) {
            auto006122E7_var = UnitGroupUnitFromEnd(auto006122E7_g, auto006122E7_u);
            if (auto006122E7_var == null) { break; }
            UnitKill(auto006122E7_var);
            break;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SonicTrapLimit5_Init () {
    gt_SonicTrapLimit5 = TriggerCreate("gt_SonicTrapLimit5_Func");
    TriggerEnable(gt_SonicTrapLimit5, false);
    TriggerAddEventUnitCreated(gt_SonicTrapLimit5, null, "SonicTrap", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sonic Trap Vision
//--------------------------------------------------------------------------------------------------
bool gt_SonicTrapVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sonicTrapUnit;
    int lv_ownerofSonicTrap;
    fixed lv_revealRadius;
    fixed lv_revealDuration;
    point lv_sonicTrapTargetPoint;

    // Automatic Variable Declarations
    const int auto84B3E8E9_ae = 8;
    int auto84B3E8E9_var;

    // Variable Initialization
    lv_sonicTrapUnit = EventUnit();
    lv_ownerofSonicTrap = UnitGetOwner(lv_sonicTrapUnit);
    lv_revealRadius = 10.0;
    lv_revealDuration = 5.0;
    lv_sonicTrapTargetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    PingCreate(PlayerGroupActive(), "PingWarning", lv_sonicTrapTargetPoint, ColorWithAlpha(76.86, 85.88, 99.22, 49.80), 1.0);
    auto84B3E8E9_var = 1;
    for ( ; auto84B3E8E9_var <= auto84B3E8E9_ae; auto84B3E8E9_var += 1 ) {
        VisRevealArea(auto84B3E8E9_var, RegionCircle(lv_sonicTrapTargetPoint, lv_revealRadius), lv_revealDuration, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SonicTrapVision_Init () {
    gt_SonicTrapVision = TriggerCreate("gt_SonicTrapVision_Func");
    TriggerEnable(gt_SonicTrapVision, false);
    TriggerAddEventUnitAbility(gt_SonicTrapVision, null, AbilityCommand("SonicTrapLevel1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_SonicTrapVision, null, AbilityCommand("SonicTrapLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anticipation
//--------------------------------------------------------------------------------------------------
bool gt_Anticipation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_ownerofAttackingUnit;
    fixed lv_damage;
    int lv_anticipationTextTag;
    fixed lv_anticipationLevel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_ownerofAttackingUnit = gf_NOTDOwnerofUnit(lv_attackingUnit);
    lv_damage = EventUnitDamageAmount();
    lv_anticipationTextTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_attackedUnit) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(lv_attackingUnit), UnitGetPosition(lv_attackedUnit)) > 9.0))) {
            return false;
        }

        if (!(((UnitHasBehavior(lv_attackingUnit, "AnticipationLevel1") == true) || (UnitHasBehavior(lv_attackingUnit, "AnticipationLevel2") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(lv_attackingUnit, "AnticipationLevel1") == true)) {
        lv_damage = (lv_damage * 0.15);
    }
    else if ((UnitHasBehavior(lv_attackingUnit, "AnticipationLevel2") == true)) {
        lv_damage = (lv_damage * 0.3);
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "AnticipationDamage", "Amount", lv_ownerofAttackingUnit, FixedToString(lv_damage, c_fixedPrecisionAny));
    PlayerCreateEffectUnit(lv_ownerofAttackingUnit, "AnticipationDamage", lv_attackedUnit);
    TextTagCreate(((StringExternal("Param/Value/9EE1081C") + FixedToText(lv_damage, 0)) + StringExternal("Param/Value/B74F32C6")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
    lv_anticipationTextTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(50.20, 0.00, 100.00));
    TextTagAttachToUnit(lv_anticipationTextTag, lv_attackingUnit, 2.0);
    TextTagSetVelocity(lv_anticipationTextTag, 0.5, 90.0);
    Wait(1.0, c_timeGame);
    TextTagDestroy(lv_anticipationTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Anticipation_Init () {
    gt_Anticipation = TriggerCreate("gt_Anticipation_Func");
    TriggerEnable(gt_Anticipation, false);
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "PrecisionShotLevel1Damage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "PrecisionShotLevel2Damage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BaseDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BaseDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BaseDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "GaussRifleMini");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "SniperRifleMini");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "M45AMarksmanRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reset Concentration
//--------------------------------------------------------------------------------------------------
bool gt_ResetConcentration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marksmanHero;
    int lv_ownerofMarksman;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_marksmanHero = EventUnit();
    lv_ownerofMarksman = gf_NOTDOwnerofUnit(lv_marksmanHero);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_marksmanHero) == "GhostLaserLines"))) {
            return false;
        }

        if (!((gv_talentLevel[1][lv_ownerofMarksman] > 0))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_marines, lv_marksmanHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerRestart(gv_concentrationTimer[lv_ownerofMarksman]);
    UnitBehaviorRemove(lv_marksmanHero, "ConcentrationLevel1", 1);
    UnitBehaviorRemove(lv_marksmanHero, "ConcentrationLevel2", 1);
    UnitBehaviorRemove(lv_marksmanHero, "ConcentrationLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ResetConcentration_Init () {
    gt_ResetConcentration = TriggerCreate("gt_ResetConcentration_Func");
    TriggerEnable(gt_ResetConcentration, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Concentration Point
//--------------------------------------------------------------------------------------------------
bool gt_AddConcentrationPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_expiredTimer;
    int lv_marksmanOwner;
    unit lv_marksmanHero;
    bool lv_addConcentration;
    int lv_concentrationLevel;

    // Automatic Variable Declarations
    const int auto6AFF5C3C_ae = 8;
    int auto6AFF5C3C_var;

    // Variable Initialization
    lv_expiredTimer = EventTimer();

    // Actions
    if (!runActions) {
        return true;
    }

    auto6AFF5C3C_var = 1;
    for ( ; auto6AFF5C3C_var <= auto6AFF5C3C_ae; auto6AFF5C3C_var += 1 ) {
        if ((lv_expiredTimer == gv_concentrationTimer[auto6AFF5C3C_var])) {
            lv_marksmanOwner = auto6AFF5C3C_var;
            lv_concentrationLevel = gv_talentLevel[1][lv_marksmanOwner];
            lv_marksmanHero = gv_marineHero[lv_marksmanOwner];
            lv_addConcentration = true;
            break;
        }

    }
    if ((lv_addConcentration == true)) {
        if ((lv_concentrationLevel == 1)) {
            UnitBehaviorAddPlayer(lv_marksmanHero, "ConcentrationLevel1", lv_marksmanOwner, 1);
        }
        else if ((lv_concentrationLevel == 2)) {
            UnitBehaviorAddPlayer(lv_marksmanHero, "ConcentrationLevel2", lv_marksmanOwner, 1);
        }
        else if ((lv_concentrationLevel == 3)) {
            UnitBehaviorAddPlayer(lv_marksmanHero, "ConcentrationLevel3", lv_marksmanOwner, 1);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AddConcentrationPoint_Init () {
    gt_AddConcentrationPoint = TriggerCreate("gt_AddConcentrationPoint_Func");
    TriggerEnable(gt_AddConcentrationPoint, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Concentration
//--------------------------------------------------------------------------------------------------
bool gt_Concentration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_ownerofAttackingUnit;
    string lv_classofAttackingUnit;
    fixed lv_damage;
    int lv_concentrationTextTag;
    fixed lv_concentrationTextHeightOffset;
    fixed lv_concentrationDamage;

    // Automatic Variable Declarations
    const int autoF3D45916_n = 10;
    int autoF3D45916_i;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_ownerofAttackingUnit = gf_NOTDOwnerofUnit(lv_attackingUnit);
    lv_classofAttackingUnit = UnitGetType(lv_attackingUnit);
    lv_damage = EventUnitDamageAmount();
    lv_concentrationTextTag = c_textTagNone;
    lv_concentrationTextHeightOffset = 1.5;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((lv_classofAttackingUnit == "GhostLaserLines"))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_marines, lv_attackingUnit) == true))) {
            return false;
        }

        if (!((gv_talentLevel[1][lv_ownerofAttackingUnit] > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerRestart(gv_concentrationTimer[lv_ownerofAttackingUnit]);
    if (((UnitHasBehavior(lv_attackingUnit, "ConcentrationLevel1") == true) || (UnitHasBehavior(lv_attackingUnit, "ConcentrationLevel2") == true) || (UnitHasBehavior(lv_attackingUnit, "ConcentrationLevel3") == true))) {
        lv_concentrationDamage = ((IntToFixed(gv_talentLevel[1][lv_ownerofAttackingUnit]) * 0.2) * lv_damage);
        CatalogFieldValueSet(c_gameCatalogEffect, "Concentration", "Amount", lv_ownerofAttackingUnit, FixedToString(lv_concentrationDamage, c_fixedPrecisionAny));
        UnitCreateEffectUnit(lv_attackingUnit, "Concentration", lv_attackedUnit);
        if ((EventUnitDamageEffect() == "OSOKLevel3BarrettDamage")) {
            UnitCreateEffectUnit(lv_attackingUnit, "OSOKLevel3BarrettBossDamage", lv_attackedUnit);
        }
        if ((EventUnitDamageEffect() == "OSOKLevel3BaseDamage")) {
            UnitCreateEffectUnit(lv_attackingUnit, "OSOKLevel3MarksmanBossDamage", lv_attackedUnit);
        }
        UnitBehaviorRemove(lv_attackingUnit, "ConcentrationLevel1", 1);
        UnitBehaviorRemove(lv_attackingUnit, "ConcentrationLevel2", 1);
        UnitBehaviorRemove(lv_attackingUnit, "ConcentrationLevel3", 1);
        TextTagCreate(((StringExternal("Param/Value/4D701111") + FixedToText(lv_concentrationDamage, 0)) + StringExternal("Param/Value/5E300354")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
        lv_concentrationTextTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        Wait(0.5, c_timeGame);
        TextTagAttachToUnit(lv_concentrationTextTag, lv_attackingUnit, lv_concentrationTextHeightOffset);
        for (autoF3D45916_i = 1; autoF3D45916_i <= autoF3D45916_n; autoF3D45916_i += 1) {
            Wait(0.1, c_timeGame);
            lv_concentrationTextHeightOffset += 0.1;
            TextTagAttachToUnit(lv_concentrationTextTag, lv_attackingUnit, lv_concentrationTextHeightOffset);
        }
        TextTagDestroy(lv_concentrationTextTag);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Concentration_Init () {
    gt_Concentration = TriggerCreate("gt_Concentration_Func");
    TriggerEnable(gt_Concentration, false);
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BaseDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BaseDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BaseDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "Shotgun");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "Crowbar2");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Station
//--------------------------------------------------------------------------------------------------
bool gt_SupplyStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_supplyStationUnit;
    region lv_supplyStationRegion;
    unitgroup lv_marinesAffected;
    int lv_supplyStationLevel;
    int lv_ownerofMarine;
    int lv_localPlayerRoundLimit;
    unit lv_unitType;
    int lv_localMarineMags;
    int lv_totalRounds;

    // Automatic Variable Declarations
    const int autoE6F0CCD1_ae = 25;
    int autoE6F0CCD1_var;
    unitgroup auto7C769B49_g;
    int auto7C769B49_u;
    unit auto7C769B49_var;

    // Variable Initialization
    lv_supplyStationUnit = EventUnitCreatedUnit();
    lv_supplyStationRegion = RegionCircle(UnitGetPosition(lv_supplyStationUnit), 2.7);
    lv_marinesAffected = UnitGroupEmpty();
    lv_supplyStationLevel = gv_talentLevel[4][UnitGetOwner(lv_supplyStationUnit)];

    // Actions
    if (!runActions) {
        return true;
    }

    autoE6F0CCD1_var = 1;
    for ( ; autoE6F0CCD1_var <= autoE6F0CCD1_ae; autoE6F0CCD1_var += 1 ) {
        UnitGroupClear(lv_marinesAffected);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitGroupFilterRegion(gv_marines, lv_supplyStationRegion, 0), lv_marinesAffected);
        auto7C769B49_g = lv_marinesAffected;
        auto7C769B49_u = UnitGroupCount(auto7C769B49_g, c_unitCountAll);
        for (;; auto7C769B49_u -= 1) {
            auto7C769B49_var = UnitGroupUnitFromEnd(auto7C769B49_g, auto7C769B49_u);
            if (auto7C769B49_var == null) { break; }
            lv_ownerofMarine = gf_NOTDOwnerofUnit(auto7C769B49_var);
            lv_localPlayerRoundLimit = gv_playerRoundLimit[lv_ownerofMarine];
            if ((UnitHasBehavior(auto7C769B49_var, "HighCapacityClip") == true)) {
                lv_localMarineMags = 2;
            }
            else {
                lv_localMarineMags = 1;
            }
            if ((UnitGetType(auto7C769B49_var) == "TychusChaingun")) {
                lv_localMarineMags += gv_talentLevel[3][lv_ownerofMarine];
            }
            lv_totalRounds = (gv_playerRoundLimit[lv_ownerofMarine] * lv_localMarineMags);
            if ((gv_marineRounds[lv_ownerofMarine] < lv_totalRounds)) {
                gv_marineRounds[UnitGetOwner(auto7C769B49_var)] += lv_supplyStationLevel;
                if ((gv_marineRounds[lv_ownerofMarine] == (lv_totalRounds + 1))) {
                    gv_marineRounds[UnitGetOwner(auto7C769B49_var)] -= 1;
                }

                libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_ownerofMarine][1], IntToText(gv_marineRounds[lv_ownerofMarine]), PlayerGroupActive());
                if ((UnitHasBehavior(auto7C769B49_var, "Reload") == false)) {
                    UnitAbilityEnable(auto7C769B49_var, "attack", true);
                }

            }

        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyStation_Init () {
    gt_SupplyStation = TriggerCreate("gt_SupplyStation_Func");
    TriggerEnable(gt_SupplyStation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Designator
//--------------------------------------------------------------------------------------------------
bool gt_LaserDesignator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reconOwner;
    fixed lv_revealRadius;
    unit lv_designatedUnit;

    // Automatic Variable Declarations
    const int autoF30A0954_n = 120;
    int autoF30A0954_i;
    playergroup autoB9703D6A_g;
    int autoB9703D6A_var;

    // Variable Initialization
    lv_reconOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_revealRadius = 2.0;
    lv_designatedUnit = EventUnitTargetUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetPosition(lv_designatedUnit) != Point(0.0, 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(lv_designatedUnit), ColorWithAlpha(100.00, 0.00, 0.00, 49.41), 15.0);
    PingSetUnit(PingLastCreated(), lv_designatedUnit);
    if (((UnitGetType(lv_designatedUnit) == "Infestor2") || (UnitGetType(lv_designatedUnit) == "Tartarus") || (UnitGetType(lv_designatedUnit) == "InfestedAbomination2") || (UnitGetType(lv_designatedUnit) == "Deimos") || (UnitGetType(lv_designatedUnit) == "Demeter") || (UnitGetType(lv_designatedUnit) == "Nazara") || (UnitGetType(lv_designatedUnit) == "Apoptosis") || (UnitGetType(lv_designatedUnit) == "Eos") || (UnitGetType(lv_designatedUnit) == "Perses") || (UnitGetType(lv_designatedUnit) == "Ivax") || (UnitGetType(lv_designatedUnit) == "Cronus") || (UnitGetType(lv_designatedUnit) == "Cerberus") || (UnitGetType(lv_designatedUnit) == "Menoetes") || (UnitGetType(lv_designatedUnit) == "Hephaestus"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (UnitTypeGetName(UnitGetType(lv_designatedUnit)) + StringExternal("Param/Value/72B3A8D0")));
        SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    for (autoF30A0954_i = 1; autoF30A0954_i <= autoF30A0954_n; autoF30A0954_i += 1) {
        if ((UnitIsAlive(lv_designatedUnit) == true) && (!(((UnitGetOwner(UnitInventoryUnit(lv_designatedUnit)) >= 1) && (UnitGetOwner(UnitInventoryUnit(lv_designatedUnit)) <= 8))))) {
            autoB9703D6A_g = PlayerGroupActive();
            autoB9703D6A_var = -1;
            while (true) {
                autoB9703D6A_var = PlayerGroupNextPlayer(autoB9703D6A_g, autoB9703D6A_var);
                if (autoB9703D6A_var < 0) { break; }
                VisRevealArea(autoB9703D6A_var, RegionCircle(UnitGetPosition(lv_designatedUnit), lv_revealRadius), 0.51, true);
            }
            Wait(0.5, c_timeGame);
        }
        else {
            PingDestroy(PingLastCreated());
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserDesignator_Init () {
    gt_LaserDesignator = TriggerCreate("gt_LaserDesignator_Func");
    TriggerEnable(gt_LaserDesignator, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare
//--------------------------------------------------------------------------------------------------
bool gt_Flare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reconOwner;
    int lv_flareLevel;
    fixed lv_revealRadius;
    fixed lv_revealDuration;
    point lv_flareTargetPoint;
    unit lv_flareUnit;

    // Automatic Variable Declarations
    const int auto1D17495C_ae = 8;
    int auto1D17495C_var;

    // Variable Initialization
    lv_reconOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_flareLevel = gv_talentLevel[1][lv_reconOwner];
    lv_flareTargetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Flare", 0, lv_reconOwner, lv_flareTargetPoint);
    lv_flareUnit = UnitLastCreated();
    if ((lv_flareLevel == 1)) {
        lv_revealRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Flare", "RevealRadius", lv_reconOwner));
        lv_revealDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Flare", "ExpireDelay", lv_reconOwner));
    }
    else if ((lv_flareLevel == 2)) {
        lv_revealRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Flare2", "RevealRadius", lv_reconOwner));
        lv_revealDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Flare2", "ExpireDelay", lv_reconOwner));
    }
    else if ((lv_flareLevel == 3)) {
        lv_revealRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Flare3", "RevealRadius", lv_reconOwner));
        lv_revealDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "Flare3", "ExpireDelay", lv_reconOwner));
    }
    PingCreate(PlayerGroupActive(), "PingWarning", lv_flareTargetPoint, ColorWithAlpha(76.86, 85.88, 99.22, 49.80), 1.0);
    auto1D17495C_var = 1;
    for ( ; auto1D17495C_var <= auto1D17495C_ae; auto1D17495C_var += 1 ) {
        VisRevealArea(auto1D17495C_var, RegionCircle(lv_flareTargetPoint, lv_revealRadius), lv_revealDuration, false);
    }
    Wait(lv_revealDuration, c_timeGame);
    UnitKill(lv_flareUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare_Init () {
    gt_Flare = TriggerCreate("gt_Flare_Func");
    TriggerEnable(gt_Flare, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaper MK-13 Created
//--------------------------------------------------------------------------------------------------
bool gt_ReaperMK13Created_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reaperMK13Unit;
    int lv_reconOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reaperMK13Unit = EventUnitCreatedUnit();
    lv_reconOwner = gf_NOTDOwnerofUnit(lv_reaperMK13Unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_reaperMK13[lv_reconOwner]);
    Wait(0.2, c_timeGame);
    gv_reaperMK13[lv_reconOwner] = lv_reaperMK13Unit;
    UnitSetPropertyFixed(gv_reaperMK13[lv_reconOwner], c_unitPropLevel, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaperMK13Created_Init () {
    gt_ReaperMK13Created = TriggerCreate("gt_ReaperMK13Created_Func");
    TriggerEnable(gt_ReaperMK13Created, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refresher - Reset Cooldowns
//--------------------------------------------------------------------------------------------------
bool gt_RefresherResetCooldowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reconHero;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reconHero = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(lv_reconHero, AbilityCommand("Sprint", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("Escape", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("Flare", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("CounterMeasures", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("LaserDesignator", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("ReaperMK13", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("SupplyStation", 0), c_spendLocationAbility);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefresherResetCooldowns_Init () {
    gt_RefresherResetCooldowns = TriggerCreate("gt_RefresherResetCooldowns_Func");
    TriggerEnable(gt_RefresherResetCooldowns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape - Reset Sprint Cooldown
//--------------------------------------------------------------------------------------------------
bool gt_EscapeResetSprintCooldown_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup autoB1DD6AE6_g;
    int autoB1DD6AE6_u;
    unit autoB1DD6AE6_var;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.05, c_timeGame);
    autoB1DD6AE6_g = gv_marines;
    autoB1DD6AE6_u = UnitGroupCount(autoB1DD6AE6_g, c_unitCountAll);
    for (;; autoB1DD6AE6_u -= 1) {
        autoB1DD6AE6_var = UnitGroupUnitFromEnd(autoB1DD6AE6_g, autoB1DD6AE6_u);
        if (autoB1DD6AE6_var == null) { break; }
        if (((UnitHasBehavior(autoB1DD6AE6_var, "EscapeLevel1") == true) || (UnitHasBehavior(autoB1DD6AE6_var, "EscapeLevel2") == true))) {
            UnitAbilityReset(autoB1DD6AE6_var, AbilityCommand("Sprint", 0), c_spendLocationAbility);
            UnitIssueOrder(autoB1DD6AE6_var, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EscapeResetSprintCooldown_Init () {
    gt_EscapeResetSprintCooldown = TriggerCreate("gt_EscapeResetSprintCooldown_Func");
    TriggerEnable(gt_EscapeResetSprintCooldown, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armageddon Bomb - Limit 3
//--------------------------------------------------------------------------------------------------
bool gt_ArmageddonBombLimit3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_demoOwner;

    // Automatic Variable Declarations
    unitgroup auto9B9CE934_g;
    int auto9B9CE934_u;
    unit auto9B9CE934_var;

    // Variable Initialization
    lv_demoOwner = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_armageddonBomb[lv_demoOwner], EventUnitCreatedUnit());
    if ((UnitGroupCount(gv_armageddonBomb[lv_demoOwner], c_unitCountAlive) > 3)) {
        auto9B9CE934_g = gv_armageddonBomb[lv_demoOwner];
        auto9B9CE934_u = UnitGroupCount(auto9B9CE934_g, c_unitCountAll);
        for (;; auto9B9CE934_u -= 1) {
            auto9B9CE934_var = UnitGroupUnitFromEnd(auto9B9CE934_g, auto9B9CE934_u);
            if (auto9B9CE934_var == null) { break; }
            UnitKill(auto9B9CE934_var);
            break;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmageddonBombLimit3_Init () {
    gt_ArmageddonBombLimit3 = TriggerCreate("gt_ArmageddonBombLimit3_Func");
    TriggerEnable(gt_ArmageddonBombLimit3, false);
    TriggerAddEventUnitCreated(gt_ArmageddonBombLimit3, null, "Armageddon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Vulnerability
//--------------------------------------------------------------------------------------------------
bool gt_FireVulnerability_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagedUnit;
    fixed lv_damageDealt;
    fixed lv_damageMultiplier;
    unit lv_damagingUnit;
    int lv_ownerofDamagingUnit;
    string lv_effectUsed;
    string lv_deathType;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_damagedUnit = EventUnit();
    lv_damageDealt = EventUnitDamageAmount();
    lv_damagingUnit = EventUnitDamageSourceUnit();
    lv_ownerofDamagingUnit = gf_NOTDOwnerofUnit(lv_damagingUnit);
    lv_effectUsed = "";
    lv_deathType = "";

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior(lv_damagedUnit, "FireVulnerabilityLevel1") == true) || (UnitHasBehavior(lv_damagedUnit, "FireVulnerabilityLevel2") == true) || (UnitHasBehavior(lv_damagedUnit, "FireVulnerabilityHEAmmo") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior(lv_damagedUnit, "FireVulnerabilityLevel1") == true) || (UnitHasBehavior(lv_damagedUnit, "FireVulnerabilityHEAmmo") == true))) {
        lv_damageMultiplier = 0.5;
    }
    else if ((UnitHasBehavior(lv_damagedUnit, "FireVulnerabilityLevel2") == true)) {
        lv_damageMultiplier = 1.0;
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "FireVulnerabilityDamage", "Amount", lv_ownerofDamagingUnit, FixedToString((lv_damageDealt * lv_damageMultiplier), c_fixedPrecisionAny));
    lv_effectUsed = (EventUnitDamageEffect());
    lv_deathType = CatalogFieldValueGet(c_gameCatalogEffect, lv_effectUsed, "Death", c_playerAny);
    CatalogFieldValueSet(c_gameCatalogEffect, "FireVulnerabilityDamage", "Death", lv_ownerofDamagingUnit, lv_deathType);
    UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "FireVulnerabilityDamage", lv_damagedUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireVulnerability_Init () {
    gt_FireVulnerability = TriggerCreate("gt_FireVulnerability_Func");
    TriggerEnable(gt_FireVulnerability, false);
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "VultureSpiderMinesDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "SatchelLevel1Damage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "SatchelLevel2Damage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "ArmageddonDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "ArmageddonAfterShockDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "NapalmBarrageDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernoDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "BURNDamageLevel1");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "BURNDamageLevel2");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "BurstFireDamageLevel1");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "BurstFireDamageLevel2");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "BurstFireDamageLevel3");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "NapalmBarrageDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "SigmaDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "ThermalLancesMU");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "NukeDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
    TriggerAddEventUnitDamaged(gt_FireVulnerability, null, c_unitDamageTypeAny, c_unitDamageEither, "ExplodingBarrelLargeExplosion");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Nexus - Revoke Shared Vision
//--------------------------------------------------------------------------------------------------
bool gt_FieldNexusRevokeSharedVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_killedFieldNexus;
    int lv_currentNumberofFieldNexus;
    int lv_localInt;
    unit lv_localUnit;

    // Automatic Variable Declarations
    const int auto7C2E8760_ae = 8;
    int auto7C2E8760_var;
    const int auto3238C2B6_ae = 8;
    int auto3238C2B6_var;
    const int autoA7473437_ae = 8;
    const int autoA7473437_ai = 1;
    const int auto78B9422F_ae = 8;
    const int auto78B9422F_ai = 1;
    unitgroup autoB06AF8D1_g;
    int autoB06AF8D1_u;
    unit autoB06AF8D1_var;
    unitgroup auto35764788_g;
    int auto35764788_u;
    unit auto35764788_var;
    unitgroup auto2222CC65_g;
    int auto2222CC65_u;

    // Variable Initialization
    lv_killedFieldNexus = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_killedFieldNexus) == "FieldNexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    auto7C2E8760_var = 1;
    for ( ; auto7C2E8760_var <= auto7C2E8760_ae; auto7C2E8760_var += 1 ) {
        if ((UnitIsValid(gv_fieldNexus[auto7C2E8760_var]) == true) && (UnitIsAlive(gv_fieldNexus[auto7C2E8760_var]) == true)) {
            lv_currentNumberofFieldNexus += 1;
        }

    }
    if ((lv_currentNumberofFieldNexus == 0)) {
        auto3238C2B6_var = 1;
        for ( ; auto3238C2B6_var <= auto3238C2B6_ae; auto3238C2B6_var += 1 ) {
            if ((PlayerStatus(auto3238C2B6_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[auto3238C2B6_var]) == true)) {
                lv_localInt = 1;
                for ( ; ( (autoA7473437_ai >= 0 && lv_localInt <= autoA7473437_ae) || (autoA7473437_ai < 0 && lv_localInt >= autoA7473437_ae) ) ; lv_localInt += autoA7473437_ai ) {
                    if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (lv_localInt != auto3238C2B6_var)) {
                        if ((PlayerGetAlliance(lv_localInt, c_allianceIdControl, auto3238C2B6_var) == true)) {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto3238C2B6_var, libNtve_ge_AllianceSetting_Ally);
                            PlayerSetAlliance(lv_localInt, c_allianceIdControl, auto3238C2B6_var, true);
                        }
                        else {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto3238C2B6_var, libNtve_ge_AllianceSetting_Ally);
                        }
                    }
                    else if ((PlayerStatus(lv_localInt) == c_playerStatusLeft) && (lv_localInt != auto3238C2B6_var)) {
                        libNtve_gf_SetAllianceOneWay(lv_localInt, auto3238C2B6_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                    }
                }
            }
            else if ((PlayerStatus(auto3238C2B6_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[auto3238C2B6_var]) == false)) {
                lv_localInt = 1;
                for ( ; ( (auto78B9422F_ai >= 0 && lv_localInt <= auto78B9422F_ae) || (auto78B9422F_ai < 0 && lv_localInt >= auto78B9422F_ae) ) ; lv_localInt += auto78B9422F_ai ) {
                    if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (lv_localInt != auto3238C2B6_var)) {
                        if ((PlayerGetAlliance(lv_localInt, c_allianceIdControl, auto3238C2B6_var) == true)) {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto3238C2B6_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                        }
                        else {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto3238C2B6_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                        }
                    }
                    else if ((PlayerStatus(lv_localInt) == c_playerStatusLeft) && (lv_localInt != auto3238C2B6_var)) {
                        libNtve_gf_SetAllianceOneWay(lv_localInt, auto3238C2B6_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                    }
                }
            }
        }
    }

    autoB06AF8D1_g = gv_marines;
    autoB06AF8D1_u = UnitGroupCount(autoB06AF8D1_g, c_unitCountAll);
    for (;; autoB06AF8D1_u -= 1) {
        autoB06AF8D1_var = UnitGroupUnitFromEnd(autoB06AF8D1_g, autoB06AF8D1_u);
        if (autoB06AF8D1_var == null) { break; }
        if ((UnitGetType(autoB06AF8D1_var) == "PsiOps") && ((UnitHasBehavior(autoB06AF8D1_var, "MindLinkLevel1") == true) || (UnitHasBehavior(autoB06AF8D1_var, "MindLinkLevel2") == true) || (UnitHasBehavior(autoB06AF8D1_var, "MindLinkLevel3") == true))) {
            auto35764788_g = gv_mindLinkedGroup[UnitGetOwner(auto35764788_var)];
            auto35764788_u = UnitGroupCount(auto35764788_g, c_unitCountAll);
            for (;; auto35764788_u -= 1) {
                auto35764788_var = UnitGroupUnitFromEnd(auto35764788_g, auto35764788_u);
                if (auto35764788_var == null) { break; }
                auto2222CC65_g = gv_mindLinkedGroup[UnitGetOwner(auto35764788_var)];
                auto2222CC65_u = UnitGroupCount(auto2222CC65_g, c_unitCountAll);
                for (;; auto2222CC65_u -= 1) {
                    lv_localUnit = UnitGroupUnitFromEnd(auto2222CC65_g, auto2222CC65_u);
                    if (lv_localUnit == null) { break; }
                    libNtve_gf_SetAlliance(UnitGetOwner(auto35764788_var), UnitGetOwner(lv_localUnit), libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldNexusRevokeSharedVision_Init () {
    gt_FieldNexusRevokeSharedVision = TriggerCreate("gt_FieldNexusRevokeSharedVision_Func");
    TriggerEnable(gt_FieldNexusRevokeSharedVision, false);
    TriggerAddEventUnitDied(gt_FieldNexusRevokeSharedVision, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Nexus - Share Vision
//--------------------------------------------------------------------------------------------------
bool gt_FieldNexusShareVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_fieldNexusUnit;
    int lv_localInt;
    int lv_engineerOwner;
    int lv_currentNumberofFieldNexus;

    // Automatic Variable Declarations
    const int auto65C682A5_ae = 8;
    int auto65C682A5_var;
    const int auto0A16C072_ae = 8;
    const int auto0A16C072_ai = 1;
    const int auto9904CA55_ae = 8;
    const int auto9904CA55_ai = 1;
    const int auto2E2FD9E5_ae = 8;
    const int auto2E2FD9E5_ai = 1;

    // Variable Initialization
    lv_fieldNexusUnit = EventUnitCreatedUnit();
    lv_engineerOwner = UnitGetOwner(lv_fieldNexusUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_fieldNexusUnit) == "FieldNexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(gv_fieldNexus[lv_engineerOwner]) == true) && (UnitIsAlive(gv_fieldNexus[lv_engineerOwner]) == true)) {
        UnitKill(gv_fieldNexus[lv_engineerOwner]);
    }

    gv_fieldNexus[lv_engineerOwner] = lv_fieldNexusUnit;
    auto65C682A5_var = 1;
    for ( ; auto65C682A5_var <= auto65C682A5_ae; auto65C682A5_var += 1 ) {
        lv_localInt = 1;
        for ( ; ( (auto0A16C072_ai >= 0 && lv_localInt <= auto0A16C072_ae) || (auto0A16C072_ai < 0 && lv_localInt >= auto0A16C072_ae) ) ; lv_localInt += auto0A16C072_ai ) {
            if ((PlayerStatus(auto65C682A5_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[auto65C682A5_var]) == true)) {
                lv_localInt = 1;
                for ( ; ( (auto9904CA55_ai >= 0 && lv_localInt <= auto9904CA55_ae) || (auto9904CA55_ai < 0 && lv_localInt >= auto9904CA55_ae) ) ; lv_localInt += auto9904CA55_ai ) {
                    if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (lv_localInt != auto65C682A5_var)) {
                        if ((PlayerGetAlliance(lv_localInt, c_allianceIdControl, auto65C682A5_var) == true)) {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto65C682A5_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                        }
                        else {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto65C682A5_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                        }
                    }
                    else if ((PlayerStatus(lv_localInt) == c_playerStatusLeft) && (lv_localInt != auto65C682A5_var) && (gv_playerKarma[auto65C682A5_var] >= 1525)) {
                        libNtve_gf_SetAllianceOneWay(lv_localInt, auto65C682A5_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                    }
                }
            }
            else if ((PlayerStatus(auto65C682A5_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[auto65C682A5_var]) == false)) {
                lv_localInt = 1;
                for ( ; ( (auto2E2FD9E5_ai >= 0 && lv_localInt <= auto2E2FD9E5_ae) || (auto2E2FD9E5_ai < 0 && lv_localInt >= auto2E2FD9E5_ae) ) ; lv_localInt += auto2E2FD9E5_ai ) {
                    if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (lv_localInt != auto65C682A5_var)) {
                        if ((PlayerGetAlliance(lv_localInt, c_allianceIdControl, auto65C682A5_var) == true)) {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto65C682A5_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                        }
                        else {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, auto65C682A5_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                        }
                    }
                    else if ((PlayerStatus(lv_localInt) == c_playerStatusLeft) && (lv_localInt != auto65C682A5_var) && (gv_playerKarma[auto65C682A5_var] >= 1525)) {
                        libNtve_gf_SetAllianceOneWay(lv_localInt, auto65C682A5_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldNexusShareVision_Init () {
    gt_FieldNexusShareVision = TriggerCreate("gt_FieldNexusShareVision_Func");
    TriggerEnable(gt_FieldNexusShareVision, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Synergy
//--------------------------------------------------------------------------------------------------
bool gt_Synergy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_ownerofAttackingUnit;
    string lv_classofAttackingUnit;
    fixed lv_damage;
    int lv_synergyTextTag;
    fixed lv_synergyTextHeightOffset;
    fixed lv_synergyDamage;
    fixed lv_damageFactor;
    int lv_synergyLevel;

    // Automatic Variable Declarations
    const int autoE77BADAD_n = 10;
    int autoE77BADAD_i;
    const int auto72CFF8DC_n = 10;
    int auto72CFF8DC_i;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_ownerofAttackingUnit = gf_NOTDOwnerofUnit(lv_attackingUnit);
    lv_classofAttackingUnit = UnitGetType(lv_attackingUnit);
    lv_damage = EventUnitDamageAmount();
    lv_synergyTextTag = c_textTagNone;
    lv_synergyTextHeightOffset = 1.5;
    lv_damageFactor = 0.2;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_attackedUnit) == true))) {
            return false;
        }

        if (!(((lv_ownerofAttackingUnit >= 1) && (lv_ownerofAttackingUnit <= 8)))) {
            return false;
        }

        if (!(((lv_classofAttackingUnit == "Engineer") || (lv_classofAttackingUnit == "X1GuardianLevel1") || (lv_classofAttackingUnit == "X1GuardianLevel2") || (lv_classofAttackingUnit == "X1GuardianLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_synergyLevel = gv_talentLevel[9][lv_ownerofAttackingUnit];
    if ((lv_synergyLevel > 0)) {
        if (((lv_classofAttackingUnit == "Engineer") && (gv_synergyTargetUnit[lv_ownerofAttackingUnit] == lv_attackedUnit) && (TimerGetRemaining(gv_synergyTimerGuardian[lv_ownerofAttackingUnit]) > 0.0))) {
            lv_synergyDamage = (lv_damage * (lv_damageFactor * IntToFixed(lv_synergyLevel)));
            CatalogFieldValueSet(c_gameCatalogEffect, "SynergyDamage", "Amount", lv_ownerofAttackingUnit, FixedToString(lv_synergyDamage, c_fixedPrecisionAny));
            PlayerCreateEffectUnit(lv_ownerofAttackingUnit, "SynergyDamage", lv_attackedUnit);
            Wait(1.0, c_timeGame);
            TextTagCreate(((StringExternal("Param/Value/D7D37A75") + FixedToText(lv_synergyDamage, 0)) + StringExternal("Param/Value/1FBBBF5D")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
            lv_synergyTextTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            TextTagAttachToUnit(lv_synergyTextTag, lv_attackingUnit, lv_synergyTextHeightOffset);
            for (autoE77BADAD_i = 1; autoE77BADAD_i <= autoE77BADAD_n; autoE77BADAD_i += 1) {
                Wait(0.1, c_timeGame);
                lv_synergyTextHeightOffset += 0.1;
                TextTagAttachToUnit(lv_synergyTextTag, lv_attackingUnit, lv_synergyTextHeightOffset);
            }
            TextTagDestroy(lv_synergyTextTag);
        }

        if ((((lv_classofAttackingUnit == "X1GuardianLevel1") || (lv_classofAttackingUnit == "X1GuardianLevel2") || (lv_classofAttackingUnit == "X1GuardianLevel3")) && (gv_synergyTargetUnit[lv_ownerofAttackingUnit] == lv_attackedUnit) && (TimerGetRemaining(gv_synergyTimerEngineer[lv_ownerofAttackingUnit]) > 0.0))) {
            lv_synergyDamage = (lv_damage * (lv_damageFactor * IntToFixed(lv_synergyLevel)));
            CatalogFieldValueSet(c_gameCatalogEffect, "SynergyDamage", "Amount", lv_ownerofAttackingUnit, FixedToString(lv_synergyDamage, c_fixedPrecisionAny));
            UnitCreateEffectUnit(lv_attackingUnit, "SynergyDamage", lv_attackedUnit);
            Wait(1.0, c_timeGame);
            TextTagCreate(((StringExternal("Param/Value/70C72E9D") + FixedToText(lv_synergyDamage, 0)) + StringExternal("Param/Value/6EC6EDF6")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
            lv_synergyTextTag = TextTagLastCreated();
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(0.00, 0.00, 100.00));
            TextTagAttachToUnit(lv_synergyTextTag, lv_attackingUnit, lv_synergyTextHeightOffset);
            for (auto72CFF8DC_i = 1; auto72CFF8DC_i <= auto72CFF8DC_n; auto72CFF8DC_i += 1) {
                Wait(0.1, c_timeGame);
                lv_synergyTextHeightOffset += 0.1;
                TextTagAttachToUnit(lv_synergyTextTag, lv_attackingUnit, lv_synergyTextHeightOffset);
            }
            TextTagDestroy(lv_synergyTextTag);
        }

        gv_synergyTargetUnit[lv_ownerofAttackingUnit] = lv_attackedUnit;
        if ((lv_classofAttackingUnit == "Engineer")) {
            TimerStart(gv_synergyTimerEngineer[lv_ownerofAttackingUnit], 2.0, false, c_timeGame);
        }

        if (((lv_classofAttackingUnit == "X1GuardianLevel1") || (lv_classofAttackingUnit == "X1GuardianLevel2") || (lv_classofAttackingUnit == "X1GuardianLevel3"))) {
            TimerStart(gv_synergyTimerGuardian[lv_ownerofAttackingUnit], 2.0, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Synergy_Init () {
    gt_Synergy = TriggerCreate("gt_Synergy_Func");
    TriggerEnable(gt_Synergy, false);
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "Shotgun");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "Crowbar2");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "CombatKnifeDamage");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "DiamondbackBeam");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "X1EvisceratorBeamLevel2");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "X1EvisceratorBeamLevel3");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "ThermalLancesMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: X-1 Guardian
//--------------------------------------------------------------------------------------------------
bool gt_X1Guardian_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_x1GuardianUnit;
    int lv_engineerOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_x1GuardianUnit = EventUnitCreatedUnit();
    lv_engineerOwner = gf_NOTDOwnerofUnit(lv_x1GuardianUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_x1Guardian[lv_engineerOwner]);
    Wait(0.2, c_timeGame);
    gv_x1Guardian[lv_engineerOwner] = lv_x1GuardianUnit;
    if ((gv_fPS[lv_engineerOwner] == true)) {
        UnitSetState(lv_x1GuardianUnit, c_unitStateStatusBar, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_X1Guardian_Init () {
    gt_X1Guardian = TriggerCreate("gt_X1Guardian_Func");
    TriggerEnable(gt_X1Guardian, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tactical Nuke
//--------------------------------------------------------------------------------------------------
bool gt_TacticalNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_commandoOwner;
    fixed lv_revealRadius;
    fixed lv_revealDuration;
    point lv_tacticalNukeTargetPoint;

    // Automatic Variable Declarations
    const int auto79B744ED_ae = 8;
    int auto79B744ED_var;

    // Variable Initialization
    lv_commandoOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_revealRadius = 9.0;
    lv_revealDuration = 12.0;
    lv_tacticalNukeTargetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    PingCreate(PlayerGroupActive(), "PingWarning", lv_tacticalNukeTargetPoint, ColorWithAlpha(100.00, 0.00, 0.00, 49.02), 5.0);
    SoundPlay(SoundLink("THorner03Adjutant00053", -1), PlayerGroupActive(), 100.0, 0.0);
    auto79B744ED_var = 1;
    for ( ; auto79B744ED_var <= auto79B744ED_ae; auto79B744ED_var += 1 ) {
        VisRevealArea(auto79B744ED_var, RegionCircle(lv_tacticalNukeTargetPoint, lv_revealRadius), lv_revealDuration, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TacticalNuke_Init () {
    gt_TacticalNuke = TriggerCreate("gt_TacticalNuke_Func");
    TriggerEnable(gt_TacticalNuke, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ravaging Phantom
//--------------------------------------------------------------------------------------------------
bool gt_RavagingPhantom_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Egg"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }

        if (!((((EventUnitDamageEffect() != "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel1") == true) && (RandomInt(1, 100) <= 40)) || ((EventUnitDamageEffect() != "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel2") == true) && (RandomInt(1, 100) <= 80)) || ((EventUnitDamageEffect() == "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel1") == true) && (RandomInt(1, 100) <= 25)) || ((EventUnitDamageEffect() == "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel2") == true) && (RandomInt(1, 100) <= 50))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, UnitGetType(EventUnit()), c_unitCreateIgnorePlacement, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(EventUnit()), UnitGetFacing(EventUnit()));
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.700000");
    UnitBehaviorAdd(UnitLastCreated(), "PhantomSuicide", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavagingPhantom_Init () {
    gt_RavagingPhantom = TriggerCreate("gt_RavagingPhantom_Func");
    TriggerEnable(gt_RavagingPhantom, false);
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageLevel1Damage");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageLevel2Damage");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageLevel3Damage");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageDamageExtraStunLevel1");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageDamageExtraStunLevel2");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageDamageExtraStunLevel3");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "PsionicTempestDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inception
//--------------------------------------------------------------------------------------------------
bool gt_Inception_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiOpsHero;

    // Automatic Variable Declarations
    const int auto537E1884_n = 15;
    int auto537E1884_i;
    const int auto5C66BB53_n = 6;
    int auto5C66BB53_i;

    // Variable Initialization
    lv_psiOpsHero = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("NOTDInception", 1.0);
    SoundPlay(SoundLink("InceptionStart", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_cinematicMode = true;
    gv_inceptionOn = true;
    Wait(1.0, c_timeGame);
    gv_hexCycle = 0.85;
    for (auto537E1884_i = 1; auto537E1884_i <= auto537E1884_n; auto537E1884_i += 1) {
        Wait(1.0, c_timeGame);
        for (auto5C66BB53_i = 1; auto5C66BB53_i <= auto5C66BB53_n; auto5C66BB53_i += 1) {
            if ((RandomInt(0, 1) == 1)) {
                PlayerCreateEffectPoint(0, "MentalProjectionSearchDummy2", RegionRandomPoint(RegionCircle(UnitGetPosition(lv_psiOpsHero), 21.0)));
            }

        }
    }
    SoundPlay(SoundLink("InceptionEnd", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((UnitIsAlive(gv_boss) == true) && (UnitGetType(gv_boss) == "Apoptosis")) {
        GameSetLighting("NOTDApoptosisLighting", 1.0);
    }
    else if ((gv_trainingFieldMode == true)) {
        GameSetLighting("NOTDDarkness", 1.0);
    }
    else if ((gv_storyline == 1)) {
        GameSetLighting("UnknownLight", 1.0);
    }
    else if ((gv_storyline == 2)) {
        GameSetLighting("NOTDAlphaCompanyLight", 1.0);
    }
    else if ((gv_storyline == 3)) {
        GameSetLighting("NOTDSecTeamLight", 1.0);
    }
    Wait(1.0, c_timeGame);
    gv_hexCycle = 0.5;
    gv_cinematicMode = false;
    gv_inceptionOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Inception_Init () {
    gt_Inception = TriggerCreate("gt_Inception_Func");
    TriggerEnable(gt_Inception, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind-Link Share Damage
//--------------------------------------------------------------------------------------------------
bool gt_MindLinkShareDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackedMarine;
    int lv_mindLinkedGroupPsiOpsOwner;
    int lv_unitCountofMindLinkedGroup;
    int lv_mindLinkLevel;
    fixed lv_correctDamage;

    // Automatic Variable Declarations
    const int auto27D59491_ae = 8;
    int auto27D59491_var;
    unitgroup auto01DFAC2C_g;
    int auto01DFAC2C_u;
    unit auto01DFAC2C_var;

    // Variable Initialization
    lv_attackedMarine = EventUnit();
    lv_correctDamage = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() != "MindLinkDamage"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 0.5))) {
            return false;
        }

        if (!(((UnitHasBehavior(lv_attackedMarine, "MindLinkLevel1") == true) || (UnitHasBehavior(lv_attackedMarine, "MindLinkLevel2") == true) || (UnitHasBehavior(lv_attackedMarine, "MindLinkLevel3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto27D59491_var = 1;
    for ( ; auto27D59491_var <= auto27D59491_ae; auto27D59491_var += 1 ) {
        if ((UnitGroupHasUnit(gv_mindLinkedGroup[auto27D59491_var], lv_attackedMarine) == true)) {
            lv_mindLinkedGroupPsiOpsOwner = auto27D59491_var;
            break;
        }

    }
    lv_unitCountofMindLinkedGroup = UnitGroupCount(gv_mindLinkedGroup[lv_mindLinkedGroupPsiOpsOwner], c_unitCountAlive);
    if ((UnitHasBehavior(lv_attackedMarine, "MindLinkLevel1") == true)) {
        lv_mindLinkLevel = 1;
    }
    else if ((UnitHasBehavior(lv_attackedMarine, "MindLinkLevel2") == true)) {
        lv_mindLinkLevel = 2;
    }
    else if ((UnitHasBehavior(lv_attackedMarine, "MindLinkLevel3") == true)) {
        lv_mindLinkLevel = 3;
    }
    lv_correctDamage *= (1.0 - (lv_mindLinkLevel * 0.15));
    lv_correctDamage /= IntToFixed(lv_unitCountofMindLinkedGroup);
    UnitSetPropertyFixed(lv_attackedMarine, c_unitPropLife, (UnitGetPropertyFixed(lv_attackedMarine, c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    auto01DFAC2C_g = gv_mindLinkedGroup[lv_mindLinkedGroupPsiOpsOwner];
    auto01DFAC2C_u = UnitGroupCount(auto01DFAC2C_g, c_unitCountAll);
    for (;; auto01DFAC2C_u -= 1) {
        auto01DFAC2C_var = UnitGroupUnitFromEnd(auto01DFAC2C_g, auto01DFAC2C_u);
        if (auto01DFAC2C_var == null) { break; }
        UnitDamage(auto01DFAC2C_var, "MindLinkDamage", auto01DFAC2C_var, lv_correctDamage);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MindLinkShareDamage_Init () {
    gt_MindLinkShareDamage = TriggerCreate("gt_MindLinkShareDamage_Func");
    TriggerEnable(gt_MindLinkShareDamage, false);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[3]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[4]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[5]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[6]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[8]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind-Link Share Vision
//--------------------------------------------------------------------------------------------------
bool gt_MindLinkShareVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiOpsHero;
    int lv_psiOpsOwner;
    int lv_mindLinkLevel;
    string lv_mindLinkBehavior;
    int lv_numberofMindLinkedUnits;
    int lv_iLocal;
    unit lv_localUnit;

    // Automatic Variable Declarations
    unitgroup auto3D9E43EE_g;
    int auto3D9E43EE_u;
    unit auto3D9E43EE_var;
    unitgroup autoBC998E87_g;
    int autoBC998E87_u;
    unitgroup auto3D71412D_g;
    int auto3D71412D_u;
    unit auto3D71412D_var;
    unitgroup autoB6F7211D_g;
    int autoB6F7211D_u;
    unit autoB6F7211D_var;
    unitgroup auto18598D08_g;
    int auto18598D08_u;

    // Variable Initialization
    lv_psiOpsHero = EventUnit();
    lv_psiOpsOwner = gf_NOTDOwnerofUnit(lv_psiOpsHero);
    lv_mindLinkLevel = gv_talentLevel[7][lv_psiOpsOwner];

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_mindLinkLevel == 1)) {
        lv_mindLinkBehavior = "MindLinkLevel1";
    }
    else if ((lv_mindLinkLevel == 2)) {
        lv_mindLinkBehavior = "MindLinkLevel2";
    }
    else if ((lv_mindLinkLevel == 3)) {
        lv_mindLinkBehavior = "MindLinkLevel3";
    }
    UnitGroupRemove(gv_mindLinkedGroup[lv_psiOpsOwner], lv_psiOpsHero);
    UnitGroupAdd(gv_mindLinkedGroup[lv_psiOpsOwner], lv_psiOpsHero);
    auto3D9E43EE_g = gv_mindLinkedGroup[lv_psiOpsOwner];
    auto3D9E43EE_u = UnitGroupCount(auto3D9E43EE_g, c_unitCountAll);
    for (;; auto3D9E43EE_u -= 1) {
        auto3D9E43EE_var = UnitGroupUnitFromEnd(auto3D9E43EE_g, auto3D9E43EE_u);
        if (auto3D9E43EE_var == null) { break; }
        UnitBehaviorRemove(auto3D9E43EE_var, "MindLinkLevel1", 1);
        UnitBehaviorRemove(auto3D9E43EE_var, "MindLinkLevel2", 1);
        UnitBehaviorRemove(auto3D9E43EE_var, "MindLinkLevel3", 1);
        UnitBehaviorAdd(auto3D9E43EE_var, lv_mindLinkBehavior, auto3D9E43EE_var, 1);
        autoBC998E87_g = gv_mindLinkedGroup[lv_psiOpsOwner];
        autoBC998E87_u = UnitGroupCount(autoBC998E87_g, c_unitCountAll);
        for (;; autoBC998E87_u -= 1) {
            lv_localUnit = UnitGroupUnitFromEnd(autoBC998E87_g, autoBC998E87_u);
            if (lv_localUnit == null) { break; }
            if (((UnitGetOwner(auto3D9E43EE_var) >= 1) && (UnitGetOwner(auto3D9E43EE_var) <= 8)) && (PlayerStatus(UnitGetOwner(auto3D9E43EE_var)) == c_playerStatusLeft)) {
                libNtve_gf_SetAlliance(UnitGetOwner(auto3D9E43EE_var), UnitGetOwner(lv_localUnit), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
            }
            else if (((UnitGetOwner(auto3D9E43EE_var) >= 1) && (UnitGetOwner(auto3D9E43EE_var) <= 8))) {
                libNtve_gf_SetAlliance(UnitGetOwner(auto3D9E43EE_var), UnitGetOwner(lv_localUnit), libNtve_ge_AllianceSetting_Ally);
            }
        }
    }
    UnitGroupAdd(gv_mindLinkedGroup[lv_psiOpsOwner], EventUnitTargetUnit());
    lv_numberofMindLinkedUnits = UnitGroupCount(gv_mindLinkedGroup[lv_psiOpsOwner], c_unitCountAlive);
    if ((lv_numberofMindLinkedUnits > (lv_mindLinkLevel + 1))) {
        auto3D71412D_g = gv_mindLinkedGroup[lv_psiOpsOwner];
        auto3D71412D_u = UnitGroupCount(auto3D71412D_g, c_unitCountAll);
        for (;; auto3D71412D_u -= 1) {
            auto3D71412D_var = UnitGroupUnitFromEnd(auto3D71412D_g, auto3D71412D_u);
            if (auto3D71412D_var == null) { break; }
            UnitGroupRemove(gv_mindLinkedGroup[lv_psiOpsOwner], auto3D71412D_var);
            UnitBehaviorRemove(auto3D71412D_var, lv_mindLinkBehavior, 1);
            break;
        }
    }

    autoB6F7211D_g = gv_mindLinkedGroup[lv_psiOpsOwner];
    autoB6F7211D_u = UnitGroupCount(autoB6F7211D_g, c_unitCountAll);
    for (;; autoB6F7211D_u -= 1) {
        autoB6F7211D_var = UnitGroupUnitFromEnd(autoB6F7211D_g, autoB6F7211D_u);
        if (autoB6F7211D_var == null) { break; }
        auto18598D08_g = gv_mindLinkedGroup[lv_psiOpsOwner];
        auto18598D08_u = UnitGroupCount(auto18598D08_g, c_unitCountAll);
        for (;; auto18598D08_u -= 1) {
            lv_localUnit = UnitGroupUnitFromEnd(auto18598D08_g, auto18598D08_u);
            if (lv_localUnit == null) { break; }
            if (((UnitGetOwner(autoB6F7211D_var) >= 1) && (UnitGetOwner(autoB6F7211D_var) <= 8)) && (PlayerStatus(UnitGetOwner(autoB6F7211D_var)) == c_playerStatusLeft)) {
                libNtve_gf_SetAlliance(gf_NOTDOwnerofUnit(autoB6F7211D_var), gf_NOTDOwnerofUnit(lv_localUnit), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
            }
            else if (((UnitGetOwner(autoB6F7211D_var) >= 1) && (UnitGetOwner(autoB6F7211D_var) <= 8))) {
                libNtve_gf_SetAlliance(gf_NOTDOwnerofUnit(autoB6F7211D_var), gf_NOTDOwnerofUnit(lv_localUnit), libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MindLinkShareVision_Init () {
    gt_MindLinkShareVision = TriggerCreate("gt_MindLinkShareVision_Func");
    TriggerEnable(gt_MindLinkShareVision, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel Mind-Link
//--------------------------------------------------------------------------------------------------
bool gt_CancelMindLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofPsiOps;
    unit lv_localUnit;
    int lv_localInt;
    int lv_fieldNexusCount;

    // Automatic Variable Declarations
    unitgroup autoEBD5DA63_g;
    int autoEBD5DA63_u;
    unit autoEBD5DA63_var;
    unitgroup auto0E0867E5_g;
    int auto0E0867E5_u;
    unit auto0E0867E5_var;
    unitgroup auto18DDA97D_g;
    int auto18DDA97D_u;
    const int auto0354EF37_ae = 8;
    int auto0354EF37_var;
    const int autoDBA659B6_ae = 8;
    int autoDBA659B6_var;
    const int auto488841B9_ae = 8;
    int auto488841B9_var;
    const int autoF7AB73FC_ae = 8;
    const int autoF7AB73FC_ai = 1;

    // Variable Initialization
    lv_ownerofPsiOps = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    autoEBD5DA63_g = gv_mindLinkedGroup[lv_ownerofPsiOps];
    autoEBD5DA63_u = UnitGroupCount(autoEBD5DA63_g, c_unitCountAll);
    for (;; autoEBD5DA63_u -= 1) {
        autoEBD5DA63_var = UnitGroupUnitFromEnd(autoEBD5DA63_g, autoEBD5DA63_u);
        if (autoEBD5DA63_var == null) { break; }
        UnitBehaviorRemove(autoEBD5DA63_var, "MindLinkLevel1", 1);
        UnitBehaviorRemove(autoEBD5DA63_var, "MindLinkLevel2", 1);
        UnitBehaviorRemove(autoEBD5DA63_var, "MindLinkLevel3", 1);
    }
    auto0E0867E5_g = gv_mindLinkedGroup[lv_ownerofPsiOps];
    auto0E0867E5_u = UnitGroupCount(auto0E0867E5_g, c_unitCountAll);
    for (;; auto0E0867E5_u -= 1) {
        auto0E0867E5_var = UnitGroupUnitFromEnd(auto0E0867E5_g, auto0E0867E5_u);
        if (auto0E0867E5_var == null) { break; }
        auto18DDA97D_g = gv_mindLinkedGroup[lv_ownerofPsiOps];
        auto18DDA97D_u = UnitGroupCount(auto18DDA97D_g, c_unitCountAll);
        for (;; auto18DDA97D_u -= 1) {
            lv_localUnit = UnitGroupUnitFromEnd(auto18DDA97D_g, auto18DDA97D_u);
            if (lv_localUnit == null) { break; }
            if (((UnitGetOwner(auto0E0867E5_var) >= 1) && (UnitGetOwner(auto0E0867E5_var) <= 8)) && (PlayerStatus(UnitGetOwner(auto0E0867E5_var)) == c_playerStatusLeft)) {
                libNtve_gf_SetAlliance(UnitGetOwner(auto0E0867E5_var), UnitGetOwner(lv_localUnit), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
            }
            else if (((UnitGetOwner(auto0E0867E5_var) >= 1) && (UnitGetOwner(auto0E0867E5_var) <= 8))) {
                libNtve_gf_SetAlliance(UnitGetOwner(auto0E0867E5_var), UnitGetOwner(lv_localUnit), libNtve_ge_AllianceSetting_Ally);
            }
        }
    }
    UnitGroupClear(gv_mindLinkedGroup[lv_ownerofPsiOps]);
    auto0354EF37_var = 1;
    for ( ; auto0354EF37_var <= auto0354EF37_ae; auto0354EF37_var += 1 ) {
        autoDBA659B6_var = 1;
        for ( ; autoDBA659B6_var <= autoDBA659B6_ae; autoDBA659B6_var += 1 ) {
            if ((UnitIsValid(gv_fieldNexus[autoDBA659B6_var]) == true) && (UnitIsAlive(gv_fieldNexus[autoDBA659B6_var]) == true)) {
                lv_fieldNexusCount += 1;
            }

        }
    }
    if ((lv_fieldNexusCount > 0)) {
        auto488841B9_var = 1;
        for ( ; auto488841B9_var <= auto488841B9_ae; auto488841B9_var += 1 ) {
            lv_localInt = 1;
            for ( ; ( (autoF7AB73FC_ai >= 0 && lv_localInt <= autoF7AB73FC_ae) || (autoF7AB73FC_ai < 0 && lv_localInt >= autoF7AB73FC_ae) ) ; lv_localInt += autoF7AB73FC_ai ) {
                if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (PlayerGetAlliance(lv_localInt, c_allianceIdControl, auto488841B9_var) == true) && (lv_localInt != auto488841B9_var)) {
                    libNtve_gf_SetAllianceOneWay(lv_localInt, auto488841B9_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
                else if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (lv_localInt != auto488841B9_var)) {
                    libNtve_gf_SetAllianceOneWay(lv_localInt, auto488841B9_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                else if ((PlayerStatus(lv_localInt) == c_playerStatusLeft) && (lv_localInt != auto488841B9_var)) {
                    libNtve_gf_SetAllianceOneWay(lv_localInt, auto488841B9_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelMindLink_Init () {
    gt_CancelMindLink = TriggerCreate("gt_CancelMindLink_Func");
    TriggerEnable(gt_CancelMindLink, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hammer of the Gods - Cam Shake
//--------------------------------------------------------------------------------------------------
bool gt_HammeroftheGodsCamShake_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoF6EB5B1C_ae = 8;
    int autoF6EB5B1C_var;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BlackDog"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF6EB5B1C_var = 1;
    for ( ; autoF6EB5B1C_var <= autoF6EB5B1C_ae; autoF6EB5B1C_var += 1 ) {
        if ((PlayerType(autoF6EB5B1C_var) == c_playerTypeUser) && (PlayerStatus(autoF6EB5B1C_var) == c_playerStatusActive) && (((UnitIsAlive(gv_marineHero[autoF6EB5B1C_var]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_marineHero[autoF6EB5B1C_var])) <= 3.0)) || ((UnitIsAlive(gv_playerPet[autoF6EB5B1C_var]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerPet[autoF6EB5B1C_var])) <= 3.0)))) {
            CameraShakeStart(autoF6EB5B1C_var, c_cameraPositionBoth, c_cameraDirectionXZ, 0.02, 1.0, 100.0, 0.1);
        }
        else if ((PlayerType(autoF6EB5B1C_var) == c_playerTypeUser) && (PlayerStatus(autoF6EB5B1C_var) == c_playerStatusActive) && (((UnitIsAlive(gv_marineHero[autoF6EB5B1C_var]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_marineHero[autoF6EB5B1C_var])) <= 5.0)) || ((UnitIsAlive(gv_playerPet[autoF6EB5B1C_var]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerPet[autoF6EB5B1C_var])) <= 5.0)))) {
            CameraShakeStart(autoF6EB5B1C_var, c_cameraPositionBoth, c_cameraDirectionXZ, 0.005, 1.0, 100.0, 0.1);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HammeroftheGodsCamShake_Init () {
    gt_HammeroftheGodsCamShake = TriggerCreate("gt_HammeroftheGodsCamShake_Func");
    TriggerEnable(gt_HammeroftheGodsCamShake, false);
    TriggerAddEventUnitStartedAttack(gt_HammeroftheGodsCamShake, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AMRounds
//--------------------------------------------------------------------------------------------------
bool gt_AMRounds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localTurret;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localTurret = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(lv_localTurret, "SwitchtoHEFRounds", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AMRounds_Init () {
    gt_AMRounds = TriggerCreate("gt_AMRounds_Func");
    TriggerEnable(gt_AMRounds, false);
    TriggerAddEventUnitAbility(gt_AMRounds, null, AbilityCommand("SwitchtoAMRounds", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify Shell Limit
//--------------------------------------------------------------------------------------------------
bool gt_ModifyShellLimit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_currentFireMissionCost;
    int lv_currentShockwaveCost;
    int lv_currentNapalmCost;
    int lv_forwardObserverOwner;
    int lv_clickingPlayer;
    bool lv_continue;
    int lv_shellType;
    bool lv_decre;
    bool lv_incre;

    // Automatic Variable Declarations
    const int auto6F4DD87F_ae = 8;
    int auto6F4DD87F_var;
    const int autoB6DF9630_ae = 8;
    int autoB6DF9630_var;
    const int autoFF6E4851_ae = 8;
    int autoFF6E4851_var;
    const int autoC453E67E_ae = 8;
    int autoC453E67E_var;
    const int auto76EF0163_ae = 8;
    int auto76EF0163_var;
    const int autoD61D4FF5_ae = 8;
    int autoD61D4FF5_var;

    // Variable Initialization
    lv_clickingPlayer = EventPlayer();
    lv_continue = true;

    // Conditions
    if (testConds) {
        if (!(((DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[1]) || (DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[2]) || (DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[3]) || (DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[4]) || (DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[5]) || (DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[6]) || (DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[7]) || (DialogControlGetDialog(EventDialogControl()) == gv_shellDialog[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F4DD87F_var = 1;
    for ( ; auto6F4DD87F_var <= auto6F4DD87F_ae; auto6F4DD87F_var += 1 ) {
        if ((EventDialogControl() == gv_shellIncre[1][auto6F4DD87F_var])) {
            lv_continue = false;
            lv_shellType = 1;
            lv_forwardObserverOwner = auto6F4DD87F_var;
            lv_incre = true;
            break;
        }

    }
    autoB6DF9630_var = 1;
    for ( ; autoB6DF9630_var <= autoB6DF9630_ae; autoB6DF9630_var += 1 ) {
        if ((lv_continue == true)) {
            if ((EventDialogControl() == gv_shellDecre[1][autoB6DF9630_var])) {
                lv_continue = false;
                lv_shellType = 1;
                lv_forwardObserverOwner = autoB6DF9630_var;
                lv_decre = true;
                break;
            }

        }

    }
    autoFF6E4851_var = 1;
    for ( ; autoFF6E4851_var <= autoFF6E4851_ae; autoFF6E4851_var += 1 ) {
        if ((lv_continue == true)) {
            if ((EventDialogControl() == gv_shellIncre[2][autoFF6E4851_var])) {
                lv_continue = false;
                lv_shellType = 2;
                lv_forwardObserverOwner = autoFF6E4851_var;
                lv_incre = true;
                break;
            }

        }

    }
    autoC453E67E_var = 1;
    for ( ; autoC453E67E_var <= autoC453E67E_ae; autoC453E67E_var += 1 ) {
        if ((lv_continue == true)) {
            if ((EventDialogControl() == gv_shellDecre[2][autoC453E67E_var])) {
                lv_continue = false;
                lv_shellType = 2;
                lv_forwardObserverOwner = autoC453E67E_var;
                lv_decre = true;
                break;
            }

        }

    }
    auto76EF0163_var = 1;
    for ( ; auto76EF0163_var <= auto76EF0163_ae; auto76EF0163_var += 1 ) {
        if ((lv_continue == true)) {
            if ((EventDialogControl() == gv_shellIncre[3][auto76EF0163_var])) {
                lv_continue = false;
                lv_shellType = 3;
                lv_forwardObserverOwner = auto76EF0163_var;
                lv_incre = true;
                break;
            }

        }

    }
    autoD61D4FF5_var = 1;
    for ( ; autoD61D4FF5_var <= autoD61D4FF5_ae; autoD61D4FF5_var += 1 ) {
        if ((lv_continue == true)) {
            if ((EventDialogControl() == gv_shellDecre[3][autoD61D4FF5_var])) {
                lv_continue = false;
                lv_shellType = 3;
                lv_forwardObserverOwner = autoD61D4FF5_var;
                lv_decre = true;
                break;
            }

        }

    }
    if (((lv_forwardObserverOwner == lv_clickingPlayer) || ((lv_forwardObserverOwner != lv_clickingPlayer) && ((PlayerGetAlliance(lv_forwardObserverOwner, c_allianceIdControl, lv_clickingPlayer) == true))))) {
        if ((lv_shellType == 1)) {
            lv_currentFireMissionCost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
            if (((lv_incre == true) && (lv_currentFireMissionCost < 20))) {
                CatalogFieldValueSet(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner, IntToString((lv_currentFireMissionCost + 1)));
            }
            else if (((lv_decre == true) && (lv_currentFireMissionCost > 1))) {
                CatalogFieldValueSet(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner, IntToString((lv_currentFireMissionCost - 1)));
            }
            libNtve_gf_SetDialogItemText(gv_shellCounter[1][lv_forwardObserverOwner], IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner)), PlayerGroupSingle(lv_forwardObserverOwner));
        }
        else if ((lv_shellType == 2)) {
            lv_currentShockwaveCost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
            if (((lv_incre == true) && (lv_currentShockwaveCost < 20))) {
                CatalogFieldValueSet(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner, IntToString((lv_currentShockwaveCost + 1)));
            }
            else if (((lv_decre == true) && (lv_currentShockwaveCost > 1))) {
                CatalogFieldValueSet(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner, IntToString((lv_currentShockwaveCost - 1)));
            }
            libNtve_gf_SetDialogItemText(gv_shellCounter[2][lv_forwardObserverOwner], IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner)), PlayerGroupSingle(lv_forwardObserverOwner));
        }
        else if ((lv_shellType == 3)) {
            lv_currentNapalmCost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
            if (((lv_incre == true) && (lv_currentNapalmCost < 20))) {
                CatalogFieldValueSet(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner, IntToString((lv_currentNapalmCost + 1)));
            }
            else if (((lv_decre == true) && (lv_currentNapalmCost > 1))) {
                CatalogFieldValueSet(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner, IntToString((lv_currentNapalmCost - 1)));
            }
            libNtve_gf_SetDialogItemText(gv_shellCounter[3][lv_forwardObserverOwner], IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner)), PlayerGroupSingle(lv_forwardObserverOwner));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModifyShellLimit_Init () {
    gt_ModifyShellLimit = TriggerCreate("gt_ModifyShellLimit_Func");
    TriggerEnable(gt_ModifyShellLimit, false);
    TriggerAddEventDialogControl(gt_ModifyShellLimit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Mission
//--------------------------------------------------------------------------------------------------
bool gt_FireMission_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forwardObserverOwner;
    int lv_fireMissionLevel;
    point lv_randomPoint;
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;
    int lv_randomInteger;
    int lv_satelliteLinkLevel;
    unitgroup lv_unitsinRegion;

    // Automatic Variable Declarations
    int auto6B76F718_ae;
    int auto6B76F718_var;
    unitgroup autoA71B81A2_g;
    int autoA71B81A2_u;
    unit autoA71B81A2_var;

    // Variable Initialization
    lv_forwardObserverOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_fireMissionLevel = gv_talentLevel[1][lv_forwardObserverOwner];
    lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    lv_satelliteLinkLevel = gv_talentLevel[4][lv_forwardObserverOwner];
    lv_unitsinRegion = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_shellCounter[0][lv_forwardObserverOwner], IntToText(FixedToInt(UnitAbilityChargeInfo(EventUnit(), AbilityCommand("FireMission", 0), c_unitAbilChargeCountLeft))), PlayerGroupSingle(lv_forwardObserverOwner));
    gf_ForwardObserverLaunchSound(lv_forwardObserverOwner, EventUnitTargetPoint(), 1);
    gf_ForwardObserverShellFlightSound(lv_forwardObserverOwner, EventUnitTargetPoint(), 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", EventUnitTargetPoint(), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), gv_barrageTime[lv_forwardObserverOwner], 270.0);
    Wait(gv_barrageTime[lv_forwardObserverOwner], c_timeGame);
    VisRevealArea(lv_forwardObserverOwner, RegionCircle(EventUnitTargetPoint(), 7.0), 3.5, true);
    auto6B76F718_ae = lv_shellLimit;
    auto6B76F718_var = 1;
    for ( ; auto6B76F718_var <= auto6B76F718_ae; auto6B76F718_var += 1 ) {
        lv_randomInteger = RandomInt(1, 3);
        if ((((lv_satelliteLinkLevel == 1) && (RandomInt(1, 2) == 1)) || (lv_satelliteLinkLevel == 2))) {
            lv_unitsinRegion = UnitGroup(null, 14, RegionCircle(EventUnitTargetPoint(), 5.0), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, 13, RegionCircle(EventUnitTargetPoint(), 5.0), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_unitsinRegion);
            if ((UnitGroupCount(lv_unitsinRegion, c_unitCountAlive) > 0)) {
                if ((lv_satelliteLinkLevel == 1)) {
                    lv_randomPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_unitsinRegion, c_unitCountAlive)), 4.0));
                }
                else {
                    lv_randomPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_unitsinRegion, c_unitCountAlive)), 2.0));
                }
            }
            else {
                lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
            }
        }
        else {
            lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
        }
        if ((lv_fireMissionLevel == 1)) {
            if ((lv_randomInteger == 1)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel1DamageVar1", lv_randomPoint);
            }
            else if ((lv_randomInteger == 2)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel1DamageVar2", lv_randomPoint);
            }
            else if ((lv_randomInteger == 3)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel1DamageVar3", lv_randomPoint);
            }
        }
        else if ((lv_fireMissionLevel == 2)) {
            if ((lv_randomInteger == 1)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel2DamageVar1", lv_randomPoint);
            }
            else if ((lv_randomInteger == 2)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel2DamageVar2", lv_randomPoint);
            }
            else if ((lv_randomInteger == 3)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel2DamageVar3", lv_randomPoint);
            }
        }
        else if ((lv_fireMissionLevel == 3)) {
            if ((lv_randomInteger == 1)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel3DamageVar1", lv_randomPoint);
            }
            else if ((lv_randomInteger == 2)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel3DamageVar2", lv_randomPoint);
            }
            else if ((lv_randomInteger == 3)) {
                UnitCreateEffectPoint(EventUnit(), "FireMissionLevel3DamageVar3", lv_randomPoint);
            }
        }
        autoA71B81A2_g = gv_marines;
        autoA71B81A2_u = UnitGroupCount(autoA71B81A2_g, c_unitCountAll);
        for (;; autoA71B81A2_u -= 1) {
            autoA71B81A2_var = UnitGroupUnitFromEnd(autoA71B81A2_g, autoA71B81A2_u);
            if (autoA71B81A2_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(autoA71B81A2_var), lv_randomPoint) <= 3.0)) {
                CameraShakeStart(UnitGetOwner(autoA71B81A2_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 2.0, 100.0, 1.2);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(autoA71B81A2_var), lv_randomPoint) <= 5.0)) {
                CameraShakeStart(UnitGetOwner(autoA71B81A2_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.4, 2.0, 100.0, 1.0);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(autoA71B81A2_var), lv_randomPoint) <= 7.0)) {
                CameraShakeStart(UnitGetOwner(autoA71B81A2_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.15, 2.0, 100.0, 0.75);
            }
        }
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireMission_Init () {
    gt_FireMission = TriggerCreate("gt_FireMission_Func");
    TriggerEnable(gt_FireMission, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shockwave Barrage
//--------------------------------------------------------------------------------------------------
bool gt_ShockwaveBarrage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forwardObserverOwner;
    int lv_shockwaveBarrageLevel;
    point lv_randomPoint;
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;
    int lv_randomInteger;
    int lv_satelliteLinkLevel;
    unitgroup lv_unitsinRegion;

    // Automatic Variable Declarations
    int auto2DE3D030_ae;
    int auto2DE3D030_var;
    unitgroup autoBCB539E6_g;
    int autoBCB539E6_u;
    unit autoBCB539E6_var;

    // Variable Initialization
    lv_forwardObserverOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_shockwaveBarrageLevel = gv_talentLevel[3][lv_forwardObserverOwner];
    lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    lv_satelliteLinkLevel = gv_talentLevel[4][lv_forwardObserverOwner];
    lv_unitsinRegion = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_shellCounter[0][lv_forwardObserverOwner], IntToText(FixedToInt(UnitAbilityChargeInfo(EventUnit(), AbilityCommand("FireMission", 0), c_unitAbilChargeCountLeft))), PlayerGroupSingle(lv_forwardObserverOwner));
    gf_ForwardObserverLaunchSound(lv_forwardObserverOwner, EventUnitTargetPoint(), 2);
    gf_ForwardObserverShellFlightSound(lv_forwardObserverOwner, EventUnitTargetPoint(), 2);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", EventUnitTargetPoint(), ColorWithAlpha(12.55, 56.08, 100.00, 0.00), gv_barrageTime[lv_forwardObserverOwner], 270.0);
    Wait(gv_barrageTime[lv_forwardObserverOwner], c_timeGame);
    VisRevealArea(lv_forwardObserverOwner, RegionCircle(EventUnitTargetPoint(), 7.0), 3.5, true);
    auto2DE3D030_ae = lv_shellLimit;
    auto2DE3D030_var = 1;
    for ( ; auto2DE3D030_var <= auto2DE3D030_ae; auto2DE3D030_var += 1 ) {
        lv_randomInteger = RandomInt(1, 2);
        if ((((lv_satelliteLinkLevel == 1) && (RandomInt(1, 2) == 1)) || (lv_satelliteLinkLevel == 2))) {
            lv_unitsinRegion = UnitGroup(null, 14, RegionCircle(EventUnitTargetPoint(), 5.0), UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitGroup(null, 13, RegionCircle(EventUnitTargetPoint(), 5.0), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lv_unitsinRegion);
            if ((UnitGroupCount(lv_unitsinRegion, c_unitCountAlive) > 0)) {
                if ((lv_satelliteLinkLevel == 1)) {
                    lv_randomPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_unitsinRegion, c_unitCountAlive)), 4.0));
                }
                else {
                    lv_randomPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_unitsinRegion, c_unitCountAlive)), 2.0));
                }
            }
            else {
                lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
            }
        }
        else {
            lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
        }
        if ((lv_shockwaveBarrageLevel == 1)) {
            if ((lv_randomInteger == 1)) {
                UnitCreateEffectPoint(EventUnit(), "ShockwaveBarrageSearchLevel1Var1", lv_randomPoint);
            }
            else if ((lv_randomInteger == 2)) {
                UnitCreateEffectPoint(EventUnit(), "ShockwaveBarrageSearchLevel1Var2", lv_randomPoint);
            }
        }
        else if ((lv_shockwaveBarrageLevel == 2)) {
            if ((lv_randomInteger == 1)) {
                UnitCreateEffectPoint(EventUnit(), "ShockwaveBarrageSearchLevel2Var1", lv_randomPoint);
            }
            else if ((lv_randomInteger == 2)) {
                UnitCreateEffectPoint(EventUnit(), "ShockwaveBarrageSearchLevel2Var12", lv_randomPoint);
            }
        }
        autoBCB539E6_g = gv_marines;
        autoBCB539E6_u = UnitGroupCount(autoBCB539E6_g, c_unitCountAll);
        for (;; autoBCB539E6_u -= 1) {
            autoBCB539E6_var = UnitGroupUnitFromEnd(autoBCB539E6_g, autoBCB539E6_u);
            if (autoBCB539E6_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(autoBCB539E6_var), lv_randomPoint) <= 3.0)) {
                CameraShakeStart(UnitGetOwner(autoBCB539E6_var), c_cameraPositionTarget, c_cameraDirectionZ, 3.0, 2.0, 100.0, 1.2);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(autoBCB539E6_var), lv_randomPoint) <= 5.0)) {
                CameraShakeStart(UnitGetOwner(autoBCB539E6_var), c_cameraPositionTarget, c_cameraDirectionZ, 1.5, 2.0, 100.0, 1.0);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(autoBCB539E6_var), lv_randomPoint) <= 7.0)) {
                CameraShakeStart(UnitGetOwner(autoBCB539E6_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.7, 2.0, 100.0, 0.75);
            }
        }
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShockwaveBarrage_Init () {
    gt_ShockwaveBarrage = TriggerCreate("gt_ShockwaveBarrage_Func");
    TriggerEnable(gt_ShockwaveBarrage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Napalm Barrage
//--------------------------------------------------------------------------------------------------
bool gt_NapalmBarrage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forwardObserverOwner;
    int lv_napalmBarrageLevel;
    point lv_randomPoint;
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;
    int lv_satelliteLinkLevel;
    unitgroup lv_unitsinRegion;

    // Automatic Variable Declarations
    int auto3CDF3AF8_ae;
    int auto3CDF3AF8_var;
    unitgroup auto6E8794A7_g;
    int auto6E8794A7_u;
    unit auto6E8794A7_var;

    // Variable Initialization
    lv_forwardObserverOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_napalmBarrageLevel = gv_talentLevel[5][lv_forwardObserverOwner];
    lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    lv_satelliteLinkLevel = gv_talentLevel[4][lv_forwardObserverOwner];
    lv_unitsinRegion = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_shellCounter[0][lv_forwardObserverOwner], IntToText(FixedToInt(UnitAbilityChargeInfo(EventUnit(), AbilityCommand("FireMission", 0), c_unitAbilChargeCountLeft))), PlayerGroupSingle(lv_forwardObserverOwner));
    gf_ForwardObserverLaunchSound(lv_forwardObserverOwner, EventUnitTargetPoint(), 3);
    gf_ForwardObserverShellFlightSound(lv_forwardObserverOwner, EventUnitTargetPoint(), 3);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", EventUnitTargetPoint(), ColorWithAlpha(96.86, 31.37, 3.53, 0.00), gv_barrageTime[lv_forwardObserverOwner], 270.0);
    Wait(gv_barrageTime[lv_forwardObserverOwner], c_timeGame);
    VisRevealArea(lv_forwardObserverOwner, RegionCircle(EventUnitTargetPoint(), 7.0), 5.0, true);
    auto3CDF3AF8_ae = lv_shellLimit;
    auto3CDF3AF8_var = 1;
    for ( ; auto3CDF3AF8_var <= auto3CDF3AF8_ae; auto3CDF3AF8_var += 1 ) {
        lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NapalmFire", 0, lv_forwardObserverOwner, lv_randomPoint);
        auto6E8794A7_g = gv_marines;
        auto6E8794A7_u = UnitGroupCount(auto6E8794A7_g, c_unitCountAll);
        for (;; auto6E8794A7_u -= 1) {
            auto6E8794A7_var = UnitGroupUnitFromEnd(auto6E8794A7_g, auto6E8794A7_u);
            if (auto6E8794A7_var == null) { break; }
            if ((DistanceBetweenPoints(UnitGetPosition(auto6E8794A7_var), lv_randomPoint) <= 3.0)) {
                CameraShakeStart(UnitGetOwner(auto6E8794A7_var), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 1.2);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(auto6E8794A7_var), lv_randomPoint) <= 5.0)) {
                CameraShakeStart(UnitGetOwner(auto6E8794A7_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 1.0);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(auto6E8794A7_var), lv_randomPoint) <= 7.0)) {
                CameraShakeStart(UnitGetOwner(auto6E8794A7_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 0.75);
            }
        }
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NapalmBarrage_Init () {
    gt_NapalmBarrage = TriggerCreate("gt_NapalmBarrage_Func");
    TriggerEnable(gt_NapalmBarrage, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobile Infantry
//--------------------------------------------------------------------------------------------------
bool gt_MobileInfantry_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forwardObserverOwner;
    int lv_mobileInfantryLevel;
    region lv_targetRegion;
    point lv_targetPoint;
    int lv_loop;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_forwardObserverOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_mobileInfantryLevel = gv_talentLevel[6][lv_forwardObserverOwner];
    lv_targetRegion = RegionCircle(EventUnitTargetPoint(), 0.7);
    lv_targetPoint = RegionRandomPoint(lv_targetRegion);

    // Conditions
    if (testConds) {
        if (!((PointPathingPassable(lv_targetPoint) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, ((StringExternal("Param/Value/F6D31C38") + IntToText(FixedToInt(UnitAbilityChargeInfo(EventUnit(), AbilityCommand("MobileInfantry", 0), c_unitAbilChargeCountLeft)))) + StringExternal("Param/Value/6E980D4F")));
    Wait(4.3, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "MobileInfantryRifleman", 0, lv_forwardObserverOwner, lv_targetPoint);
    UnitGroupAdd(gv_mobileInfantryGroup[lv_forwardObserverOwner], UnitLastCreated());
    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitLastCreated()), 1.3, UnitGetPosition(EventUnit()))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MobileInfantry_Init () {
    gt_MobileInfantry = TriggerCreate("gt_MobileInfantry_Func");
    TriggerEnable(gt_MobileInfantry, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surveillance Flares
//--------------------------------------------------------------------------------------------------
bool gt_SurveillanceFlares_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forwardObserverOwner;
    region lv_targetRegion;
    point lv_targetPoint;

    // Automatic Variable Declarations
    const int auto33788C95_ae = 8;
    int auto33788C95_var;

    // Variable Initialization
    lv_forwardObserverOwner = gf_NOTDOwnerofUnit(EventUnit());
    lv_targetRegion = RegionCircle(EventUnitTargetPoint(), 8.0);
    lv_targetPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 8.0));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SurveillanceFlare", c_unitCreateIgnorePlacement, lv_forwardObserverOwner, lv_targetPoint);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    auto33788C95_var = 1;
    for ( ; auto33788C95_var <= auto33788C95_ae; auto33788C95_var += 1 ) {
        VisRevealArea(auto33788C95_var, RegionCircle(UnitGetPosition(UnitLastCreated()), 9.0), 60.0, true);
    }
    Wait(0.4, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurveillanceFlares_Init () {
    gt_SurveillanceFlares = TriggerCreate("gt_SurveillanceFlares_Func");
    TriggerEnable(gt_SurveillanceFlares, false);
    TriggerAddEventUnitAbility(gt_SurveillanceFlares, null, AbilityCommand("SurveillanceFlare", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Buddy
//--------------------------------------------------------------------------------------------------
bool gt_GunshipBuddy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_enteredString;
    int lv_gunshipBuddy;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enteredString = EventChatMessage(false);
    lv_gunshipBuddy = StringToInt(StringSub(lv_enteredString, 9, 9));

    // Conditions
    if (testConds) {
        if (!(((lv_gunshipBuddy >= 1) && (lv_gunshipBuddy <= 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_marineHero[EventPlayer()]) == true) && (UnitIsAlive(gv_marineHero[lv_gunshipBuddy]) == true) && (UnitGetType(gv_marineHero[EventPlayer()]) == "ForwardObserver")) {
        gv_gunshipBuddy[EventPlayer()] = lv_gunshipBuddy;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/ECB0A6AF") + (PlayerName(UnitGetOwner(gv_marineHero[lv_gunshipBuddy])) + StringExternal("Param/Value/53C88C67"))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipBuddy_Init () {
    gt_GunshipBuddy = TriggerCreate("gt_GunshipBuddy_Func");
    TriggerAddEventChatMessage(gt_GunshipBuddy, c_playerAny, "-gbuddy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Support
//--------------------------------------------------------------------------------------------------
bool gt_GunshipSupport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_forwardObserverHero;
    int lv_forwardObserverOwner;
    int lv_localPlayer;
    actor lv_localActorA;
    bool lv_gunshipModeOff;
    unitgroup lv_laserDesignatedGroup;
    fixed lv_gunshipRotation;
    fixed lv_gunshipAngleofAttack;
    int lv_transperancyDialog;
    int lv_gunshipCycle;
    point lv_gunshipUnitPoint;
    fixed lv_gunshipAngleHorizontal;
    fixed lv_gunshipAngleVertical;
    fixed lv_heightDifference;
    fixed lv_displacementDifference;
    fixed lv_distanceDifference;
    fixed lv_heightOffset;
    int lv_angleChangeCycle;
    bool lv_angleChange;

    // Automatic Variable Declarations
    unitgroup autoC2B210B7_g;
    int autoC2B210B7_u;
    unit autoC2B210B7_var;
    unitgroup autoA61BAE65_g;
    int autoA61BAE65_u;
    unit autoA61BAE65_var;
    const int auto6DC34154_ae = 8;
    int auto6DC34154_var;
    const int auto48DA4600_ae = 8;
    int auto48DA4600_var;
    const int autoCA2160B0_n = 120;
    int autoCA2160B0_i;
    unitgroup auto192354FE_g;
    int auto192354FE_u;
    unit auto192354FE_var;
    unitgroup auto82698461_g;
    int auto82698461_u;
    unit auto82698461_var;
    unitgroup auto233611CD_g;
    int auto233611CD_u;
    unit auto233611CD_var;
    const int autoB35B4FAF_ae = 8;
    int autoB35B4FAF_var;
    const int auto5EB37BE9_ae = 8;
    int auto5EB37BE9_var;
    unitgroup auto561BB938_g;
    int auto561BB938_u;
    unit auto561BB938_var;

    // Variable Initialization
    lv_forwardObserverHero = EventUnit();
    lv_forwardObserverOwner = gf_NOTDOwnerofUnit(lv_forwardObserverHero);
    lv_localPlayer = lv_forwardObserverOwner;
    lv_gunshipModeOff = true;
    lv_laserDesignatedGroup = UnitGroupEmpty();
    lv_gunshipRotation = RandomFixed(-180.0, 180.0);
    lv_gunshipAngleofAttack = 37.0;
    lv_transperancyDialog = c_invalidDialogId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gunshipFollowedUnit[lv_forwardObserverOwner] = lv_forwardObserverHero;
    DialogCreate(3000, 3000, c_anchorCenter, 0, 0, true);
    lv_transperancyDialog = DialogLastCreated();
    DialogSetImage(lv_transperancyDialog, "Assets\\Textures\\buildingplane_green1.dds");
    DialogSetTransparency(DialogLastCreated(), 59.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_forwardObserverOwner), true);
    if ((gv_gunshipBuddy[lv_forwardObserverOwner] > 0) && (gv_marineHero[gv_gunshipBuddy[lv_forwardObserverOwner]] != lv_forwardObserverHero)) {
        gv_gunshipFollowedUnit[lv_forwardObserverOwner] = gv_marineHero[gv_gunshipBuddy[lv_forwardObserverOwner]];
    }
    else if ((gv_gunshipBuddy[lv_forwardObserverOwner] > 0) && (gv_marineHero[gv_gunshipBuddy[lv_forwardObserverOwner]] == lv_forwardObserverHero)) {
    }
    else if (true) {
        autoC2B210B7_g = gv_marines;
        autoC2B210B7_u = UnitGroupCount(autoC2B210B7_g, c_unitCountAll);
        for (;; autoC2B210B7_u -= 1) {
            autoC2B210B7_var = UnitGroupUnitFromEnd(autoC2B210B7_g, autoC2B210B7_u);
            if (autoC2B210B7_var == null) { break; }
            if (((autoC2B210B7_var != lv_forwardObserverHero) && (DistanceBetweenPoints(UnitGetPosition(autoC2B210B7_var), UnitGetPosition(lv_forwardObserverHero)) < 5.0) && (PlayerStatus(gf_NOTDOwnerofUnit(autoC2B210B7_var)) == c_playerStatusActive))) {
                lv_localPlayer = gf_NOTDOwnerofUnit(autoC2B210B7_var);
                gv_gunshipFollowedUnit[lv_forwardObserverOwner] = autoC2B210B7_var;
            }

        }
    }
    UnitSelect(lv_forwardObserverHero, lv_forwardObserverOwner, false);
    UnitSetState(lv_forwardObserverHero, c_unitStateSelectable, false);
    autoA61BAE65_g = gv_mobileInfantryGroup[lv_forwardObserverOwner];
    autoA61BAE65_u = UnitGroupCount(autoA61BAE65_g, c_unitCountAll);
    for (;; autoA61BAE65_u -= 1) {
        autoA61BAE65_var = UnitGroupUnitFromEnd(autoA61BAE65_g, autoA61BAE65_u);
        if (autoA61BAE65_var == null) { break; }
        UnitSelect(autoA61BAE65_var, lv_forwardObserverOwner, false);
        UnitSetState(autoA61BAE65_var, c_unitStateSelectable, false);
    }
    auto6DC34154_var = 1;
    for ( ; auto6DC34154_var <= auto6DC34154_ae; auto6DC34154_var += 1 ) {
        if ((PlayerStatus(auto6DC34154_var) != c_playerStatusUnused)) {
            DialogSetVisible(gv_talentTree[auto6DC34154_var], PlayerGroupSingle(lv_forwardObserverOwner), false);
            DialogSetVisible(gv_statsPlayerStatsDialog[auto6DC34154_var], PlayerGroupSingle(lv_forwardObserverOwner), false);
            DialogSetVisible(gv_playerMedalsDialog[auto6DC34154_var], PlayerGroupSingle(lv_forwardObserverOwner), false);
        }

    }
    DialogSetVisible(gv_raidUITeamStatus, PlayerGroupSingle(lv_forwardObserverOwner), false);
    DialogSetVisible(gv_raidUITeamStatusDummy, PlayerGroupSingle(lv_forwardObserverOwner), false);
    gv_gunshipCinematicActive[lv_forwardObserverOwner] = true;
    gv_gameUIHidden[lv_forwardObserverOwner] = true;
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(lv_forwardObserverOwner));
    UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, StringExternal("Param/Value/EDD297E3"));
    libNtve_gf_AttachModelToUnit(EventUnit(), "GunshipSupportInactiveFO", "Ref_Center");
    lv_localActorA = libNtve_gf_ActorLastCreated();
    TriggerEnable(gt_GunshipMouse1GaussCannon, true);
    TriggerEnable(gt_GunshipMouse2HellfireMissile, true);
    TriggerEnable(gt_GunshipOtherKeys, true);
    TriggerEnable(gt_GunshipImpactQuake, true);
    Wait(0.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F96D5DCB"));
    SoundPlay(SoundLink("Raven_AutoTurretReady", -1), PlayerGroupAll(), 80.0, 0.0);
    CameraSetValue(lv_forwardObserverOwner, c_cameraValueDistance, 25.0, 3.0, -1, 0);
    CameraSetValue(lv_forwardObserverOwner, c_cameraValueFieldOfView, 75.0, 3.0, -1, 0);
    CameraSetValue(lv_forwardObserverOwner, c_cameraValueFarClip, 60.0, 3.0, -1, 0);
    CameraLockInput(lv_forwardObserverOwner, true);
    libNtve_gf_MakeUnitUncommandable(lv_forwardObserverHero, true);
    SoundPlay(SoundLink("GunshipEntry", -1), PlayerGroupAll(), 80.0, 0.0);
    libNtve_gf_CreateUnitsAtPoint2(1, "Hyperion", 0, lv_forwardObserverOwner, Point(0.0, 0.0));
    UnitAbilityEnable(UnitLastCreated(), "attack", false);
    gv_gunshipUnit[lv_forwardObserverOwner] = UnitLastCreated();
    CatalogFieldValueSet(c_gameCatalogEffect, "GunshipHeight", "Height", lv_forwardObserverOwner, FixedToString(30.0, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "GunshipHeight", "HeightTime", lv_forwardObserverOwner, FixedToString(0.5, c_fixedPrecisionAny));
    PlayerCreateEffectUnit(lv_forwardObserverOwner, "GunshipHeight", gv_gunshipUnit[lv_forwardObserverOwner]);
    Wait(0.5, c_timeGame);
    UnitBehaviorAddPlayer(lv_forwardObserverHero, "GunshipSupport", lv_forwardObserverOwner, 1);
    auto48DA4600_var = 1;
    for ( ; auto48DA4600_var <= auto48DA4600_ae; auto48DA4600_var += 1 ) {
        CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 3.0);
    }
    for (autoCA2160B0_i = 1; autoCA2160B0_i <= autoCA2160B0_n; autoCA2160B0_i += 1) {
        if ((lv_gunshipCycle == 4)) {
            gv_gunshipActive[lv_forwardObserverOwner] = true;
            UnitBehaviorRemove(gv_gunshipUnit[lv_forwardObserverOwner], "GunshipSupportSpeed", 1);
        }

        if (((UnitIsAlive(lv_forwardObserverHero) == false) || ((gv_gunshipActive[lv_forwardObserverOwner] == false) && (lv_gunshipCycle > 3)))) {
            UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, StringExternal("Param/Value/7D755BC0"));
            SoundPlay(SoundLink("Raven_AutoTurretReleaseImpact", -1), PlayerGroupAll(), 100.0, 0.0);
            break;
        }

        if ((lv_gunshipCycle == 84)) {
            UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, StringExternal("Param/Value/F080EC08"));
        }

        if ((UnitIsAlive(gv_gunshipFollowedUnit[lv_forwardObserverOwner]) == true) && (DistanceBetweenPoints(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), UnitGetPosition(lv_forwardObserverHero)) > 1.2)) {
            UnitIssueOrder(lv_forwardObserverHero, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), 1.2))), c_orderQueueReplace);
            auto192354FE_g = gv_mobileInfantryGroup[lv_forwardObserverOwner];
            auto192354FE_u = UnitGroupCount(auto192354FE_g, c_unitCountAll);
            for (;; auto192354FE_u -= 1) {
                auto192354FE_var = UnitGroupUnitFromEnd(auto192354FE_g, auto192354FE_u);
                if (auto192354FE_var == null) { break; }
                UnitIssueOrder(auto192354FE_var, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), 1.2))), c_orderQueueReplace);
            }
        }

        lv_gunshipRotation += 40.0;
        if ((lv_gunshipRotation > 180.0)) {
            lv_gunshipRotation = (-360.0 + lv_gunshipRotation);
        }

        if ((lv_angleChange == false)) {
            lv_gunshipAngleofAttack += RandomFixed(-10.0, 10.0);
            lv_angleChange = true;
            if ((lv_gunshipAngleofAttack > 60.0)) {
                lv_gunshipAngleofAttack = 60.0;
            }
            else if ((lv_gunshipAngleofAttack < 30.0)) {
                lv_gunshipAngleofAttack = 30.0;
            }
        }

        if ((lv_angleChange == true)) {
            lv_angleChangeCycle += 1;
        }

        if ((lv_angleChangeCycle == 6)) {
            lv_angleChangeCycle -= 6;
            lv_angleChange = false;
        }

        if ((UnitIsAlive(gv_gunshipFollowedUnit[lv_forwardObserverOwner]) == false) && (UnitIsAlive(gv_marineHero[lv_forwardObserverOwner]) == true)) {
            gv_gunshipFollowedUnit[lv_forwardObserverOwner] = gv_marineHero[lv_forwardObserverOwner];
        }
        else if ((UnitIsAlive(gv_gunshipFollowedUnit[lv_forwardObserverOwner]) == false) && (UnitIsAlive(gv_marineHero[lv_forwardObserverOwner]) == false)) {
            gv_gunshipFollowedUnit[lv_forwardObserverOwner] = UnitGroupUnit(gv_marines, 1);
        }
        lv_gunshipUnitPoint = Point((PointGetX(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner])) - ((34.0 * Cos(lv_gunshipAngleofAttack)) * Cos(lv_gunshipRotation))), (PointGetY(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner])) - ((34.0 * Cos(lv_gunshipAngleofAttack)) * Sin(lv_gunshipRotation))));
        if ((lv_gunshipCycle == 0)) {
            if ((lv_gunshipRotation <= -90.0)) {
                UnitSetFacing(gv_gunshipUnit[lv_forwardObserverOwner], (lv_gunshipRotation + 270.0), 0.0);
            }
            else {
                UnitSetFacing(gv_gunshipUnit[lv_forwardObserverOwner], (lv_gunshipRotation - 90.0), 0.0);
            }
            UnitSetPosition(gv_gunshipUnit[lv_forwardObserverOwner], lv_gunshipUnitPoint, false);
            PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]), ColorWithAlpha(100.00, 100.00, 100.00, 49.02), 31.0);
            PingSetUnit(PingLastCreated(), gv_gunshipUnit[lv_forwardObserverOwner]);
            UnitBehaviorAddPlayer(gv_gunshipUnit[lv_forwardObserverOwner], "GunshipSupportSpeed", lv_forwardObserverOwner, 1);
            CameraLookAtUnit(lv_forwardObserverOwner, gv_gunshipUnit[lv_forwardObserverOwner]);
            CatalogFieldValueSet(c_gameCatalogEffect, "GunshipHeight", "Height", lv_forwardObserverOwner, FixedToString(-10.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "GunshipHeight", "HeightTime", lv_forwardObserverOwner, FixedToString(0.5, c_fixedPrecisionAny));
            PlayerCreateEffectUnit(lv_forwardObserverOwner, "GunshipHeight", gv_gunshipUnit[lv_forwardObserverOwner]);
            CatalogFieldValueSet(c_gameCatalogEffect, "GunshipHeight", "HeightTime", lv_forwardObserverOwner, FixedToString(1.5, c_fixedPrecisionAny));
            CameraLookAtUnit(lv_forwardObserverOwner, null);
            SoundPlay(SoundLink("GunshipSupportEntryAcknowledge", -1), PlayerGroupSingle(lv_forwardObserverOwner), 100.0, 0.0);
        }

        UnitIssueOrder(gv_gunshipUnit[lv_forwardObserverOwner], OrderTargetingPoint(AbilityCommand("move", 0), lv_gunshipUnitPoint), c_orderQueueAddToEnd);
        lv_heightOffset = ((UnitGetHeight(gv_gunshipFollowedUnit[lv_forwardObserverOwner]) + (34.0 * Sin(lv_gunshipAngleofAttack))) - UnitGetHeight(gv_gunshipUnit[lv_forwardObserverOwner]));
        CatalogFieldValueSet(c_gameCatalogEffect, "GunshipHeight", "Height", lv_forwardObserverOwner, FixedToString(lv_heightOffset, c_fixedPrecisionAny));
        lv_heightDifference = (34.0 * Sin(lv_gunshipAngleofAttack));
        if ((gv_gunshipCameraSwitch[lv_forwardObserverOwner] == false)) {
            lv_gunshipAngleHorizontal = AngleBetweenPoints(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]), UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]));
            lv_displacementDifference = DistanceBetweenPoints(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]), UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]));
        }
        else {
            lv_gunshipAngleHorizontal = AngleBetweenPoints(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]));
            lv_displacementDifference = 26.0;
        }
        lv_distanceDifference = SquareRoot(((lv_displacementDifference * lv_displacementDifference) + (lv_heightDifference * lv_heightDifference)));
        lv_gunshipAngleVertical = ATan((lv_heightDifference / lv_displacementDifference));
        lv_gunshipAngleHorizontal += 11.0;
        lv_gunshipAngleVertical -= 10.0;
        lv_distanceDifference += 2.0;
        if ((lv_angleChangeCycle == 1)) {
            PlayerCreateEffectUnit(lv_forwardObserverOwner, "GunshipHeight", gv_gunshipUnit[lv_forwardObserverOwner]);
            CameraSetValue(lv_forwardObserverOwner, c_cameraValuePitch, lv_gunshipAngleVertical, 1.5, -1, 0);
        }

        if ((gv_gunshipZoom[lv_forwardObserverOwner] == true)) {
            lv_distanceDifference /= 2.0;
        }

        CameraSetValue(lv_forwardObserverOwner, c_cameraValueDistance, lv_distanceDifference, 1.0, -1, 0);
        CameraSetValue(lv_forwardObserverOwner, c_cameraValueYaw, lv_gunshipAngleHorizontal, 1.0, -1, 0);
        CameraPan(lv_forwardObserverOwner, UnitGetPosition(lv_forwardObserverHero), 1.0, -1, 0, false);
        VisRevealArea(lv_forwardObserverOwner, RegionCircle(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), 35.0), 1.0, false);
        if ((UnitIsAlive(gv_gunshipUnit[lv_forwardObserverOwner]) == false)) {
            auto82698461_g = gv_marines;
            auto82698461_u = UnitGroupCount(auto82698461_g, c_unitCountAll);
            for (;; auto82698461_u -= 1) {
                auto82698461_var = UnitGroupUnitFromEnd(auto82698461_g, auto82698461_u);
                if (auto82698461_var == null) { break; }
                if (((auto82698461_var != lv_forwardObserverHero) && (DistanceBetweenPoints(UnitGetPosition(auto82698461_var), UnitGetPosition(lv_forwardObserverHero)) < 5.0) && (PlayerStatus(gf_NOTDOwnerofUnit(auto82698461_var)) == c_playerStatusActive))) {
                    lv_localPlayer = gf_NOTDOwnerofUnit(auto82698461_var);
                    gv_gunshipFollowedUnit[lv_forwardObserverOwner] = auto82698461_var;
                }

            }
        }

        auto233611CD_g = UnitGroup(null, 14, RegionCircle(UnitGetPosition(lv_forwardObserverHero), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto233611CD_u = UnitGroupCount(auto233611CD_g, c_unitCountAll);
        for (;; auto233611CD_u -= 1) {
            auto233611CD_var = UnitGroupUnitFromEnd(auto233611CD_g, auto233611CD_u);
            if (auto233611CD_var == null) { break; }
            if ((UnitHasBehavior(auto233611CD_var, "LaserDesignatorLevel1") == false) && (UnitHasBehavior(auto233611CD_var, "LaserDesignatorLevel2") == false) && (UnitHasBehavior(auto233611CD_var, "LaserDesignatorLevel3") == false) && ((UnitGetType(auto233611CD_var) == "Ultralisk") || (UnitGetType(auto233611CD_var) == "Slasher") || (UnitGetType(auto233611CD_var) == "Devourer") || (UnitGetType(auto233611CD_var) == "Wraith2") || (UnitGetType(auto233611CD_var) == "Hugger") || (UnitGetType(auto233611CD_var) == "Strangler") || (UnitGroupHasUnit(UnitGroupFilter(null, 13, gv_zombieWave, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), auto233611CD_var) == true) || (UnitGroupHasUnit(UnitGroupFilter(null, 14, gv_zombieWave, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), auto233611CD_var) == true))) {
                UnitBehaviorAddPlayer(auto233611CD_var, "LaserDesignatorLevel3", lv_forwardObserverOwner, 1);
                UnitBehaviorAddPlayer(auto233611CD_var, "LaserDesignatorReveal", lv_forwardObserverOwner, 1);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/629B4559") + UnitTypeGetName(UnitGetType(auto233611CD_var))) + StringExternal("Param/Value/BDA913F7")));
            }

        }
        lv_gunshipCycle += 1;
        VisRevealArea(lv_forwardObserverOwner, RegionCircle(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]), 10.0), 0.5, false);
        Wait(0.5, c_timeGame);
    }
    gv_gunshipActive[lv_forwardObserverOwner] = false;
    UnitBehaviorRemove(lv_forwardObserverHero, "GunshipSupport", 1);
    UnitIssueOrder(gv_gunshipUnit[lv_forwardObserverOwner], OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner])) + (1200.0 * Cos((UnitGetFacing(gv_gunshipUnit[lv_forwardObserverOwner]) + 90.0)))), (PointGetY(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner])) + (1200.0 * Sin((UnitGetFacing(gv_gunshipUnit[lv_forwardObserverOwner]) + 90.0)))))), c_orderQueueReplace);
    UnitBehaviorAddPlayer(gv_gunshipUnit[lv_forwardObserverOwner], "GunshipSupportSpeed", lv_forwardObserverOwner, 1);
    UnitBehaviorAddPlayer(gv_gunshipUnit[lv_forwardObserverOwner], "GunshipSupportRoll", lv_forwardObserverOwner, 1);
    SoundPlay(SoundLink("GunshipSupportLeavingAcknowledge", -1), PlayerGroupSingle(lv_forwardObserverOwner), 100.0, 0.0);
    SoundPlay(SoundLink("GunshipLiftOff", -1), PlayerGroupAll(), 100.0, 0.0);
    autoB35B4FAF_var = 1;
    for ( ; autoB35B4FAF_var <= autoB35B4FAF_ae; autoB35B4FAF_var += 1 ) {
        CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 3.0);
    }
    Wait(3.0, c_timeGame);
    auto5EB37BE9_var = 1;
    for ( ; auto5EB37BE9_var <= auto5EB37BE9_ae; auto5EB37BE9_var += 1 ) {
        if ((gv_gunshipActive[auto5EB37BE9_var] == true)) {
            lv_gunshipModeOff = false;
            break;
        }

    }
    if ((lv_gunshipModeOff == true)) {
        TriggerEnable(gt_GunshipMouse1GaussCannon, false);
        TriggerEnable(gt_GunshipMouse2HellfireMissile, false);
        TriggerEnable(gt_GunshipImpactQuake, false);
        TriggerEnable(gt_GunshipOtherKeys, false);
    }

    libNtve_gf_KillModel(lv_localActorA);
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_forwardObserverOwner));
    DialogSetVisible(gv_raidUITeamStatus, PlayerGroupSingle(lv_forwardObserverOwner), true);
    libNtve_gf_PauseUnit(lv_forwardObserverHero, false);
    libNtve_gf_MakeUnitUncommandable(lv_forwardObserverHero, false);
    UnitSetState(lv_forwardObserverHero, c_unitStateSelectable, true);
    auto561BB938_g = gv_mobileInfantryGroup[lv_forwardObserverOwner];
    auto561BB938_u = UnitGroupCount(auto561BB938_g, c_unitCountAll);
    for (;; auto561BB938_u -= 1) {
        auto561BB938_var = UnitGroupUnitFromEnd(auto561BB938_g, auto561BB938_u);
        if (auto561BB938_var == null) { break; }
        libNtve_gf_MakeUnitUncommandable(auto561BB938_var, false);
        UnitSetState(auto561BB938_var, c_unitStateSelectable, true);
    }
    CameraApplyInfo(lv_forwardObserverOwner, CameraInfoDefault(), 0.0, -1, 10, true);
    CameraSetValue(lv_forwardObserverOwner, c_cameraValueDistance, 32.0, 0.0, -1, 10);
    CameraPan(lv_forwardObserverOwner, UnitGetPosition(gv_marineHero[lv_forwardObserverOwner]), 0.0, -1, 10, false);
    CameraLockInput(lv_forwardObserverOwner, false);
    DialogDestroy(lv_transperancyDialog);
    UnitSelect(lv_forwardObserverHero, lv_forwardObserverOwner, true);
    Wait(7.0, c_timeGame);
    gv_gunshipCinematicActive[lv_forwardObserverOwner] = false;
    gv_gameUIHidden[lv_forwardObserverOwner] = false;
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_forwardObserverOwner));
    UnitRemove(gv_gunshipUnit[lv_forwardObserverOwner]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipSupport_Init () {
    gt_GunshipSupport = TriggerCreate("gt_GunshipSupport_Func");
    TriggerEnable(gt_GunshipSupport, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Mouse 1 - Gauss Cannon
//--------------------------------------------------------------------------------------------------
bool gt_GunshipMouse1GaussCannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    point lv_targetPoint;

    // Automatic Variable Declarations
    const int auto9247101F_ae = 8;
    int auto9247101F_var;

    // Variable Initialization
    lv_x = EventMouseClickedPosXWorld();
    lv_y = EventMouseClickedPosYWorld();
    lv_targetPoint = Point(lv_x, lv_y);

    // Conditions
    if (testConds) {
        if (!((gv_gunshipActive[EventPlayer()] == true))) {
            return false;
        }

        if (!((gv_gunshipGaussCannonCooldown[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gunshipGaussCannonCooldown[EventPlayer()] = true;
    auto9247101F_var = 1;
    for ( ; auto9247101F_var <= auto9247101F_ae; auto9247101F_var += 1 ) {
        VisRevealArea(auto9247101F_var, RegionCircle(lv_targetPoint, 10.0), 0.4, true);
    }
    PlayerCreateEffectPoint(EventPlayer(), "GunshipSupportGaussCannonIndicatorPersistent", lv_targetPoint);
    if ((RandomInt(1, 10) == 1)) {
        SoundPlay(SoundLink("GunshipSupportGaussCannonAcknowledge", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }

    Wait(0.2, c_timeGame);
    UnitCreateEffectPoint(gv_gunshipUnit[EventPlayer()], "YamatoGunSpecialLaunchMissile", lv_targetPoint);
    if ((gv_gunshipCameraSwitch[EventPlayer()] == false) && (gv_gunshipZoom[EventPlayer()] == false)) {
        CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 0.4);
    }

    Wait(0.8, c_timeGame);
    gv_gunshipGaussCannonCooldown[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipMouse1GaussCannon_Init () {
    gt_GunshipMouse1GaussCannon = TriggerCreate("gt_GunshipMouse1GaussCannon_Func");
    TriggerEnable(gt_GunshipMouse1GaussCannon, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Mouse 2 - Hellfire Missile
//--------------------------------------------------------------------------------------------------
bool gt_GunshipMouse2HellfireMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;
    point lv_targetPoint;

    // Automatic Variable Declarations
    const int autoEE0FE970_ae = 8;
    int autoEE0FE970_var;

    // Variable Initialization
    lv_x = EventMouseClickedPosXWorld();
    lv_y = EventMouseClickedPosYWorld();
    lv_targetPoint = Point(lv_x, lv_y);

    // Conditions
    if (testConds) {
        if (!((gv_gunshipActive[EventPlayer()] == true))) {
            return false;
        }

        if (!((gv_gunshipHellfireMissileCooldown[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gunshipHellfireMissileCooldown[EventPlayer()] = true;
    PlayerCreateEffectPoint(EventPlayer(), "GunshipSupportHellfireMissileIndicatorPersistent", lv_targetPoint);
    if ((RandomInt(1, 5) <= 2)) {
        SoundPlay(SoundLink("GunshipSupportHellfireMissileAcknowledge", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
    }

    autoEE0FE970_var = 1;
    for ( ; autoEE0FE970_var <= autoEE0FE970_ae; autoEE0FE970_var += 1 ) {
        VisRevealArea(autoEE0FE970_var, RegionCircle(lv_targetPoint, 10.0), 1.0, true);
    }
    UnitCreateEffectPoint(gv_gunshipUnit[EventPlayer()], "DevastatorMissilesLaunchMissile", lv_targetPoint);
    if ((gv_gunshipCameraSwitch[EventPlayer()] == false) && (gv_gunshipZoom[EventPlayer()] == false)) {
        CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 0.5);
    }

    Wait(3.0, c_timeGame);
    gv_gunshipHellfireMissileCooldown[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipMouse2HellfireMissile_Init () {
    gt_GunshipMouse2HellfireMissile = TriggerCreate("gt_GunshipMouse2HellfireMissile_Func");
    TriggerEnable(gt_GunshipMouse2HellfireMissile, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Other Keys
//--------------------------------------------------------------------------------------------------
bool gt_GunshipOtherKeys_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_designatedEnemies;
    int lv_designatedUnitCount;
    unit lv_lockedOnUnit;

    // Automatic Variable Declarations
    unitgroup auto31112E5D_g;
    int auto31112E5D_u;
    unit auto31112E5D_var;
    const int auto54E3C35B_ae = 8;
    int auto54E3C35B_var;

    // Variable Initialization
    lv_designatedEnemies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gunshipActive[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventKeyPressed() == c_keyC)) {
        if ((gv_gunshipCameraSwitch[EventPlayer()] == false)) {
            gv_gunshipCameraSwitch[EventPlayer()] = true;
        }
        else {
            gv_gunshipCameraSwitch[EventPlayer()] = false;
        }
    }
    else if ((EventKeyPressed() == c_keyM)) {
        gv_gunshipActive[EventPlayer()] = false;
    }
    else if ((EventKeyPressed() == c_keyZ)) {
        if ((gv_gunshipZoom[EventPlayer()] == false)) {
            gv_gunshipZoom[EventPlayer()] = true;
        }
        else {
            gv_gunshipZoom[EventPlayer()] = false;
        }
    }
    else if ((EventKeyPressed() == c_keyQ)) {
        auto31112E5D_g = UnitGroup(null, 14, RegionCircle(UnitGetPosition(gv_gunshipFollowedUnit[EventPlayer()]), 30.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto31112E5D_u = UnitGroupCount(auto31112E5D_g, c_unitCountAll);
        for (;; auto31112E5D_u -= 1) {
            auto31112E5D_var = UnitGroupUnitFromEnd(auto31112E5D_g, auto31112E5D_u);
            if (auto31112E5D_var == null) { break; }
            if (((UnitHasBehavior(auto31112E5D_var, "LaserDesignatorLevel1") == true) || (UnitHasBehavior(auto31112E5D_var, "LaserDesignatorLevel2") == true) || (UnitHasBehavior(auto31112E5D_var, "LaserDesignatorLevel3") == true))) {
                UnitGroupAdd(lv_designatedEnemies, auto31112E5D_var);
            }

        }
        lv_designatedUnitCount = UnitGroupCount(lv_designatedEnemies, c_unitCountAlive);
        if ((gv_gunshipHellfireMissileCooldown[EventPlayer()] == false)) {
            if ((lv_designatedUnitCount > 0)) {
                gv_gunshipHellfireMissileCooldown[EventPlayer()] = true;
                lv_lockedOnUnit = UnitGroupRandomUnit(lv_designatedEnemies, c_unitCountAlive);
                UnitCreateEffectUnit(gv_gunshipUnit[EventPlayer()], "GunshipSupportHellfireMissileLaserSightDummy", lv_lockedOnUnit);
                SoundPlay(SoundLink("GunshipSupportHellfireMissileLockOn", -1), PlayerGroupActive(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/70F53F09") + (UnitTypeGetName(UnitGetType(lv_lockedOnUnit)) + StringExternal("Param/Value/9EA0FAC1"))));
                Wait(0.5, c_timeGame);
                UnitCreateEffectUnit(gv_gunshipUnit[EventPlayer()], "TX179AsgardHellfireMissileLaunchGuided", lv_lockedOnUnit);
                UnitBehaviorAdd(lv_lockedOnUnit, "GunshipHellfireMissileLockedOn", gv_gunshipUnit[EventPlayer()], 1);
                if ((RandomInt(1, 5) <= 2)) {
                    SoundPlay(SoundLink("GunshipSupportHellfireMissileAcknowledge", -1), PlayerGroupSingle(EventPlayer()), 100.0, 0.0);
                }

                auto54E3C35B_var = 1;
                for ( ; auto54E3C35B_var <= auto54E3C35B_ae; auto54E3C35B_var += 1 ) {
                    VisRevealArea(auto54E3C35B_var, RegionCircle(UnitGetPosition(lv_lockedOnUnit), 10.0), 1.0, true);
                }
                if ((gv_gunshipCameraSwitch[EventPlayer()] == false) && (gv_gunshipZoom[EventPlayer()] == false)) {
                    CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionZ, 0.6, 2.0, 100.0, 0.5);
                }

                Wait(5.0, c_timeGame);
                gv_gunshipHellfireMissileCooldown[EventPlayer()] = false;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipOtherKeys_Init () {
    gt_GunshipOtherKeys = TriggerCreate("gt_GunshipOtherKeys_Func");
    TriggerEnable(gt_GunshipOtherKeys, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Impact Quake
//--------------------------------------------------------------------------------------------------
bool gt_GunshipImpactQuake_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    fixed[3] lv_duration;

    // Automatic Variable Declarations
    const int autoAA0F06E8_ae = 2;
    int autoAA0F06E8_var;
    unitgroup auto95E0FE93_g;
    int auto95E0FE93_u;
    unit auto95E0FE93_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_duration[init_i] = 1.25;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_duration[1] -= 0.25;
    lv_duration[2] -= 0.5;
    if ((EventPlayerEffectUsed() == "GunshipSupportGaussCannonDamageSet")) {
        autoAA0F06E8_var = 0;
        for ( ; autoAA0F06E8_var <= autoAA0F06E8_ae; autoAA0F06E8_var += 1 ) {
            lv_duration[autoAA0F06E8_var] /= 2.0;
        }
    }

    auto95E0FE93_g = gv_marines;
    auto95E0FE93_u = UnitGroupCount(auto95E0FE93_g, c_unitCountAll);
    for (;; auto95E0FE93_u -= 1) {
        auto95E0FE93_var = UnitGroupUnitFromEnd(auto95E0FE93_g, auto95E0FE93_u);
        if (auto95E0FE93_var == null) { break; }
        if ((DistanceBetweenPoints(UnitGetPosition(auto95E0FE93_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 3.0) && (gv_gunshipActive[UnitGetOwner(auto95E0FE93_var)] == false)) {
            CameraShakeStart(UnitGetOwner(auto95E0FE93_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.35, 2.0, 100.0, lv_duration[0]);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(auto95E0FE93_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 5.0) && (gv_gunshipActive[UnitGetOwner(auto95E0FE93_var)] == false)) {
            CameraShakeStart(UnitGetOwner(auto95E0FE93_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, lv_duration[1]);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(auto95E0FE93_var), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 7.0) && (gv_gunshipActive[UnitGetOwner(auto95E0FE93_var)] == false)) {
            CameraShakeStart(UnitGetOwner(auto95E0FE93_var), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, lv_duration[2]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipImpactQuake_Init () {
    gt_GunshipImpactQuake = TriggerCreate("gt_GunshipImpactQuake_Func");
    TriggerEnable(gt_GunshipImpactQuake, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: No Quarter
//--------------------------------------------------------------------------------------------------
bool gt_NoQuarter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dummyUnit;
    unit lv_localPathfinder;
    point lv_localJumpPoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localPathfinder = EventUnit();
    lv_localJumpPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "DummyItemCarrier", 0, UnitGetOwner(lv_localPathfinder), UnitGetPosition(lv_localPathfinder), UnitGetPosition(lv_localPathfinder));
    lv_dummyUnit = UnitLastCreated();
    UnitIssueOrder(lv_dummyUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_localJumpPoint), c_orderQueueReplace);
    Wait(1.1, c_timeGame);
    if ((DistanceBetweenPoints(lv_localJumpPoint, UnitGetPosition(lv_dummyUnit)) <= 1.0)) {
        UnitSetPosition(lv_localPathfinder, lv_localJumpPoint, true);
        UnitIssueOrder(lv_localPathfinder, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        CameraShakeStart(UnitGetOwner(lv_localPathfinder), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 0.5);
    }

    UnitRemove(lv_dummyUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NoQuarter_Init () {
    gt_NoQuarter = TriggerCreate("gt_NoQuarter_Func");
    TriggerEnable(gt_NoQuarter, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Assault Jump Timer
//--------------------------------------------------------------------------------------------------
bool gt_AssaultJumpTimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoEBCA4628_ae = 8;
    int autoEBCA4628_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(1.0, c_timeGame);
        if ((gv_cinematicMode == false)) {
            autoEBCA4628_var = 1;
            for ( ; autoEBCA4628_var <= autoEBCA4628_ae; autoEBCA4628_var += 1 ) {
                if ((UnitGetType(gv_marineHero[autoEBCA4628_var]) == "Pathfinder") && (gv_talentLevel[6][autoEBCA4628_var] >= 1)) {
                    gv_assaultJumpTimer[autoEBCA4628_var] += 1;
                    if ((gv_assaultJumpTimer[autoEBCA4628_var] == gv_assaultJumpTimerCooldown[autoEBCA4628_var])) {
                        gv_assaultJumpTimer[autoEBCA4628_var] = 1;
                        UnitAddChargeUsed(gv_marineHero[autoEBCA4628_var], "Abil/AssaultJump", -1.0);
                    }

                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AssaultJumpTimer_Init () {
    gt_AssaultJumpTimer = TriggerCreate("gt_AssaultJumpTimer_Func");
    TriggerEnable(gt_AssaultJumpTimer, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrinker
//--------------------------------------------------------------------------------------------------
bool gt_Shrinker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnitTargetUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetScale(EventUnitTargetUnit(), 60.0, 60.0, 60.0);
    Wait(20.1, c_timeGame);
    if ((UnitIsAlive(EventUnitTargetUnit()) == true) && ((UnitHasBehavior(EventUnitTargetUnit(), "ShrinkerLevel1") == false) && (UnitHasBehavior(EventUnitTargetUnit(), "ShrinkerLevel2") == false) && (UnitHasBehavior(EventUnitTargetUnit(), "ShrinkerLevel3") == false))) {
        UnitSetScale(EventUnitTargetUnit(), 100.0, 100.0, 100.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Shrinker_Init () {
    gt_Shrinker = TriggerCreate("gt_Shrinker_Func");
    TriggerEnable(gt_Shrinker, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hug - Reveal When Activated
//--------------------------------------------------------------------------------------------------
bool gt_HugRevealWhenActivated_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto94DAFAC9_ae = 8;
    int auto94DAFAC9_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto94DAFAC9_var = 1;
    for ( ; auto94DAFAC9_var <= auto94DAFAC9_ae; auto94DAFAC9_var += 1 ) {
        VisRevealArea(auto94DAFAC9_var, RegionCircle(UnitGetPosition(EventUnit()), 3.0), 5.0, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HugRevealWhenActivated_Init () {
    gt_HugRevealWhenActivated = TriggerCreate("gt_HugRevealWhenActivated_Func");
    TriggerAddEventUnitAbility(gt_HugRevealWhenActivated, null, AbilityCommand("NeuralParasite", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Check
//--------------------------------------------------------------------------------------------------
bool gt_GameOverCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto4E14C190_g;
    int auto4E14C190_u;
    unit auto4E14C190_var;
    const int auto57D29479_ae = 8;
    int auto57D29479_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ReceivesDamage, false);
    TriggerEnable(gt_DeadMarine, false);
    ObjectiveDestroyAll(PlayerGroupAll());
    if ((gv_storyline != 3)) {
        auto4E14C190_g = gv_marines;
        auto4E14C190_u = UnitGroupCount(auto4E14C190_g, c_unitCountAll);
        for (;; auto4E14C190_u -= 1) {
            auto4E14C190_var = UnitGroupUnitFromEnd(auto4E14C190_g, auto4E14C190_u);
            if (auto4E14C190_var == null) { break; }
            libNtve_gf_ChangeUnitDamage(auto4E14C190_var, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
    }

    if ((TimerGetElapsed(gv_nOTDGameTime) > 7200.0)) {
        gf_AwardRatingNOTD(-7);
    }
    else if ((TimerGetElapsed(gv_nOTDGameTime) > 5400.0)) {
        gf_AwardRatingNOTD(-3);
    }
    auto57D29479_var = 1;
    for ( ; auto57D29479_var <= auto57D29479_ae; auto57D29479_var += 1 ) {
        libNtve_gf_ShowHideBossBar(false, auto57D29479_var);
        if ((PlayerStatus(auto57D29479_var) == c_playerStatusActive)) {
            gf_UIUpdatePortraitTooltip(auto57D29479_var);
            if ((gv_petKills[auto57D29479_var] >= 50) && (gv_victory == true) && (UnitIsAlive(gv_playerPet[auto57D29479_var]) == true) && (PlayerType(auto57D29479_var) == c_playerTypeUser) && (gv_totalPlayers > 1) && ((gv_bronzeStar[auto57D29479_var] < 20) || ((gv_bronzeStar[auto57D29479_var] >= 20) && (gv_nightmare == true)))) {
                gv_bronzeStar[auto57D29479_var] += 1;
                UIDisplayMessage(PlayerGroupSingle(auto57D29479_var), c_messageAreaDebug, StringExternal("Param/Value/AD1ED053"));
                gf_SetMedalVariables(auto57D29479_var, 3);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameOverCheck_Init () {
    gt_GameOverCheck = TriggerCreate("gt_GameOverCheck_Func");
    TriggerEnable(gt_GameOverCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Bonus
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBonus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_nMSpeed;
    bool lv_speed;

    // Automatic Variable Declarations
    const int auto41EF3FE7_ae = 8;
    int auto41EF3FE7_var;
    const int auto7EE366EF_ae = 8;
    int auto7EE366EF_var;
    const int autoA3BE48DE_ae = 8;
    int autoA3BE48DE_var;
    const int auto089447DB_ae = 8;
    int auto089447DB_var;
    const int autoDED00795_ae = 8;
    int autoDED00795_var;
    const int autoEE513C5E_ae = 8;
    int autoEE513C5E_var;
    const int auto086F3233_ae = 8;
    int auto086F3233_var;
    const int auto59D06B40_ae = 8;
    int auto59D06B40_var;
    const int auto63F24AC4_ae = 8;
    int auto63F24AC4_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_totalPlayers > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    if ((((gv_noNewbie == true) && (gv_gameVictoryTime <= 3600.0)) || ((gv_noNewbie == false) && (gv_gameVictoryTime <= 3240.0))) && ((gv_storyline > 2) || ((((gv_storyline >= 1) && (gv_storyline <= 2)) == true)))) {
        if ((gv_nightmare == true)) {
            lv_nMSpeed = true;
        }
        else {
            lv_speed = true;
        }
    }

    auto41EF3FE7_var = 1;
    for ( ; auto41EF3FE7_var <= auto41EF3FE7_ae; auto41EF3FE7_var += 1 ) {
        if ((PlayerStatus(auto41EF3FE7_var) == c_playerStatusActive) && ((UnitIsAlive(gv_marineHero[auto41EF3FE7_var]) == true))) {
            if ((gv_playerXP[auto41EF3FE7_var] > 1)) {
                gv_playerXP[auto41EF3FE7_var] += (gv_playerXP[auto41EF3FE7_var] / 10000);
            }
            if ((gv_trainingFieldMode == true)) {
                if ((gv_nightmare == true)) {
                    gv_survivalWinNM[auto41EF3FE7_var] += 1;
                }
                else {
                    gv_survivalWin[auto41EF3FE7_var] += 1;
                }
            }
            else if ((gv_nightmare == true)) {
                if ((gv_storyline == 1)) {
                    if ((lv_nMSpeed == true)) {
                        gv_eCNMSpeed[auto41EF3FE7_var] += 1;
                    }
                    else {
                        gv_eCWinNM[auto41EF3FE7_var] += 1;
                    }
                }
                else if ((gv_storyline == 2)) {
                    if ((lv_nMSpeed == true)) {
                        gv_aCNMSpeed[auto41EF3FE7_var] += 1;
                    }
                    else {
                        gv_aCWinNM[auto41EF3FE7_var] += 1;
                    }
                }
                else if ((gv_storyline == 3)) {
                    if ((lv_nMSpeed == true)) {
                        gv_sTNMSpeed[auto41EF3FE7_var] += 1;
                    }
                    else {
                        gv_sTWinNM[auto41EF3FE7_var] += 1;
                    }
                }
            }
            else if ((lv_speed == false)) {
                if ((gv_storyline == 1)) {
                    gv_eCWinNormal[auto41EF3FE7_var] += 1;
                }
                else if ((gv_storyline == 2)) {
                    gv_aCWinNormal[auto41EF3FE7_var] += 1;
                }
                else if ((gv_storyline == 3)) {
                    gv_sTWinNormal[auto41EF3FE7_var] += 1;
                }
            }
        }

    }
    if ((gv_noNewbie == false)) {
        gf_AwardPlayerXPNOTD(10);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/DCD19264"));
        gf_AwardCreditsNOTD(20);
    }
    else if ((gv_nightmare == true)) {
        gf_AwardPlayerXPNOTD(30);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/D48BFD10"));
        gf_AwardCreditsNOTD(80);
    }
    else if ((gv_squadRating > 1800)) {
        gf_AwardPlayerXPNOTD(25);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/C996F396"));
        gf_AwardCreditsNOTD(50);
    }
    else if ((gv_squadRating > 1700)) {
        gf_AwardPlayerXPNOTD(20);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/ED5A6EF5"));
        gf_AwardCreditsNOTD(40);
    }
    else if (true) {
        gf_AwardPlayerXPNOTD(15);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/4EE0D498"));
        gf_AwardCreditsNOTD(30);
    }
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupActive(), 100.0, 0.0);
    if (true) {
        gf_AwardPlayerXPNOTD(3);
    }

    Wait(1.75, c_timeReal);
    if ((gv_nightmare == true) && ((gv_totalPlayers == gv_alivePlayers)) && (gv_totalPlayers >= 3)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/4D6170D4"));
        gf_AwardRatingNOTD(2);
        gf_AwardCreditsNOTD(200);
        auto7EE366EF_var = 1;
        for ( ; auto7EE366EF_var <= auto7EE366EF_ae; auto7EE366EF_var += 1 ) {
            if ((PlayerStatus(auto7EE366EF_var) == c_playerStatusActive)) {
                gv_medalOfHonor[auto7EE366EF_var] += 1;
                gf_SetMedalVariables(auto7EE366EF_var, 10);
            }

        }
        SoundPlay(SoundLink("UI_BnetSearchOpen", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.75, c_timeGame);
    }

    autoA3BE48DE_var = 1;
    for ( ; autoA3BE48DE_var <= autoA3BE48DE_ae; autoA3BE48DE_var += 1 ) {
        if ((PlayerStatus(autoA3BE48DE_var) == c_playerStatusActive) && ((UnitIsAlive(gv_marineHero[autoA3BE48DE_var]) == true))) {
            if (((gv_storyline == 3) || ((gv_storyline <= 2) && ((gv_playerRating[autoA3BE48DE_var] < 1800) || ((gv_noNewbie == true) && (gv_playerRating[autoA3BE48DE_var] < 1990))))) && (PlayerStatus(autoA3BE48DE_var) == c_playerStatusActive)) {
                gv_playerRating[autoA3BE48DE_var] += 1;
            }

            gv_combatActionRibbon[autoA3BE48DE_var] += 1;
            UIDisplayMessage(PlayerGroupSingle(autoA3BE48DE_var), c_messageAreaDebug, StringExternal("Param/Value/1F9B84D2"));
            gf_SetMedalVariables(autoA3BE48DE_var, 1);
            if ((gv_playerXP[autoA3BE48DE_var] <= 500)) {
                gv_playerKarma[autoA3BE48DE_var] += 2;
            }
            else {
                gv_playerKarma[autoA3BE48DE_var] += 1;
            }
            if ((UnitGetType(gv_marineHero[autoA3BE48DE_var]) == "Medic") && (PlayerType(autoA3BE48DE_var) == c_playerTypeUser) && ((gv_lifeSavingMedal[autoA3BE48DE_var] < 20) || ((gv_lifeSavingMedal[autoA3BE48DE_var] >= 20) && (gv_nightmare == true)))) {
                gv_lifeSavingMedal[autoA3BE48DE_var] += 1;
                UIDisplayMessage(PlayerGroupSingle(autoA3BE48DE_var), c_messageAreaDebug, StringExternal("Param/Value/152F4F2A"));
                gf_SetMedalVariables(autoA3BE48DE_var, 2);
            }

        }

        gf_UIUpdateXP(autoA3BE48DE_var);
    }
    auto089447DB_var = 1;
    for ( ; auto089447DB_var <= auto089447DB_ae; auto089447DB_var += 1 ) {
        if ((UnitGetType(gv_marineHero[auto089447DB_var]) == "Rifleman") && (PlayerStatus(auto089447DB_var) == c_playerStatusActive) && (gv_hitsTaken[auto089447DB_var] <= 10) && ((gv_silverStar[auto089447DB_var] < 20) || ((gv_silverStar[auto089447DB_var] >= 20) && (gv_nightmare == true)))) {
            gv_silverStar[auto089447DB_var] += 1;
            UIDisplayMessage(PlayerGroupSingle(auto089447DB_var), c_messageAreaDebug, StringExternal("Param/Value/C9500451"));
            gf_SetMedalVariables(auto089447DB_var, 4);
        }

    }
    if ((gv_legionOfMeritCivsRescued >= 50)) {
        autoDED00795_var = 1;
        for ( ; autoDED00795_var <= autoDED00795_ae; autoDED00795_var += 1 ) {
            if ((PlayerStatus(autoDED00795_var) == c_playerStatusActive) && ((gv_legionOfMerit[autoDED00795_var] < 20) || ((gv_legionOfMerit[autoDED00795_var] >= 20) && (gv_nightmare == true)))) {
                gv_legionOfMerit[autoDED00795_var] += 1;
                UIDisplayMessage(PlayerGroupSingle(autoDED00795_var), c_messageAreaDebug, StringExternal("Param/Value/8FC716AC"));
                gf_SetMedalVariables(autoDED00795_var, 5);
            }

        }
    }

    if ((gv_distinguishedServiceMedalFailed == false)) {
        autoEE513C5E_var = 1;
        for ( ; autoEE513C5E_var <= autoEE513C5E_ae; autoEE513C5E_var += 1 ) {
            if ((PlayerStatus(autoEE513C5E_var) == c_playerStatusActive) && ((gv_distinguishedServiceMedal[autoEE513C5E_var] < 20) || ((gv_distinguishedServiceMedal[autoEE513C5E_var] >= 20) && (gv_nightmare == true)))) {
                gv_distinguishedServiceMedal[autoEE513C5E_var] += 1;
                UIDisplayMessage(PlayerGroupSingle(autoEE513C5E_var), c_messageAreaDebug, StringExternal("Param/Value/8A7DB9E0"));
                gf_SetMedalVariables(autoEE513C5E_var, 6);
            }

        }
    }

    if ((gv_navyCrossFailed == false) && (gv_totalPlayers >= 3)) {
        auto086F3233_var = 1;
        for ( ; auto086F3233_var <= auto086F3233_ae; auto086F3233_var += 1 ) {
            if ((PlayerStatus(auto086F3233_var) == c_playerStatusActive) && ((gv_navyCross[auto086F3233_var] < 20) || ((gv_navyCross[auto086F3233_var] >= 20) && (gv_nightmare == true)))) {
                gv_navyCross[auto086F3233_var] += 1;
                UIDisplayMessage(PlayerGroupSingle(auto086F3233_var), c_messageAreaDebug, StringExternal("Param/Value/E4F50C8D"));
                gf_SetMedalVariables(auto086F3233_var, 7);
            }

        }
    }

    if ((gv_classDiversity[1] == true) && (gv_classDiversity[2] == true) && (gv_classDiversity[3] == true) && (gv_classDiversity[4] == true) && (gv_classDiversity[5] == true) && (gv_classDiversity[6] == true) && (gv_classDiversity[7] == true) && (gv_classDiversity[8] == true)) {
        auto59D06B40_var = 1;
        for ( ; auto59D06B40_var <= auto59D06B40_ae; auto59D06B40_var += 1 ) {
            if (((gv_expeditionaryMedal[auto59D06B40_var] < 20) || ((gv_expeditionaryMedal[auto59D06B40_var] >= 20) && (gv_nightmare == true))) && (PlayerStatus(auto59D06B40_var) == c_playerStatusActive)) {
                gv_expeditionaryMedal[auto59D06B40_var] += 1;
                UIDisplayMessage(PlayerGroupSingle(auto59D06B40_var), c_messageAreaDebug, StringExternal("Param/Value/88564A97"));
                gf_SetMedalVariables(auto59D06B40_var, 8);
            }

        }
    }

    if ((gv_storyline != 3) && (gv_trainingFieldMode == false)) {
        TriggerExecute(gt_ClassPointsUpdateVictoryOnly, true, false);
    }

    Wait(3.5, c_timeReal);
    if ((gv_gameVictoryTime <= 3600.0)) {
        if ((gv_noNewbie == false)) {
            gf_AwardPlayerXPNOTD(10);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/514B0115"));
        }
        else if ((gv_nightmare == true)) {
            gf_AwardPlayerXPNOTD(40);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/84187FD8"));
        }
        else if (true) {
            gf_AwardPlayerXPNOTD(30);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/6708F6EF"));
        }
        SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupActive(), 100.0, 0.0);
        auto63F24AC4_var = 1;
        for ( ; auto63F24AC4_var <= auto63F24AC4_ae; auto63F24AC4_var += 1 ) {
            if ((PlayerStatus(auto63F24AC4_var) == c_playerStatusActive) && (lv_nMSpeed == false) && (lv_speed == true) && ((UnitIsAlive(gv_marineHero[auto63F24AC4_var]) == true))) {
                if ((gv_storyline == 1)) {
                    gv_eCSpeed[auto63F24AC4_var] += 1;
                }
                else if ((gv_storyline == 2)) {
                    gv_aCSpeed[auto63F24AC4_var] += 1;
                }
                else if ((gv_storyline == 3)) {
                    gv_sTSpeed[auto63F24AC4_var] += 1;
                }
            }

        }
    }

    TriggerExecute(gt_AutoSave, true, true);
    Wait(3.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBonus_Init () {
    gt_VictoryBonus = TriggerCreate("gt_VictoryBonus_Func");
    TriggerEnable(gt_VictoryBonus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Class Points Update (Victory Only)
//--------------------------------------------------------------------------------------------------
bool gt_ClassPointsUpdateVictoryOnly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_playerClass;
    int lv_cPPointsAwarded;

    // Automatic Variable Declarations
    const int auto4111D9D3_ae = 8;
    int auto4111D9D3_var;

    // Variable Initialization
    lv_cPPointsAwarded = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nightmare == true) && (gv_gameVictoryTime <= 3600.0)) {
        lv_cPPointsAwarded = 2;
    }

    auto4111D9D3_var = 1;
    for ( ; auto4111D9D3_var <= auto4111D9D3_ae; auto4111D9D3_var += 1 ) {
        if (((UnitIsAlive(gv_marineHero[auto4111D9D3_var]) == true))) {
            lv_playerClass = UnitGetType(gv_marineHero[auto4111D9D3_var]);
            if ((lv_playerClass == "Rifleman")) {
                gv_playerRiflemanPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/AC45D28E") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/F3919A6B"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerRiflemanPoints[auto4111D9D3_var] > 0)) {
                gv_playerRiflemanPoints[auto4111D9D3_var] -= 1;
            }
            if ((lv_playerClass == "Medic")) {
                gv_playerMedicPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/EA94D4D2") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/7B354682"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerMedicPoints[auto4111D9D3_var] > 0)) {
                gv_playerMedicPoints[auto4111D9D3_var] -= 1;
            }
            if (((lv_playerClass == "TychusChaingun") || (lv_playerClass == "Flamethrower3") || (lv_playerClass == "Technician"))) {
                gv_playerAssaultFlamerTechPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/81237354") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/3AAC3DB1"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerAssaultFlamerTechPoints[auto4111D9D3_var] > 0)) {
                gv_playerAssaultFlamerTechPoints[auto4111D9D3_var] -= 1;
            }
            if ((lv_playerClass == "Spectre")) {
                gv_playerReconPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/DEFF1410") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/E2617672"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerReconPoints[auto4111D9D3_var] > 0)) {
                gv_playerReconPoints[auto4111D9D3_var] -= 1;
            }
            if ((lv_playerClass == "GhostLaserLines")) {
                gv_playerMarksmanPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/5F7B85AC") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/87AC818C"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerMarksmanPoints[auto4111D9D3_var] > 0)) {
                gv_playerMarksmanPoints[auto4111D9D3_var] -= 1;
            }
            if (((lv_playerClass == "DominionKillTeam") || (lv_playerClass == "ForwardObserver") || (lv_playerClass == "ChemicalExpert"))) {
                gv_playerDemoFOChemPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/C2D38700") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/89D7875A"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerDemoFOChemPoints[auto4111D9D3_var] > 0)) {
                gv_playerDemoFOChemPoints[auto4111D9D3_var] -= 1;
            }
            if (((lv_playerClass == "Engineer") || (lv_playerClass == "Pathfinder"))) {
                gv_playerEngineerPathfinderPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/6D4ED5C7") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/40420ED1"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerEngineerPathfinderPoints[auto4111D9D3_var] > 0)) {
                gv_playerEngineerPathfinderPoints[auto4111D9D3_var] -= 1;
            }
            if (((lv_playerClass == "Commando") || (lv_playerClass == "PsiOps"))) {
                gv_playerCommandoPsiOpsPoints[auto4111D9D3_var] += lv_cPPointsAwarded;
                UIDisplayMessage(PlayerGroupSingle(auto4111D9D3_var), c_messageAreaDebug, (StringExternal("Param/Value/E424D0CF") + (IntToText(lv_cPPointsAwarded) + StringExternal("Param/Value/7B5DF727"))));
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCommandoPsiOpsPoints[auto4111D9D3_var] > 0)) {
                gv_playerCommandoPsiOpsPoints[auto4111D9D3_var] -= 1;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassPointsUpdateVictoryOnly_Init () {
    gt_ClassPointsUpdateVictoryOnly = TriggerCreate("gt_ClassPointsUpdateVictoryOnly_Func");
    TriggerEnable(gt_ClassPointsUpdateVictoryOnly, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightmare Bonus
//--------------------------------------------------------------------------------------------------
bool gt_NightmareBonus_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE5DE3CDB_ae = 8;
    int autoE5DE3CDB_var;

    // Conditions
    if (testConds) {
        if (!((gv_nightmare == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AwardPlayerXPNOTD(10);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/EF4B1F62"));
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupActive(), 100.0, 0.0);
    autoE5DE3CDB_var = 1;
    for ( ; autoE5DE3CDB_var <= autoE5DE3CDB_ae; autoE5DE3CDB_var += 1 ) {
        if ((PlayerStatus(autoE5DE3CDB_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[autoE5DE3CDB_var]) == true)) {
            if ((gv_playerRating[autoE5DE3CDB_var] >= 1800)) {
                gv_playerRating[autoE5DE3CDB_var] += 1;
            }
            else if ((gv_playerRating[autoE5DE3CDB_var] >= 1700)) {
                gv_playerRating[autoE5DE3CDB_var] += 2;
            }
            else if ((gv_playerRating[autoE5DE3CDB_var] >= 1600)) {
                gv_playerRating[autoE5DE3CDB_var] += 2;
            }
            else if (true) {
                gv_playerRating[autoE5DE3CDB_var] += 3;
            }
            if ((gv_playerXP[autoE5DE3CDB_var] <= 2000)) {
                gv_playerKarma[autoE5DE3CDB_var] += 2;
            }

        }

    }
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightmareBonus_Init () {
    gt_NightmareBonus = TriggerCreate("gt_NightmareBonus_Func");
    TriggerEnable(gt_NightmareBonus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NOTD Credits Roll
//--------------------------------------------------------------------------------------------------
bool gt_NOTDCreditsRoll_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoFC95E442_ae = 9;
    int autoFC95E442_var;
    const int autoC4C29DFD_ae = 8;
    int autoC4C29DFD_var;
    const int auto22C5525F_ae = 8;
    int auto22C5525F_var;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    DialogSetVisible(gv_teamUIMedalsButton, PlayerGroupAll(), false);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    autoFC95E442_var = 1;
    for ( ; autoFC95E442_var <= autoFC95E442_ae; autoFC95E442_var += 1 ) {
        libNtve_gf_ShowHideBossBar(false, autoFC95E442_var);
    }
    autoC4C29DFD_var = 1;
    for ( ; autoC4C29DFD_var <= autoC4C29DFD_ae; autoC4C29DFD_var += 1 ) {
        if ((UnitIsAlive(gv_marineHero[autoC4C29DFD_var]) == true) && (PlayerStatus(autoC4C29DFD_var) != c_playerStatusUnused)) {
            DialogSetVisible(gv_raidUITeamStatus, PlayerGroupAll(), false);
            DialogSetVisible(gv_teamUIStatsButton, PlayerGroupAll(), false);
            DialogSetVisible(gv_raidUIMedalsSubtab, PlayerGroupAll(), false);
            DialogSetVisible(gv_ammoCounterDialog[autoC4C29DFD_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_playerMedalsDialog[autoC4C29DFD_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_talentTree[autoC4C29DFD_var], PlayerGroupAll(), false);
            DialogSetVisible(gv_statsPlayerStatsDialog[autoC4C29DFD_var], PlayerGroupAll(), false);
        }

    }
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "NOTDCredits", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(3.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/1F9EE955"), StringExternal("Param/Value/EC412052"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(5.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/8BD93954"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/63D10F1E"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/41AFE9EF"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/78BDA520"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/972D5DD3"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/333C00A9"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/95D96637"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/8DF57A55"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/5395DC74"));
    Wait(30.0, c_timeReal);
    auto22C5525F_var = 1;
    for ( ; auto22C5525F_var <= auto22C5525F_ae; auto22C5525F_var += 1 ) {
        if ((gv_victory == true)) {
            GameOver(auto22C5525F_var, c_gameOverVictory, false, true);
        }
        else {
            GameOver(auto22C5525F_var, c_gameOverDefeat, false, true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NOTDCreditsRoll_Init () {
    gt_NOTDCreditsRoll = TriggerCreate("gt_NOTDCreditsRoll_Func");
    TriggerEnable(gt_NOTDCreditsRoll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;

    // Automatic Variable Declarations
    const int autoA4345A9C_ae = 8;
    int autoA4345A9C_var;
    const int auto49F44D28_n = 8;
    int auto49F44D28_i;
    const int autoDA7E11C7_ae = 8;
    int autoDA7E11C7_var;

    // Variable Initialization
    lv_localIntA = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(gv_marineHero[EventPlayer()]) == "ForwardObserver")) {
        DialogSetVisible(gv_shellDialog[EventPlayer()], PlayerGroupAll(), true);
    }

    gf_RemoveBoughtItems(EventPlayer());
    autoA4345A9C_var = 1;
    for ( ; autoA4345A9C_var <= autoA4345A9C_ae; autoA4345A9C_var += 1 ) {
        PlayerModifyPropertyInt(autoA4345A9C_var, c_playerPropCustom, c_playerPropOperSetTo, gv_playerXP[autoA4345A9C_var]);
        PlayerModifyPropertyInt(autoA4345A9C_var, c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerCredits[autoA4345A9C_var]);
    }
    for (auto49F44D28_i = 1; auto49F44D28_i <= auto49F44D28_n; auto49F44D28_i += 1) {
        if ((PlayerStatus(lv_localIntA) == c_playerStatusLeft)) {
            autoDA7E11C7_var = 1;
            for ( ; autoDA7E11C7_var <= autoDA7E11C7_ae; autoDA7E11C7_var += 1 ) {
                if ((gv_playerKarma[autoDA7E11C7_var] >= 1525) && (lv_localIntA != autoDA7E11C7_var)) {
                    libNtve_gf_SetAlliance(lv_localIntA, autoDA7E11C7_var, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
                else {
                    libNtve_gf_SetAlliance(lv_localIntA, autoDA7E11C7_var, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
            }
        }

        lv_localIntA += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesGame_Init () {
    gt_PlayerLeavesGame = TriggerCreate("gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return to Earth
//--------------------------------------------------------------------------------------------------
bool gt_ReturntoEarth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerNo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_playerNo = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((gv_victoryButton1 == EventDialogControl()) || (gv_victoryButton2 == EventDialogControl()) || (gv_scrollEndGameUIButtons[1] == EventDialogControl()) || (gv_scrollEndGameUIButtons[2] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_victoryButton1 == EventDialogControl()) || (gv_victoryButton2 == EventDialogControl())) && (gv_playerExitButton[lv_playerNo] == false)) {
        gv_playerExitButton[lv_playerNo] = true;
        DialogSetVisible(gv_endGameDialog1, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_endGameDialog2, PlayerGroupSingle(EventPlayer()), false);
        if ((gv_victory == true)) {
            gf_Save(lv_playerNo, gv_bankSize);
            SoundPlay(SoundLink("UI_ScoreScreenMissionTime", -1), PlayerGroupSingle(lv_playerNo), 100.0, 0.0);
            Wait(1.65, c_timeReal);
            GameOver(EventPlayer(), c_gameOverVictory, false, true);
        }
        else {
            gf_Save(lv_playerNo, gv_bankSize);
            SoundPlay(SoundLink("UI_ScreenWipe", -1), PlayerGroupSingle(lv_playerNo), 100.0, 0.0);
            Wait(0.8, c_timeReal);
            GameOver(EventPlayer(), c_gameOverDefeat, false, true);
        }
    }
    else if ((gv_scrollEndGameUIButtons[1] == EventDialogControl())) {
        DialogSetVisible(gv_endGameDialog1, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_endGameDialog2, PlayerGroupSingle(EventPlayer()), true);
    }
    else if ((gv_scrollEndGameUIButtons[2] == EventDialogControl())) {
        DialogSetVisible(gv_endGameDialog2, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_endGameDialog1, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturntoEarth_Init () {
    gt_ReturntoEarth = TriggerCreate("gt_ReturntoEarth_Func");
    TriggerEnable(gt_ReturntoEarth, false);
    TriggerAddEventDialogControl(gt_ReturntoEarth, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear
//--------------------------------------------------------------------------------------------------
bool gt_Clear_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Clear_Init () {
    gt_Clear = TriggerCreate("gt_Clear_Func");
    TriggerAddEventChatMessage(gt_Clear, c_playerAny, "-clear", true);
    TriggerAddEventChatMessage(gt_Clear, c_playerAny, "-c", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Stats Check
//--------------------------------------------------------------------------------------------------
bool gt_SquadStatsCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/751909DD") + IntToText(gv_squadRating)) + StringExternal("Param/Value/5FD67561")));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/C51D0717") + IntToText(gv_squadXP)) + StringExternal("Param/Value/95388DCA")));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/4EDDEB65") + gv_difficulty) + StringExternal("Param/Value/6F2465F0")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SquadStatsCheck_Init () {
    gt_SquadStatsCheck = TriggerCreate("gt_SquadStatsCheck_Func");
    TriggerAddEventChatMessage(gt_SquadStatsCheck, c_playerAny, "-squad", true);
    TriggerAddEventChatMessage(gt_SquadStatsCheck, c_playerAny, "-sq", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilians Check
//--------------------------------------------------------------------------------------------------
bool gt_CiviliansCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/BCE70FC0") + IntToText(gv_legionOfMeritCivsRescued)) + StringExternal("Param/Value/C6017D1E")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CiviliansCheck_Init () {
    gt_CiviliansCheck = TriggerCreate("gt_CiviliansCheck_Func");
    TriggerAddEventChatMessage(gt_CiviliansCheck, c_playerAny, "-civs", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Location
//--------------------------------------------------------------------------------------------------
bool gt_TeamLocation_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[10] lv_playerOverheadText;
    unit lv_radarToon;
    string[9] lv_localModelPing;
    bool lv_visibilityGenerated;

    // Automatic Variable Declarations
    const int auto245C0282_ae = 8;
    int auto245C0282_var;
    const int auto501D2911_ae = 8;
    int auto501D2911_var;

    // Variable Initialization
    for (init_i = 0; init_i <= 9; init_i += 1) {
        lv_playerOverheadText[init_i] = c_textTagNone;
    }
    lv_radarToon = gv_marineHero[EventPlayer()];

    // Actions
    if (!runActions) {
        return true;
    }

    lv_localModelPing[1] = "PingNumeric1";
    lv_localModelPing[2] = "PingNumeric2";
    lv_localModelPing[3] = "PingNumeric3";
    lv_localModelPing[4] = "PingNumeric4";
    lv_localModelPing[5] = "PingNumeric5";
    lv_localModelPing[6] = "PingNumeric6";
    lv_localModelPing[7] = "PingNumeric7";
    lv_localModelPing[8] = "PingNumeric8";
    if ((UnitIsAlive(gv_marineHero[EventPlayer()]) == false) && (UnitIsAlive(gv_playerPet[EventPlayer()]) == true)) {
        lv_radarToon = gv_playerPet[EventPlayer()];
    }

    auto245C0282_var = 1;
    for ( ; auto245C0282_var <= auto245C0282_ae; auto245C0282_var += 1 ) {
        if ((UnitIsAlive(gv_marineHero[auto245C0282_var]) == true) && ((DistanceBetweenPoints(UnitGetPosition(lv_radarToon), UnitGetPosition(gv_marineHero[auto245C0282_var])) <= 30.0) || (gv_noNewbie == false))) {
            lv_visibilityGenerated = true;
            libNtve_gf_CreatePingFacingAngle(PlayerGroupActive(), lv_localModelPing[auto245C0282_var], UnitGetPosition(gv_marineHero[auto245C0282_var]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0, 270.0);
            if ((UnitGetPropertyFixed(gv_marineHero[auto245C0282_var], c_unitPropLifePercent, c_unitPropCurrent) <= 50.0)) {
                PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            }

            PingSetUnit(PingLastCreated(), gv_marineHero[auto245C0282_var]);
            TextTagCreate((StringExternal("Param/Value/75B4E619") + ((gv_rankTitle[gv_playerRank[auto245C0282_var]] + PlayerName(auto245C0282_var)) + StringExternal("Param/Value/472EBABF"))), 24, UnitGetPosition(gv_marineHero[auto245C0282_var]), 2.3, true, true, PlayerGroupActive());
            lv_playerOverheadText[auto245C0282_var] = TextTagLastCreated();
            TextTagAttachToUnit(lv_playerOverheadText[auto245C0282_var], gv_marineHero[auto245C0282_var], 2.3);
        }

    }
    if ((lv_visibilityGenerated == true)) {
        Wait(3.0, c_timeReal);
        auto501D2911_var = 1;
        for ( ; auto501D2911_var <= auto501D2911_ae; auto501D2911_var += 1 ) {
            TextTagDestroy(lv_playerOverheadText[auto501D2911_var]);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamLocation_Init () {
    gt_TeamLocation = TriggerCreate("gt_TeamLocation_Func");
    TriggerAddEventUnitAbility(gt_TeamLocation, null, AbilityCommand("TeamLocation", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Class Points Check
//--------------------------------------------------------------------------------------------------
bool gt_ClassPointsCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cPPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_cPPlayer = StringToInt(StringSub(EventChatMessage(false), (StringFind(EventChatMessage(false), "-cp", c_stringCase) + 4), (StringFind(EventChatMessage(false), "-cp", c_stringCase) + 4)));

    // Conditions
    if (testConds) {
        if (!(((lv_cPPlayer >= 1) && (lv_cPPlayer <= 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/73EE1705") + (PlayerName(lv_cPPlayer) + StringExternal("Param/Value/24CA23FD"))));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/C5477355") + IntToText(gv_playerRiflemanPoints[lv_cPPlayer])));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/9EF2DD88") + IntToText(gv_playerMedicPoints[lv_cPPlayer])));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/0C10B1B5") + IntToText(gv_playerAssaultFlamerTechPoints[lv_cPPlayer])));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/F66465BA") + IntToText(gv_playerReconPoints[lv_cPPlayer])));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/CC0DFB19") + IntToText(gv_playerMarksmanPoints[lv_cPPlayer])));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/C0F5E603") + IntToText(gv_playerDemoFOChemPoints[lv_cPPlayer])));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/38912845") + IntToText(gv_playerEngineerPathfinderPoints[lv_cPPlayer])));
    UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/F11D8AEC") + IntToText(gv_playerCommandoPsiOpsPoints[lv_cPPlayer])));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassPointsCheck_Init () {
    gt_ClassPointsCheck = TriggerCreate("gt_ClassPointsCheck_Func");
    TriggerAddEventChatMessage(gt_ClassPointsCheck, c_playerAny, "-cp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wins Check
//--------------------------------------------------------------------------------------------------
bool gt_WinsCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_winsPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_winsPlayer = StringToInt(StringSub(EventChatMessage(false), 4, 4));

    // Conditions
    if (testConds) {
        if (!(((lv_winsPlayer >= 1) && (lv_winsPlayer <= 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/0EB0EFBD") + (PlayerName(lv_winsPlayer) + StringExternal("Param/Value/CEF00F43"))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/159F8057") + (IntToText(gv_eCWinNormal[lv_winsPlayer]) + (StringExternal("Param/Value/41CCC9EC") + (IntToText(gv_eCWinNM[lv_winsPlayer]) + (StringExternal("Param/Value/5026006B") + (IntToText(gv_eCSpeed[lv_winsPlayer]) + (StringExternal("Param/Value/92E41DAB") + (IntToText(gv_eCNMSpeed[lv_winsPlayer]) + StringExternal("Param/Value/F0B80E2D"))))))))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/0BFEF73E") + (IntToText(gv_aCWinNormal[lv_winsPlayer]) + (StringExternal("Param/Value/0D90E221") + (IntToText(gv_aCWinNM[lv_winsPlayer]) + (StringExternal("Param/Value/541F9CD8") + (IntToText(gv_aCSpeed[lv_winsPlayer]) + (StringExternal("Param/Value/E6C7544B") + (IntToText(gv_aCNMSpeed[lv_winsPlayer]) + StringExternal("Param/Value/50700109"))))))))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/7E413997") + (IntToText(gv_sTWinNormal[lv_winsPlayer]) + (StringExternal("Param/Value/42465C0C") + (IntToText(gv_sTWinNM[lv_winsPlayer]) + (StringExternal("Param/Value/4C486936") + (IntToText(gv_sTSpeed[lv_winsPlayer]) + (StringExternal("Param/Value/C17E81A3") + (IntToText(gv_sTNMSpeed[lv_winsPlayer]) + StringExternal("Param/Value/F124FE3F"))))))))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/4DC830E5") + (IntToText(gv_survivalWin[lv_winsPlayer]) + (StringExternal("Param/Value/E298D78F") + (IntToText(gv_survivalWinNM[lv_winsPlayer]) + StringExternal("Param/Value/33E4DF99"))))));
    Wait(3.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WinsCheck_Init () {
    gt_WinsCheck = TriggerCreate("gt_WinsCheck_Func");
    TriggerAddEventChatMessage(gt_WinsCheck, c_playerAny, "-w", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Check
//--------------------------------------------------------------------------------------------------
bool gt_AmmoCheck_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto7D94FF5A_ae = 8;
    int auto7D94FF5A_var;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto7D94FF5A_var = 1;
    for ( ; auto7D94FF5A_var <= auto7D94FF5A_ae; auto7D94FF5A_var += 1 ) {
        if ((UnitIsAlive(gv_marineHero[auto7D94FF5A_var]) == true)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((((StringExternal("Param/Value/A3D994F8") + PlayerName(auto7D94FF5A_var)) + StringExternal("Param/Value/0663903B")) + IntToText(gv_marineMags[auto7D94FF5A_var])) + StringExternal("Param/Value/B46CF236")));
        }

    }
    Wait(7.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoCheck_Init () {
    gt_AmmoCheck = TriggerCreate("gt_AmmoCheck_Func");
    TriggerAddEventChatMessage(gt_AmmoCheck, c_playerAny, "-ammo", true);
    TriggerAddEventChatMessage(gt_AmmoCheck, c_playerAny, "-a", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightmare Mode
//--------------------------------------------------------------------------------------------------
bool gt_NightmareMode_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoE71A08D3_ae = 14;
    int autoE71A08D3_var;

    // Conditions
    if (testConds) {
        if (!((gv_noNewbie == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_InfestorAI, true);
    gv_difficulty = StringExternal("Param/Value/00A3DF28");
    autoE71A08D3_var = 1;
    for ( ; autoE71A08D3_var <= autoE71A08D3_ae; autoE71A08D3_var += 1 ) {
        PlayerSetDifficulty(autoE71A08D3_var, 3);
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/9C7ED5DF"));
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 75.0, 0.0);
    if ((gv_alivePlayers >= 5)) {
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 30);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 30);
    }
    else {
        PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperAdd, 20);
        PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperAdd, 20);
    }
    gv_noNewbie = true;
    gv_nightmare = true;
    gf_AIDataDifficultyEdit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightmareMode_Init () {
    gt_NightmareMode = TriggerCreate("gt_NightmareMode_Func");
    TriggerEnable(gt_NightmareMode, false);
    TriggerAddEventChatMessage(gt_NightmareMode, 1, "-nightmare", true);
    TriggerAddEventChatMessage(gt_NightmareMode, 1, "-nm", true);
    TriggerAddEventChatMessage(gt_NightmareMode, 2, "-nightmare", true);
    TriggerAddEventChatMessage(gt_NightmareMode, 2, "-nm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Equipment
//--------------------------------------------------------------------------------------------------
bool gt_OpenEquipment_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == gv_equipmentButton[1]) || (EventDialogControl() == gv_equipmentButton[2]) || (EventDialogControl() == gv_equipmentButton[3]) || (EventDialogControl() == gv_equipmentButton[4]) || (EventDialogControl() == gv_equipmentButton[5]) || (EventDialogControl() == gv_equipmentButton[6]) || (EventDialogControl() == gv_equipmentButton[7]) || (EventDialogControl() == gv_equipmentButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_equipmentOpen == true)) {
        gv_equipmentOpen = false;
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), gv_marineHero[EventPlayer()], 2, false);
    }
    else {
        gv_equipmentOpen = true;
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), gv_marineHero[EventPlayer()], 2, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenEquipment_Init () {
    gt_OpenEquipment = TriggerCreate("gt_OpenEquipment_Func");
    TriggerAddEventDialogControl(gt_OpenEquipment, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Weight - Items
//--------------------------------------------------------------------------------------------------
bool gt_UpdateWeightItems_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!(((EventUnitInventoryItemContainer() == 1) || (UnitInventoryContainer(EventUnitInventoryItem()) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EquipmentUpdateMarineWeight(lv_triggeringPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateWeightItems_Init () {
    gt_UpdateWeightItems = TriggerCreate("gt_UpdateWeightItems_Func");
    TriggerAddEventUnitInventoryChange(gt_UpdateWeightItems, null, c_unitInventoryChangeGains, null);
    TriggerAddEventUnitInventoryChange(gt_UpdateWeightItems, null, c_unitInventoryChangeLoses, null);
    TriggerAddEventUnitInventoryChange(gt_UpdateWeightItems, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Transfer Block
//--------------------------------------------------------------------------------------------------
bool gt_ItemTransferBlock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitInventoryUnit(EventUnitInventoryItem()), "InventoryTransferBlock") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("InventoryRifleman", 2), EventUnitInventoryItem()), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemTransferBlock_Init () {
    gt_ItemTransferBlock = TriggerCreate("gt_ItemTransferBlock_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemTransferBlock, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unequip Item
//--------------------------------------------------------------------------------------------------
bool gt_UnequipItem_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_inventorySize;
    bool[8] lv_openInventorySlot;
    int lv_destinationSlot;
    int lv_triggeringPlayer;

    // Automatic Variable Declarations
    unitgroup auto480354C5_g;
    int auto480354C5_u;
    unit auto480354C5_var;
    int auto0ECF77D0_ae;
    int auto0ECF77D0_var;

    // Variable Initialization
    lv_inventorySize = gf_GetInventorySlots(EventUnit());
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_openInventorySlot[init_i] = true;
    }
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((EventUnitInventoryItemContainer() == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto480354C5_g = UnitInventoryGroup(EventUnit());
    auto480354C5_u = UnitGroupCount(auto480354C5_g, c_unitCountAll);
    for (;; auto480354C5_u -= 1) {
        auto480354C5_var = UnitGroupUnitFromEnd(auto480354C5_g, auto480354C5_u);
        if (auto480354C5_var == null) { break; }
        if ((UnitInventoryContainer(auto480354C5_var) == 1)) {
            lv_openInventorySlot[(UnitInventorySlot(auto480354C5_var) - 1)] = false;
        }

    }
    auto0ECF77D0_ae = lv_inventorySize;
    auto0ECF77D0_var = 1;
    for ( ; auto0ECF77D0_var <= auto0ECF77D0_ae; auto0ECF77D0_var += 1 ) {
        if ((lv_openInventorySlot[auto0ECF77D0_var] == true)) {
            lv_destinationSlot = (auto0ECF77D0_var + 1);
        }

    }
    if ((lv_destinationSlot != 0)) {
        UnitInventoryMove(EventUnitInventoryItem(), 1, lv_destinationSlot);
    }
    else {
        UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnequipItem_Init () {
    gt_UnequipItem = TriggerCreate("gt_UnequipItem_Func");
    TriggerAddEventUnitInventoryChange(gt_UnequipItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Inventory
//--------------------------------------------------------------------------------------------------
bool gt_ShowInventory_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoD6B077B1_ae = 8;
    int autoD6B077B1_var;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD6B077B1_var = 1;
    for ( ; autoD6B077B1_var <= autoD6B077B1_ae; autoD6B077B1_var += 1 ) {
        DialogSetVisible(gv_equipment[autoD6B077B1_var], PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_ammoCounterDialog[autoD6B077B1_var], PlayerGroupSingle(EventPlayer()), false);
    }
    DialogSetVisible(gv_equipment[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_ammoCounterDialog[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), true);
    UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), EventUnit(), 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowInventory_Init () {
    gt_ShowInventory = TriggerCreate("gt_ShowInventory_Func");
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[1]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[2]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[3]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[4]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[5]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[6]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[7]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[8]"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Equip Item
//--------------------------------------------------------------------------------------------------
bool gt_EquipItem_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_enhancementSlotsAvailable;
    bool[4] lv_openEnhancementSlot;

    // Automatic Variable Declarations
    unitgroup auto7DE09FC5_g;
    int auto7DE09FC5_u;
    unit auto7DE09FC5_var;
    int autoBDD89F32_ae;
    int autoBDD89F32_var;
    int auto4DF7EACE_ae;
    int auto4DF7EACE_var;

    // Variable Initialization
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_enhancementSlotsAvailable = gf_GetEnhancementSlots(EventUnit());
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_openEnhancementSlot[init_i] = true;
    }

    // Conditions
    if (testConds) {
        if (!((EventUnitInventoryItemContainer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Weapons"))) {
        UnitInventoryMove(EventUnitInventoryItem(), 2, 6);
        gf_DisableAttackEquippingWeapons(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetType(EventUnitInventoryItem()));
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Armor"))) {
        UnitInventoryMove(EventUnitInventoryItem(), 2, 10);
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Enhancements"))) {
        auto7DE09FC5_g = UnitInventoryGroup(EventUnit());
        auto7DE09FC5_u = UnitGroupCount(auto7DE09FC5_g, c_unitCountAll);
        for (;; auto7DE09FC5_u -= 1) {
            auto7DE09FC5_var = UnitGroupUnitFromEnd(auto7DE09FC5_g, auto7DE09FC5_u);
            if (auto7DE09FC5_var == null) { break; }
            if ((UnitInventoryContainer(auto7DE09FC5_var) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(auto7DE09FC5_var), "Class", c_playerAny) == ("Enhancements"))) {
                lv_openEnhancementSlot[(UnitInventorySlot(auto7DE09FC5_var) - 21)] = false;
                lv_enhancementSlotsAvailable -= 1;
            }

        }
        if ((lv_enhancementSlotsAvailable != 0)) {
            auto4DF7EACE_ae = gf_GetEnhancementSlots(UnitInventoryUnit(EventUnitInventoryItem()));
            auto4DF7EACE_var = 1;
            for ( ; auto4DF7EACE_var <= auto4DF7EACE_ae; auto4DF7EACE_var += 1 ) {
                if ((lv_openEnhancementSlot[auto4DF7EACE_var] == true)) {
                    UnitInventoryMove(EventUnitInventoryItem(), 2, (auto4DF7EACE_var + 21));
                }

            }
        }
        else {
            autoBDD89F32_ae = gf_GetEnhancementSlots(UnitInventoryUnit(EventUnitInventoryItem()));
            autoBDD89F32_var = 1;
            for ( ; autoBDD89F32_var <= autoBDD89F32_ae; autoBDD89F32_var += 1 ) {
                UnitInventoryMove(EventUnitInventoryItem(), 2, (autoBDD89F32_var + 21));
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EquipItem_Init () {
    gt_EquipItem = TriggerCreate("gt_EquipItem_Func");
    TriggerAddEventUnitInventoryChange(gt_EquipItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Gained
//--------------------------------------------------------------------------------------------------
bool gt_ItemGained_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_triggeringPlayer;
    bool lv_noWeapon;
    bool lv_noArmor;
    bool[4] lv_openEnhancementSlot;

    // Automatic Variable Declarations
    unitgroup auto473CCE81_g;
    int auto473CCE81_u;
    unit auto473CCE81_var;
    unitgroup auto9470247B_g;
    int auto9470247B_u;
    unit auto9470247B_var;
    unitgroup auto34B59C7F_g;
    int auto34B59C7F_u;
    unit auto34B59C7F_var;
    int auto6D827CDC_ae;
    int auto6D827CDC_var;

    // Variable Initialization
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_noWeapon = true;
    lv_noArmor = true;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_openEnhancementSlot[init_i] = true;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Weapons"))) {
        auto473CCE81_g = UnitInventoryGroup(EventUnit());
        auto473CCE81_u = UnitGroupCount(auto473CCE81_g, c_unitCountAll);
        for (;; auto473CCE81_u -= 1) {
            auto473CCE81_var = UnitGroupUnitFromEnd(auto473CCE81_g, auto473CCE81_u);
            if (auto473CCE81_var == null) { break; }
            if ((UnitInventoryContainer(auto473CCE81_var) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(auto473CCE81_var), "Class", c_playerAny) == ("Weapons"))) {
                lv_noWeapon = false;
            }

        }
        if ((lv_noWeapon == true)) {
            UnitInventoryMove(EventUnitInventoryItem(), 2, 6);
            gf_DisableAttackEquippingWeapons(lv_triggeringPlayer, UnitGetType(EventUnitInventoryItem()));
            gf_HEAmmoBurnDamage(EventPlayer());
        }

    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Armor"))) {
        auto9470247B_g = UnitInventoryGroup(EventUnit());
        auto9470247B_u = UnitGroupCount(auto9470247B_g, c_unitCountAll);
        for (;; auto9470247B_u -= 1) {
            auto9470247B_var = UnitGroupUnitFromEnd(auto9470247B_g, auto9470247B_u);
            if (auto9470247B_var == null) { break; }
            if ((UnitInventoryContainer(auto9470247B_var) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(auto9470247B_var), "Class", c_playerAny) == ("Armor"))) {
                lv_noArmor = false;
            }

        }
        if ((lv_noArmor == true)) {
            UnitInventoryMove(EventUnitInventoryItem(), 2, 10);
        }

    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Enhancements"))) {
        auto34B59C7F_g = UnitInventoryGroup(EventUnit());
        auto34B59C7F_u = UnitGroupCount(auto34B59C7F_g, c_unitCountAll);
        for (;; auto34B59C7F_u -= 1) {
            auto34B59C7F_var = UnitGroupUnitFromEnd(auto34B59C7F_g, auto34B59C7F_u);
            if (auto34B59C7F_var == null) { break; }
            if ((UnitInventoryContainer(auto34B59C7F_var) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(auto34B59C7F_var), "Class", c_playerAny) == ("Enhancements"))) {
                lv_openEnhancementSlot[(UnitInventorySlot(auto34B59C7F_var) - 21)] = false;
            }

        }
        auto6D827CDC_ae = gf_GetEnhancementSlots(UnitInventoryUnit(EventUnitInventoryItem()));
        auto6D827CDC_var = 1;
        for ( ; auto6D827CDC_var <= auto6D827CDC_ae; auto6D827CDC_var += 1 ) {
            if ((lv_openEnhancementSlot[auto6D827CDC_var] == true)) {
                UnitInventoryMove(EventUnitInventoryItem(), 2, (auto6D827CDC_var + 21));
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemGained_Init () {
    gt_ItemGained = TriggerCreate("gt_ItemGained_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemGained, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Magazine
//--------------------------------------------------------------------------------------------------
bool gt_DropMagazine_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_inventorySize;
    bool[8] lv_openInventorySlot;
    int lv_destinationSlot;
    unit lv_triggUnit;
    int lv_triggeringPlayer;
    unit lv_magazine;

    // Automatic Variable Declarations
    unitgroup auto0069E234_g;
    int auto0069E234_u;
    unit auto0069E234_var;
    unitgroup auto2DC7E362_g;
    int auto2DC7E362_u;
    unit auto2DC7E362_var;
    int auto40276F01_ae;
    int auto40276F01_var;

    // Variable Initialization
    lv_inventorySize = gf_GetInventorySlots(EventUnit());
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_openInventorySlot[init_i] = true;
    }
    lv_triggUnit = EventUnit();
    lv_triggeringPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_marineMags[lv_triggeringPlayer] >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0069E234_g = UnitInventoryGroup(EventUnit());
    auto0069E234_u = UnitGroupCount(auto0069E234_g, c_unitCountAll);
    for (;; auto0069E234_u -= 1) {
        auto0069E234_var = UnitGroupUnitFromEnd(auto0069E234_g, auto0069E234_u);
        if (auto0069E234_var == null) { break; }
        if (((UnitGetType(auto0069E234_var) == "Magazine") || (UnitGetType(auto0069E234_var) == "AmmoBox")) && (UnitGetChargeUsed(auto0069E234_var, "Ammo/Magazine") != 0.0)) {
            UnitAddChargeUsed(auto0069E234_var, "Ammo/Magazine", -1.0);
            gv_marineMags[lv_triggeringPlayer] -= 3;
            gf_UpdateAmmoDialog(lv_triggeringPlayer);
            gf_EquipmentUpdateMarineWeight(lv_triggeringPlayer);
            return true;
        }

    }
    auto2DC7E362_g = UnitInventoryGroup(EventUnit());
    auto2DC7E362_u = UnitGroupCount(auto2DC7E362_g, c_unitCountAll);
    for (;; auto2DC7E362_u -= 1) {
        auto2DC7E362_var = UnitGroupUnitFromEnd(auto2DC7E362_g, auto2DC7E362_u);
        if (auto2DC7E362_var == null) { break; }
        if ((UnitInventoryContainer(auto2DC7E362_var) == 1)) {
            lv_openInventorySlot[(UnitInventorySlot(auto2DC7E362_var) - 1)] = false;
        }

    }
    auto40276F01_ae = lv_inventorySize;
    auto40276F01_var = 1;
    for ( ; auto40276F01_var <= auto40276F01_ae; auto40276F01_var += 1 ) {
        if ((lv_openInventorySlot[auto40276F01_var] == true)) {
            lv_destinationSlot = (auto40276F01_var + 1);
        }

    }
    if ((lv_destinationSlot != 0)) {
        UnitInventoryCreate(lv_triggUnit, "Magazine");
        lv_magazine = UnitInventoryLastCreated();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Magazine", 0, 0, UnitGetPosition(EventUnit()));
        lv_magazine = UnitLastCreated();
    }
    libNtve_gf_UnitSetVariation(lv_magazine, "Crate", 1, "");
    UnitAddChargeUsed(lv_magazine, "Ammo/Magazine", 2.0);
    gv_marineMags[lv_triggeringPlayer] -= 3;
    gf_UpdateAmmoDialog(lv_triggeringPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropMagazine_Init () {
    gt_DropMagazine = TriggerCreate("gt_DropMagazine_Func");
    TriggerAddEventUnitAbility(gt_DropMagazine, null, AbilityCommand("DropMagazine", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magazine Use
//--------------------------------------------------------------------------------------------------
bool gt_MagazineUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itemType;
    int lv_selectingPlayer;
    int lv_originAmmo;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_itemType = UnitGetType(EventUnitInventoryItem());
    lv_selectingPlayer = UnitGetOwner(EventUnit());
    lv_originAmmo = gv_marineMags[lv_selectingPlayer];

    // Conditions
    if (testConds) {
        if (!(((lv_itemType == "AmmoBox") || (lv_itemType == "Magazine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_marineMags[lv_selectingPlayer] += 3;
    gf_EquipmentUpdateMarineWeight(lv_selectingPlayer);
    gf_UpdateAmmoDialog(lv_selectingPlayer);
    if ((lv_originAmmo <= 0) && (gv_marineRounds[lv_selectingPlayer] <= 0)) {
        TriggerExecute(gt_ManualReload, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MagazineUse_Init () {
    gt_MagazineUse = TriggerCreate("gt_MagazineUse_Func");
    TriggerAddEventUnitInventoryChange(gt_MagazineUse, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stack Mags Into Box
//--------------------------------------------------------------------------------------------------
bool gt_StackMagsIntoBox_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_magazineCharges;
    string lv_itemType;
    int lv_ammoBoxUsedCharges;

    // Automatic Variable Declarations
    unitgroup auto3282EC53_g;
    int auto3282EC53_u;
    unit auto3282EC53_var;

    // Variable Initialization
    lv_itemType = UnitGetType(EventUnitInventoryItem());

    // Conditions
    if (testConds) {
        if (!((lv_itemType == "Magazine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3282EC53_g = UnitInventoryGroup(EventUnit());
    auto3282EC53_u = UnitGroupCount(auto3282EC53_g, c_unitCountAll);
    for (;; auto3282EC53_u -= 1) {
        auto3282EC53_var = UnitGroupUnitFromEnd(auto3282EC53_g, auto3282EC53_u);
        if (auto3282EC53_var == null) { break; }
        if ((UnitGetType(auto3282EC53_var) == "AmmoBox")) {
            lv_ammoBoxUsedCharges = FixedToInt(UnitGetChargeUsed(auto3282EC53_var, "Ammo/Magazine"));
            if ((lv_ammoBoxUsedCharges != 0)) {
                lv_magazineCharges = (CatalogFieldValueGetAsInt(c_gameCatalogItem, "Magazine", "EffectCost.Charge.CountMax", c_playerAny) - FixedToInt(UnitGetChargeUsed(EventUnitInventoryItem(), "Ammo/Magazine")));
                UnitAddChargeUsed(EventUnitInventoryItem(), "Ammo/Magazine", MinF(lv_magazineCharges, lv_ammoBoxUsedCharges));
                UnitAddChargeUsed(auto3282EC53_var, "Ammo/Magazine", (-MinF(lv_magazineCharges, lv_ammoBoxUsedCharges)));
                if ((lv_ammoBoxUsedCharges >= lv_magazineCharges)) {
                    UnitInventoryRemove(EventUnitInventoryItem());
                    return true;
                }

            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StackMagsIntoBox_Init () {
    gt_StackMagsIntoBox = TriggerCreate("gt_StackMagsIntoBox_Func");
    TriggerAddEventUnitInventoryChange(gt_StackMagsIntoBox, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Road Flare
//--------------------------------------------------------------------------------------------------
bool gt_RoadFlare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_roadFlare;
    unit lv_itemUnitUser;
    point lv_itemUnitUserPoint;

    // Automatic Variable Declarations
    const int autoD192CE05_ae = 4;
    int autoD192CE05_var;

    // Variable Initialization
    lv_itemUnitUser = EventUnit();
    lv_itemUnitUserPoint = UnitGetPosition(lv_itemUnitUser);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "RoadFlare") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "RoadFlareFire", 0, 9, lv_itemUnitUserPoint, lv_itemUnitUserPoint);
    lv_roadFlare = UnitLastCreated();
    autoD192CE05_var = 1;
    for ( ; autoD192CE05_var <= autoD192CE05_ae; autoD192CE05_var += 1 ) {
        VisRevealArea(autoD192CE05_var, RegionCircle(lv_itemUnitUserPoint, 9.0), 65.0, false);
    }
    Wait(65.0, c_timeReal);
    UnitKill(lv_roadFlare);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadFlare_Init () {
    gt_RoadFlare = TriggerCreate("gt_RoadFlare_Func");
    TriggerAddEventUnitInventoryChange(gt_RoadFlare, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy Item
//--------------------------------------------------------------------------------------------------
bool gt_BuyItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_buyingPlayer;
    text lv_text;
    int lv_creditTag;
    int lv_colorCode;
    bool lv_colorChange;
    int lv_petCode;
    bool lv_nocolorchange;
    bool lv_nopetchange;
    int lv_startingCredits;
    string lv_unitGameLink;
    bool lv_bought;
    bool lv_purchaseFailed;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_buyingPlayer = EventPlayer();
    lv_text = StringToText("Credits Remaining: ");
    lv_creditTag = c_textTagNone;
    lv_petCode = 8;
    lv_startingCredits = gv_playerCredits[lv_buyingPlayer];

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_startingCredits < PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropTerrazine))) {
        PlayerModifyPropertyInt(lv_buyingPlayer, c_playerPropTerrazine, c_playerPropOperSetTo, lv_startingCredits);
    }

    if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 12))) {
        lv_unitGameLink = "Medpack";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 15))) {
        lv_unitGameLink = "Magazine";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 13))) {
        lv_unitGameLink = "Bandage";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 16))) {
        lv_unitGameLink = "RoadFlare";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 2))) {
        lv_unitGameLink = "Flamethrower";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 7))) {
        lv_unitGameLink = "OccularImplants";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 8))) {
        lv_unitGameLink = "APAmmo";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 11))) {
        lv_unitGameLink = "FMJAmmo";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 9))) {
        lv_unitGameLink = "HEAmmo";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 10))) {
        lv_unitGameLink = "HPAmmo";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 11))) {
        lv_unitGameLink = "C2Armor";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 4))) {
        lv_unitGameLink = "MP9A2SubMachineGun";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 3))) {
        lv_unitGameLink = "UA420AssaultRifle";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 5))) {
        lv_unitGameLink = "M5PulseRifle";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 6))) {
        lv_unitGameLink = "StingerMK3";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 23))) {
        lv_unitGameLink = "L3GrenadeLauncher";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 18))) {
        lv_unitGameLink = "PersonnelArcReactor";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 19))) {
        lv_unitGameLink = "CombatMobilityAugment";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 21))) {
        lv_unitGameLink = "NanoHealthAugment";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 12))) {
        lv_unitGameLink = "C4Armor";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 13))) {
        lv_unitGameLink = "Chaingun";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 10))) {
        lv_unitGameLink = "HighCapacityClip";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 14))) {
        lv_unitGameLink = "AntiVenom";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 17))) {
        lv_unitGameLink = "AmmoBox";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 20))) {
        lv_unitGameLink = "BarrettM112";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 0))) {
        lv_unitGameLink = "Shotgun";
    }
    else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 1))) {
        lv_unitGameLink = "XS4Armor";
    }
    if ((lv_unitGameLink != null) && (lv_startingCredits > PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropTerrazine))) {
        UnitInventoryCreate(gv_marineHero[lv_buyingPlayer], lv_unitGameLink);
        if ((UnitIsValid(UnitInventoryLastCreated()) == false)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitGameLink, 0, 0, UnitGetPosition(gv_marineHero[lv_buyingPlayer]));
            UnitBehaviorAddPlayer(UnitLastCreated(), "ShopItem", lv_buyingPlayer, lv_buyingPlayer);
        }
        else {
            UnitBehaviorAddPlayer(UnitInventoryLastCreated(), "ShopItem", lv_buyingPlayer, lv_buyingPlayer);
        }
        lv_bought = true;
    }
    if ((PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropTerrazine) < lv_startingCredits) && (lv_bought == false)) {
        if ((PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropCustom) >= 500)) {
            if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 14)) && (gf_WeaponsModPointMax(lv_buyingPlayer) == false)) {
                gv_playerWeaponsMod2[lv_buyingPlayer] += 100;
                gv_wModTotalPointsLeft[lv_buyingPlayer] += 1;
                gf_WModUpdateAvailableWModPointsText(lv_buyingPlayer);
                lv_bought = true;
                if ((ModI(gv_playerPetCode[lv_buyingPlayer], 1000) < 100)) {
                    gv_playerPetCode[lv_buyingPlayer] += 100;
                }

            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 14)) && (gf_WeaponsModPointMax(lv_buyingPlayer) == true)) {
                PlayerModifyPropertyInt(lv_buyingPlayer, c_playerPropTerrazine, c_playerPropOperAdd, 10000);
                lv_purchaseFailed = true;
            }
        }

        if ((PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropCustom) >= 5000) && (lv_bought == false)) {
            if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 8)) && (gf_BOInsigniaBought(lv_buyingPlayer) == false)) {
                gv_playerColorCode[lv_buyingPlayer] += 1000;
                gf_UpgradeBOInsigniaRank(lv_buyingPlayer);
                lv_bought = true;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 8)) && (gf_BOInsigniaBought(lv_buyingPlayer) == true) && (PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropTerrazine) != gv_playerCredits[lv_buyingPlayer])) {
                PlayerModifyPropertyInt(lv_buyingPlayer, c_playerPropTerrazine, c_playerPropOperAdd, 10000);
                lv_purchaseFailed = true;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 9)) && (gf_KittensBought(lv_buyingPlayer) == false)) {
                gv_playerColorCode[lv_buyingPlayer] += 100;
                gf_CreateKittens(lv_buyingPlayer);
                lv_bought = true;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 9)) && (gf_KittensBought(lv_buyingPlayer) == true)) {
                PlayerModifyPropertyInt(lv_buyingPlayer, c_playerPropTerrazine, c_playerPropOperAdd, 1000);
                lv_purchaseFailed = true;
            }
            else if (true) {
                if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 22))) {
                    lv_colorCode = 1;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 24))) {
                    lv_colorCode = 2;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 26))) {
                    lv_colorCode = 4;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 25))) {
                    lv_colorCode = 3;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 0))) {
                    lv_colorCode = 8;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 4))) {
                    lv_colorCode = 12;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 6))) {
                    lv_colorCode = 14;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 1))) {
                    lv_colorCode = 9;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 27))) {
                    lv_colorCode = 5;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 2))) {
                    lv_colorCode = 10;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 29))) {
                    lv_colorCode = 7;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 28))) {
                    lv_colorCode = 6;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 3))) {
                    lv_colorCode = 11;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 7))) {
                    lv_colorCode = 15;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 5))) {
                    lv_colorCode = 13;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 0))) {
                    lv_petCode = 1;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 1))) {
                    lv_petCode = 2;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 2))) {
                    lv_petCode = 3;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 3))) {
                    lv_petCode = 4;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 4))) {
                    lv_petCode = 5;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 5))) {
                    lv_petCode = 6;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 6))) {
                    lv_petCode = 7;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 7))) {
                    lv_petCode = 0;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 8))) {
                    lv_petCode = 9;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 9))) {
                    lv_petCode = 10;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 10))) {
                    lv_petCode = 11;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 11))) {
                    lv_petCode = 12;
                }
                else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 12))) {
                    lv_petCode = 13;
                }
            }
            if ((lv_bought == false)) {
                if ((ModI(gv_playerColorCode[lv_buyingPlayer], 100) != lv_colorCode) && (lv_petCode == 8)) {
                    gv_playerColorCode[lv_buyingPlayer] = ((gv_playerColorCode[lv_buyingPlayer] - ModI(gv_playerColorCode[lv_buyingPlayer], 100)) + lv_colorCode);
                    gf_PlayerColorChange(lv_buyingPlayer);
                    lv_bought = true;
                }
                else {
                    lv_nocolorchange = true;
                }
                if ((lv_petCode != 8) && (lv_petCode != ModI(gv_playerPetCode[lv_buyingPlayer], 100))) {
                    lv_bought = true;
                    gv_playerPetCode[lv_buyingPlayer] -= (ModI(gv_playerPetCode[lv_buyingPlayer], 100) - lv_petCode);
                }
                else {
                    lv_nopetchange = true;
                }
                if ((lv_nocolorchange == true) && (lv_nopetchange == true) && (lv_purchaseFailed == false)) {
                    PlayerModifyPropertyInt(lv_buyingPlayer, c_playerPropTerrazine, c_playerPropOperAdd, 5000);
                }

            }

        }

    }

    gv_playerCredits[lv_buyingPlayer] = PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropTerrazine);
    libNtve_gf_SetDialogItemText(gv_statsPlayerCashLabel[lv_buyingPlayer], IntToText(gv_playerCredits[lv_buyingPlayer]), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(gv_statsPlayerCashLabel[lv_buyingPlayer], "HelpPanelListBoxItemTitle", PlayerGroupAll());
    if ((lv_bought == true)) {
        TriggerExecute(gt_AutoSave, true, false);
        TextTagCreate((lv_text + IntToText(gv_playerCredits[lv_buyingPlayer])), 20, UnitGetPosition(gv_marineHero[lv_buyingPlayer]), 1.5, true, true, PlayerGroupActive());
        lv_creditTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(79.22, 58.43, 100.00));
        TextTagAttachToUnit(lv_creditTag, gv_marineHero[lv_buyingPlayer], 2.0);
        TextTagSetVelocity(lv_creditTag, 0.25, 90.0);
        Wait(5.0, c_timeGame);
        TextTagDestroy(lv_creditTag);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuyItem_Init () {
    gt_BuyItem = TriggerCreate("gt_BuyItem_Func");
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 23), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 16), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 18), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 15), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 19), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 13), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 14), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 17), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 21), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 22), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 24), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 26), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 25), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 27), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 28), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 29), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 13), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 14), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 20), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy1", 1), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Bandage Used
//--------------------------------------------------------------------------------------------------
bool gt_BandageUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_inventoryOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_inventoryOwner = gf_NOTDOwnerofUnit(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "Bandage") || (gv_bandageUsed[lv_inventoryOwner] == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    gv_bandageUsed[lv_inventoryOwner] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BandageUsed_Init () {
    gt_BandageUsed = TriggerCreate("gt_BandageUsed_Func");
    TriggerAddEventUnitInventoryChange(gt_BandageUsed, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Bandage with Ability
//--------------------------------------------------------------------------------------------------
bool gt_UseBandagewithAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marineHero;
    int lv_marineOwner;

    // Automatic Variable Declarations
    unitgroup auto209F8B79_g;
    int auto209F8B79_u;
    unit auto209F8B79_var;

    // Variable Initialization
    lv_marineHero = EventUnit();
    lv_marineOwner = UnitGetOwner(lv_marineHero);

    // Actions
    if (!runActions) {
        return true;
    }

    auto209F8B79_g = UnitInventoryGroup(lv_marineHero);
    auto209F8B79_u = UnitGroupCount(auto209F8B79_g, c_unitCountAll);
    for (;; auto209F8B79_u -= 1) {
        auto209F8B79_var = UnitGroupUnitFromEnd(auto209F8B79_g, auto209F8B79_u);
        if (auto209F8B79_var == null) { break; }
        if ((UnitGetType(auto209F8B79_var) == "Bandage")) {
            UnitAddChargeUsed(auto209F8B79_var, "Abil/Bandage", 1.0);
            if ((UnitGetChargeUsed(auto209F8B79_var, "Abil/Bandage") == CatalogFieldValueGetAsInt(c_gameCatalogItem, "Bandage", "EffectCost.Charge.CountMax", EventPlayer()))) {
                UnitInventoryRemove(auto209F8B79_var);
            }

            gv_bandageUsed[lv_marineOwner] = true;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseBandagewithAbility_Init () {
    gt_UseBandagewithAbility = TriggerCreate("gt_UseBandagewithAbility_Func");
    TriggerAddEventUnitAbility(gt_UseBandagewithAbility, null, AbilityCommand("FibrinBandage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Receives Damage
//--------------------------------------------------------------------------------------------------
bool gt_ReceivesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;
    unit lv_localUnitB;
    int lv_localIntA;
    int lv_ownerOfUnit;
    fixed lv_damageReceived;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_localUnitA = EventUnit();
    lv_localUnitB = EventUnitDamageSourceUnit();
    lv_localIntA = EventPlayer();
    lv_ownerOfUnit = UnitGetOwner(EventUnit());
    lv_damageReceived = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, lv_localUnitA) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_localUnitA) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_marines, lv_localUnitA) == true) && (lv_damageReceived > 1.0)) {
        gf_TeamStatusUnderAttackPortraitFlash(lv_ownerOfUnit);
    }

    if ((UnitGroupHasUnit(gv_marines, lv_localUnitA) == true) && (lv_damageReceived > 50.0)) {
        CameraShakeStart(lv_localIntA, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 1.0, 100.0, 0.3);
    }

    if ((UnitHasBehavior(EventUnitDamageSourceUnit(), "EvasionDummy") == false) && (lv_damageReceived > 1.0) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 1.0)) {
        if ((UnitGroupHasUnit(gv_marines, lv_localUnitA) == true) && (PlayerGroupHasPlayer(gv_marineSquad, EventUnitDamageSourcePlayer()) == false) && (EventUnitDamageEffect() != "LongboltMissileU") && (gv_gameOver == false)) {
            gv_hitsTaken[lv_localIntA] += 1;
            gv_playerDamageTaken[lv_localIntA] += EventUnitDamageAmount();
        }

        if ((gv_distinguishedServiceMedalFailed == false) && (UnitGroupHasUnit(gv_marines, lv_localUnitA) == true) && ((UnitGetType(lv_localUnitB) == "Baneling") || (UnitGetType(lv_localUnitB) == "Beastling"))) {
            gv_distinguishedServiceMedalFailed = true;
            if ((gv_noNewbie == true)) {
                UnitFlashSelection(lv_localUnitA, 5.0);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/567C561B"));
            }

        }

        gf_UIUpdateLifeBarLength(lv_localIntA);
        gf_UIUpdateLifePercentage(lv_localIntA);
        if ((RandomInt(0, 90) == 1) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) && ((gv_playerXP[lv_localIntA] >= 1000) || (gv_nightmare == true)) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 1.0) && (lv_damageReceived > 10.0) && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (EventUnitDamageEffect() != "FaithSelfDamage") && (EventUnitDamageEffect() != "Predator") && (EventUnitDamageEffect() != "GaussRifleMini") && (EventUnitDamageEffect() != "Damage") && (EventUnitDamageEffect() != "AutoTurret") && (EventUnitDamageEffect() != "PunisherGrenadesU") && (gf_AilmentResistanceCheck(lv_localUnitA) == false)) {
            UnitBehaviorAdd(lv_localUnitA, "ShortCircuit", lv_localUnitB, 1);
            gf_UIUpdateDebuffBar(lv_localIntA);
            gf_TipLocalNOTD(5000, lv_localIntA, StringExternal("Param/Value/AD923496"));
        }
        else if ((((UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 80.0) && (RandomInt(0, 100) == 1)) || ((UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0) && (RandomInt(0, 10) == 1))) && (gv_playerXP[lv_localIntA] >= 100) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 1.0) && (lv_damageReceived > 5.0) && (EventUnitDamageEffect() != "WarbotBDamage") && (EventUnitDamageEffect() != "FaithSelfDamage") && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (EventUnitDamageEffect() != "NapalmBarrageDamage") && (EventUnitDamageEffect() != "Predator") && (EventUnitDamageEffect() != "AutoTurret") && (EventUnitDamageEffect() != "GaussRifleMini") && (EventUnitDamageEffect() != "Damage") && (EventUnitDamageEffect() != "PunisherGrenadesU") && (gf_AilmentResistanceCheck(lv_localUnitA) == false)) {
            UnitBehaviorAdd(lv_localUnitA, "Cripple", lv_localUnitB, 1);
            gf_UIUpdateDebuffBar(lv_localIntA);
            gf_TipLocalNOTD(2500, lv_localIntA, StringExternal("Param/Value/9E09463D"));
        }
        else if ((((UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) && (RandomInt(0, 90) == 1)) || ((UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0) && (RandomInt(0, 10) == 1)) || ((UnitGetType(lv_localUnitB) == "Ultralisk") && (RandomInt(0, 2) == 1))) && (gv_playerXP[lv_localIntA] >= 100) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 1.0) && (lv_damageReceived > 5.0) && (EventUnitDamageEffect() != "WarbotBDamage") && (EventUnitDamageEffect() != "NapalmBarrageDamage") && (EventUnitDamageEffect() != "FaithSelfDamage") && (EventUnitDamageEffect() != "Predator") && (EventUnitDamageEffect() != "AutoTurret") && (EventUnitDamageEffect() != "PunisherGrenadesU") && (EventUnitDamageEffect() != "Damage") && (EventUnitDamageEffect() != "GaussRifleMini") && (gf_AilmentResistanceCheck(lv_localUnitA) == false)) {
            UnitBehaviorAdd(lv_localUnitA, "OpenWound", lv_localUnitB, 1);
            gf_UIUpdateDebuffBar(lv_localIntA);
            gf_TipLocalNOTD(1000, lv_localIntA, StringExternal("Param/Value/795CA19E"));
        }
        else if (((RandomInt(0, 50) == 1) || (UnitGetType(lv_localUnitB) == "Parasite") || (UnitGetType(lv_localUnitB) == "Slither") || (((UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) || (gv_nightmare == true)) && (RandomInt(0, 10) == 1))) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 1.0) && (EventUnitDamageEffect() != "WarbotBDamage") && (EventUnitDamageEffect() != "FaithSelfDamage") && (EventUnitDamageEffect() != "BlackOpsSniperRifle") && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (EventUnitDamageEffect() != "L3GrenadeExplosionAlly") && (EventUnitDamageEffect() != "L3GrenadeExplosion") && (EventUnitDamageEffect() != "L3GrenadeExplosion2") && (EventUnitDamageEffect() != "NapalmBarrageDamage") && (EventUnitDamageEffect() != "Predator") && (EventUnitDamageEffect() != "GaussRifleMini") && (EventUnitDamageEffect() != "Damage") && (EventUnitDamageEffect() != "AutoTurret") && (UnitGetType(lv_localUnitA) != "ChemicalExpert") && (EventUnitDamageEffect() != "PunisherGrenadesU") && (gf_AilmentResistanceCheck(lv_localUnitA) == false)) {
            UnitBehaviorAdd(lv_localUnitA, "Venom", lv_localUnitB, 1);
            gf_UIUpdateDebuffBar(lv_localIntA);
        }
        else if ((RandomInt(0, 75) == 1) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) && (gv_nightmare == true) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 1.0) && (EventUnitDamageEffect() != "WarbotBDamage") && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (EventUnitDamageEffect() != "NapalmBarrageDamage") && (EventUnitDamageEffect() != "FaithSelfDamage") && (EventUnitDamageEffect() != "GaussRifleMini") && (EventUnitDamageEffect() != "Damage") && (EventUnitDamageEffect() != "Predator") && (EventUnitDamageEffect() != "AutoTurret") && (EventUnitDamageEffect() != "PunisherGrenadesU") && (gf_AilmentResistanceCheck(lv_localUnitA) == false)) {
            UnitBehaviorAdd(lv_localUnitA, "Blind", lv_localUnitB, 1);
            gf_UIUpdateDebuffBar(lv_localIntA);
            gf_TipLocalNOTD(1000, lv_localIntA, StringExternal("Param/Value/D60C7F98"));
        }
        else if ((RandomInt(0, 125) == 1) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) && (lv_damageReceived > 5.0) && ((gv_nightmare == true) || (gv_squadRating >= 1800)) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 1.0) && (EventUnitDamageEffect() != "WarbotBDamage") && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (EventUnitDamageEffect() != "FaithSelfDamage") && (EventUnitDamageEffect() != "GaussRifleMini") && (EventUnitDamageEffect() != "AutoTurret") && (EventUnitDamageEffect() != "Predator") && (EventUnitDamageEffect() != "Damage") && (EventUnitDamageEffect() != "PunisherGrenadesU") && (gf_AilmentResistanceCheck(lv_localUnitA) == false)) {
            UnitBehaviorAdd(lv_localUnitA, "Madness", lv_localUnitB, 1);
            gf_UIUpdateDebuffBar(lv_localIntA);
        }
    }

    if ((UnitGroupHasUnit(gv_marines, lv_localUnitA) == true) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0) && (UnitIsAlive(lv_localUnitA) == true)) {
        UnitBehaviorRemove(lv_localUnitA, "Madness", 1);
    }

    if ((UnitGetPropertyFixed(lv_localUnitA, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0) && (UnitGetPropertyFixed(lv_localUnitA, c_unitPropShields, c_unitPropCurrent) <= 3.0) && (UnitIsAlive(lv_localUnitA) == true) && (gv_playerLives[lv_localIntA] > 0) && (gv_playerRecovery[lv_localIntA] == false) && (EventUnitDamageEffect() != "FaithSelfDamage")) {
        gf_BadlyInjured(lv_localUnitA);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReceivesDamage_Init () {
    gt_ReceivesDamage = TriggerCreate("gt_ReceivesDamage_Func");
    TriggerAddEventUnitDamaged(gt_ReceivesDamage, UnitRefFromVariable("gv_marineHero[1]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_ReceivesDamage, UnitRefFromVariable("gv_marineHero[2]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_ReceivesDamage, UnitRefFromVariable("gv_marineHero[3]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_ReceivesDamage, UnitRefFromVariable("gv_marineHero[4]"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Marine
//--------------------------------------------------------------------------------------------------
bool gt_DeadMarine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_deadPlayer;
    int lv_pNumber;
    unit lv_deadMarine;
    region lv_deathArea;
    unit lv_unit;

    // Automatic Variable Declarations
    unitgroup autoE83C3625_g;
    int autoE83C3625_u;
    unit autoE83C3625_var;
    unitgroup auto86D1EE90_g;
    int auto86D1EE90_u;
    const int auto2A38EB0C_ae = 3;
    int auto2A38EB0C_var;
    unitgroup auto967BAC28_g;
    int auto967BAC28_u;
    unit auto967BAC28_var;
    int auto15B9C099_n;
    int auto15B9C099_i;
    unitgroup autoE737FD6A_g;
    int autoE737FD6A_u;
    unit autoE737FD6A_var;
    const int autoB1E5CECE_ae = 8;
    int autoB1E5CECE_var;

    // Variable Initialization
    lv_deadPlayer = PlayerGroupSingle(EventPlayer());
    lv_pNumber = UnitGetOwner(EventUnit());
    lv_deadMarine = EventUnit();
    lv_deathArea = RegionCircle(UnitGetPosition(lv_deadMarine), 2.2);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerXP[lv_pNumber] >= 500)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DummyItemCarrier", 0, 1, UnitGetPosition(lv_deadMarine));
        gv_playerPet[lv_pNumber] = UnitLastCreated();
    }

    autoE83C3625_g = gv_mindLinkedGroup[lv_pNumber];
    autoE83C3625_u = UnitGroupCount(autoE83C3625_g, c_unitCountAll);
    for (;; autoE83C3625_u -= 1) {
        autoE83C3625_var = UnitGroupUnitFromEnd(autoE83C3625_g, autoE83C3625_u);
        if (autoE83C3625_var == null) { break; }
        UnitBehaviorRemove(autoE83C3625_var, "MindLinkLevel1", 1);
        UnitBehaviorRemove(autoE83C3625_var, "MindLinkLevel2", 1);
        UnitBehaviorRemove(autoE83C3625_var, "MindLinkLevel3", 1);
        auto86D1EE90_g = gv_mindLinkedGroup[lv_pNumber];
        auto86D1EE90_u = UnitGroupCount(auto86D1EE90_g, c_unitCountAll);
        for (;; auto86D1EE90_u -= 1) {
            lv_unit = UnitGroupUnitFromEnd(auto86D1EE90_g, auto86D1EE90_u);
            if (lv_unit == null) { break; }
            libNtve_gf_SetAlliance(gf_NOTDOwnerofUnit(autoE83C3625_var), gf_NOTDOwnerofUnit(lv_unit), libNtve_ge_AllianceSetting_Ally);
        }
    }
    gv_fPS[lv_pNumber] = false;
    gv_marineKilled[lv_pNumber] = true;
    gv_playerKarma[lv_pNumber] += 1;
    gv_hitsTaken[lv_pNumber] += 1;
    gf_RemoveBoughtItems(lv_pNumber);
    gf_UIInitializeLifeBar(lv_pNumber);
    gf_TeamStatusInitializePlayerPortrait(lv_pNumber);
    libNtve_gf_SetDialogItemImage(gv_teamStatusLifeBar[lv_pNumber], "Assets\\Textures\\black.dds", PlayerGroupAll());
    auto2A38EB0C_var = 0;
    for ( ; auto2A38EB0C_var <= auto2A38EB0C_ae; auto2A38EB0C_var += 1 ) {
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBorder[auto2A38EB0C_var][lv_pNumber], "Assets\\Textures\\black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBackground[auto2A38EB0C_var][lv_pNumber], "Assets\\Textures\\black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[auto2A38EB0C_var][lv_pNumber], "Assets\\Textures\\black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffsBorder[auto2A38EB0C_var][lv_pNumber], StringToText(""), PlayerGroupAll());
    }
    VisRevealArea(lv_pNumber, RegionCircle(UnitGetPosition(lv_deadMarine), 5.0), 5.0, true);
    gf_DeathDisplay((EventUnitDamageEffect()), lv_pNumber, libNtve_gf_KillingUnit());
    gf_DeathCamera(null, null, 0);
    auto967BAC28_g = UnitGroup(null, c_playerAny, lv_deathArea, UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto967BAC28_u = UnitGroupCount(auto967BAC28_g, c_unitCountAll);
    for (;; auto967BAC28_u -= 1) {
        auto967BAC28_var = UnitGroupUnitFromEnd(auto967BAC28_g, auto967BAC28_u);
        if (auto967BAC28_var == null) { break; }
        UnitSetPosition(auto967BAC28_var, RegionRandomPoint(lv_deathArea), true);
    }
    auto15B9C099_n = (gv_marineMags[lv_pNumber] / 3);
    for (auto15B9C099_i = 1; auto15B9C099_i <= auto15B9C099_n; auto15B9C099_i += 1) {
        UnitCreate(1, "Magazine", 0, 0, RegionRandomPoint(lv_deathArea), libNtve_gf_RandomAngle());
        libNtve_gf_UnitSetVariation(UnitLastCreated(), "Crate", 0, "");
        Wait(0.2, c_timeGame);
    }
    autoE737FD6A_g = gv_kittens[lv_pNumber];
    autoE737FD6A_u = UnitGroupCount(autoE737FD6A_g, c_unitCountAll);
    for (;; autoE737FD6A_u -= 1) {
        autoE737FD6A_var = UnitGroupUnitFromEnd(autoE737FD6A_g, autoE737FD6A_u);
        if (autoE737FD6A_var == null) { break; }
        UnitKill(autoE737FD6A_var);
    }
    gv_marineMags[lv_pNumber] = 0;
    gv_marineRounds[lv_pNumber] = 0;
    libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_pNumber][1], IntToText(gv_marineRounds[lv_pNumber]), PlayerGroupActive());
    libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_pNumber][2], IntToText(gv_marineMags[lv_pNumber]), PlayerGroupActive());
    libNtve_gf_SetDialogItemText(gv_statsPlayerLivesLeft[lv_pNumber], StringExternal("Param/Value/183A0CC8"), PlayerGroupAll());
    PlayerModifyPropertyInt(13, c_playerPropHandicap, c_playerPropOperSubtract, 3);
    PlayerModifyPropertyInt(14, c_playerPropHandicap, c_playerPropOperSubtract, 3);
    gf_DeathRating(lv_deadMarine, lv_pNumber);
    gf_Save(lv_pNumber, gv_bankSize);
    UnitGroupRemove(gv_marines, lv_deadMarine);
    if ((gv_kicked[lv_pNumber] == false)) {
        PlayerGroupAdd(gv_deadPlayers, lv_pNumber);
    }

    autoB1E5CECE_var = 1;
    for ( ; autoB1E5CECE_var <= autoB1E5CECE_ae; autoB1E5CECE_var += 1 ) {
        if ((autoB1E5CECE_var != lv_pNumber)) {
            if ((PlayerStatus(autoB1E5CECE_var) != c_playerStatusActive) && (gv_playerKarma[lv_pNumber] >= 1500)) {
                libNtve_gf_SetAllianceOneWay(autoB1E5CECE_var, lv_pNumber, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
            }
            else {
                libNtve_gf_SetAllianceOneWay(autoB1E5CECE_var, lv_pNumber, libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
        }

    }
    gf_UIUpdatePortraitTooltip(lv_pNumber);
    Wait(2.0, c_timeReal);
    gf_DeathDialogDestruction(lv_pNumber);
    UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaDebug, (StringExternal("Param/Value/C21BD67D") + (PlayerName(lv_pNumber) + StringExternal("Param/Value/DFDC255E"))));
    if ((gv_playerXP[lv_pNumber] < 500)) {
        if ((RandomInt(0, 1) == 1)) {
            UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaSubtitle, StringExternal("Param/Value/F042BBD6"));
        }
        else if ((RandomInt(0, 1) == 1)) {
            UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaSubtitle, StringExternal("Param/Value/B3530DB3"));
        }
        else if ((RandomInt(0, 1) == 1)) {
            UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaSubtitle, StringExternal("Param/Value/E5F38A52"));
        }
        else if ((RandomInt(0, 1) == 1)) {
            UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaSubtitle, StringExternal("Param/Value/E149595D"));
        }
        else if (true) {
            UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaSubtitle, StringExternal("Param/Value/709BCF0B"));
        }
    }

    if ((gv_playerXP[lv_pNumber] >= 500) && (gv_gameOver == false)) {
        gf_TipLocalNOTD(2000, lv_pNumber, StringExternal("Param/Value/631C7DA5"));
        UnitRemove(gv_playerPet[lv_pNumber]);
        gf_CreatePet(lv_pNumber, RegionRandomPoint(lv_deathArea));
        UnitGroupSelect(UnitLastCreatedGroup(), lv_pNumber, true);
        UnitControlGroupAddUnit(lv_pNumber, 1, UnitLastCreated());
        libNtve_gf_MakeUnitInvulnerable(gv_playerPet[lv_pNumber], true);
        UnitAbilityShow(gv_playerPet[lv_pNumber], "ZeratulBlink", false);
        UnitSetTeamColorIndex(gv_playerPet[lv_pNumber], 0);
        UnitSetPropertyFixed(gv_playerPet[lv_pNumber], c_unitPropLevel, 1.0);
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lv_pNumber], "Assets\\Textures\\btn-unit-terran-predator.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemBlendMode(gv_teamStatusPortraitImages[lv_pNumber], c_triggerBlendModeNormal, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusLifeBar[lv_pNumber], "Life Bar - Yellow.dds", PlayerGroupAll());
        TriggerEnable(gt_PetLevelUp, true);
        TriggerEnable(gt_Backstab, true);
    }
    Wait(3.0, c_timeReal);
    if ((gv_alivePlayers == 2)) {
        SoundPlay(SoundLink("TValerian02ADominionMarine600039", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    Wait(4.0, c_timeReal);
    UnitRemove(lv_deadMarine);
    libNtve_gf_MakeUnitInvulnerable(gv_playerPet[lv_pNumber], false);
    if ((gv_totalPlayers > 6) && ((gv_totalPlayers - gv_alivePlayers) == 5) && (gv_spawnFactor > 1)) {
        gv_spawnFactor -= 1;
    }
    else if ((gv_totalPlayers > 6) && ((gv_totalPlayers - gv_alivePlayers) == 3) && (gv_spawnFactor > 1)) {
        gv_spawnFactor -= 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadMarine_Init () {
    gt_DeadMarine = TriggerCreate("gt_DeadMarine_Func");
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[1]"));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[2]"));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[3]"));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[4]"));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[5]"));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[6]"));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[7]"));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromVariable("gv_marineHero[8]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Kills
//--------------------------------------------------------------------------------------------------
bool gt_Kills_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    point lv_localPointA;
    int lv_localIntA;
    unit lv_murderer;
    region lv_xPShareRegion;
    actor lv_localActorA;
    int lv_pNumber;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_localPointA = UnitGetPosition(lv_deadUnit);
    lv_localIntA = 1;
    lv_murderer = libNtve_gf_KillingUnit();
    lv_xPShareRegion = RegionCircle(UnitGetPosition(lv_murderer), 7.0);
    lv_pNumber = UnitGetOwner(lv_deadUnit);

    // Conditions
    if (testConds) {
        if (!(((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= 14)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_marines, lv_deadUnit) == true) && (PlayerGroupHasPlayer(PlayerGroupActive(), lv_pNumber) == true)) {
        if (((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= 9)) && (PlayerType(UnitGetOwner(lv_murderer)) == c_playerTypeUser) && (EventUnitDamageEffect() != "VultureSpiderMinesDamage") && (EventUnitDamageEffect() != "PolarityShiftDamageNegative") && (EventUnitDamageEffect() != "PolarityShiftDamagePositive") && (EventUnitDamageEffect() != "NapalmBarrageDamage") && (EventUnitDamageEffect() != "WallofFireDamage") && (EventUnitDamageEffect() != "ShivaChemicalDamage") && (EventUnitDamageEffect() != "SpikedArmorLevel1Damage") && (EventUnitDamageEffect() != "SpikedArmorLevel2Damage") && (EventUnitDamageEffect() != "SpikedArmorLevel3Damage")) {
            gv_playerRating[libNtve_gf_KillingPlayer()] -= 5;
            gv_playerKarma[libNtve_gf_KillingPlayer()] -= 5;
            gv_playerIsBad[libNtve_gf_KillingPlayer()] = true;
            gv_victimOfTK[lv_pNumber] = true;
            if ((RandomInt(0, 1) == 1)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/9A5FEBB8") + (PlayerName(lv_pNumber) + StringExternal("Param/Value/732FE0BD"))) + (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/8063A17C"))));
            }
            else if ((RandomInt(0, 1) == 1)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/2CB52FE5") + (PlayerName(lv_pNumber) + StringExternal("Param/Value/CBA308E9"))) + (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/CEBBD5EE"))));
            }
            else if ((RandomInt(0, 1) == 1)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/243B3EAB") + (PlayerName(lv_pNumber) + StringExternal("Param/Value/E3A23A9F"))) + (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/1485F410"))));
            }
            else if ((RandomInt(0, 1) == 1)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/68B18CCF") + (PlayerName(lv_pNumber) + StringExternal("Param/Value/61FA721C"))) + (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/0A202028"))));
            }
            else if ((RandomInt(0, 1) == 1)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/0DF9A793") + (PlayerName(lv_pNumber) + StringExternal("Param/Value/D5E309B0"))) + (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/ACD1AC88"))));
            }
            SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 100.0, 0.0);
            libNtve_gf_AttachModelToUnit(libNtve_gf_KillingUnit(), "BriefingUnitSelectRedSmall", "Ref_Center");
            lv_localActorA = libNtve_gf_ActorLastCreated();
            if ((gv_playerIsBad[lv_pNumber] == false)) {
                UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaSubtitle, StringExternal("Param/Value/2E562A5A"));
                gv_tKedPlayer = lv_pNumber;
                gv_griefingPlayer = libNtve_gf_KillingPlayer();
                TriggerEnable(gt_KarmaBite, true);
            }

            Wait(30.0, c_timeReal);
            libNtve_gf_KillModel(lv_localActorA);
            TriggerEnable(gt_KarmaBite, false);
        }

        TriggerExecute(gt_AutoSave, true, false);
    }
    else {
        if (((UnitGetType(lv_murderer) == "GrenadeLauncherAmmo1") || (UnitGetType(lv_murderer) == "GrenadeLauncherAmmo2") || (UnitGetType(lv_murderer) == "GrenadeLauncherAmmo3") || (UnitGetType(lv_murderer) == "GrenadeLauncherAmmo4") || (UnitGetType(lv_murderer) == "GrenadeLauncherAmmo5"))) {
            lv_xPShareRegion = RegionCircle(UnitGetPosition(gv_marineHero[libNtve_gf_KillingPlayer()]), 7.0);
        }

        while ((lv_localIntA < 9)) {
            if (((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= 9)) && (UnitGetType(lv_deadUnit) != "SpiderMineBurrowed") && (UnitGetType(lv_deadUnit) != "SpiderMine") && ((libNtve_gf_UnitInRegion(gv_marineHero[lv_localIntA], lv_xPShareRegion) == true) || (libNtve_gf_UnitInRegion(gv_playerPet[lv_localIntA], lv_xPShareRegion) == true) || (libNtve_gf_UnitInRegion(gv_reaperMK13[lv_localIntA], lv_xPShareRegion) == true))) {
                if ((UnitIsAlive(gv_playerPet[lv_localIntA]) == true)) {
                    if ((UnitLevel(gv_playerPet[lv_localIntA]) > 9)) {
                        UnitSetPropertyFixed(gv_playerPet[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_playerPet[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 1.15));
                    }
                    else {
                        if ((gv_noNewbie == true)) {
                            UnitSetPropertyFixed(gv_playerPet[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_playerPet[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 1.4));
                        }
                        else {
                            UnitSetPropertyFixed(gv_playerPet[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_playerPet[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 1.6));
                        }
                    }
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Medic")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.73));
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "GhostLaserLines")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.42));
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Spectre")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.79));
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Flamethrower3")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.55));
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "ForwardObserver")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.22));
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Engineer")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.26));
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) == "Pathfinder")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.25));
                }
                else if ((UnitGetType(gv_marineHero[lv_localIntA]) != "Medic") && (UnitGetType(gv_marineHero[lv_localIntA]) != "GhostLaserLines") && (UnitGetType(gv_marineHero[lv_localIntA]) != "Spectre") && (UnitGetType(gv_marineHero[lv_localIntA]) != "ForwardObserver") && (UnitGetType(gv_marineHero[lv_localIntA]) != "Flamethrower3") && (UnitGetType(gv_marineHero[lv_localIntA]) != "Engineer") && (UnitGetType(gv_marineHero[lv_localIntA]) != "Pathfinder")) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 0.3));
                }
                else if ((UnitIsAlive(gv_reaperMK13[lv_localIntA]) == true)) {
                    UnitSetPropertyFixed(gv_reaperMK13[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_reaperMK13[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 1.7));
                }
                if ((UnitGetType(lv_deadUnit) == "Ultralisk") && (libNtve_gf_UnitInRegion(gv_marineHero[lv_localIntA], lv_xPShareRegion) == true)) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 15.0));
                }
                else if ((UnitGetType(lv_deadUnit) == "Titan") && (libNtve_gf_UnitInRegion(gv_marineHero[lv_localIntA], lv_xPShareRegion) == true)) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 20.0));
                }
                else if ((UnitGetType(lv_deadUnit) == "Slasher") && (libNtve_gf_UnitInRegion(gv_marineHero[lv_localIntA], lv_xPShareRegion) == true)) {
                    UnitSetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropXP, c_unitPropCurrent) + 8.0));
                }
            }

            lv_localIntA += 1;
        }
        if (((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= 9)) && (UnitGetType(gv_marineHero[libNtve_gf_KillingPlayer()]) == "DominionKillTeam")) {
            if ((gv_talentLevel[9][libNtve_gf_KillingPlayer()] == 2)) {
                UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropLife, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropLife, c_unitPropCurrent) + 4.0));
                UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropShields, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropShields, c_unitPropCurrent) + 2.0));
            }
            else if ((gv_talentLevel[9][libNtve_gf_KillingPlayer()] == 1)) {
                UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropLife, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropLife, c_unitPropCurrent) + 2.0));
                UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropShields, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropShields, c_unitPropCurrent) + 1.0));
            }
        }

        if (((libNtve_gf_KillingPlayer() >= 1) && (libNtve_gf_KillingPlayer() <= 9)) && ((lv_pNumber == 13) || (lv_pNumber == 14)) && (lv_murderer != gv_marineHero[libNtve_gf_KillingPlayer()])) {
            UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropXP, c_unitPropCurrent) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lv_deadUnit)), "KillXP", 14)) * 0.75)));
            UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropKills, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropKills, c_unitPropCurrent) + 1.0));
        }

        if (((lv_pNumber >= 1) && (lv_pNumber <= 8)) && (lv_deadUnit == gv_playerPet[lv_pNumber])) {
            libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lv_pNumber], "Assets\\Textures\\terranportraittransition_noise.dds", PlayerGroupAll());
        }

    }
    if ((UnitHasBehavior(lv_murderer, "MarkofthePredator") == true) && (UnitGetType(lv_deadUnit) != "InfestedCocoon")) {
        gv_petKills[UnitGetOwner(lv_murderer)] += 1;
    }
    UnitGroupRemove(gv_zombieWave, lv_deadUnit);
    if (((UnitGetType(lv_deadUnit) == "Predator2") || (UnitGetType(lv_deadUnit) == "Brutalisk2") || (UnitGetType(lv_deadUnit) == "HybridProtoss") || (UnitGetType(lv_deadUnit) == "HybridZerg") || (UnitGetType(lv_deadUnit) == "Hydralisk2") || (UnitGetType(lv_deadUnit) == "Kerrigan2") || (UnitGetType(lv_deadUnit) == "ArchonPet") || (UnitGetType(lv_deadUnit) == "ZerglingPet") || (UnitGetType(lv_deadUnit) == "MurlocMarine2") || (UnitGetType(lv_deadUnit) == "Tassadar2") || (UnitGetType(lv_deadUnit) == "TaurenSpaceMarine2") || (UnitGetType(lv_deadUnit) == "TerraTron") || (UnitGetType(lv_deadUnit) == "Zeratul2"))) {
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitImages[lv_pNumber], "Assets\\Textures\\terranportraittransition_static.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemBlendMode(gv_teamStatusPortraitImages[lv_pNumber], c_triggerBlendModeAdd, PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusLifeBar[lv_pNumber], "Assets\\Textures\\black.dds", PlayerGroupAll());
        gv_playerMarinePetDead[lv_pNumber] = true;
    }
    else if ((UnitGetType(lv_deadUnit) == "Immortal2") && (RandomInt(0, 2) != 1) && (EventUnitDamageEffect() != "PrecisionShotLevel1Damage") && (EventUnitDamageEffect() != "PrecisionShotLevel2Damage") && (EventUnitDamageEffect() != "OSOKLevel1BaseDamage") && (EventUnitDamageEffect() != "OSOKLevel1BarrettDamage") && (EventUnitDamageEffect() != "OSOKLevel2BaseDamage") && (EventUnitDamageEffect() != "OSOKLevel2BarrettDamage") && (EventUnitDamageEffect() != "OSOKLevel3BaseDamage") && (EventUnitDamageEffect() != "OSOKLevel3BarrettDamage") && (EventUnitDamageEffect() != "OSOKLevel3NonHeroicKill") && (EventUnitDamageEffect() != "KillingMeSoftlyDamage") && (EventUnitDamageEffect() != "VolatileInjectionLevel1Damage") && (EventUnitDamageEffect() != "VolatileInjectionLevel2Damage") && (EventUnitDamageEffect() != "BURNDamageLevel1") && (EventUnitDamageEffect() != "BURNDamageLevel2") && (EventUnitDamageEffect() != "ShatterDamage") && (EventUnitDamageEffect() != "ShivaDamage") && (EventUnitDamageEffect() != "BarrettM112") && (EventUnitDamageEffect() != "InfernoDamage") && (EventUnitDamageEffect() != "NapalmBarrageDamage") && (EventUnitDamageEffect() != "NukeDamage") && (EventUnitDamageEffect() != "Crowbar2")) {
        Wait(RandomFixed(1.5, 5.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeReal);
            UnitRemove(lv_deadUnit);
        }
        else {
            UnitRemove(lv_deadUnit);
        }
    }
    else if ((UnitGetType(lv_deadUnit) == "Devourer")) {
        Wait(RandomFixed(0.5, 1.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.5, c_timeReal);
            UnitRemove(lv_deadUnit);
        }
        else {
            UnitRemove(lv_deadUnit);
        }
    }
    else if ((((UnitGetType(lv_deadUnit) == "ZombieLevel1") || (UnitGetType(lv_deadUnit) == "ZombieLevel2") || (UnitGetType(lv_deadUnit) == "Seeker") || (UnitGetType(lv_deadUnit) == "Hulk") || (UnitGetType(lv_deadUnit) == "InfestorTerran")) && (RandomInt(0, 2) == 1))) {
        Wait(RandomFixed(1.5, 3.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
            libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(1.5, c_timeReal);
            UnitRemove(lv_deadUnit);
        }
        else {
            UnitRemove(lv_deadUnit);
        }
    }
    else if (((gv_squadRating >= 1800) || (gv_nightmare == true)) && ((UnitGetType(lv_deadUnit) == "Ultralisk") || (UnitGetType(lv_deadUnit) == "Infestor2"))) {
        Wait(RandomFixed(1.5, 3.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
            libNtve_gf_UnitCreateFacingPoint(3, "Parasite", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(3.0, c_timeReal);
            UnitRemove(lv_deadUnit);
        }
        else {
            UnitRemove(lv_deadUnit);
        }
    }
    else if (((gv_squadRating >= 1800) || (gv_nightmare == true)) && (UnitGetType(lv_deadUnit) == "Titan")) {
        Wait(RandomFixed(1.5, 4.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreep", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(0.1, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(2, "Immortal2", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(2.0, c_timeReal);
            UnitRemove(lv_deadUnit);
        }
        else {
            UnitRemove(lv_deadUnit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Kills_Init () {
    gt_Kills = TriggerCreate("gt_Kills_Func");
    TriggerAddEventUnitDied(gt_Kills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karma Bite
//--------------------------------------------------------------------------------------------------
bool gt_KarmaBite_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_tKedPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerKarma[gv_griefingPlayer] = (gv_playerKarma[gv_griefingPlayer] - 25);
    gv_playerXP[gv_griefingPlayer] = (gv_playerXP[gv_griefingPlayer] - 50);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(gv_griefingPlayer) + StringExternal("Param/Value/548D875C")));
    TriggerExecute(gt_AutoSave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarmaBite_Init () {
    gt_KarmaBite = TriggerCreate("gt_KarmaBite_Func");
    TriggerEnable(gt_KarmaBite, false);
    TriggerAddEventChatMessage(gt_KarmaBite, c_playerAny, "-karmabite", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manual Reload
//--------------------------------------------------------------------------------------------------
bool gt_ManualReload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reloadingUnit;
    int lv_reloadingPlayer;
    int lv_reloadingText;
    fixed lv_reloadTime;
    fixed lv_reloadFactor;
    int lv_assaultAmmoMag;
    int lv_highCapacityMag;
    bool lv_dING;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_reloadingUnit = EventUnit();
    lv_reloadingPlayer = UnitGetOwner(EventUnit());
    lv_reloadingText = c_textTagNone;
    lv_reloadTime = 4.0;
    lv_reloadFactor = gf_WeaponsProfReloadTimeFactor(lv_reloadingPlayer);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_reloading[lv_reloadingPlayer] == false) && (gv_marineMags[lv_reloadingPlayer] > 0) && (UnitWeaponGet(lv_reloadingUnit, 1) != "Crowbar2") && (UnitWeaponGet(lv_reloadingUnit, 1) != "GravityGun")) {
        if ((((gv_marineRounds[lv_reloadingPlayer] >= 0) && (gv_marineRounds[lv_reloadingPlayer] <= 2)) == true)) {
            gv_smartReloadCount[lv_reloadingPlayer] += 1;
            lv_dING = true;
        }

        if ((gv_smartReloadCount[lv_reloadingPlayer] >= 15) && (gv_playerSmartReloadCredit[lv_reloadingPlayer] == false)) {
            gv_playerSmartReloadCredit[lv_reloadingPlayer] = true;
            gv_playerRating[lv_reloadingPlayer] += 1;
        }

        UnitAbilityEnable(lv_reloadingUnit, "Reload", false);
        gv_reloading[lv_reloadingPlayer] = true;
        UnitAbilityEnable(lv_reloadingUnit, "attack", false);
        UnitAbilityEnable(lv_reloadingUnit, "L3LaunchGrenade", false);
        gv_marineRounds[lv_reloadingPlayer] = 0;
        if ((UnitHasBehavior(lv_reloadingUnit, "HighCapacityClip") == true)) {
            lv_highCapacityMag = 1;
        }

        if ((UnitGetType(lv_reloadingUnit) == "TychusChaingun")) {
            if ((gv_marineMags[lv_reloadingPlayer] >= (gv_talentLevel[3][lv_reloadingPlayer] + (lv_highCapacityMag + 1)))) {
                lv_assaultAmmoMag = (gv_talentLevel[3][lv_reloadingPlayer] + (lv_highCapacityMag + 1));
                gv_marineMags[lv_reloadingPlayer] = (gv_marineMags[lv_reloadingPlayer] - lv_assaultAmmoMag);
            }
            else {
                lv_assaultAmmoMag = gv_marineMags[lv_reloadingPlayer];
                gv_marineMags[lv_reloadingPlayer] = 0;
            }
        }
        else {
            gv_marineMags[lv_reloadingPlayer] = (gv_marineMags[lv_reloadingPlayer] - (lv_highCapacityMag + 1));
        }
        gf_UpdateAmmoDialog(lv_reloadingPlayer);
        SoundPlayOnUnit(SoundLink("ClipOut", -1), PlayerGroupAll(), lv_reloadingUnit, 15.0, 75.0, 0.0);
        if ((lv_dING == true)) {
            TextTagCreate(StringExternal("Param/Value/9BF40611"), 20, UnitGetPosition(lv_reloadingUnit), 1.5, true, false, PlayerGroupActive());
        }
        else {
            TextTagCreate(StringExternal("Param/Value/A12A2C97"), 20, UnitGetPosition(lv_reloadingUnit), 1.5, true, false, PlayerGroupActive());
        }
        lv_reloadingText = TextTagLastCreated();
        TextTagAttachToUnit(lv_reloadingText, lv_reloadingUnit, 1.5);
        if (((UnitWeaponGet(lv_reloadingUnit, 1) == "GuassRifle") || (UnitWeaponGet(lv_reloadingUnit, 1) == "M5PulseRifle") || (UnitWeaponGet(lv_reloadingUnit, 1) == "UA420AssaultRifle"))) {
            lv_reloadTime = (1.5 * lv_reloadFactor);
        }
        else {
            if ((UnitWeaponGet(lv_reloadingUnit, 1) == "SniperRifle")) {
                lv_reloadTime = (2.75 * lv_reloadFactor);
            }
            else {
                if ((UnitWeaponGet(lv_reloadingUnit, 1) == "Flamethrower")) {
                    lv_reloadTime = (2.5 * lv_reloadFactor);
                }
                else {
                    if ((UnitWeaponGet(lv_reloadingUnit, 1) == "HyperionAir")) {
                        lv_reloadTime = (1.5 * lv_reloadFactor);
                    }
                    else {
                        if ((UnitWeaponGet(lv_reloadingUnit, 1) == "P38ScytheGuassPistol")) {
                            lv_reloadTime = (0.7 * lv_reloadFactor);
                        }
                        else {
                            if ((UnitWeaponGet(lv_reloadingUnit, 1) == "Shotgun")) {
                                lv_reloadTime = (2.0 * lv_reloadFactor);
                            }
                            else {
                                if ((UnitWeaponGet(lv_reloadingUnit, 1) == "MP9A2SubMachineGun")) {
                                    lv_reloadTime = (0.75 * lv_reloadFactor);
                                }
                                else {
                                    if ((UnitWeaponGet(lv_reloadingUnit, 1) == "StingerMK3")) {
                                        lv_reloadTime = (2.5 * lv_reloadFactor);
                                    }
                                    else {
                                        if ((UnitWeaponGet(lv_reloadingUnit, 1) == "L3GrenadeLauncher")) {
                                            lv_reloadTime = (2.5 * lv_reloadFactor);
                                        }
                                        else {
                                            lv_reloadTime = (4.0 * lv_reloadFactor);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if ((UnitGetType(lv_reloadingUnit) == "Commando") && ((UnitHasBehavior(lv_reloadingUnit, "AdrenalineLevel1") == true) || (UnitHasBehavior(lv_reloadingUnit, "AdrenalineLevel2") == true) || (UnitHasBehavior(lv_reloadingUnit, "AdrenalineLevel3") == true)) && ((UnitHasBehavior(lv_reloadingUnit, "SurgicalStrikeLevel1") == true) || (UnitHasBehavior(lv_reloadingUnit, "SurgicalStrikeLevel2") == true) || (UnitHasBehavior(lv_reloadingUnit, "SurgicalStrikeLevel3") == true))) {
            lv_reloadTime = (lv_reloadTime / 2.0);
            UIDisplayMessage(PlayerGroupSingle(lv_reloadingPlayer), c_messageAreaDebug, StringExternal("Param/Value/7A86A775"));
        }

        lv_reloadTime = (lv_reloadTime - (IntToFixed(gv_statsAgility3[lv_reloadingPlayer]) * 0.08));
        if ((lv_reloadTime < 0.1)) {
            lv_reloadTime = 0.1;
        }

        if ((lv_dING == true)) {
            lv_reloadTime = (lv_reloadTime * 0.8);
        }

        CatalogFieldValueSet(c_gameCatalogBehavior, "Reload", "Duration", lv_reloadingPlayer, FixedToString((lv_reloadTime * 1.5), c_fixedPrecisionAny));
        UnitBehaviorAddPlayer(lv_reloadingUnit, "Reload", lv_reloadingPlayer, 1);
        Wait((lv_reloadTime - 0.4), c_timeReal);
        if ((UnitIsAlive(lv_reloadingUnit) == true)) {
            if ((UnitWeaponGet(lv_reloadingUnit, 1) == "Shotgun")) {
                SoundPlayOnUnit(SoundLink("ShotgunPump", -1), PlayerGroupAll(), lv_reloadingUnit, 15.0, 75.0, 0.0);
            }
            else {
                SoundPlayOnUnit(SoundLink("ClipIn", -1), PlayerGroupAll(), lv_reloadingUnit, 15.0, 75.0, 0.0);
            }
        }

        Wait(0.4, c_timeReal);
        TextTagDestroy(lv_reloadingText);
        gv_reloading[lv_reloadingPlayer] = false;
        if ((UnitIsAlive(lv_reloadingUnit) == true)) {
            UnitAbilityEnable(lv_reloadingUnit, "attack", true);
            UnitAbilityEnable(lv_reloadingUnit, "L3LaunchGrenade", true);
        }

        if ((UnitGetType(lv_reloadingUnit) == "TychusChaingun")) {
            gv_marineRounds[lv_reloadingPlayer] = (gv_playerRoundLimit[lv_reloadingPlayer] * lv_assaultAmmoMag);
        }
        else {
            gv_marineRounds[lv_reloadingPlayer] = (gv_playerRoundLimit[lv_reloadingPlayer] * (lv_highCapacityMag + 1));
        }
        gf_UpdateAmmoDialog(lv_reloadingPlayer);
    }

    if ((UnitWeaponGet(lv_reloadingUnit, 1) == "StingerMK3") && (gv_marineRounds[lv_reloadingPlayer] < 10)) {
        UnitAbilityEnable(lv_reloadingUnit, "attack", false);
    }
    else {
        if ((gv_reloading[lv_reloadingPlayer] == false)) {
            UnitAbilityEnable(lv_reloadingUnit, "attack", true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ManualReload_Init () {
    gt_ManualReload = TriggerCreate("gt_ManualReload_Func");
    TriggerAddEventUnitAbility(gt_ManualReload, null, AbilityCommand("Reload", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Usage
//--------------------------------------------------------------------------------------------------
bool gt_AmmoUsage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_firingUnit;
    int lv_firingPlayer;
    int lv_reloadingText;
    fixed lv_reloadTime;
    fixed lv_reloadFactor;
    int lv_assaultAmmoMag;
    int lv_highCapacityClip;

    // Automatic Variable Declarations
    string autoAAD4E86B_val;

    // Variable Initialization
    lv_firingUnit = EventUnit();
    lv_firingPlayer = UnitGetOwner(lv_firingUnit);
    lv_reloadingText = c_textTagNone;
    lv_reloadTime = 4.0;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitWeaponGet(lv_firingUnit, 1) != "Crowbar2"))) {
            return false;
        }

        if (!((UnitWeaponGet(lv_firingUnit, 1) != "GravityGun"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_reloadFactor = gf_WeaponsProfReloadTimeFactor(lv_firingPlayer);
    gf_UpdateAmmoDialog(lv_firingPlayer);
    if ((gv_reloading[lv_firingPlayer] == true)) {
        UnitAbilityEnable(lv_firingUnit, "attack", false);
        UnitAbilityEnable(lv_firingUnit, "L3LaunchGrenade", false);
    }

    if ((gv_marineRounds[lv_firingPlayer] <= 0)) {
        if ((gv_marineMags[lv_firingPlayer] <= 0)) {
            gf_UpdateAmmoDialog(lv_firingPlayer);
            UnitAbilityEnable(lv_firingUnit, "attack", false);
            UnitAbilityEnable(lv_firingUnit, "L3LaunchGrenade", false);
            TextTagCreate(StringExternal("Param/Value/D7F6C615"), 24, UnitGetPosition(lv_firingUnit), 1.5, true, true, PlayerGroupActive());
            lv_reloadingText = TextTagLastCreated();
            TextTagAttachToUnit(lv_reloadingText, lv_firingUnit, 1.5);
            Wait(9.0, c_timeReal);
            TextTagDestroy(lv_reloadingText);
        }
        else {
            if ((gv_reloading[lv_firingPlayer] == false)) {
                gv_reloading[lv_firingPlayer] = true;
                UnitAbilityEnable(lv_firingUnit, "attack", false);
                UnitAbilityEnable(lv_firingUnit, "L3LaunchGrenade", false);
                UnitAbilityEnable(lv_firingUnit, "Reload", false);
                UnitIssueOrder(lv_firingUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
                if ((UnitHasBehavior(lv_firingUnit, "HighCapacityClip") == true)) {
                    lv_highCapacityClip = 1;
                }

                if ((UnitGetType(lv_firingUnit) == "TychusChaingun")) {
                    if ((gv_marineMags[lv_firingPlayer] >= (gv_talentLevel[3][lv_firingPlayer] + (lv_highCapacityClip + 1)))) {
                        lv_assaultAmmoMag = (gv_talentLevel[3][lv_firingPlayer] + (lv_highCapacityClip + 1));
                        gv_marineMags[lv_firingPlayer] = (gv_marineMags[lv_firingPlayer] - lv_assaultAmmoMag);
                    }
                    else {
                        lv_assaultAmmoMag = gv_marineMags[lv_firingPlayer];
                        gv_marineMags[lv_firingPlayer] = 0;
                    }
                }
                else {
                    gv_marineMags[lv_firingPlayer] = (gv_marineMags[lv_firingPlayer] - (lv_highCapacityClip + 1));
                }
                gf_UpdateAmmoDialog(lv_firingPlayer);
                SoundPlayOnUnit(SoundLink("ClipOut", -1), PlayerGroupAll(), lv_firingUnit, 15.0, 75.0, 0.0);
                TextTagCreate(StringExternal("Param/Value/B959199F"), 20, UnitGetPosition(lv_firingUnit), 1.5, true, true, PlayerGroupActive());
                lv_reloadingText = TextTagLastCreated();
                TextTagAttachToUnit(lv_reloadingText, lv_firingUnit, 1.5);
                autoAAD4E86B_val = UnitWeaponGet(lv_firingUnit, 1);
                if (autoAAD4E86B_val == "HyperionAir") {
                    lv_reloadTime = (3.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "GuassRifle") {
                    lv_reloadTime = (2.5 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "M5PulseRifle") {
                    lv_reloadTime = (2.5 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "UA420AssaultRifle") {
                    lv_reloadTime = (2.5 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "BarrettM112") {
                    lv_reloadTime = (6.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "Flamethrower") {
                    lv_reloadTime = (4.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "Chaingun") {
                    lv_reloadTime = (6.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "SniperRifle") {
                    lv_reloadTime = (4.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "MP9A2SubMachineGun") {
                    lv_reloadTime = (1.5 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "StingerMK3") {
                    lv_reloadTime = (6.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "Shotgun") {
                    lv_reloadTime = (4.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "L3GrenadeLauncher") {
                    lv_reloadTime = (5.0 * lv_reloadFactor);
                }
                else if (autoAAD4E86B_val == "P38ScytheGuassPistol") {
                    lv_reloadTime = lv_reloadFactor;
                }
                else {
                }
                if ((gv_nightmare == true)) {
                    lv_reloadTime = (lv_reloadTime * 2.0);
                }

                if ((UnitGetType(lv_firingUnit) == "Commando") && ((UnitHasBehavior(lv_firingUnit, "AdrenalineLevel1") == true) || (UnitHasBehavior(lv_firingUnit, "AdrenalineLevel2") == true) || (UnitHasBehavior(lv_firingUnit, "AdrenalineLevel3") == true)) && ((UnitHasBehavior(lv_firingUnit, "SurgicalStrikeLevel1") == true) || (UnitHasBehavior(lv_firingUnit, "SurgicalStrikeLevel2") == true) || (UnitHasBehavior(lv_firingUnit, "SurgicalStrikeLevel3") == true))) {
                    lv_reloadTime = (lv_reloadTime / 2.0);
                    UIDisplayMessage(PlayerGroupSingle(lv_firingPlayer), c_messageAreaDebug, StringExternal("Param/Value/FAD4CC8A"));
                }

                lv_reloadTime = (lv_reloadTime - (IntToFixed(gv_statsAgility3[lv_firingPlayer]) * 0.08));
                if ((lv_reloadTime < 0.4)) {
                    lv_reloadTime = 0.4;
                }

                CatalogFieldValueSet(c_gameCatalogBehavior, "Reload", "Duration", lv_firingPlayer, FixedToString((lv_reloadTime * 1.5), c_fixedPrecisionAny));
                UnitBehaviorAddPlayer(lv_firingUnit, "Reload", lv_firingPlayer, 1);
                Wait((lv_reloadTime - 0.4), c_timeReal);
                if ((UnitIsAlive(lv_firingUnit) == true)) {
                    if ((UnitWeaponGet(lv_firingUnit, 1) == "Shotgun")) {
                        SoundPlayOnUnit(SoundLink("ShotgunPump", -1), PlayerGroupAll(), lv_firingUnit, 15.0, 75.0, 0.0);
                    }
                    else {
                        SoundPlayOnUnit(SoundLink("ClipIn", -1), PlayerGroupAll(), lv_firingUnit, 15.0, 75.0, 0.0);
                    }
                }

                Wait(0.4, c_timeReal);
                TextTagDestroy(lv_reloadingText);
                gv_reloading[lv_firingPlayer] = false;
                if ((UnitIsAlive(lv_firingUnit) == true)) {
                    UnitAbilityEnable(lv_firingUnit, "attack", true);
                    UnitAbilityEnable(lv_firingUnit, "L3LaunchGrenade", true);
                }

                if ((UnitGetType(lv_firingUnit) == "TychusChaingun")) {
                    gv_marineRounds[lv_firingPlayer] = (gv_playerRoundLimit[lv_firingPlayer] * lv_assaultAmmoMag);
                }
                else {
                    gv_marineRounds[lv_firingPlayer] = (gv_playerRoundLimit[lv_firingPlayer] * (lv_highCapacityClip + 1));
                }
                gf_UpdateAmmoDialog(lv_firingPlayer);
            }

        }
    }
    else {
        if ((UnitWeaponGet(lv_firingUnit, 1) == "Shotgun")) {
            if ((gv_marineRounds[lv_firingPlayer] < 2)) {
                gv_marineRounds[lv_firingPlayer] = 0;
            }
            else {
                gv_marineRounds[lv_firingPlayer] -= 2;
            }
        }
        else if (((UnitWeaponGet(lv_firingUnit, 1) == "BarrettM112") || (UnitWeaponGet(lv_firingUnit, 1) == "L3GrenadeLauncher"))) {
            if (((gv_marineRounds[lv_firingPlayer] < 3))) {
                gv_marineRounds[lv_firingPlayer] = 0;
            }
            else {
                gv_marineRounds[lv_firingPlayer] -= 3;
            }
        }
        else if ((UnitWeaponGet(lv_firingUnit, 1) == "StingerMK3")) {
            gv_marineRounds[lv_firingPlayer] -= 10;
            if ((gv_marineRounds[lv_firingPlayer] < 0)) {
                gv_marineRounds[lv_firingPlayer] = 0;
            }

        }
        else if (true) {
            gv_marineRounds[lv_firingPlayer] -= 1;
        }
        gf_UpdateAmmoDialog(lv_firingPlayer);
        if ((UnitHasBehavior(lv_firingUnit, "HighCapacityClip") == true)) {
            lv_highCapacityClip = 1;
        }

        if ((UnitGetType(lv_firingUnit) == "TychusChaingun")) {
            lv_assaultAmmoMag = (gv_talentLevel[3][lv_firingPlayer] + (lv_highCapacityClip + 1));
        }

        if ((((UnitGetType(lv_firingUnit) != "TychusChaingun") && (gv_marineRounds[lv_firingPlayer] > ((gv_playerRoundLimit[lv_firingPlayer] * (lv_highCapacityClip + 1)) / 2))) || ((UnitGetType(lv_firingUnit) == "TychusChaingun") && (gv_marineRounds[lv_firingPlayer] > ((gv_playerRoundLimit[lv_firingPlayer] * lv_assaultAmmoMag) / 2))))) {
            UnitAbilityEnable(lv_firingUnit, "Reload", false);
        }
        else {
            UnitAbilityEnable(lv_firingUnit, "Reload", true);
        }
        Wait(1.0, c_timeGame);
        if ((gv_marineRounds[lv_firingPlayer] <= 0) && (gv_reloading[lv_firingPlayer] == false)) {
            gv_marineRounds[lv_firingPlayer] = 0;
            TriggerExecute(gt_AmmoUsage, true, false);
        }
        else {
            if ((gv_marineMags[lv_firingPlayer] <= 3) && (gv_marineMags[lv_firingPlayer] > 0) && (UnitIsAlive(lv_firingUnit) == true)) {
                TextTagCreate(StringExternal("Param/Value/E87D2114"), 20, UnitGetPosition(lv_firingUnit), 1.5, true, true, PlayerGroupActive());
                lv_reloadingText = TextTagLastCreated();
                TextTagAttachToUnit(lv_reloadingText, lv_firingUnit, 1.5);
                Wait(5.0, c_timeReal);
                TextTagDestroy(lv_reloadingText);
            }

        }
    }
    if ((((UnitWeaponGet(lv_firingUnit, 1) == "StingerMK3") && (gv_marineRounds[lv_firingPlayer] < 10)) || ((UnitWeaponGet(lv_firingUnit, 1) == "L3GrenadeLauncher") && (gv_marineRounds[lv_firingPlayer] < 3)))) {
        UnitAbilityEnable(lv_firingUnit, "attack", false);
    }
    else {
        if ((gv_reloading[lv_firingPlayer] == false)) {
            UnitAbilityEnable(lv_firingUnit, "attack", true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoUsage_Init () {
    gt_AmmoUsage = TriggerCreate("gt_AmmoUsage_Func");
    TriggerAddEventUnitStartedAttack(gt_AmmoUsage, null);
    TriggerAddEventUnitAbility(gt_AmmoUsage, null, AbilityCommand("L3LaunchGrenade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Up
//--------------------------------------------------------------------------------------------------
bool gt_LevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levelingUnit;
    int lv_ownerofLevelingUnit;
    int lv_levelUpText;
    actor lv_localActorA;
    int lv_localIntA;

    // Automatic Variable Declarations
    const int autoF9524932_n = 2;
    int autoF9524932_i;
    const int auto9E368397_n = 8;
    int auto9E368397_i;
    const int auto6846982E_ae = 17;
    int auto6846982E_var;

    // Variable Initialization
    lv_levelingUnit = EventUnit();
    lv_ownerofLevelingUnit = UnitGetOwner(EventUnit());
    lv_levelUpText = c_textTagNone;
    lv_localIntA = 1;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, lv_levelingUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_wave < 7)) {
        gf_TipLocalNOTD(500, lv_ownerofLevelingUnit, StringExternal("Param/Value/4A8E52F6"));
    }

    gv_talentsAvailable[lv_ownerofLevelingUnit] += 1;
    gv_marineLevel[lv_ownerofLevelingUnit] = UnitGetPropertyFixed(gv_marineHero[lv_ownerofLevelingUnit], c_unitPropLevel, c_unitPropCurrent);
    libNtve_gf_SetDialogItemText(gv_talentsAvailableDialog[lv_ownerofLevelingUnit], (StringExternal("Param/Value/82DEF515") + IntToText(gv_talentsAvailable[lv_ownerofLevelingUnit])), PlayerGroupActive());
    gf_UpdateAllTalentImages(lv_ownerofLevelingUnit);
    TextTagCreate(StringExternal("Param/Value/2A23AD44"), 17, UnitGetPosition(lv_levelingUnit), 1.5, true, true, PlayerGroupActive());
    lv_levelUpText = TextTagLastCreated();
    TextTagAttachToUnit(lv_levelUpText, lv_levelingUnit, 1.5);
    UISetButtonHighlighted(PlayerGroupSingle(lv_ownerofLevelingUnit), AbilityCommand("Talents", 0), true);
    for (autoF9524932_i = 1; autoF9524932_i <= autoF9524932_n; autoF9524932_i += 1) {
        libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitImages[lv_ownerofLevelingUnit], Color(150*100/255,150*100/255,30*100/255), PlayerGroupAll());
        Wait(0.3, c_timeReal);
        libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitImages[lv_ownerofLevelingUnit], Color(100,100,100), PlayerGroupAll());
        Wait(0.3, c_timeReal);
    }
    Wait(2.0, c_timeReal);
    TextTagDestroy(lv_levelUpText);
    UISetButtonHighlighted(PlayerGroupSingle(lv_ownerofLevelingUnit), AbilityCommand("Talents", 0), false);
    for (auto9E368397_i = 1; auto9E368397_i <= auto9E368397_n; auto9E368397_i += 1) {
        if ((PlayerStatus(lv_localIntA) == c_playerStatusActive)) {
            auto6846982E_var = 2;
            for ( ; auto6846982E_var <= auto6846982E_ae; auto6846982E_var += 1 ) {
                if ((gv_playerXP[lv_localIntA] >= gv_rankRequirement[auto6846982E_var]) && (gv_startingXP[lv_localIntA] < gv_rankRequirement[auto6846982E_var]) && (gv_playerHasRankedUp[lv_localIntA] == false)) {
                    gv_playerHasRankedUp[lv_localIntA] = true;
                    gv_playerRank[lv_localIntA] = auto6846982E_var;
                    gv_rankUpPlayer = lv_localIntA;
                    gf_RankUp();
                }

            }
        }

        lv_localIntA += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LevelUp_Init () {
    gt_LevelUp = TriggerCreate("gt_LevelUp_Func");
    TriggerAddEventUnitGainLevel(gt_LevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pet Level Up
//--------------------------------------------------------------------------------------------------
bool gt_PetLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levelingUnit;
    int lv_ownerofLevelingUnit;
    int lv_levelUpText;
    actor lv_localActorA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levelingUnit = EventUnit();
    lv_ownerofLevelingUnit = UnitGetOwner(EventUnit());
    lv_levelUpText = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_levelingUnit, "MarkofthePredator") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_petLevel[lv_ownerofLevelingUnit] += 1;
    TextTagCreate(StringExternal("Param/Value/6A0E7FD4"), 20, UnitGetPosition(lv_levelingUnit), 1.5, true, true, PlayerGroupActive());
    lv_levelUpText = TextTagLastCreated();
    TextTagAttachToUnit(lv_levelUpText, lv_levelingUnit, 1.5);
    libNtve_gf_AttachModelToUnit(lv_levelingUnit, "LevelUp", "Ref_Center");
    lv_localActorA = libNtve_gf_ActorLastCreated();
    UnitSetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropLifeMax, (UnitGetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropLifeMax, c_unitPropCurrent) * 1.05));
    UnitSetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropLife, (UnitGetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropLife, c_unitPropCurrent) * 1.05));
    UnitSetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropShieldsMax, c_unitPropNormal) * Pow(1.3, gv_petLevel[lv_ownerofLevelingUnit])));
    UnitSetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropEnergyMax, (UnitGetPropertyFixed(gv_playerPet[lv_ownerofLevelingUnit], c_unitPropEnergyMax, c_unitPropCurrent) * 1.1));
    if ((gv_petLevel[lv_ownerofLevelingUnit] == 2)) {
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "OccularImplants", gv_playerPet[lv_ownerofLevelingUnit], 1);
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/969B13D9"));
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 63.0, 63.0, 63.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 3)) {
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "Detector5", gv_playerPet[lv_ownerofLevelingUnit], 1);
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/DF793B40"));
        UnitSetTeamColorIndex(gv_playerPet[lv_ownerofLevelingUnit], 7);
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 66.0, 66.0, 66.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 4)) {
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "C2Armor", gv_playerPet[lv_ownerofLevelingUnit], 1);
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/547D4B46"));
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 69.0, 69.0, 69.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 5)) {
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "Backstab", gv_playerPet[lv_ownerofLevelingUnit], 1);
        TriggerEnable(gt_Backstab, true);
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/B07E50FA"));
        UnitSetTeamColorIndex(gv_playerPet[lv_ownerofLevelingUnit], 2);
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 72.0, 72.0, 72.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 6)) {
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "C4Armor", gv_playerPet[lv_ownerofLevelingUnit], 1);
        UnitBehaviorRemove(gv_playerPet[lv_ownerofLevelingUnit], "C2Armor", 1);
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/F6E7E570"));
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 75.0, 75.0, 75.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 7) && (gv_playerXP[lv_ownerofLevelingUnit] >= 5000)) {
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/15A7D0E0"));
        UnitWeaponRemove(gv_playerPet[lv_ownerofLevelingUnit], "Predator");
        UnitWeaponAdd(gv_playerPet[lv_ownerofLevelingUnit], "LongboltMissile", null);
        UnitSetTeamColorIndex(gv_playerPet[lv_ownerofLevelingUnit], 5);
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 78.0, 78.0, 78.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 8) && (gv_playerXP[lv_ownerofLevelingUnit] >= 5000)) {
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/2CEDF0DF"));
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "C6Armor", gv_playerPet[lv_ownerofLevelingUnit], 1);
        UnitBehaviorRemove(gv_playerPet[lv_ownerofLevelingUnit], "C4Armor", 1);
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 81.0, 81.0, 81.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 9) && (gv_playerXP[lv_ownerofLevelingUnit] >= 5000)) {
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/DAEDC8E9"));
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "SensorTowerRadar", gv_playerPet[lv_ownerofLevelingUnit], 1);
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 84.0, 84.0, 84.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 10) && (gv_playerXP[lv_ownerofLevelingUnit] >= 5000)) {
        gv_playerRating[lv_ownerofLevelingUnit] = (gv_playerRating[lv_ownerofLevelingUnit] + 1);
        gv_playerXP[lv_ownerofLevelingUnit] = (gv_playerXP[lv_ownerofLevelingUnit] + 3);
        UnitAbilityShow(gv_playerPet[lv_ownerofLevelingUnit], "ZeratulBlink", true);
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/72E3A97D"));
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 87.0, 87.0, 87.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 11)) {
        UnitBehaviorAdd(gv_playerPet[lv_ownerofLevelingUnit], "CloakField", gv_playerPet[lv_ownerofLevelingUnit], 1);
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/B689973B"));
        UnitSetTeamColorIndex(gv_playerPet[lv_ownerofLevelingUnit], 1);
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 90.0, 90.0, 90.0);
        }

    }
    else if ((gv_petLevel[lv_ownerofLevelingUnit] == 12) && (gv_playerXP[lv_ownerofLevelingUnit] >= 10000)) {
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/609EEA9F"));
        if ((UnitGetType(lv_levelingUnit) == "Predator2")) {
            UnitSetScale(lv_levelingUnit, 125.0, 125.0, 125.0);
        }

    }
    Wait(3.0, c_timeReal);
    TextTagDestroy(lv_levelUpText);
    libNtve_gf_KillModel(lv_localActorA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PetLevelUp_Init () {
    gt_PetLevelUp = TriggerCreate("gt_PetLevelUp_Func");
    TriggerEnable(gt_PetLevelUp, false);
    TriggerAddEventUnitGainLevel(gt_PetLevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mini Marine Level Up
//--------------------------------------------------------------------------------------------------
bool gt_MiniMarineLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levelingUnit;
    int lv_ownerofLevelingUnit;
    int lv_levelUpText;
    actor lv_localActorA;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_levelingUnit = EventUnit();
    lv_ownerofLevelingUnit = UnitGetOwner(EventUnit());
    lv_levelUpText = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_levelingUnit) == "ReaperMK13"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate(StringExternal("Param/Value/F4F9759D"), 20, UnitGetPosition(lv_levelingUnit), 1.5, true, true, PlayerGroupActive());
    lv_levelUpText = TextTagLastCreated();
    TextTagAttachToUnit(lv_levelUpText, lv_levelingUnit, 1.5);
    libNtve_gf_AttachModelToUnit(lv_levelingUnit, "LevelUp", "Ref_Center");
    lv_localActorA = libNtve_gf_ActorLastCreated();
    UnitSetPropertyFixed(lv_levelingUnit, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLifeMax, c_unitPropCurrent) * 1.05));
    UnitSetPropertyFixed(lv_levelingUnit, c_unitPropLife, (UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLife, c_unitPropCurrent) * 1.05));
    UnitSetPropertyFixed(lv_levelingUnit, c_unitPropShieldsMax, (UnitGetPropertyFixed(lv_levelingUnit, c_unitPropShieldsMax, c_unitPropCurrent) * 1.2));
    UnitSetPropertyFixed(lv_levelingUnit, c_unitPropEnergyMax, (UnitGetPropertyFixed(lv_levelingUnit, c_unitPropEnergyMax, c_unitPropCurrent) * 1.1));
    if ((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) == 2.0)) {
        UnitBehaviorAdd(lv_levelingUnit, "OccularImplants", lv_levelingUnit, 1);
    }
    else if ((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) == 4.0)) {
        UnitBehaviorAdd(lv_levelingUnit, "C2Armor", lv_levelingUnit, 1);
    }
    else if ((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) == 6.0)) {
        TriggerEnable(gt_Backstab, true);
        UnitBehaviorAdd(lv_levelingUnit, "Backstab", lv_levelingUnit, 1);
    }
    else if ((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) == 8.0)) {
        TriggerEnable(gt_Backstab, true);
        UnitBehaviorAdd(lv_levelingUnit, "C4Armor", lv_levelingUnit, 1);
        UnitBehaviorRemove(lv_levelingUnit, "C2Armor", 1);
    }
    if ((UnitGetType(lv_levelingUnit) == "ReaperMK13")) {
        UnitBehaviorAdd(lv_levelingUnit, "ReaperCannonUpgrade", lv_levelingUnit, 1);
    }
    Wait(3.0, c_timeReal);
    TextTagDestroy(lv_levelUpText);
    libNtve_gf_KillModel(lv_localActorA);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiniMarineLevelUp_Init () {
    gt_MiniMarineLevelUp = TriggerCreate("gt_MiniMarineLevelUp_Func");
    TriggerAddEventUnitGainLevel(gt_MiniMarineLevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Helium-3 Acquired (Credits)
//--------------------------------------------------------------------------------------------------
bool gt_Helium3AcquiredCredits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_creditAllocation;
    int lv_creditPool;
    int lv_startingCredits;

    // Automatic Variable Declarations
    playergroup auto572476EE_g;
    int auto572476EE_var;

    // Variable Initialization
    lv_creditPool = (5 * gv_totalPlayers);

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranNewUnitAcquired", -1), PlayerGroupAll(), 150.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/4F9763A6"));
    lv_creditAllocation = (lv_creditPool / PlayerGroupCount(gv_marineSquad));
    auto572476EE_g = gv_marineSquad;
    auto572476EE_var = -1;
    while (true) {
        auto572476EE_var = PlayerGroupNextPlayer(auto572476EE_g, auto572476EE_var);
        if (auto572476EE_var < 0) { break; }
        lv_startingCredits = gv_playerCredits[auto572476EE_var];
        if ((gv_playerXP[auto572476EE_var] >= 120000)) {
            gv_playerCredits[auto572476EE_var] += FixedToInt((IntToFixed(lv_creditAllocation) * 2.2));
        }
        else if ((gv_playerXP[auto572476EE_var] >= 80000)) {
            gv_playerCredits[auto572476EE_var] += FixedToInt((IntToFixed(lv_creditAllocation) * 1.9));
        }
        else if ((gv_playerXP[auto572476EE_var] >= 40000)) {
            gv_playerCredits[auto572476EE_var] += FixedToInt((IntToFixed(lv_creditAllocation) * 1.6));
        }
        else if ((gv_playerXP[auto572476EE_var] >= 10000)) {
            gv_playerCredits[auto572476EE_var] += FixedToInt((IntToFixed(lv_creditAllocation) * 1.3));
        }
        else if ((gv_playerXP[auto572476EE_var] >= 5000)) {
            gv_playerCredits[auto572476EE_var] += lv_creditAllocation;
        }
        else if (true) {
            gv_playerCredits[auto572476EE_var] += (lv_creditAllocation / 2);
        }
        gv_playerLifeTimeCreditsAcquired[auto572476EE_var] += (gv_playerCredits[auto572476EE_var] - lv_startingCredits);
        PlayerModifyPropertyInt(auto572476EE_var, c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerCredits[auto572476EE_var]);
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashLabel[auto572476EE_var], IntToText(gv_playerCredits[auto572476EE_var]), PlayerGroupAll());
        libNtve_gf_SetDialogItemStyle(gv_statsPlayerCashLabel[auto572476EE_var], "HelpPanelListBoxItemTitle", PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashAcquiredLabel[auto572476EE_var], IntToText(gv_playerLifeTimeCreditsAcquired[auto572476EE_var]), PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Helium3AcquiredCredits_Init () {
    gt_Helium3AcquiredCredits = TriggerCreate("gt_Helium3AcquiredCredits_Func");
    TriggerAddEventPlayerEffectUsed(gt_Helium3AcquiredCredits, 0, "Helium3AcquiredSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Killed
//--------------------------------------------------------------------------------------------------
bool gt_InfestorKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_localPointA;

    // Automatic Variable Declarations
    int auto0B0DA9E5_n;
    int auto0B0DA9E5_i;
    const int auto2BFB201A_ae = 8;
    int auto2BFB201A_var;
    const int autoCB76FEDC_ae = 8;
    int autoCB76FEDC_var;

    // Variable Initialization
    lv_localPointA = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Infestor2") || (UnitGetType(EventUnit()) == "InfestorBurrowed2")))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PhantomSuicide") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_infestorsAlive -= 1;
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
    libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreep", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
    if ((gv_nightmare == true)) {
        auto0B0DA9E5_n = gv_spawnFactor;
        for (auto0B0DA9E5_i = 1; auto0B0DA9E5_i <= auto0B0DA9E5_n; auto0B0DA9E5_i += 1) {
            UnitCreate(1, "Parasite", 0, 14, lv_localPointA, libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "Rampage", UnitLastCreated(), 1);
            Wait(0.1, c_timeGame);
        }
    }

    auto2BFB201A_var = 1;
    for ( ; auto2BFB201A_var <= auto2BFB201A_ae; auto2BFB201A_var += 1 ) {
        if ((UnitIsAlive(gv_marineHero[auto2BFB201A_var]) == true)) {
            UnitSetPropertyFixed(gv_marineHero[auto2BFB201A_var], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[auto2BFB201A_var], c_unitPropXP, c_unitPropCurrent) + 75.0));
            Wait(0.3, c_timeGame);
        }
        else if ((UnitIsAlive(gv_playerPet[auto2BFB201A_var]) == true)) {
            UnitSetPropertyFixed(gv_playerPet[auto2BFB201A_var], c_unitPropXP, (UnitGetPropertyFixed(gv_playerPet[auto2BFB201A_var], c_unitPropXP, c_unitPropCurrent) + 75.0));
            Wait(0.3, c_timeGame);
        }
    }
    SoundPlay(SoundLink("Dialogue_TransmissionStart", -1), PlayerGroupActive(), 100.0, 0.0);
    ObjectiveSetName(gv_infestorObjective, (StringExternal("Param/Value/B54DE278") + (IntToText((5 - gv_infestorsAlive)) + StringExternal("Param/Value/7616303C"))));
    if ((gv_infestorsAlive == 4)) {
        ObjectiveCreate(StringExternal("Param/Value/7029D8C6"), StringExternal("Param/Value/BEC11F18"), c_objectiveStateActive, false);
        gv_infestorObjective = ObjectiveLastCreated();
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E12BC6D4"));
        gf_TipNOTD(500, StringExternal("Param/Value/80F76E70"));
    }
    else if ((gv_infestorsAlive == 3)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/CD876D7E"));
    }
    else if ((gv_infestorsAlive == 2)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/48BB8C98"));
    }
    else if ((gv_infestorsAlive == 1)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/FC24AE7C"));
    }
    else if ((gv_infestorsAlive == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_InfestorAI, false);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C53AFF68"));
        ObjectiveSetState(gv_infestorObjective, c_objectiveStateCompleted);
        if ((gv_noNewbie == true)) {
            gf_AwardPlayerXPNOTD(2);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/062A9941"));
        }
        else {
            gf_AwardPlayerXPNOTD(1);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/3F3D628D"));
        }
        autoCB76FEDC_var = 1;
        for ( ; autoCB76FEDC_var <= autoCB76FEDC_ae; autoCB76FEDC_var += 1 ) {
            if ((PlayerStatus(autoCB76FEDC_var) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[autoCB76FEDC_var]) == true) && (gv_playerRating[autoCB76FEDC_var] < 1800)) {
                gv_playerRating[autoCB76FEDC_var] += 1;
            }

        }
        Wait(9.0, c_timeReal);
        ObjectiveDestroy(gv_infestorObjective);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorKilled_Init () {
    gt_InfestorKilled = TriggerCreate("gt_InfestorKilled_Func");
    TriggerEnable(gt_InfestorKilled, false);
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[1]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[2]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[3]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[4]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor AI
//--------------------------------------------------------------------------------------------------
bool gt_InfestorAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_infestorArea;
    unit lv_aggroedInfestor;
    int lv_infestorOwner;
    unitgroup lv_banelingEggs;

    // Automatic Variable Declarations
    int auto153AFD8A_n;
    int auto153AFD8A_i;
    unitgroup auto3952867D_g;
    int auto3952867D_u;
    unit auto3952867D_var;

    // Variable Initialization
    lv_aggroedInfestor = EventUnit();
    lv_infestorOwner = UnitGetOwner(EventUnit());
    lv_banelingEggs = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Infestor2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 5) == 1) && (gv_infestorAggroMode == false)) {
        gv_infestorAggroMode = true;
        Wait(3.0, c_timeReal);
        UnitSetTeamColorIndex(lv_aggroedInfestor, 6);
        if (((gv_squadRating >= 1700) || (gv_nightmare == true))) {
            Wait(7.0, c_timeReal);
        }
        else {
            Wait(9.0, c_timeReal);
        }
        UnitSetTeamColorIndex(lv_aggroedInfestor, 5);
        if (((gv_squadRating >= 1700) || (gv_nightmare == true))) {
            Wait(7.0, c_timeReal);
        }
        else {
            Wait(9.0, c_timeReal);
        }
        if ((UnitIsAlive(lv_aggroedInfestor) == true) && (gv_cinematicMode == false)) {
            lv_infestorArea = RegionCircle(UnitGetPosition(lv_aggroedInfestor), 3.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_aggroedInfestor), c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
            auto153AFD8A_n = gv_spawnFactor;
            for (auto153AFD8A_i = 1; auto153AFD8A_i <= auto153AFD8A_n; auto153AFD8A_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, "Egg", 0, lv_infestorOwner, RegionRandomPoint(lv_infestorArea), RegionRandomPoint(lv_infestorArea));
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                UnitGroupAdd(lv_banelingEggs, UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
                Wait(0.1, c_timeGame);
            }
            Wait(5.0, c_timeReal);
            auto3952867D_g = lv_banelingEggs;
            auto3952867D_u = UnitGroupCount(auto3952867D_g, c_unitCountAll);
            for (;; auto3952867D_u -= 1) {
                auto3952867D_var = UnitGroupUnitFromEnd(auto3952867D_g, auto3952867D_u);
                if (auto3952867D_var == null) { break; }
                if ((UnitIsAlive(auto3952867D_var) == true) && (gv_cinematicMode == false)) {
                    if (((gv_squadRating >= 1700) || (gv_nightmare == true)) && (RandomInt(0, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, lv_infestorOwner, UnitGetPosition(auto3952867D_var), RegionRandomPoint(lv_infestorArea));
                    }
                    else {
                        libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, lv_infestorOwner, UnitGetPosition(auto3952867D_var), RegionRandomPoint(lv_infestorArea));
                    }
                    if (((lv_infestorOwner == 13) || (lv_infestorOwner == 14))) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, lv_infestorOwner, UnitGetPosition(auto3952867D_var), RegionRandomPoint(lv_infestorArea));
                    }
                    else if (((gv_squadRating >= 1700) || (gv_nightmare == true)) && ((lv_infestorOwner == 13) || (lv_infestorOwner == 14)) && (RandomInt(0, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, lv_infestorOwner, UnitGetPosition(auto3952867D_var), RegionRandomPoint(lv_infestorArea));
                    }
                    else if (true) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Sheep2", 0, 0, UnitGetPosition(auto3952867D_var), RegionRandomPoint(lv_infestorArea));
                    }
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(auto3952867D_var));
                    UnitKill(auto3952867D_var);
                    Wait(0.1, c_timeGame);
                }

            }
            UnitSetTeamColorIndex(lv_aggroedInfestor, 1);
        }
        else {
            UnitSetTeamColorIndex(lv_aggroedInfestor, 1);
        }
        gv_infestorAggroMode = false;
    }
    else if ((RandomInt(0, 5) == 1) && ((UnitGetPropertyFixed(lv_aggroedInfestor, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0) || ((gv_nightmare == true) && (UnitGetPropertyFixed(lv_aggroedInfestor, c_unitPropLifePercent, c_unitPropCurrent) <= 55.0)))) {
        UnitIssueOrder(lv_aggroedInfestor, Order(AbilityCommand("BurrowInfestor", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        UnitIssueOrder(lv_aggroedInfestor, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
        Wait(RandomFixed(5.0, 20.0), c_timeReal);
        UnitIssueOrder(lv_aggroedInfestor, Order(AbilityCommand("UnburrowInfestor", 0)), c_orderQueueReplace);
    }
    else if ((RandomInt(0, 5) == 1) && (gv_nightmare == true)) {
        UnitBehaviorAdd(lv_aggroedInfestor, "Rampage30movespeed", lv_aggroedInfestor, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorAI_Init () {
    gt_InfestorAI = TriggerCreate("gt_InfestorAI_Func");
    TriggerEnable(gt_InfestorAI, false);
    TriggerAddEventUnitAttacked(gt_InfestorAI, UnitRefFromVariable("gv_infestor[1]"));
    TriggerAddEventUnitAttacked(gt_InfestorAI, UnitRefFromVariable("gv_infestor[2]"));
    TriggerAddEventUnitAttacked(gt_InfestorAI, UnitRefFromVariable("gv_infestor[3]"));
    TriggerAddEventUnitAttacked(gt_InfestorAI, UnitRefFromVariable("gv_infestor[4]"));
    TriggerAddEventUnitAttacked(gt_InfestorAI, UnitRefFromVariable("gv_infestor[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrels
//--------------------------------------------------------------------------------------------------
bool gt_Barrels_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ExplodingBarrelLarge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), EventUnitDamageSourcePlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Barrels_Init () {
    gt_Barrels = TriggerCreate("gt_Barrels_Func");
    TriggerAddEventUnitDamaged(gt_Barrels, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boot Camp Initialize
//--------------------------------------------------------------------------------------------------
bool gt_BootCampInitialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_test;
    unit lv_localUnitA;
    bool lv_warningCivSequence;
    unit lv_warningCiv;
    int lv_eCSpawnDirection;
    region[5] lv_eCSpawnSector;
    int lv_untitledVariable001;

    // Automatic Variable Declarations
    const int autoF4424290_ae = 8;
    int autoF4424290_var;

    // Variable Initialization
    lv_eCSpawnDirection = RandomInt(1, 4);
    lv_untitledVariable001 = 2;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_storyline = 1;
    PlayerModifyPropertyInt(14, c_playerPropVespene, c_playerPropOperSetTo, gv_storyline);
    UnitSetState(UnitFromId(2503), c_unitStateSelectable, true);
    AICampaignStart(1);
    AICampaignStart(12);
    AICampaignStart(13);
    AICampaignStart(14);
    gf_ZombieAIWorldEvents();
    gf_BlackMaskApplication();
    gf_BootCampEnvironmentalChanges();
    CameraSetBounds(PlayerGroupActive(), RegionFromId(2), true);
    UnitSetState(UnitFromId(178), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(178), c_unitStateInvulnerable, true);
    autoF4424290_var = 1;
    for ( ; autoF4424290_var <= autoF4424290_ae; autoF4424290_var += 1 ) {
        if ((PlayerStatus(autoF4424290_var) == c_playerStatusActive)) {
            VisExploreArea(autoF4424290_var, RegionFromId(2), true, false);
            VisRevealArea(autoF4424290_var, RegionCircle(RegionGetCenter(RegionFromId(2)), 15.0), 60.0, false);
            CameraLockInput(autoF4424290_var, true);
            UISetFrameVisible(PlayerGroupSingle(autoF4424290_var), c_syncFrameTypeCommandPanel, false);
            UISetFrameVisible(PlayerGroupSingle(autoF4424290_var), c_syncFrameTypeMinimapPanel, false);
            UISetFrameVisible(PlayerGroupSingle(autoF4424290_var), c_syncFrameTypeCharacterSheetButton, false);
        }
        else {
            gv_activePlayer[autoF4424290_var] = false;
        }
    }
    gf_BootCampMarineCreation();
    SoundPlayOnUnit(SoundLink("Marine_Yes", -1), PlayerGroupAll(), gv_marineHero[1], 15.0, 100.0, 0.0);
    Wait(3.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/9CE9095B"), StringExternal("Param/Value/956A248B"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/30DD9832"), StringExternal("Param/Value/C0D70A82"));
    gf_TipNOTD(500, StringExternal("Param/Value/B325C06C"));
    UIHideTextCrawl(PlayerGroupAll());
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/05BF5D82"));
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gf_RadioNOTD(StringExternal("Param/Value/944DF7B0"), StringExternal("Param/Value/A5591F7C"));
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/E6C62A41"), StringExternal("Param/Value/B6028924"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(5.0, c_timeReal);
    gf_Task1ObjectivesandMovement();
    Wait(4.0, c_timeReal);
    gf_TipNOTD(2000, StringExternal("Param/Value/87DC8783"));
    Wait(1.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BootCampInitialize_Init () {
    gt_BootCampInitialize = TriggerCreate("gt_BootCampInitialize_Func");
    TriggerEnable(gt_BootCampInitialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enters Tower A
//--------------------------------------------------------------------------------------------------
bool gt_EntersTowerA_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/CF43C6E8"), StringExternal("Param/Value/07820778"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardMarineXPNOTD(25.0);
    UnitFlashSelection(gv_marineHero[1], 1.0);
    UnitSetPosition(gv_objectiveArrow, RegionGetCenter(RegionFromId(4)), false);
    Wait(2.5, c_timeReal);
    PingSetPosition(gv_objectivePing, RegionGetCenter(RegionFromId(4)));
    TriggerEnable(gt_EntersTowerB, true);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/A6D58DDF"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(4)), 7.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntersTowerA_Init () {
    gt_EntersTowerA = TriggerCreate("gt_EntersTowerA_Func");
    TriggerEnable(gt_EntersTowerA, false);
    TriggerAddEventUnitRegion(gt_EntersTowerA, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_EntersTowerA, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(3), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enters Tower B
//--------------------------------------------------------------------------------------------------
bool gt_EntersTowerB_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/CC21A2ED"), StringExternal("Param/Value/541E0B15"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardMarineXPNOTD(25.0);
    UnitFlashSelection(gv_marineHero[1], 1.0);
    UnitSetPosition(gv_objectiveArrow, RegionGetCenter(RegionFromId(5)), false);
    Wait(2.5, c_timeReal);
    PingSetPosition(gv_objectivePing, RegionGetCenter(RegionFromId(5)));
    TriggerEnable(gt_EntersTowerC, true);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/791D26DC"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(5)), 8.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntersTowerB_Init () {
    gt_EntersTowerB = TriggerCreate("gt_EntersTowerB_Func");
    TriggerEnable(gt_EntersTowerB, false);
    TriggerAddEventUnitRegion(gt_EntersTowerB, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_EntersTowerB, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(4), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enters Tower C
//--------------------------------------------------------------------------------------------------
bool gt_EntersTowerC_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/19F5E0D9"), StringExternal("Param/Value/0651D11E"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardMarineXPNOTD(25.0);
    UnitFlashSelection(gv_marineHero[1], 1.0);
    UnitSetPosition(gv_objectiveArrow, RegionGetCenter(RegionFromId(6)), false);
    Wait(2.5, c_timeReal);
    PingSetPosition(gv_objectivePing, RegionGetCenter(RegionFromId(6)));
    TriggerEnable(gt_EntersTowerD, true);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/73BB6465"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntersTowerC_Init () {
    gt_EntersTowerC = TriggerCreate("gt_EntersTowerC_Func");
    TriggerEnable(gt_EntersTowerC, false);
    TriggerAddEventUnitRegion(gt_EntersTowerC, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_EntersTowerC, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(5), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enters Tower D
//--------------------------------------------------------------------------------------------------
bool gt_EntersTowerD_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_RadioNOTD(StringExternal("Param/Value/76A00B87"), StringExternal("Param/Value/48BD52B5"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardMarineXPNOTD(25.0);
    UnitFlashSelection(gv_marineHero[1], 1.0);
    UnitSetPosition(gv_objectiveArrow, PointFromId(2), false);
    Wait(2.0, c_timeReal);
    PingSetPosition(gv_objectivePing, PointFromId(2));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/E7B9E12B"), StringExternal("Param/Value/C3C6AADD"));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/FFAF64F4"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    while (!((DistanceBetweenPoints(UnitGetPosition(gv_marineHero[1]), RegionGetCenter(RegionFromId(8))) < 2.65))) {
        Wait(1.0, c_timeGame);
    }
    gf_Task2ItemsandInventory();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntersTowerD_Init () {
    gt_EntersTowerD = TriggerCreate("gt_EntersTowerD_Func");
    TriggerEnable(gt_EntersTowerD, false);
    TriggerAddEventUnitRegion(gt_EntersTowerD, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_EntersTowerD, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(6), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task 2 - Predator Kill XP
//--------------------------------------------------------------------------------------------------
bool gt_Task2PredatorKillXP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Predator2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AwardMarineXPNOTD(50.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Task2PredatorKillXP_Init () {
    gt_Task2PredatorKillXP = TriggerCreate("gt_Task2PredatorKillXP_Func");
    TriggerEnable(gt_Task2PredatorKillXP, false);
    TriggerAddEventUnitDied(gt_Task2PredatorKillXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task 4 - Activating Tactical Arena Hex Terminal 1
//--------------------------------------------------------------------------------------------------
bool gt_Task4ActivatingTacticalArenaHexTerminal1_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;
    bool lv_uploadCheck;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_oMPerformanceTimer += 1;
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(11), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(11), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((lv_uploadCheck == true)) {
        if ((gv_oMCount == 5)) {
            SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 80.0, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/4DA8D3D8"));
        }
    }

    gv_oMCount += lv_dataPoints;
    if ((gv_oMCount > 25)) {
        gv_oMCount = 25;
    }
    else if ((gv_oMCount < 0)) {
        gv_oMCount = 0;
    }
    libNtve_gf_SetBossBarCurrentValue(1, gv_oMCount, true);
    if ((gv_oMCount >= 25)) {
        gf_Task5ItemReconandDefensiveSetup();
        PingDestroy(gv_objectivePing);
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
        TriggerEnable(gt_Task4ActivatingTacticalArenaHexTerminal1, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Task4ActivatingTacticalArenaHexTerminal1_Init () {
    gt_Task4ActivatingTacticalArenaHexTerminal1 = TriggerCreate("gt_Task4ActivatingTacticalArenaHexTerminal1_Func");
    TriggerEnable(gt_Task4ActivatingTacticalArenaHexTerminal1, false);
    TriggerAddEventTimePeriodic(gt_Task4ActivatingTacticalArenaHexTerminal1, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task 5 - Predator Kill XP
//--------------------------------------------------------------------------------------------------
bool gt_Task5PredatorKillXP_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Predator2"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AwardMarineXPNOTD(125.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Task5PredatorKillXP_Init () {
    gt_Task5PredatorKillXP = TriggerCreate("gt_Task5PredatorKillXP_Func");
    TriggerEnable(gt_Task5PredatorKillXP, false);
    TriggerAddEventUnitDied(gt_Task5PredatorKillXP, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Task 5 - Activating Tactical Arena Hex Terminal 2
//--------------------------------------------------------------------------------------------------
bool gt_Task5ActivatingTacticalArenaHexTerminal2_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;
    bool lv_uploadCheck;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_oMPerformanceTimer += 1;
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(27), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(27), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((lv_uploadCheck == true)) {
        if ((gv_oMCount == 5)) {
            SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 80.0, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/D7F3999E"));
        }
    }

    gv_oMCount += lv_dataPoints;
    if ((gv_oMCount > 25)) {
        gv_oMCount = 25;
    }
    else if ((gv_oMCount < 0)) {
        gv_oMCount = 0;
    }
    libNtve_gf_SetBossBarCurrentValue(1, gv_oMCount, true);
    if ((gv_oMCount >= 25)) {
        gf_Task6BossFight();
        PingDestroy(gv_objectivePing);
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
        TriggerEnable(gt_Task5ActivatingTacticalArenaHexTerminal2, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Task5ActivatingTacticalArenaHexTerminal2_Init () {
    gt_Task5ActivatingTacticalArenaHexTerminal2 = TriggerCreate("gt_Task5ActivatingTacticalArenaHexTerminal2_Func");
    TriggerEnable(gt_Task5ActivatingTacticalArenaHexTerminal2, false);
    TriggerAddEventTimePeriodic(gt_Task5ActivatingTacticalArenaHexTerminal2, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Training Field Class Selection UI
//--------------------------------------------------------------------------------------------------
bool gt_TrainingFieldClassSelectionUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;
    int lv_xPosition;
    bool lv_above5000XP;

    // Automatic Variable Declarations
    const int auto033DCC28_n = 8;
    int auto033DCC28_i;
    const int auto3142121B_ae = 8;
    int auto3142121B_var;

    // Variable Initialization
    lv_localIntA = 1;
    lv_above5000XP = true;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_marineClass[1] = "Rifleman";
    gv_marineClass[2] = "Medic";
    gv_marineClass[3] = "TychusChaingun";
    gv_marineClass[4] = "Spectre";
    gv_marineClass[5] = "GhostLaserLines";
    gv_marineClass[6] = "DominionKillTeam";
    gv_marineClass[7] = "Engineer";
    gv_marineClass[8] = "Commando";
    gv_marineClass[9] = "Flamethrower3";
    gv_marineClass[10] = "ForwardObserver";
    gv_marineClass[11] = "Technician";
    gv_marineClass[12] = "PsiOps";
    gv_marineClass[13] = "Pathfinder";
    gv_marineClass[14] = "ChemicalExpert";
    for (auto033DCC28_i = 1; auto033DCC28_i <= auto033DCC28_n; auto033DCC28_i += 1) {
        if ((PlayerStatus(lv_localIntA) == c_playerStatusActive) && (PlayerType(lv_localIntA) == c_playerTypeUser)) {
            gf_UISetPlayerRankNameIconXP(lv_localIntA);
            DialogCreate(885, 730, c_anchorLeft, 30, -135, true);
            gv_classSelectionDialog[lv_localIntA] = DialogLastCreated();
            DialogSetImageVisible(DialogLastCreated(), false);
            libNtve_gf_CreateDialogItemImage(DialogLastCreated(), 885, 730, c_anchorTopLeft, 0, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_frame_bucket_long.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 750, 50, c_anchorTopLeft, 145, 36, StringExternal("Param/Value/D21F60C8"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 65, StringExternal("Param/Value/595439CE"), StringExternal("Param/Value/0FF083F7"), "");
            gv_classSelectionDialogItem[lv_localIntA][1] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-marineraynor.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 135, 50, c_anchorTopLeft, 86, 167, StringExternal("Param/Value/8B1D18FD"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 70, 190);
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerRiflemanPoints[lv_localIntA]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/CAC50EA4") + IntToText(gv_playerRiflemanPoints[lv_localIntA])) + StringExternal("Param/Value/ABC4A290")), PlayerGroupAll());
            }

            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 65, StringExternal("Param/Value/1F74C719"), StringExternal("Param/Value/F863793C"), "");
            gv_classSelectionDialogItem[lv_localIntA][2] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-medic.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 248, 167, StringExternal("Param/Value/7FBD60DE"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 220, 190);
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerMedicPoints[lv_localIntA]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/92DE2148") + IntToText(gv_playerMedicPoints[lv_localIntA])) + StringExternal("Param/Value/72276C0D")), PlayerGroupAll());
            }

            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringExternal("Param/Value/395F28FE"), StringExternal("Param/Value/18699484"), "");
            gv_classSelectionDialogItem[lv_localIntA][3] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-marinetychus.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 391, 167, StringExternal("Param/Value/0E1245B6"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 370, 190);
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerAssaultFlamerTechPoints[lv_localIntA]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/6835C2E0") + IntToText(gv_playerAssaultFlamerTechPoints[lv_localIntA])) + StringExternal("Param/Value/AE2EC870")), PlayerGroupAll());
            }

            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 520, 65, StringExternal("Param/Value/1E0BAF32"), StringExternal("Param/Value/F7F51904"), "");
            gv_classSelectionDialogItem[lv_localIntA][4] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 520, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-spectre.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeAdd);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 546, 167, StringExternal("Param/Value/CDFC8597"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 520, 190);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerReconPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/05317FCC") + IntToText(gv_playerReconPoints[lv_localIntA])) + StringExternal("Param/Value/47B38806")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 670, 65, StringExternal("Param/Value/E840CF98"), StringExternal("Param/Value/156FF7BC"), "");
            gv_classSelectionDialogItem[lv_localIntA][5] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 670, 65, StringToText(""), "Assets\\Textures\\btn-unit-terran-ghost.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 674, 167, StringExternal("Param/Value/C32AF9BE"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 670, 190);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerMarksmanPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/15A9595B") + IntToText(gv_playerMarksmanPoints[lv_localIntA])) + StringExternal("Param/Value/0ABABEAC")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 230, StringExternal("Param/Value/F9BE60E7"), StringExternal("Param/Value/22AF385F"), "");
            gv_classSelectionDialogItem[lv_localIntA][6] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-marauderkillsquad.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 70, 332, StringExternal("Param/Value/21816BED"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 70, 355);
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerDemoFOChemPoints[lv_localIntA]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/39B2E512") + IntToText(gv_playerDemoFOChemPoints[lv_localIntA])) + StringExternal("Param/Value/797AB2C2")), PlayerGroupAll());
            }

            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 230, StringExternal("Param/Value/A9B4C9DF"), StringExternal("Param/Value/3986F65C"), "");
            gv_classSelectionDialogItem[lv_localIntA][7] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-marauderswann.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 227, 332, StringExternal("Param/Value/E8957AA8"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 220, 355);
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerEngineerPathfinderPoints[lv_localIntA]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/5A8F5D58") + IntToText(gv_playerEngineerPathfinderPoints[lv_localIntA])) + StringExternal("Param/Value/82AEC6B8")), PlayerGroupAll());
            }

            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringExternal("Param/Value/FE62DB34"), StringExternal("Param/Value/BF162D01"), "");
            gv_classSelectionDialogItem[lv_localIntA][8] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-marinemercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 370, 332, StringExternal("Param/Value/3C55918A"), Color(100,100,100), false, 2.0);
            if ((lv_above5000XP == true)) {
                DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
                DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
                DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 370, 355);
                libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
                libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerCommandoPsiOpsPoints[lv_localIntA]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/5B0D21ED") + IntToText(gv_playerCommandoPsiOpsPoints[lv_localIntA])) + StringExternal("Param/Value/33F751E2")), PlayerGroupAll());
            }

            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 520, 230, StringExternal("Param/Value/4FF2FFC9"), StringExternal("Param/Value/0ACEACE7"), "");
            gv_classSelectionDialogItem[lv_localIntA][9] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 520, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-firebatmercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 546, 332, StringExternal("Param/Value/990ED8C9"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 520, 355);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerAssaultFlamerTechPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/FA30C700") + IntToText(gv_playerAssaultFlamerTechPoints[lv_localIntA])) + StringExternal("Param/Value/39CAFF81")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 670, 230, StringExternal("Param/Value/6FC82370"), StringExternal("Param/Value/51CAFEEA"), "");
            gv_classSelectionDialogItem[lv_localIntA][10] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 670, 230, StringToText(""), "Assets\\Textures\\btn-unit-terran-marineraynorhev.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 682, 314, StringExternal("Param/Value/5E7D53F8"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 670, 355);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerDemoFOChemPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/24F67DA6") + IntToText(gv_playerDemoFOChemPoints[lv_localIntA])) + StringExternal("Param/Value/D1013DD9")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringExternal("Param/Value/CE85C4A6"), StringExternal("Param/Value/FB3BBE00"), "");
            gv_classSelectionDialogItem[lv_localIntA][11] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 70, 390, StringToText(""), "Assets/Textures/btn-unit-terran-vikingmercenary-assault.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 125, 50, c_anchorTopLeft, 75, 492, StringExternal("Param/Value/83CADD52"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 70, 515);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerAssaultFlamerTechPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/A6CB8A20") + IntToText(gv_playerAssaultFlamerTechPoints[lv_localIntA])) + StringExternal("Param/Value/33E66706")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringExternal("Param/Value/8724EA94"), StringExternal("Param/Value/B025F263"), "");
            gv_classSelectionDialogItem[lv_localIntA][12] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 220, 390, StringToText(""), "Assets\\Textures\\btn-unit-terran-nova.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 241, 492, StringExternal("Param/Value/4B7B7348"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 220, 515);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerCommandoPsiOpsPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/4C6107EC") + IntToText(gv_playerCommandoPsiOpsPoints[lv_localIntA])) + StringExternal("Param/Value/E85A2572")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 390, StringExternal("Param/Value/A4960B6C"), StringExternal("Param/Value/6E6A8FE3"), "");
            gv_classSelectionDialogItem[lv_localIntA][13] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 370, 390, StringToText(""), "Assets\\Textures\\btn-unit-terran-reaper.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 373, 492, StringExternal("Param/Value/1B3CC4E6"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 370, 515);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerEngineerPathfinderPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/B3B7038F") + IntToText(gv_playerEngineerPathfinderPoints[lv_localIntA])) + StringExternal("Param/Value/21EB8BF2")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 520, 390, StringExternal("Param/Value/23DBDB13"), StringExternal("Param/Value/FAD4B24A"), "");
            gv_classSelectionDialogItem[lv_localIntA][14] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 520, 390, StringToText(""), "Assets/Textures/btn-unit-terran-maraudermercenary.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 150, 50, c_anchorTopLeft, 545, 475, StringExternal("Param/Value/4ED67B4B"), Color(100,100,100), false, 2.0);
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 125, 15);
            DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 520, 515);
            libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), 50.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerDemoFOChemPoints[lv_localIntA]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/10D2A701") + IntToText(gv_playerDemoFOChemPoints[lv_localIntA])) + StringExternal("Param/Value/1C54C2B0")), PlayerGroupAll());
            libNtve_gf_CreateDialogItemButton(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 670, 390, StringExternal("Param/Value/CD03155C"), StringExternal("Param/Value/72152D12"), "");
            gv_classSelectionDialogItem[lv_localIntA][15] = DialogControlLastCreated();
            DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 125, 125, c_anchorTopLeft, 670, 390, StringToText(""), "Assets\\Textures\\ui_ingame_help_techtree_questionmark.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 135, 50, c_anchorTopLeft, 683, 510, StringExternal("Param/Value/9C8F1D2F"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemImage(gv_classSelectionDialog[lv_localIntA], 70, 70, c_anchorTopLeft, 80, 545, StringToText(""), gv_rankIcon[gv_playerRank[lv_localIntA]], c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 405, 50, c_anchorTopLeft, 132, 560, (gv_rankTitle[gv_playerRank[lv_localIntA]] + PlayerName(lv_localIntA)), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ExitGameTitle", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 525, 50, c_anchorTopLeft, 80, 625, StringExternal("Param/Value/14477807"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 525, 50, c_anchorTopLeft, 290, 625, gv_rankFullTitle[(gv_playerRank[lv_localIntA] + 1)], Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            DialogControlCreate(gv_classSelectionDialog[lv_localIntA], c_triggerControlTypeProgressBar);
            gv_classSelectionDialogItem[lv_localIntA][16] = DialogControlLastCreated();
            DialogControlSetSize(gv_classSelectionDialogItem[lv_localIntA][16], PlayerGroupAll(), 475, 37);
            DialogControlSetPosition(gv_classSelectionDialogItem[lv_localIntA][16], PlayerGroupAll(), c_anchorTopLeft, 70, 650);
            libNtve_gf_SetDialogItemMaximumValue(gv_classSelectionDialogItem[lv_localIntA][16], IntToFixed(gv_rankRequirement[(gv_playerRank[lv_localIntA] + 1)]), PlayerGroupAll());
            libNtve_gf_SetDialogItemMinimumValue(gv_classSelectionDialogItem[lv_localIntA][16], 0.0, PlayerGroupAll());
            libNtve_gf_SetDialogItemCurrentValue(gv_classSelectionDialogItem[lv_localIntA][16], IntToFixed(gv_playerXP[lv_localIntA]), PlayerGroupAll());
            if (((gv_playerXP[lv_localIntA] / 100000) >= 1)) {
                lv_xPosition = 188;
            }
            else if (((gv_playerXP[lv_localIntA] / 10000) >= 1)) {
                lv_xPosition = 204;
            }
            else if (((gv_playerXP[lv_localIntA] / 1000) >= 1)) {
                lv_xPosition = 220;
            }
            else if (((gv_playerXP[lv_localIntA] / 100) >= 1)) {
                lv_xPosition = 236;
            }
            else if (((gv_playerXP[lv_localIntA] / 10) >= 1)) {
                lv_xPosition = 252;
            }
            else if (true) {
                lv_xPosition = 268;
            }
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 300, 52, c_anchorTopLeft, lv_xPosition, 660, (IntToText(gv_playerXP[lv_localIntA]) + StringToText("")), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 300, 52, c_anchorTopLeft, 275, 660, StringExternal("Param/Value/FAF95ADC"), Color(100,100,100), false, 2.0);
            libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_localIntA], 300, 52, c_anchorTopLeft, 285, 660, (StringToText("") + (StringToText("") + IntToText(gv_rankRequirement[(gv_playerRank[lv_localIntA] + 1)]))), Color(100,100,100), false, 2.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
            DialogSetVisible(gv_classSelectionDialog[lv_localIntA], PlayerGroupSingle(lv_localIntA), true);
        }

        lv_localIntA += 1;
    }
    auto3142121B_var = 1;
    for ( ; auto3142121B_var <= auto3142121B_ae; auto3142121B_var += 1 ) {
        DialogSetVisible(gv_raidUITeamStatus, PlayerGroupSingle(auto3142121B_var), true);
    }
    DialogCreate(650, 225, c_anchorCenter, -595, 345, true);
    gv_bootCampDialog = DialogLastCreated();
    DialogSetImageVisible(gv_bootCampDialog, false);
    libNtve_gf_CreateDialogItemImage(gv_bootCampDialog, 650, 225, c_anchorTopLeft, -20, 0, StringToText(""), "Assets\\Textures\\ui_battlenet_glue_textfield.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemButton(gv_bootCampDialog, 577, 178, c_anchorTopLeft, 19, 24, StringExternal("Param/Value/B2602718"), StringExternal("Param/Value/78A9AC7A"), "");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    gv_bootCampDialogItem[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_bootCampDialog, 577, 178, c_anchorTopLeft, 19, 24, StringToText(""), "Assets\\Textures\\ui_battlereports_charbattlefieldend.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    gv_storylineSelectionDialogImages[1] = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_bootCampDialog, 625, 100, c_anchorTopLeft, 43, 50, StringExternal("Param/Value/177EEEC6"), Color(100,100,100), false, 2.0);
    libNtve_gf_CreateDialogItemLabel(gv_bootCampDialog, 625, 100, c_anchorTopLeft, 43, 85, StringExternal("Param/Value/1A8719A9"), Color(28*100/255,167*100/255,234*100/255), false, 2.0);
    DialogSetVisible(gv_bootCampDialog, PlayerGroupAll(), true);
    DialogSetVisible(gv_ammoCounterDialog[1], PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainingFieldClassSelectionUI_Init () {
    gt_TrainingFieldClassSelectionUI = TriggerCreate("gt_TrainingFieldClassSelectionUI_Func");
    TriggerEnable(gt_TrainingFieldClassSelectionUI, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Training Field Class Creation
//--------------------------------------------------------------------------------------------------
bool gt_TrainingFieldClassCreation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selectingPlayer;
    int lv_randomRange;
    bool lv_random;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_selectingPlayer = EventPlayer();
    lv_randomRange = 14;

    // Conditions
    if (testConds) {
        if (!((gv_marineSelected[EventPlayer()] == false))) {
            return false;
        }

        if (!(((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][1]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][2]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][3]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][4]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][5]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][6]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][7]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][8]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][9]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][10]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][11]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][12]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][13]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][14]) || (EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][15]) || (EventDialogControl() == gv_bootCampDialogItem[1])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_marineSelected[lv_selectingPlayer] = true;
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_selectingPlayer));
    gv_gameUIHidden[lv_selectingPlayer] = false;
    DialogSetVisible(gv_classSelectionDialog[lv_selectingPlayer], PlayerGroupSingle(lv_selectingPlayer), false);
    DialogSetVisible(gv_bootCampDialog, PlayerGroupSingle(lv_selectingPlayer), false);
    if ((EventDialogControl() == gv_bootCampDialogItem[1])) {
        TriggerExecute(gt_BootCampInitialize, true, false);
    }
    else {
        libNtve_gf_SwooshCamera(lv_selectingPlayer, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), PointFromId(136), 0.0);
        if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][1])) {
            UnitCreate(1, "Rifleman", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][2])) {
            UnitCreate(1, "Medic", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][3])) {
            UnitCreate(1, "TychusChaingun", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][4])) {
            UnitCreate(1, "Spectre", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][5])) {
            UnitCreate(1, "GhostLaserLines", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][6])) {
            UnitCreate(1, "DominionKillTeam", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][7])) {
            UnitCreate(1, "Engineer", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][8])) {
            UnitCreate(1, "Commando", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][9])) {
            UnitCreate(1, "Flamethrower3", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][10])) {
            UnitCreate(1, "ForwardObserver", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][11])) {
            UnitCreate(1, "Technician", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][12])) {
            UnitCreate(1, "PsiOps", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][13])) {
            UnitCreate(1, "Pathfinder", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][14])) {
            UnitCreate(1, "ChemicalExpert", 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
        }
        else if ((EventDialogControl() == gv_classSelectionDialogItem[lv_selectingPlayer][15])) {
            UnitCreate(1, gv_marineClass[RandomInt(1, lv_randomRange)], 0, lv_selectingPlayer, PointFromId(136), libNtve_gf_RandomAngle());
            if ((UnitGetType(UnitLastCreated()) == "Spectre")) {
                TriggerEnable(gt_Backstab, true);
            }

            gv_marineMags[lv_selectingPlayer] += 10;
            libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_selectingPlayer][1], IntToText(gv_marineRounds[lv_selectingPlayer]), PlayerGroupActive());
            libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_selectingPlayer][2], IntToText(gv_marineMags[lv_selectingPlayer]), PlayerGroupActive());
            lv_random = true;
        }
        gv_marineHero[lv_selectingPlayer] = UnitLastCreated();
        gf_StatsUpdateHeroImage(lv_selectingPlayer);
        gf_StatsSetBehaviors(lv_selectingPlayer);
        gf_UISetPlayerRankNameIconXP(lv_selectingPlayer);
        gf_UIInitializePlayerLifePortrait(lv_selectingPlayer);
        UnitGroupAdd(gv_marines, gv_marineHero[lv_selectingPlayer]);
        if ((UnitGetType(gv_marineHero[lv_selectingPlayer]) == "GhostLaserLines")) {
            UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "SniperRifle");
        }
        else if ((UnitGetType(gv_marineHero[lv_selectingPlayer]) == "Flamethrower3")) {
            UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "Flamethrower");
        }
        else if ((UnitGetType(gv_marineHero[lv_selectingPlayer]) == "Pathfinder")) {
            UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "P45GaussPistol");
        }
        else if (true) {
            UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "GaussRifle");
        }
        libNtve_gf_UnitSetVariation(UnitInventoryLastCreated(), "ColonistSupplyCrate", 0, "");
        gv_marineMags[lv_selectingPlayer] -= 15;
        libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_selectingPlayer][1], IntToText(gv_marineRounds[lv_selectingPlayer]), PlayerGroupActive());
        libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_selectingPlayer][2], IntToText(gv_marineMags[lv_selectingPlayer]), PlayerGroupActive());
        if ((UnitGetType(gv_marineHero[lv_selectingPlayer]) == "TychusChaingun")) {
            gv_playerRoundLimit[lv_selectingPlayer] = 40;
            gv_marineRounds[lv_selectingPlayer] = gv_playerRoundLimit[lv_selectingPlayer];
            libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_selectingPlayer][1], IntToText(gv_marineRounds[lv_selectingPlayer]), PlayerGroupActive());
            libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lv_selectingPlayer][2], IntToText(gv_marineMags[lv_selectingPlayer]), PlayerGroupActive());
        }
        if ((lv_random == true)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/43864855") + UnitTypeGetName(UnitGetType(gv_marineHero[lv_selectingPlayer]))) + StringExternal("Param/Value/91A2B8A5")));
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, ((StringExternal("Param/Value/943AB6ED") + UnitTypeGetName(UnitGetType(gv_marineHero[lv_selectingPlayer]))) + StringExternal("Param/Value/12040880")));
        }
        UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "RoadFlare");
        libNtve_gf_UnitSetVariation(UnitInventoryLastCreated(), "Crate", 1, "");
        gv_talentTreePlayer = lv_selectingPlayer;
        gv_talentsAvailable[1] += 1336;
        gf_ClassCreationMaster();
        gf_TalentTreeCreation();
        libNtve_gf_SetDialogItemText(gv_talentsAvailableDialog[1], (StringExternal("Param/Value/8875CEFA") + IntToText(gv_talentsAvailable[1])), PlayerGroupActive());
        gf_UpdateAllTalentImages(1);
        gf_FieldBegins();
        DialogSetVisible(gv_ammoCounterDialog[1], PlayerGroupAll(), true);
        Wait(3.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TrainingFieldClassCreation_Init () {
    gt_TrainingFieldClassCreation = TriggerCreate("gt_TrainingFieldClassCreation_Func");
    TriggerEnable(gt_TrainingFieldClassCreation, false);
    TriggerAddEventDialogControl(gt_TrainingFieldClassCreation, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enters Main Zone North
//--------------------------------------------------------------------------------------------------
bool gt_EntersMainZoneNorth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_trainingFieldZone == 0)) {
        gv_trainingFieldZone = 1;
        CameraSetBounds(PlayerGroupActive(), RegionFromId(42), true);
        UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/00F1C04E"), StringExternal("Param/Value/0BA42507"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
        Wait(5.0, c_timeReal);
        UIHideTextCrawl(PlayerGroupAll());
    }
    else if ((gv_trainingFieldZone == 1)) {
        gv_trainingFieldZone = 0;
        CameraSetBounds(PlayerGroupActive(), RegionFromId(31), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntersMainZoneNorth_Init () {
    gt_EntersMainZoneNorth = TriggerCreate("gt_EntersMainZoneNorth_Func");
    TriggerAddEventUnitRegion(gt_EntersMainZoneNorth, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(37), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enters Main Zone East
//--------------------------------------------------------------------------------------------------
bool gt_EntersMainZoneEast_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_trainingFieldZone == 0)) {
        gv_trainingFieldZone = 2;
        CameraSetBounds(PlayerGroupActive(), RegionFromId(32), true);
        UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/63ED8925"), StringExternal("Param/Value/3D2CEDBB"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
        Wait(5.0, c_timeReal);
        UIHideTextCrawl(PlayerGroupAll());
    }
    else if ((gv_trainingFieldZone == 2)) {
        gv_trainingFieldZone = 0;
        CameraSetBounds(PlayerGroupActive(), RegionFromId(31), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntersMainZoneEast_Init () {
    gt_EntersMainZoneEast = TriggerCreate("gt_EntersMainZoneEast_Func");
    TriggerAddEventUnitRegion(gt_EntersMainZoneEast, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(43), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Enters Main Zone South
//--------------------------------------------------------------------------------------------------
bool gt_EntersMainZoneSouth_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_trainingFieldZone == 0)) {
        gv_trainingFieldZone = 3;
        CameraSetBounds(PlayerGroupActive(), RegionFromId(24), true);
        UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/3C01D58D"), StringExternal("Param/Value/63404CC6"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
        Wait(5.0, c_timeReal);
        UIHideTextCrawl(PlayerGroupAll());
    }
    else if ((gv_trainingFieldZone == 3)) {
        gv_trainingFieldZone = 0;
        CameraSetBounds(PlayerGroupActive(), RegionFromId(31), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EntersMainZoneSouth_Init () {
    gt_EntersMainZoneSouth = TriggerCreate("gt_EntersMainZoneSouth_Func");
    TriggerAddEventUnitRegion(gt_EntersMainZoneSouth, UnitRefFromVariable("gv_marineHero[1]"), RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenario 1
//--------------------------------------------------------------------------------------------------
bool gt_Scenario1_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto77D12249_n = 10;
    int auto77D12249_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/C94489B6"));
    for (auto77D12249_i = 1; auto77D12249_i <= auto77D12249_n; auto77D12249_i += 1) {
        gf_SurvivalSpawn("Predator2", gv_zone[gv_trainingFieldZone]);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scenario1_Init () {
    gt_Scenario1 = TriggerCreate("gt_Scenario1_Func");
    TriggerEnable(gt_Scenario1, false);
    TriggerAddEventChatMessage(gt_Scenario1, c_playerAny, "-s1", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenario 2
//--------------------------------------------------------------------------------------------------
bool gt_Scenario2_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto835617C1_n = 10;
    int auto835617C1_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/B00BF4E5"));
    for (auto835617C1_i = 1; auto835617C1_i <= auto835617C1_n; auto835617C1_i += 1) {
        gf_SurvivalSpawn("Drone3", gv_zone[gv_trainingFieldZone]);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scenario2_Init () {
    gt_Scenario2 = TriggerCreate("gt_Scenario2_Func");
    TriggerEnable(gt_Scenario2, false);
    TriggerAddEventChatMessage(gt_Scenario2, c_playerAny, "-s2", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenario 3
//--------------------------------------------------------------------------------------------------
bool gt_Scenario3_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto15E0EB6C_n = 10;
    int auto15E0EB6C_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/12BBA283"));
    for (auto15E0EB6C_i = 1; auto15E0EB6C_i <= auto15E0EB6C_n; auto15E0EB6C_i += 1) {
        gf_SurvivalSpawn("Marine", gv_zone[gv_trainingFieldZone]);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scenario3_Init () {
    gt_Scenario3 = TriggerCreate("gt_Scenario3_Func");
    TriggerEnable(gt_Scenario3, false);
    TriggerAddEventChatMessage(gt_Scenario3, c_playerAny, "-s3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenario 4
//--------------------------------------------------------------------------------------------------
bool gt_Scenario4_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int autoC862E70F_n = 10;
    int autoC862E70F_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/17FEE291"));
    for (autoC862E70F_i = 1; autoC862E70F_i <= autoC862E70F_n; autoC862E70F_i += 1) {
        gf_SurvivalSpawn("BlackOps", gv_zone[gv_trainingFieldZone]);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scenario4_Init () {
    gt_Scenario4 = TriggerCreate("gt_Scenario4_Func");
    TriggerEnable(gt_Scenario4, false);
    TriggerAddEventChatMessage(gt_Scenario4, c_playerAny, "-s4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenario 5
//--------------------------------------------------------------------------------------------------
bool gt_Scenario5_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    const int auto73CD3AFF_n = 10;
    int auto73CD3AFF_i;

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/3D8E05AA"));
    for (auto73CD3AFF_i = 1; auto73CD3AFF_i <= auto73CD3AFF_n; auto73CD3AFF_i += 1) {
        gf_SurvivalSpawn("Flamethrower2", gv_zone[gv_trainingFieldZone]);
        Wait(2.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scenario5_Init () {
    gt_Scenario5 = TriggerCreate("gt_Scenario5_Func");
    TriggerEnable(gt_Scenario5, false);
    TriggerAddEventChatMessage(gt_Scenario5, c_playerAny, "-s5", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scenario 6
//--------------------------------------------------------------------------------------------------
bool gt_Scenario6_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/38B9F524"));
    gf_SurvivalSpawn("Ivax", gv_zone[gv_trainingFieldZone]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Scenario6_Init () {
    gt_Scenario6 = TriggerCreate("gt_Scenario6_Func");
    TriggerEnable(gt_Scenario6, false);
    TriggerAddEventChatMessage(gt_Scenario6, c_playerAny, "-s6", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Day
//--------------------------------------------------------------------------------------------------
bool gt_Day_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("UnknownLight", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Day_Init () {
    gt_Day = TriggerCreate("gt_Day_Func");
    TriggerEnable(gt_Day, false);
    TriggerAddEventChatMessage(gt_Day, c_playerAny, "-day", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Night
//--------------------------------------------------------------------------------------------------
bool gt_Night_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("NOTDDarkness", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Night_Init () {
    gt_Night = TriggerCreate("gt_Night_Func");
    TriggerEnable(gt_Night, false);
    TriggerAddEventChatMessage(gt_Night, c_playerAny, "-night", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hunt
//--------------------------------------------------------------------------------------------------
bool gt_Hunt_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_huntMode == true)) {
        gv_huntMode = false;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/BCC9E247"));
    }
    else {
        gv_huntMode = true;
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/FECF04C2"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Hunt_Init () {
    gt_Hunt = TriggerCreate("gt_Hunt_Func");
    TriggerEnable(gt_Hunt, false);
    TriggerAddEventChatMessage(gt_Hunt, c_playerAny, "-hunt", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM3 - Armory Turrets
//--------------------------------------------------------------------------------------------------
bool gt_OM3ArmoryTurrets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_engyPresent;

    // Automatic Variable Declarations
    unitgroup auto3B6EFB64_g;
    int auto3B6EFB64_u;
    unit auto3B6EFB64_var;
    unitgroup autoD5C0A4F5_g;
    int autoD5C0A4F5_u;
    unit autoD5C0A4F5_var;
    unitgroup auto05A3AB68_g;
    int auto05A3AB68_u;
    unit auto05A3AB68_var;
    unitgroup auto7029B692_g;
    int auto7029B692_u;
    unit auto7029B692_var;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((true)) {
        lv_engyPresent += 1;
    }

    if ((true)) {
        lv_engyPresent += 1;
    }

    if ((lv_engyPresent >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("THorner03DominionMarine100029", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(3.0, c_timeGame);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/CE007033"));
        SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), 100.0, 0.0);
        auto3B6EFB64_g = UnitGroup("PerditionTurret", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3B6EFB64_u = UnitGroupCount(auto3B6EFB64_g, c_unitCountAll);
        for (;; auto3B6EFB64_u -= 1) {
            auto3B6EFB64_var = UnitGroupUnitFromEnd(auto3B6EFB64_g, auto3B6EFB64_u);
            if (auto3B6EFB64_var == null) { break; }
            UnitSetOwner(auto3B6EFB64_var, 9, false);
        }
        autoD5C0A4F5_g = UnitGroup("PerditionTurretUnderground", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoD5C0A4F5_u = UnitGroupCount(autoD5C0A4F5_g, c_unitCountAll);
        for (;; autoD5C0A4F5_u -= 1) {
            autoD5C0A4F5_var = UnitGroupUnitFromEnd(autoD5C0A4F5_g, autoD5C0A4F5_u);
            if (autoD5C0A4F5_var == null) { break; }
            UnitSetOwner(autoD5C0A4F5_var, 9, false);
        }
        auto05A3AB68_g = UnitGroup("SentryGunUnderground", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto05A3AB68_u = UnitGroupCount(auto05A3AB68_g, c_unitCountAll);
        for (;; auto05A3AB68_u -= 1) {
            auto05A3AB68_var = UnitGroupUnitFromEnd(auto05A3AB68_g, auto05A3AB68_u);
            if (auto05A3AB68_var == null) { break; }
            UnitSetOwner(auto05A3AB68_var, 9, false);
        }
        auto7029B692_g = UnitGroup("SentryGun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto7029B692_u = UnitGroupCount(auto7029B692_g, c_unitCountAll);
        for (;; auto7029B692_u -= 1) {
            auto7029B692_var = UnitGroupUnitFromEnd(auto7029B692_g, auto7029B692_u);
            if (auto7029B692_var == null) { break; }
            UnitSetOwner(auto7029B692_var, 9, false);
        }
    }
    else if ((lv_engyPresent < 2) && (RandomInt(0, 2) == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/4C162120"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM3ArmoryTurrets_Init () {
    gt_OM3ArmoryTurrets = TriggerCreate("gt_OM3ArmoryTurrets_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ClassSelectOverride_Init();
    gt_ShowPathtoMilitaryBase_Init();
    gt_NOTDInitialize_Init();
    gt_NOTDCamera_Init();
    gt_StorylineDialogCreation_Init();
    gt_StorylineSelection_Init();
    gt_ManualSave_Init();
    gt_AutoSave_Init();
    gt_MapInitLoadPlayer_Init();
    gt_CreateTeamStatusDialog_Init();
    gt_ToggleTeamStatusDialog_Init();
    gt_UpdateLifeBarMIAPlayerHasLeftGame_Init();
    gt_TeamStatusClickedTalentTree_Init();
    gt_CreateMedalsDialog_Init();
    gt_ToggleMedalsDialog_Init();
    gt_CloseShowMedalDialog_Init();
    gt_CreateStatsDialog_Init();
    gt_ToggleStatsDialog_Init();
    gt_ModifyHeroStats_Init();
    gt_CreateWeaponsModDialog_Init();
    gt_ToggleWeaponsModDialog_Init();
    gt_ModifyWeapons_Init();
    gt_TalentTreeToggle_Init();
    gt_TalentSelection_Init();
    gt_Backstab_Init();
    gt_CriticalStrike_Init();
    gt_GrenadeLauncherFireUpEnd_Init();
    gt_SonicTrapLimit5_Init();
    gt_SonicTrapVision_Init();
    gt_Anticipation_Init();
    gt_ResetConcentration_Init();
    gt_AddConcentrationPoint_Init();
    gt_Concentration_Init();
    gt_SupplyStation_Init();
    gt_LaserDesignator_Init();
    gt_Flare_Init();
    gt_ReaperMK13Created_Init();
    gt_RefresherResetCooldowns_Init();
    gt_EscapeResetSprintCooldown_Init();
    gt_ArmageddonBombLimit3_Init();
    gt_FireVulnerability_Init();
    gt_FieldNexusRevokeSharedVision_Init();
    gt_FieldNexusShareVision_Init();
    gt_Synergy_Init();
    gt_X1Guardian_Init();
    gt_TacticalNuke_Init();
    gt_RavagingPhantom_Init();
    gt_Inception_Init();
    gt_MindLinkShareDamage_Init();
    gt_MindLinkShareVision_Init();
    gt_CancelMindLink_Init();
    gt_HammeroftheGodsCamShake_Init();
    gt_AMRounds_Init();
    gt_ModifyShellLimit_Init();
    gt_FireMission_Init();
    gt_ShockwaveBarrage_Init();
    gt_NapalmBarrage_Init();
    gt_MobileInfantry_Init();
    gt_SurveillanceFlares_Init();
    gt_GunshipBuddy_Init();
    gt_GunshipSupport_Init();
    gt_GunshipMouse1GaussCannon_Init();
    gt_GunshipMouse2HellfireMissile_Init();
    gt_GunshipOtherKeys_Init();
    gt_GunshipImpactQuake_Init();
    gt_NoQuarter_Init();
    gt_AssaultJumpTimer_Init();
    gt_Shrinker_Init();
    gt_HugRevealWhenActivated_Init();
    gt_GameOverCheck_Init();
    gt_VictoryBonus_Init();
    gt_ClassPointsUpdateVictoryOnly_Init();
    gt_NightmareBonus_Init();
    gt_NOTDCreditsRoll_Init();
    gt_PlayerLeavesGame_Init();
    gt_ReturntoEarth_Init();
    gt_Clear_Init();
    gt_SquadStatsCheck_Init();
    gt_CiviliansCheck_Init();
    gt_TeamLocation_Init();
    gt_ClassPointsCheck_Init();
    gt_WinsCheck_Init();
    gt_AmmoCheck_Init();
    gt_NightmareMode_Init();
    gt_OpenEquipment_Init();
    gt_UpdateWeightItems_Init();
    gt_ItemTransferBlock_Init();
    gt_UnequipItem_Init();
    gt_ShowInventory_Init();
    gt_EquipItem_Init();
    gt_ItemGained_Init();
    gt_DropMagazine_Init();
    gt_MagazineUse_Init();
    gt_StackMagsIntoBox_Init();
    gt_RoadFlare_Init();
    gt_BuyItem_Init();
    gt_BandageUsed_Init();
    gt_UseBandagewithAbility_Init();
    gt_ReceivesDamage_Init();
    gt_DeadMarine_Init();
    gt_Kills_Init();
    gt_KarmaBite_Init();
    gt_ManualReload_Init();
    gt_AmmoUsage_Init();
    gt_LevelUp_Init();
    gt_PetLevelUp_Init();
    gt_MiniMarineLevelUp_Init();
    gt_Helium3AcquiredCredits_Init();
    gt_InfestorKilled_Init();
    gt_InfestorAI_Init();
    gt_Barrels_Init();
    gt_BootCampInitialize_Init();
    gt_EntersTowerA_Init();
    gt_EntersTowerB_Init();
    gt_EntersTowerC_Init();
    gt_EntersTowerD_Init();
    gt_Task2PredatorKillXP_Init();
    gt_Task4ActivatingTacticalArenaHexTerminal1_Init();
    gt_Task5PredatorKillXP_Init();
    gt_Task5ActivatingTacticalArenaHexTerminal2_Init();
    gt_TrainingFieldClassSelectionUI_Init();
    gt_TrainingFieldClassCreation_Init();
    gt_EntersMainZoneNorth_Init();
    gt_EntersMainZoneEast_Init();
    gt_EntersMainZoneSouth_Init();
    gt_Scenario1_Init();
    gt_Scenario2_Init();
    gt_Scenario3_Init();
    gt_Scenario4_Init();
    gt_Scenario5_Init();
    gt_Scenario6_Init();
    gt_Day_Init();
    gt_Night_Init();
    gt_Hunt_Init();
    gt_OM3ArmoryTurrets_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
