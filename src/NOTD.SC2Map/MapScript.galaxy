//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Night of the Dead
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "Lib09BE6BA8"

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// Function Declarations
void lib1_gf_StarcodeStartCode ();
void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue);
void lib1_gf_StarcodeSetCode (string lp_code);
void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string);
string lib1_gf_StarcodeGetCode ();
int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue);
string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key);
string lib1_gf_StarcodeCompressString (string lp_toCompress);
string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel);
string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel);
bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel);
string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key);
string lib1_gf_StarcodeDecompressString (string lp_toDecompress);

//--------------------------------------------------------------------------------------------------
// Library: STARCODE v1.4
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: Source
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
 
 
string STARCODE_Alphabet="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%/()=?,.-;:_^#+* @{[]}|~`"; //
int STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
string STARCODE_CurrentCode="0";
string STARCODE_fill(string s, int i){
    int c=i-StringLength(s);
    string t="";
    while(c>0){
        t+="0";
        c-=1;
    }
    return t+s;
}
string STARCODE_cut(string s){
    int i=1;
    while(i<StringLength(s) && StringSub(s,i,i)=="0"){
        i+=1;
    }
    return StringSub(s,i,StringLength(s));
}
string STARCODE_BigNumAdd(string number, string addition){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int la=StringLength(addition);
    string out="";
    if(la>ln){
        number=STARCODE_fill(number, la);
        ln=la;
    }else if(ln>la){
        addition=STARCODE_fill(addition, ln);
        la=ln;
    }
 
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) + StringToInt( StringSub(addition, la-i,la-i) );
        out=IntToString( (c+carry) % 10 ) +out;
        carry=(c+carry) / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    return out;
}
string STARCODE_BigNumSubtract(string number, string subtraction){
    int i=0;
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ls=StringLength(subtraction);
    string out="";
    if(ls>ln){
        number=STARCODE_fill(number, ls);
        ln=ls;
    }else if(ln>ls){
        subtraction=STARCODE_fill(subtraction, ln);
        ls=ln;
    }
    while(i<ln){
        c=StringToInt( StringSub(number, ln-i,ln-i) ) - StringToInt( StringSub(subtraction, ls-i,ls-i) );
        c-=carry;
        if(c<0){
            carry=1;
            c+=10;
        }else{
            carry=0;
        }
        out=IntToString( c ) +out;
        i+=1;
    }
    //if (carry>0){
        //debug("This bigint is not suited for negative numbers!");
    //}
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumMultiply(string number, string multi){
    int i=0;
    int m=StringToInt(multi);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int lm=StringLength(multi);
    string out="";
    while(i<ln){
        c=(StringToInt(StringSub(number, ln-i,ln-i)) * m)+carry;
        out=IntToString( (c % 10) ) +out;
        carry=c / 10;
        i+=1;
    }
    if (carry>0){
        out=IntToString(carry)+out;
    }
    if(multi=="0"){
        out="0";
    }
    //debug(out);
    return out;
}
string STARCODE_BigNumDivive(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        out+=IntToString( c / d );
        carry=c % d;
        i+=1;
    }
    if (carry>0){
        //debug("Left: "+IntToString(carry));
    }
    out=STARCODE_cut(out);
    //debug(out);
    return out;
}
string STARCODE_BigNumModulo(string number, string div){
    int i=1;
    int d=StringToInt(div);
    int c=0;
    int carry=0;
    int ln=StringLength(number);
    int ld=StringLength(div);
    string out="";
    while(i<=ln){
        c=(StringToInt(StringSub(number, i, i)))+carry*10;
        carry=c % d;
        i+=1;
    }
    //debug(IntToString(carry));
    return IntToString(carry);
}
string STARCODE_BigNumPower(string number, int pow){
    string out=number;
    if (pow>0){
        while(pow>1){
            out=STARCODE_BigNumMultiply(out, number);
            pow-=1;
        }
        return out;
    }else{
        return "1";
    }
}
string STARCODE_Encode(string s, int i, int max){
    return STARCODE_BigNumAdd(STARCODE_BigNumMultiply(s, IntToString(max)), IntToString(i));
}
int STARCODE_Decode(string s, int max){
    return StringToInt(STARCODE_BigNumModulo(s, IntToString(max)));
}
string STARCODE_Decode2(string s, int max){
    return STARCODE_BigNumDivive(s, IntToString(max));
}
string STARCODE_chr(int i){
    return StringSub(STARCODE_Alphabet, i+1,i+1);
}
int STARCODE_ord(string i){
    return StringFind(STARCODE_Alphabet, i, c_stringCase)-1;
}
string STARCODE_shiftForward(string s, string k){
    return STARCODE_chr((STARCODE_ord(s)+STARCODE_ord(k)) % STARCODE_AlphabetLength);
}
string STARCODE_shiftBackward(string s, string k){
    int c=STARCODE_ord(s)-STARCODE_ord(k);
    if (c<0){
        return STARCODE_chr((c+STARCODE_AlphabetLength)%STARCODE_AlphabetLength);
    }
    else{
        return STARCODE_chr(c % STARCODE_AlphabetLength);
    }
}
string STARCODE_Encrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftForward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Decrypt(string s, string key){
    int i=1;
    int ls=StringLength(s);
    int lk=StringLength(key);
    string out="";
    while(i<=ls){
        out+=STARCODE_shiftBackward( StringSub(s, i,i), StringSub(key, ((i-1)%lk)+1,((i-1)%lk)+1) );
        i+=1;
    }
    return out;
}
string STARCODE_Base10ToN(string current, int baseN){
    string n=IntToString(baseN);    
    string remainder="";
    string out="";
    
    while (current!="0"){
        remainder=STARCODE_BigNumModulo(current, n);
        out= STARCODE_chr(StringToInt(remainder)) + out;
        current=STARCODE_BigNumDivive(current, n);
    }
    return out;
}
string STARCODE_BaseNTo10(string current, int baseN){
    string out="0";
    string base=IntToString(baseN);
    int l=StringLength(current);
    int i=1;
    while(i<=l){
        out=STARCODE_BigNumAdd(out, STARCODE_BigNumMultiply(STARCODE_BigNumPower(base, l-i), IntToString(STARCODE_ord(StringSub(current, i,i)))) );
        i+=1;
    }
    return out;
}
string STARCODE_Hash(string toHash, int keyLength){
    int i=StringLength(toHash);
    string out="0";
    while(i>0){
        out=STARCODE_BigNumAdd(out, IntToString(  STARCODE_ord(StringSub(toHash,i,i)) * i  ));
        i-=1;
    }
    
    return STARCODE_fill(STARCODE_Base10ToN(STARCODE_BigNumModulo(out, IntToString( FixedToInt(Pow(STARCODE_AlphabetLength, keyLength)) )), STARCODE_AlphabetLength), keyLength);
}

//--------------------------------------------------------------------------------------------------
// Custom Script: READ ME
//--------------------------------------------------------------------------------------------------
//===========================================================
//================  S T A R C O D E  v1.4 ===================
//===========================================================
//  by s3rius
//
//    
//    SC2Mapster.com
//    http://forums.sc2mapster.com/development/galaxy-scripting-and-trigger-lib/5091-library-starcode-v1-3/
//    Credits to vjeux
//
//
//  DOCUMENTATION:
//
//  Before you start using STARCODE you should know a couple of things:
//
//    1) STARCODE is still somewhat experimental. There could very well be bugs 
//       or glitches left in the system. During my tests I have fixed everything
//       I noticed, but that is no guarantee that it's always work under every 
//       circumstances. The system is rather messy too.
//       I haven't noticed any lags during my tests, but I believe that it could be
//       quite a bit faster with optimized functions.
//       Not my problem, at the moment.
//
//    2) I have tested STARCODE with dozens of integer values and generated codes of
//       up to 100 digits length without problems. After that, however, the system 
//       often hits StarCraft II's execution limit. Since I cannot disable this limit
//       you should try not to make codes longer than 100 digits.
//       You can, however, just create several codes with 100 digits length each.
//
//    3) The generated code length can change, even if you haven't added or removed any
//       integers. 
//       That is because the closer an integer's value is to it's maximum value, the more
//       space it needs in the code.
//       So to get the maximum code length you have to set all stored integer's values to
//       their respective maximum values.
//       Keep this in mind when you are storing your codes in a bank.
//       When the codes' length is already close to the maximum size of the bank, you should
//       check whether the code can possibly exceed the bank size.
//
//    4) There is a public function called Set Encryption Alphabet.
//       You should leave this function alone, unless you have a good reason to use it and know
//       what you are doing.
//       One reason could be to remove some characters from the alphabet so that they
//       won't be used in the code anymore.
//       The default alphabet is:
//
//       "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!$%&/()=?,.-;:_^#+*' @{[]}|>"
//
//       You can add and remove characters as you like. However, you should always keep the first
//       ten characters (all numbers) at it's place, or some functions might return strange
//       results.
//       Also note that I have excluded "<" and "\" from the alphabet.
//       "\" is an escape characters so it's of no use to us.
//       "<" could be potentially dangerous. If you want to display your code and there happens
//       to be a sequence such as "<abc>" in there, StarCraft II will recongize this as a tag
//       and not display it. Thus you would get wrong results. I left ">" in because it won't
//       cause any harm on it's own.
//
//
//  Ok, I think I have mentioned everything. 
//  You can take a look at the Example Usage trigger to see how STARCODE can be used.
//
//  
//
// ~ s3rius
//

void lib1_InitCustomScript () {
}

// Functions
void lib1_gf_StarcodeStartCode () {
    // Implementation
        STARCODE_CurrentCode = "0";
}

void lib1_gf_StarcodeStoreIntegerValue (int lp_value, int lp_maximumValue) {
    // Implementation
    if(lp_value<lp_maximumValue+1){
        STARCODE_CurrentCode=STARCODE_Encode(STARCODE_CurrentCode, lp_value, lp_maximumValue+1);
    }else{
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringToText("Error! Starcode tried to save a value larger than it's maximum!"));
    }
}

void lib1_gf_StarcodeSetCode (string lp_code) {
    // Implementation
    STARCODE_CurrentCode=lp_code;
}

void lib1_gf_StarcodeSetEncryptionAlphabet (string lp_string) {
    // Implementation
    STARCODE_Alphabet=lp_string;
    STARCODE_AlphabetLength=StringLength(STARCODE_Alphabet);
}

string lib1_gf_StarcodeGetCode () {
    // Implementation
    return STARCODE_CurrentCode;
}

int lib1_gf_StarcodeGetIntegerValue (int lp_maximumValue) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    lv_i=STARCODE_Decode(STARCODE_CurrentCode, lp_maximumValue+1);
    STARCODE_CurrentCode=STARCODE_Decode2(STARCODE_CurrentCode, lp_maximumValue+1); //advance in the code
    return lv_i;
}

string lib1_gf_StarcodeEncryptString (string lp_toEncrypt, string lp_key) {
    // Implementation
    return STARCODE_Encrypt(lp_toEncrypt, lp_key);
}

string lib1_gf_StarcodeCompressString (string lp_toCompress) {
    // Implementation
    return STARCODE_Base10ToN(lp_toCompress, STARCODE_AlphabetLength);
}

string lib1_gf_StarcodeHashString (string lp_toHash, int lp_securityLevel) {
    // Implementation
    return STARCODE_Hash(lp_toHash, lp_securityLevel)+lp_toHash;
}

string lib1_gf_StarcodeRemoveHashfromString (string lp_string, int lp_securityLevel) {
    // Implementation
    return StringSub(lp_string,lp_securityLevel+1, StringLength(lp_string));
}

bool lib1_gf_StarcodeValidateString (string lp_toCheck, int lp_securityLevel) {
    // Implementation
    return STARCODE_Hash(StringSub(lp_toCheck,lp_securityLevel+1, StringLength(lp_toCheck)), lp_securityLevel)==StringSub(lp_toCheck,1, lp_securityLevel);
}

string lib1_gf_StarcodeDecryptString (string lp_toDecrypt, string lp_key) {
    // Implementation
    return STARCODE_Decrypt(lp_toDecrypt, lp_key);
}

string lib1_gf_StarcodeDecompressString (string lp_toDecompress) {
    // Implementation
    return STARCODE_BaseNTo10(lp_toDecompress, STARCODE_AlphabetLength);
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitCustomScript();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    lib09BE6BA8_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_numberofPlayers = 8;
const int gv_indexBaseValue = 1;
const int gv_numberofTalents = 10;
const int gv_numberofMedals = 10;
const string gv_dialogIntialization = "Initialize Dialogs";
const int gv_costofWeaponMod = 10000;
const int gv_costofBOInsignia = 10000;
const int gv_costofPet = 5000;
const int gv_costofColor = 5000;
const int gv_costofKitten = 1000;
const int gv_costofExplosiveWeapons = 325;
const int gv_costofHeavyWeapons = 250;
const int gv_costofMediumWeapons = 200;
const int gv_costofSMG = 100;
const int gv_costofFlamethrower = 50;
const int gv_costofHeavyEnhancements = 250;
const int gv_costofLightEnhancements = 50;
const int gv_costofAmmoBox = 35;
const int gv_costofMagazine = 10;
const int gv_costofHealingItems = 15;
const int gv_costofAntiVenom = 10;
const int gv_costofRoadFlares = 15;
const fixed gv_gRIDDLG_GRID = 60.0;
const fixed gv_gRIDDLG_GRIDGAP_X = 10.0;
const fixed gv_gRIDDLG_GRIDGAP_Y = 10.0;
const fixed gv_gRIDDLG_MARGINE_X = 50.0;
const fixed gv_gRIDDLG_MARGINE_Y = 40.0;
const int gv_numberofStats = 5;
const int gv_numberofWeaponMods = 7;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_PlayerCP {
    int lv_rifleman;
    int lv_medic;
    int lv_assaultFlamerTech;
    int lv_recon;
    int lv_marksman;
    int lv_demoFOChem;
    int lv_engiePF;
    int lv_commandoPO;
};

struct gs_SurvivalSpawnLocation {
    region lv_region;
    camerainfo lv_startCamera;
};

struct gs_TalentButton {
    int lv_talentText;
    int lv_borderIntital;
    int lv_borderFinal;
    int lv_button;
    text lv_abilityLevelText;
};

struct gs_TalentTree {
    int lv_talentTree;
    gs_TalentButton[gv_numberofTalents + 1] lv_talentButtons;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_ReloadType_Automatic = 0;
const int ge_ReloadType_Manual = 1;
const int ge_ReloadType_Perfect = 2;
const int ge_Ping_Enabled = 0;
const int ge_Ping_Disabled = 1;
const int ge_GRIDDLG_HV_Horizontal = 0;
const int ge_GRIDDLG_HV_Vertical = 1;
const int ge_GRIDDLG_HV2_ClientPosition = 0;
const int ge_GRIDDLG_HV2_ClientSize = 1;
const int ge_GRIDDLG_HV2_NoneClient = 2;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_classSelection;
bool[9] gv_playerBanned;
point[19] gv_pathtoMilitaryBase;
int[gv_numberofPlayers + 1] gv_playerXP;
int[gv_numberofPlayers + 1] gv_playerRating;
int[gv_numberofPlayers + 1] gv_playerGamesPlayed;
int[gv_numberofPlayers + 1] gv_playerMedicPlayed;
int[gv_numberofPlayers + 1] gv_playerKarma;
int[gv_numberofPlayers + 1] gv_playerStats;
int[gv_numberofPlayers + 1] gv_playerCredits;
int[gv_numberofPlayers + 1] gv_playerLifeTimeCreditsAcquired;
int[gv_numberofPlayers + 1] gv_playerWeaponsMod1;
int[gv_numberofPlayers + 1] gv_playerWeaponsMod2;
int[gv_numberofPlayers + 1] gv_combatActionRibbon;
int[gv_numberofPlayers + 1] gv_lifeSavingMedal;
int[gv_numberofPlayers + 1] gv_bronzeStar;
int[gv_numberofPlayers + 1] gv_silverStar;
int[gv_numberofPlayers + 1] gv_legionOfMerit;
int[gv_numberofPlayers + 1] gv_distinguishedServiceMedal;
int[gv_numberofPlayers + 1] gv_navyCross;
int[gv_numberofPlayers + 1] gv_expeditionaryMedal;
int[gv_numberofPlayers + 1] gv_superiorServiceMedal;
int[gv_numberofPlayers + 1] gv_medalOfHonor;
gs_PlayerCP[gv_numberofPlayers + 1] gv_playerCP;
int[9] gv_playerColorCode;
int[9] gv_playerPetCode;
int[9] gv_eCWinNormal;
int[9] gv_eCWinNM;
int[9] gv_aCWinNormal;
int[9] gv_aCWinNM;
int[9] gv_sTWinNormal;
int[9] gv_sTWinNM;
int[9] gv_survivalWin;
int[9] gv_eCSpeed;
int[9] gv_aCSpeed;
int[9] gv_sTSpeed;
int[9] gv_eCNMSpeed;
int[9] gv_aCNMSpeed;
int[9] gv_sTNMSpeed;
int[9] gv_survivalWinNM;
int[9] gv_bootCampComplete;
string gv_defaultLighting;
int gv_primaryObjective;
int gv_secondaryObjective;
int gv_secondary2Objective;
int gv_rescueObjective;
int gv_infestorObjective;
int gv_scrapyardObjective;
int gv_commTowerObjective;
unit[9] gv_marineHero;
unit[9] gv_playerPet;
unit gv_drBergmann;
unit gv_sgtStallans;
unit gv_priyanka;
unitgroup gv_blackOps;
unitgroup gv_zombieWave;
unitgroup gv_brainBugs;
unit gv_madMaxTruck;
unit gv_charlie;
unitgroup gv_complianceNexusGroup;
unit gv_tartarusCocoon;
unit gv_incompleteIVAX;
unit[3] gv_sensorTower;
region[6] gv_militaryBaseSpawn;
region[6] gv_mineSpawn;
region[12] gv_nydusNetwork;
region[8] gv_lZ;
region[5] gv_bioDomeSpawn;
string[gv_numberofPlayers + 1] gv_playerCreditMultipler;
string[gv_numberofPlayers + 1] gv_playerClass;
int[9] gv_equipmentButton;
int gv_equipment;
int[9] gv_ammoCounterDialog;
int[9][3] gv_ammoCounterDialogItem;
fixed[9] gv_playerDamageTaken;
bool[9] gv_playerMarinePetDead;
bool[9] gv_playerDoctor;
bool[9] gv_playerIsBad;
bool[9] gv_playerRandom;
int[9] gv_playerRank;
fixed[9] gv_hitsTaken;
int[9] gv_magazinesUsed;
int[9] gv_playerRoundLimit;
int gv_alivePlayers;
int gv_totalPlayers;
bool[9] gv_playerRecovery;
int[9] gv_playerLives;
playergroup gv_marineSquad;
playergroup gv_leavers;
playergroup gv_activePlayers;
int[9] gv_marineWeightPoints;
unitgroup gv_marines;
trigger[4] gv_domeSpawn;
int gv_spawnFactor;
int gv_performanceTimer;
int gv_squadXP;
int gv_squadRating;
bool gv_noNewbie;
int gv_hitPar;
bool gv_cinematicMode;
bool gv_bossFight;
bool gv_gameOver;
bool gv_victory;
bool[9] gv_gameUIHidden;
fixed gv_gameVictoryTime;
unitgroup gv_pets;
fixed gv_hexCycle;
int gv_globalIntA;
int gv_wave;
unit gv_finalBoss;
unit gv_boss;
unit gv_infestedParrot;
string[2] gv_civPool;
unit gv_dropship;
bool[9] gv_fPS;
timer gv_globalTimer;
int gv_globalTimerWindow;
int gv_securityCam;
unit[6] gv_infestor;
int gv_infestorsAlive;
unitgroup gv_colonists;
int gv_colonistsRescued;
bool gv_nightmare;
soundlink gv_dummySound;
unitgroup[9] gv_kittens;
bool[9] gv_underAttack;
text gv_characterGeneralKoller;
text gv_characterLieutenantSheng;
text gv_characterCaptainLinh;
text gv_characterDrBergmann;
text gv_characterDrTanaka;
text gv_characterFieldMarshalLee;
text gv_characterFieldMarshalKim;
text gv_characterPriyanka;
text gv_characterCorpsmanKeller;
text gv_characterBlackOpsOperator;
text gv_characterOgilvy;
text gv_characterIvan;
text gv_characterUnknownVoice;
text gv_characterUnknownVoice1;
text gv_characterUnknownVoice2;
text gv_characterCWOHussein;
text gv_characterHAL;
text gv_characterIVAX;
text gv_forwardSlash;
text gv_infoPanelHeroRank;
text gv_endStyling;
text gv_space;
fixed gv_difficultyHPScaling;
timer gv_gameTime;
region[8] gv_reinforcementSpawn;
fixed[8] gv_reinforcementSpawnHeight;
text gv_difficulty;
int gv_storyline;
int gv_mode;
trigger[5] gv_storyIntializationTriggers;
bool[5] gv_storylineUnlocked;
int gv_storylineDialog;
int[5] gv_storylineSelection;
int[4] gv_modeSelection;
int[121][9] gv_playerBankData;
int gv_bankSize;
string[9] gv_localModelPing;
int[9] gv_voteKickDanger;
bool[9] gv_voteKickNomination;
bool[9] gv_kicked;
bool[9] gv_spectatorModeOn;
bool[9] gv_spectatedBefore;
int[9] gv_spectatedDialog;
int[9] gv_spectatedLabel;
bool[9] gv_spectated;
bool gv_navyCrossMode;
int[9] gv_marineMags;
int gv_magazineAdjustment;
int[9] gv_marineRounds;
bool[9] gv_reloading;
int[9] gv_smartReloadCount;
bool[9] gv_victimOfTK;
int gv_tKedPlayer;
int gv_griefingPlayer;
bool[9] gv_playerHasRankedUp;
bool gv_infestorLock;
bool gv_infestorAggroMode;
int gv_victoryButton1;
int gv_victoryButton2;
int gv_endGameDialog1;
int gv_endGameDialog2;
int[9][9] gv_itemBarButtons;
int[9][9] gv_itemBarImages;
int[9][3] gv_itemBarRatingImages;
int[9][3] gv_itemBarRatingButtons;
int[5][9] gv_medalsItemButtons;
int[5][9] gv_medalsItemImages;
int[4][3] gv_finalTextLabel;
int gv_itemX;
int gv_playerNameTextY;
int[3] gv_scrollEndGameUIButtons;
bool[9] gv_playerExitButton;
int gv_legionOfMeritCivsRescued;
bool gv_distinguishedServiceMedalFailed;
bool gv_navyCrossFailed;
string[5][9] gv_medalsAwardedImages;
text[5][9] gv_medalsAwardedText;
bool[9] gv_iLikeItOpen;
unitgroup gv_mineShaftMobs;
bool gv_mineShaftReached;
unit gv_zeus;
unit gv_leto;
int gv_zeusLetoRespawnCount;
int gv_zeusLetoLives;
int gv_oMPerformanceTimer;
int gv_oMCount;
int gv_oMCount2;
bool gv_oMCommTower;
bool gv_oMScrapyard;
bool gv_oMScrapyardComplete;
region gv_ogilvysHideout;
unit gv_ogilvy;
unit gv_ivan;
region[8] gv_scrapyardSpawn;
actor gv_oMChemicalLeak;
actor[4] gv_oMChemicalLeakIndicators;
unit gv_bBQ;
string gv_currentBoss;
int gv_bossPing;
unit gv_tartarus;
unit gv_eilethyia;
unit gv_erebos1;
unit gv_erebos2;
unit gv_menoestes;
unit gv_eosQueen;
region[4] gv_eggVetSpawnAreas;
unit gv_john;
point[6] gv_camsUnlocked;
bool gv_camsMissionSuccessful;
actor[4] gv_hexModels;
unitgroup gv_episionCivilians;
unitgroup gv_episilonMinis;
bool gv_tartarusCapture;
bool gv_tartarusMission;
int gv_tartarusCaptureObjective;
region gv_truckSelected;
int gv_truckRoute;
bool gv_colonyShipRescue;
bool gv_colonyShipRescueSuccessful;
bool gv_warningTextBreak;
bool gv_nydusDanger;
bool gv_nydusFailed;
unitgroup gv_nydusWormGroup;
int gv_powerGenerators;
unit[5] gv_bioDome;
region[11] gv_cityRescue;
region gv_cityRescueAlarm;
unitgroup gv_apolloCivs;
unit gv_rescueArrow;
int gv_rescuedApolloCivs;
int gv_civRescueObjective;
bool gv_gunshipSupport;
region gv_gunshipAttackRegion;
unitgroup gv_blackOpsDroneTeam;
bool[4] gv_bioDomeCompleted;
unit gv_blackOpsSentinel;
bool gv_generatorMissionSuccessful;
unitgroup gv_easyCompany;
bool gv_queenBirthing;
bool gv_queenFrenzy;
bool gv_queenEscapeMode;
fixed gv_queenMoveSpeed;
int gv_queenBossPing;
bool gv_tartarusBirth;
unitgroup gv_truckAttackers;
bool gv_truckEscortSuccessful;
unit gv_cronus;
unit gv_iVAX;
unit gv_perses;
unit gv_cerberus;
unit gv_drGunjan;
unit gv_drTanaka;
unit gv_farica;
unit gv_ltSheng;
region[4] gv_secTeamMiniRally;
region[5] gv_chapter1SpawnRegion;
region[6] gv_labSpawn;
unitgroup gv_ghostCompany;
bool gv_charlieFound;
unit gv_prowler;
bool gv_aCSpawnHalt;
bool gv_aCSpawnRespite;
int gv_prowlerPing;
point[7] gv_drTanakaLabWorkPoints;
timer gv_bergmannEVACTimer;
bool gv_bergmannIntercepted;
bool gv_tanakaDecisionMade;
bool gv_tanakaParagonPath;
int gv_antiToxinCount;
timer gv_persesTimer;
bool gv_colonistRescueMissionComplete;
region[4] gv_ventSpawnArea;
region gv_persesFightRegion;
int gv_nexusDestroyed;
fixed gv_iVAXLifePercentage;
unit gv_deimos;
unit gv_apoptosis;
unit gv_nazara;
unit gv_athena;
unit gv_hadesForm1;
unit gv_hadesForm2;
unit gv_hephasteus;
unitgroup gv_sTTeam2HarassZombies;
playergroup gv_secTeamA;
playergroup gv_secTeamB;
unitgroup gv_secTeamAMarines;
unitgroup gv_secTeamBMarines;
bool[9] gv_cPAwardException;
unitgroup gv_civilianPopulation;
unitgroup gv_infectedCivilians;
unit gv_ionCannonA;
unit gv_ionCannonB;
unit gv_ionCannonC;
region gv_mainframeSite;
unit[4] gv_tartarusEggs;
region[4] gv_mainframeTerminals;
bool[6] gv_hALPleas;
bool gv_armoryFired;
unitgroup gv_nazaraImages;
int gv_deimosMission;
bool gv_shengAIShutdown;
bool gv_deimosEngaged;
bool gv_devastatorsDestroyed;
region[11] gv_drBergmannEscapeZones;
fixed[8] gv_drBergmannEscapeZonesHeight;
bool gv_drBergmannFound;
bool gv_drBergmannSaved;
unit gv_blackOpsOperator;
point gv_drBergmannHidePoint;
timer gv_chapterSelectionTimer;
region[6] gv_undergroundQuarters;
bool gv_clearanceCodesReceived;
region[6] gv_bioDomeArea;
int gv_bioDomesDestroyed;
int gv_thorsActivated;
point gv_finalBossPoint;
unitgroup gv_laserDrones;
bool gv_mOHAwardException;
bool gv_survivalMode;
bool gv_survivalMedal20Waves;
unit gv_survivalCronusA;
unit gv_survivalCronusB;
unitgroup gv_survivalNydusGroup;
int gv_survivalSpawn;
gs_SurvivalSpawnLocation[6] gv_survivalSpawnPoints;
bool gv_equipmentOpen;
text gv_creditsLeft;
unitgroup[9] gv_boughtItems;
int[9] gv_classSelectionDialog;
int[9][19] gv_classSelectionDialogItem;
fixed gv_classLimitMultiplier;
bool gv_classLimitBroken;
int[15] gv_classCount;
int[gv_numberofPlayers + 1] gv_playerNameLabel;
int[gv_numberofPlayers + 1] gv_playerNameRankIcon;
int[4][7][gv_numberofPlayers + 1] gv_dialogButtons;
int gv_saveButton;
bool[gv_numberofPlayers + 1] gv_saveButtonEnabled;
text gv_labelMedalsButton;
text gv_labelStatsButton;
text gv_labelTalentsButton;
int gv_teamUI;
int[9] gv_teamStatusPlayerPanel;
int[9] gv_teamStatusLifeBar;
int[4][9] gv_teamStatusDebuffs;
int[4][9] gv_teamStatusDebuffsBackground;
int[9] gv_teamStatusLifeBarLabel;
int[9] gv_teamStatusRankIcon;
int[9] gv_teamStatusXP;
int[9] gv_teamStatusPortraitButton;
text[9] gv_teamStatusPortraitTooltip;
text[9] gv_teamStatusLifeTooltip;
int[9] gv_startingKarma;
int[9] gv_startingRating;
int[9] gv_startingXP;
int[9] gv_startingCredits;
int gv_medalsDialogButton;
int gv_statsDialogButton;
int[9] gv_playerMedalsDialog;
int[11][9] gv_playerMedalsImage;
int[11][9] gv_playerMedalsMedalLevel;
int[11][9] gv_playerMedalsMedalName;
int[11][9] gv_playerMedalsMedalProgressBar;
int[11][9] gv_playerMedalsMedalProgressText;
int[9] gv_statsPlayerStatsDialog;
int[9] gv_statsPlayerNextLevelProgressBar;
int[9] gv_statsPlayerNextLevelPromotionLabel;
int[9] gv_statsPlayerNextXP;
int[9] gv_statsPlayerCashLabel;
int[9] gv_statsPlayerCashAcquiredLabel;
int[6][9] gv_statsStatProperties;
int[9] gv_statsStrength1;
int[9] gv_statsEndurance2;
int[9] gv_statsAgility3;
int[9] gv_statsPerception4;
int[9] gv_statsIntelligence5;
int[9] gv_statsTotalStats;
int[9] gv_statsPlayerStatsStatsButton;
int[9] gv_statsPlayerStatsStatsHeroImage;
int[9] gv_statsPlayerStatsPanel;
int[9] gv_statsPlayerHeroImage;
int[9] gv_statsPlayerLivesLeft;
int[6][9] gv_statsPlayerDecreImage;
int[6][9] gv_statsPlayerDecreButton;
int[6][9] gv_statsPlayerIncreImage;
int[6][9] gv_statsPlayerIncreButton;
int[6][9] gv_statsPlayerStatLabel;
int[9] gv_statsPlayerStatAvailableLabel;
int[8][9] gv_statsModProperties;
int[9] gv_wModTotalPointsLeft;
int[9] gv_wModWeaponsModButton;
int[9] gv_statsWeaponModPanel;
int[8][9] gv_wModPlayerDecreImage;
int[8][9] gv_wModPlayerDecreButton;
int[8][9] gv_wModPlayerIncreImage;
int[8][9] gv_wModPlayerIncreButton;
int[8][9] gv_wModWeaponPointsLabels;
int[9] gv_statsWeaponModPointsUnlockedLabel;
int[9] gv_wModWeaponPointsAvailableLabel;
int[9] gv_modTotalPointsPositive;
int[9] gv_modTotalPointsNegative;
fixed[9] gv_baseMarineReloadMultiplier;
fixed[9] gv_baseMarineSwitchingMultiplier;
fixed[9] gv_baseMarineWeightPointMultiplier;
unitgroup[9] gv_sonicTrap;
unit[9] gv_reaperMK13;
unitgroup[9] gv_armageddonBomb;
unit[9] gv_fieldNexus;
bool gv_fieldNexusAlive;
timer[9] gv_synergyTimerEngineer;
timer[9] gv_synergyTimerGuardian;
unit[9] gv_synergyTargetUnit;
unit[9] gv_x1Guardian;
bool gv_inceptionOn;
unitgroup[9] gv_mindLinkedGroup;
fixed[9] gv_barrageTime;
int gv_miniDeathsFriendly;
int[5][9] gv_shellCounter;
int[4][9] gv_shellDecre;
int[4][9] gv_shellIncre;
int[9] gv_shellDialog;
unitgroup[9] gv_mobileInfantryGroup;
bool[9] gv_gunshipActive;
unit[9] gv_gunshipUnit;
bool[9] gv_gunshipCameraSwitch;
bool[9] gv_gunshipZoom;
unit[9] gv_gunshipFollowedUnit;
bool[9] gv_gunshipCinematicActive;
int[9] gv_gunshipBuddy;
gs_TalentTree[gv_numberofPlayers + 1] gv_talentTrees;
int[gv_numberofTalents + 1] gv_talentMax;
int[11][9] gv_talentLevel;
int[9] gv_talentsAvailable;
int[9] gv_talentsAvailableDialog;
int[11][9] gv_talentTreeImages;
bool[9] gv_talentTreeOpen;
int[9] gv_talentTree;
int gv_talentTreePlayer;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_k;
    int init_i1;

    gv_defaultLighting = "UnknownLight";
    gv_primaryObjective = c_invalidObjectiveId;
    gv_secondaryObjective = c_invalidObjectiveId;
    gv_secondary2Objective = c_invalidObjectiveId;
    gv_rescueObjective = c_invalidObjectiveId;
    gv_infestorObjective = c_invalidObjectiveId;
    gv_scrapyardObjective = c_invalidObjectiveId;
    gv_commTowerObjective = c_invalidObjectiveId;
    gv_drBergmann = UnitFromId(136);
    gv_blackOps = UnitGroupEmpty();
    gv_zombieWave = UnitGroupEmpty();
    gv_brainBugs = UnitGroupEmpty();
    gv_madMaxTruck = UnitFromId(337);
    gv_complianceNexusGroup = UnitGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_equipmentButton[init_i] = c_invalidDialogControlId;
    }
    gv_equipment = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_ammoCounterDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_ammoCounterDialogItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerRank[init_i] = 1;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerRoundLimit[init_i] = 30;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerLives[init_i] = 3;
    }
    gv_marineSquad = PlayerGroupEmpty();
    gv_leavers = PlayerGroupEmpty();
    gv_activePlayers = PlayerGroupEmpty();
    gv_marines = UnitGroupEmpty();
    gv_spawnFactor = 1;
    gv_noNewbie = true;
    gv_hitPar = 20;
    gv_pets = UnitGroupEmpty();
    gv_hexCycle = 0.5;
    gv_globalTimer = TimerCreate();
    gv_globalTimerWindow = c_timerWindowNone;
    gv_infestorsAlive = 5;
    gv_colonists = UnitGroupEmpty();
    gv_dummySound = SoundLink("EditorDefaultSound", -1);
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_kittens[init_i] = UnitGroupEmpty();
    }
    gv_characterGeneralKoller = StringExternal("Param/Value/26C70C28");
    gv_characterLieutenantSheng = StringExternal("Param/Value/2DDFDE54");
    gv_characterCaptainLinh = StringExternal("Param/Value/0C4AF719");
    gv_characterDrBergmann = StringExternal("Param/Value/859D24C4");
    gv_characterDrTanaka = StringExternal("Param/Value/884A3D9D");
    gv_characterFieldMarshalLee = StringExternal("Param/Value/39F676C8");
    gv_characterFieldMarshalKim = StringExternal("Param/Value/DB4A1AB6");
    gv_characterPriyanka = StringExternal("Param/Value/E2C4B148");
    gv_characterCorpsmanKeller = StringExternal("Param/Value/3E5FA299");
    gv_characterBlackOpsOperator = StringExternal("Param/Value/2C5A30D2");
    gv_characterOgilvy = StringExternal("Param/Value/EFBE02D4");
    gv_characterIvan = StringExternal("Param/Value/02779103");
    gv_characterUnknownVoice = StringExternal("Param/Value/3DB975EB");
    gv_characterUnknownVoice1 = StringExternal("Param/Value/935AB2A0");
    gv_characterUnknownVoice2 = StringExternal("Param/Value/9AFB1FA2");
    gv_characterCWOHussein = StringExternal("Param/Value/D3B2CA55");
    gv_characterHAL = StringExternal("Param/Value/9C362C62");
    gv_characterIVAX = StringExternal("Param/Value/03DBB218");
    gv_forwardSlash = StringToText("/");
    gv_infoPanelHeroRank = StringToText("<s val=\"InfoPaneHeroRank\">");
    gv_endStyling = StringToText("</s>");
    gv_space = StringToText(" ");
    gv_gameTime = TimerCreate();
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_reinforcementSpawnHeight[init_i] = 20.5;
    }
    gv_difficulty = StringExternal("Param/Value/F8130A42");
    gv_storyline = 1;
    gv_mode = 1;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_storylineUnlocked[init_i] = true;
    }
    gv_storylineDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_storylineSelection[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_modeSelection[init_i] = c_invalidDialogControlId;
    }
    gv_bankSize = 120;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_spectatedDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_spectatedLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_marineMags[init_i] = 38;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_marineRounds[init_i] = 30;
    }
    gv_victoryButton1 = c_invalidDialogControlId;
    gv_victoryButton2 = c_invalidDialogControlId;
    gv_endGameDialog1 = c_invalidDialogId;
    gv_endGameDialog2 = c_invalidDialogId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_itemBarButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_itemBarImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_itemBarRatingImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_itemBarRatingButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_medalsItemButtons[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_medalsItemImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 2; init_j += 1) {
            gv_finalTextLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_itemX = 300;
    gv_playerNameTextY = 25;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_scrollEndGameUIButtons[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_medalsAwardedImages[init_i][init_j] = "Assets\\Textures\\black.dds";
        }
    }
    gv_mineShaftMobs = UnitGroupEmpty();
    gv_zeusLetoLives = 2;
    gv_bossPing = c_invalidPingId;
    gv_episionCivilians = UnitGroupEmpty();
    gv_episilonMinis = UnitGroupEmpty();
    gv_tartarusCaptureObjective = c_invalidObjectiveId;
    gv_truckSelected = RegionFromId(41);
    gv_truckRoute = RandomInt(1, 2);
    gv_nydusWormGroup = UnitGroupEmpty();
    gv_apolloCivs = UnitGroupEmpty();
    gv_civRescueObjective = c_invalidObjectiveId;
    gv_blackOpsDroneTeam = UnitGroupEmpty();
    gv_easyCompany = UnitGroupEmpty();
    gv_queenMoveSpeed = 0.8;
    gv_queenBossPing = c_invalidPingId;
    gv_truckAttackers = UnitGroupEmpty();
    gv_drGunjan = UnitFromId(2635);
    gv_drTanaka = UnitFromId(2625);
    gv_ghostCompany = UnitGroupEmpty();
    gv_prowlerPing = c_invalidPingId;
    gv_bergmannEVACTimer = TimerCreate();
    gv_tanakaParagonPath = true;
    gv_persesTimer = TimerCreate();
    gv_sTTeam2HarassZombies = UnitGroupEmpty();
    gv_secTeamA = PlayerGroupEmpty();
    gv_secTeamB = PlayerGroupEmpty();
    gv_secTeamAMarines = UnitGroupEmpty();
    gv_secTeamBMarines = UnitGroupEmpty();
    gv_civilianPopulation = UnitGroupEmpty();
    gv_infectedCivilians = UnitGroupEmpty();
    gv_nazaraImages = UnitGroupEmpty();
    gv_chapterSelectionTimer = TimerCreate();
    gv_finalBossPoint = Point(40.3, 166.8);
    gv_laserDrones = UnitGroupEmpty();
    gv_survivalNydusGroup = UnitGroupEmpty();
    gv_survivalSpawn = RandomInt(1, 5);
    gv_creditsLeft = StringExternal("Param/Value/188383D6");
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_boughtItems[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_classSelectionDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        for (init_j = 0; init_j <= 18; init_j += 1) {
            gv_classSelectionDialogItem[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    gv_classLimitMultiplier = 1.0;
    for (init_i = 0; init_i <= gv_numberofPlayers; init_i += 1) {
        gv_playerNameLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= gv_numberofPlayers; init_i += 1) {
        gv_playerNameRankIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 6; init_j += 1) {
            for (init_k = 0; init_k <= gv_numberofPlayers; init_k += 1) {
                gv_dialogButtons[init_i][init_j][init_k] = c_invalidDialogControlId;
            }
        }
    }
    gv_saveButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= gv_numberofPlayers; init_i += 1) {
        gv_saveButtonEnabled[init_i] = true;
    }
    gv_labelMedalsButton = StringExternal("Param/Value/6E811AED");
    gv_labelStatsButton = StringExternal("Param/Value/8B3790A4");
    gv_labelTalentsButton = StringExternal("Param/Value/ABC09330");
    gv_teamUI = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusPlayerPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusLifeBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_teamStatusDebuffs[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_teamStatusDebuffsBackground[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusLifeBarLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusRankIcon[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusXP[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_teamStatusPortraitButton[init_i] = c_invalidDialogControlId;
    }
    gv_medalsDialogButton = c_invalidDialogControlId;
    gv_statsDialogButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_playerMedalsDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalLevel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalName[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalProgressBar[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_playerMedalsMedalProgressText[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerNextLevelProgressBar[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerNextLevelPromotionLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerNextXP[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerCashLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerCashAcquiredLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsStatsButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsStatsHeroImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatsPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerHeroImage[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerLivesLeft[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerDecreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerDecreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerIncreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerIncreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 5; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_statsPlayerStatLabel[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsPlayerStatAvailableLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_wModWeaponsModButton[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsWeaponModPanel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerDecreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerDecreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerIncreImage[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModPlayerIncreButton[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 7; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_wModWeaponPointsLabels[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_statsWeaponModPointsUnlockedLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_wModWeaponPointsAvailableLabel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_baseMarineReloadMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_baseMarineSwitchingMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_baseMarineWeightPointMultiplier[init_i] = 1.0;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_sonicTrap[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_armageddonBomb[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_synergyTimerEngineer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_synergyTimerGuardian[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_mindLinkedGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_barrageTime[init_i] = 8.0;
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_shellCounter[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_shellDecre[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_shellIncre[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_shellDialog[init_i] = c_invalidDialogId;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_mobileInfantryGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= gv_numberofPlayers; init_i += 1) {
        gv_talentTrees[init_i].lv_talentTree = c_invalidDialogId;
        for (init_i1 = 0; init_i1 <= gv_numberofTalents; init_i1 += 1) {
            gv_talentTrees[init_i].lv_talentButtons[init_i1].lv_talentText = c_invalidDialogControlId;
            gv_talentTrees[init_i].lv_talentButtons[init_i1].lv_borderIntital = c_invalidDialogControlId;
            gv_talentTrees[init_i].lv_talentButtons[init_i1].lv_borderFinal = c_invalidDialogControlId;
            gv_talentTrees[init_i].lv_talentButtons[init_i1].lv_button = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentsAvailable[init_i] = 1;
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentsAvailableDialog[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 8; init_j += 1) {
            gv_talentTreeImages[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_talentTree[init_i] = c_invalidDialogId;
    }
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
bool gf_ValidPlayer (int lp_player);
void gf_UIDialogCreation (int lp_height, int lp_width, int lp_offsetX, int lp_offsetY, int lp_anchor);
void gf_NOTDBanlist ();
bool gf_PlayerBanCheck (string lp_playerHandle);
bool gf_PlayerAutomaticBanCheck (int lp_player);
void gf_NOTDFormatTimerWindow (int lp_tw);
void gf_PlayerAlliances ();
void gf_LocationIntialization ();
void gf_MapNightMemoryLoad (int lp_player);
void gf_MemoryLoad (int lp_player);
void gf_SetDifficulty ();
void gf_SetPlayerLives ();
void gf_PlayerCountAdjustments ();
void gf_SQDifficultyAdjustments ();
void gf_SaveInitBoundaryCheck (int lp_playerNo);
void gf_AutoSaveLong ();
void gf_Save (int lp_playerNo, int lp_bankSize);
void gf_ResetPlayerData (int lp_playerNo, int lp_bankSize);
void gf_LoadAcknowledge (int lp_playerNo);
void gf_LoadBoundaryCheck (int lp_playerNo, int lp_bankSize);
void gf_LoadPlayerBankFile (int lp_playerNo, int lp_bankSize);
void gf_LoadPlayerBackupBankFile (int lp_playerNo);
void gf_Spectate (int lp_spectatorPlayer, int lp_spectatedPlayer);
void gf_CreateSpectatorDialog (int lp_spectatedPlayer);
void gf_UpdateSpectatorLabel (int lp_spectatedPlayer);
void gf_FlareAreaRecruit (point lp_flarePoint, fixed lp_flareRadius);
void gf_DisplaySquadInformation ();
fixed gf_CommandoReload (fixed lp_currentReload, unit lp_firingUnit);
void gf_ReloadMagazine (int lp_player, unit lp_reloadingUnit, int lp_reload, string lp_weapon);
void gf_AmmoUsage (int lp_player, unit lp_attackingUnit, int lp_reload, string lp_weapon);
void gf_ActivateDeactiveReload (int lp_player, unit lp_attackingUnit);
void gf_OutofAmmoMessage (unit lp_reloadingUnit);
void gf_LowAmmoMessage (unit lp_reloadingUnit);
void gf_ReloadCleanup (int lp_player, unit lp_reloadingUnit);
fixed gf_GetWeaponReload (int lp_player, unit lp_reloadingUnit, int lp_reload, string lp_weapon);
void gf_UpdateAmmoDialog (int lp_playerNumber);
void gf_BadlyInjured (unit lp_injuredUnit);
bool gf_AilmentResistanceCheck (unit lp_localUnitA);
void gf_RankUp (int lp_player);
void gf_CreatePredator (int lp_player, point lp_creationLocation);
void gf_DeathDisplay (string lp_damageEffect, int lp_playerNumber, unit lp_killer);
void gf_DeathRating (unit lp_deadMarine, int lp_playerNumber);
void gf_DeathCamera (region lp_deathLocation, unit lp_deadMarine, int lp_playerNumber);
void gf_DeathDialogDestruction (int lp_playerNumber);
void gf_SmartSpawnNOTD (string lp_spawningUnit, fixed lp_spawnRange);
void gf_WaveSpawnAroundMarines (string lp_spawningUnit, fixed lp_spawnRange, int lp_spawnAmount);
void gf_WaveSpawnAtRegion (string lp_spawningUnit, region lp_spawnRegion, int lp_spawnAmount);
void gf_ClearZombieWave ();
bool gf_ExpedCheck ();
void gf_WinUpdate (int lp_player, bool lp_nMSpeed, bool lp_speed);
void gf_VictoryBonusXP ();
void gf_MedalofHonorAward (int lp_medalNumber);
void gf_CombatActionAward (int lp_medalNumber);
void gf_LifeSavingAward (int lp_medalNumber);
void gf_BronzeStarAward (int lp_medalNumber);
void gf_DSMAward (int lp_medalNumber);
void gf_LegionOfMeritAward (int lp_medalNumber);
void gf_ExpeditionaryAward (int lp_medalNumber);
void gf_SilverStarAward (int lp_medalNumber);
void gf_NavyCrossAward (int lp_medalNumber);
void gf_SpeedBonusXP ();
void gf_GameOverInit ();
void gf_EndGameUINOTD ();
void gf_EndGameUISetNOTD ();
void gf_ZombieAIWorldEvents ();
region gf_GetRegionNotNearMarines (fixed lp_radius);
point gf_RandomPointinRegiononMap (region lp_enclosingRegion);
bool gf_PointNearUnitGroup (point lp_point, fixed lp_distance, unitgroup lp_group);
void gf_GameState ();
void gf_BlackMaskApplication ();
void gf_SporelingWave ();
void gf_RandomNydusPop ();
point gf_RandomPointatGroundHeight (region lp_region, fixed lp_groundHeight);
bool gf_CPDecayFactor ();
void gf_MarineSpeechNOTD (unit lp_speechUnit, text lp_speech);
void gf_CoordinateTextNOTD (point lp_displayPoint, text lp_speech);
void gf_RadioNOTD (text lp_speechUnit, text lp_speech);
void gf_TipNOTD (int lp_tipThreshold, text lp_tipText);
void gf_TipLocalNOTD (int lp_tipThreshold, int lp_tipPlayer, text lp_tipText);
void gf_CreateItemNOTD (string lp_itemToBeCreated, int lp_quantity);
void gf_CreateItemLocalNOTD (string lp_itemToBeCreated, int lp_quantity, region lp_deploymentArea);
void gf_UnifiedAwards (int lp_playerXP, fixed lp_marineXP, int lp_credits, int lp_karma, int lp_rating);
void gf_AwardPlayerXPNOTD (int lp_xPAwarded);
void gf_AwardRatingNOTD (int lp_ratingAwarded);
void gf_AwardKarmaNOTD (int lp_karmaAwarded);
void gf_AwardMarineXPNOTD (fixed lp_marineXPAwarded);
void gf_AwardCreditsNOTD (int lp_creditsAwarded);
void gf_SetMedalVariables (int lp_playerNo, int lp_medalID);
bool gf_PreCinematicProcessing ();
bool gf_PostCinematicProcessing ();
void gf_MineBossSeth ();
void gf_MineBossZeusLeto ();
void gf_BossBarCreation (int lp_race, unit lp_unit, int lp_usePing);
void gf_BossAfterAction ();
void gf_ECEnvironmentalChanges ();
void gf_ECC1ItemSpawn ();
void gf_ECC1AmbientSpawns ();
void gf_EpsilonMineMobs ();
void gf_TerminalUpdate (unit lp_terminalUnit, fixed lp_experienceChange);
void gf_LogEntryPlayback (int lp_logEntry);
void gf_TissueSampleComplete ();
void gf__1stBossAfterAction ();
void gf_MenoEvasion (int lp_range);
void gf_DropshipArrival ();
void gf_ECRecruitDropshipWaves ();
void gf_ECVeteranDropshipIntialWaves ();
void gf_ECVeteranDropshipSecondWaves ();
void gf_ECNydusSpawn (int lp_nydusSpawnQuantity);
void gf_ECNydusMobs ();
void gf_ECChapter2ItemSpawn ();
void gf_ErebosReturns ();
void gf_PowerGeneratorsComplete ();
void gf_BlackOpsAIInitiative ();
void gf_ECChapter3AirDrop ();
void gf_CharlieCompanyAI ();
void gf_BrokenArrow ();
void gf_KollersFireMission ();
void gf_QueenAI ();
void gf_ECEndCinematic ();
void gf_ACEnvironmentalChanges ();
void gf_ACAmbientSpawn ();
void gf_ACSecTeamAI ();
void gf_DemeterAI ();
void gf_TanakaTerminalSpeech ();
void gf_GasCameraCycle ();
void gf_ACRescueSharedEventsAction (unit lp_radioUnit);
void gf_ACClosingCinematic ();
void gf_STEnvironmentalChanges ();
void gf_DeimosMinionAI ();
void gf_STC2AmbientSpawns ();
void gf_BergmannFound (unit lp_rescueMarine);
void gf_BergmannAI (unit lp_rescueMarine);
void gf_ReactorMeltdownAmbience ();
void gf_DomeAuthorization (unit lp_hexUnit);
void gf_DomeFlash (unit lp_firstMarine, unit lp_secondMarine, region lp_region);
void gf_DomeTrigger (region lp_region1, region lp_region2, trigger lp_domeCompleted, unit lp_triggeringUnit);
void gf_HadesSporeDrops ();
void gf_SecTeamBEnding ();
void gf_SurvivalEnvironmentalChanges ();
void gf_SurvivalCronusAI (unit lp_cronus);
void gf_SurvivalWaveTitleDisplay (int lp_wave);
void gf_SurvivalNydusSpawn ();
void gf_SurvivalCreepDeposit ();
void gf_DisableAttackEquippingWeapons (int lp_inventoryOwner, string lp_equipment);
void gf_EquipmentUpdateMarineWeight (int lp_ownerOfEquipment);
unit gf_GiveMarineItem (int lp_player, string lp_item);
int gf_GetEnhancementSlots (unit lp_hero);
int gf_GetInventorySlots (unit lp_hero);
void gf_EquipmentUpdateMarineWeightPointPerItem (int lp_ownerofEquipment, unit lp_item);
void gf_HEAmmoBurnDamage (int lp_firingMarineOwner, unit lp_weapon);
void gf_PlayerColorChange (int lp_buyingPlayer);
void gf_CreatePet (int lp_owner, point lp_point);
bool gf_BOInsigniaBought (int lp_owner);
bool gf_KittensBought (int lp_owner);
void gf_UpgradeBOInsigniaRank (int lp_owner);
void gf_CreateKittens (int lp_owner);
bool gf_WeaponsModPointMax (int lp_playerNo);
void gf_RemoveBoughtItems (int lp_playerNo);
void gf_ShowCreditsLeft (int lp_player);
fixed gf_GD_Gap (int lp_hV);
fixed gf_GD_GridToReal2 (fixed lp_grid, int lp_hV, int lp_sizeOrPos);
int gf_GD_GridToInteger (fixed lp_grid, int lp_hV, int lp_sizeOrPos);
fixed gf_GD_RealToGrid (fixed lp_value, int lp_hV, int lp_sizeOrPos);
fixed gf_GD_IntegerToGrid (int lp_value, int lp_hV, int lp_sizeOrPos);
void gf_MoveDialogItemInGridRelative (int lp_item, playergroup lp_players, int lp_anchor, int lp_relativeItem, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY);
void gf_ClassSelectionUI ();
void gf_SurvivalClassSelectionUI ();
void gf_SetupClassSelection (int lp_player, int lp_classSlot, int lp_classLabel);
void gf_ClassPointBarCreation (int lp_parentDialog, int lp_parentDialogItem, int lp_classPoints);
bool gf_ClassSelectionDialog (int lp_player, int lp_dialogItem);
void gf_ClassCreationMaster (int lp_player, int lp_playerIndex);
void gf_RegisterMarineWithEvents (unit lp_marine);
void gf_AmmoUICreation (int lp_player);
void gf_CustomNameChange (int lp_selectingPlayer);
int gf_GetRandomRange (int lp_player);
void gf_EquipmentDialogCreation (int lp_player);
void gf_StartingBonuses (int lp_playerIndex);
void gf_ClassLimitCheck ();
int gf_GetClassCP (int lp_player, string lp_class);
int gf_GetClassColor (string lp_class);
void gf_HideAllDialogsForPlayer (int lp_player);
void gf_ShowHideMarineDialog (bool lp_showHideOption, int lp_dialogOwner, int lp_playertoHideFrom);
int gf_GetPreviousNextPlayer (int lp_currentPlayer, bool lp_isNext);
void gf_SetupPlayerDetailsUI (int lp_player, int lp_playerDetailsDialogFrame, text lp_dialogTitle, int lp_highlightDialogFrame, int lp_dialogControlCategory);
bool gf_TournamentWinner (string lp_playerHandle);
bool gf_Staff (string lp_playerHandle);
void gf_TeamStatusInitializePlayerPortrait (int lp_triggeringPlayer);
void gf_TeamStatusUnderAttackPortraitFlash (int lp_playerNo);
void gf_UIUpdatePortraitTooltip (int lp_triggeringPlayer);
void gf_UIUpdateLifeTooltip (int lp_triggeringPlayer);
void gf_UIUpdateXP (int lp_triggeringPlayer);
void gf_UIUpdateDebuffBar (int lp_triggeringPlayer);
void gf_UISetPlayerRankNameIconXP (int lp_triggeringPlayer);
void gf_UISetDoctorTitle (int lp_triggeringPlayer);
void gf_UIInitializeStartingCareerStats (int lp_player);
void gf_PlayerMedalsSetMedalItems (int lp_player);
void gf_StatsModSplashRadius (int lp_modLevel, int lp_modOwner);
void gf_StatsModWeightPoint (int lp_modLevel, int lp_modOwner);
void gf_StatsModAttackSpeed (int lp_modLevel, int lp_modOwner);
void gf_StatsModSwitchTime (int lp_modLevel, int lp_modOwner);
void gf_StatsModReloadTime (int lp_modLevel, int lp_modOwner);
void gf_StatsModDamage (int lp_modLevel, int lp_modOwner);
fixed gf_CalculateModBonusDamage (int lp_damageModLevel, fixed lp_damage);
void gf_StatsModRange (int lp_modLevel, int lp_modOwner);
void gf_StatsLoadPlayerWeaponModPoints (int lp_player);
void gf_StatsStorePlayerWeaponModPoints (int lp_playerNo);
void gf_StatsModPointRecalculate (int lp_playerNo);
int gf_StatsGetMaxModPoints (int lp_playerNo);
void gf_StatsInitializeWeaponMods (int lp_modIndex, int lp_playerNo);
void gf_StatsUpdateWeaponsModText (int lp_modSlot, int lp_playerNo);
void gf_StatsUpdateAllWeaponsModText (int lp_playerNo);
void gf_ModUpdateUnlockedModPointsText (int lp_player);
void gf_StatsUpdateAvailableWModPointsText (int lp_playerNo);
void gf_StatsUpdateAvailableStatsText (int lp_triggeringPlayer);
int gf_GetMedalStats (int lp_player);
int gf_GetCurrentAllocatedStats (int lp_player);
void gf_StatsUpdateAllStatsText (int lp_playerNo);
void gf_StatsStorePlayerStats (int lp_triggeringPlayer);
void gf_StatsLoadPlayerStats (int lp_player);
void gf_StatsUpdateHeroImage (int lp_triggeringPlayer);
void gf_StatsSetBehaviors (int lp_triggeringPlayer);
bool gf_StatsStatsChecking (int lp_playerNo);
void gf_StatsUpdateStatText (int lp_stat, int lp_statSlot, int lp_player);
void gf_StatsAddStat (int lp_playerNo, int lp_statSlot, string lp_statBehavior);
void gf_StatsRemoveStat (int lp_playerNo, int lp_statSlot, string lp_statBehavior);
void gf_CreateStatModPanels (int lp_player, int lp_statIndex, int lp_xOffset, int lp_yOffset);
void gf_CreateWeaponModPanels (int lp_player, int lp_statIndex, int lp_xOffset, int lp_yOffset);
bool gf_AttackerbehindTarget (unit lp_attacker, unit lp_target, fixed lp_rearAngle);
void gf_RestoreLeaverControl ();
void gf_SetCombatKnifeDamage (int lp_triggeringPlayer);
fixed gf_WeaponsProfReloadTimeFactor (int lp_triggPlayer);
void gf_ForwardObserverLaunchSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode);
void gf_ForwardObserverShellFlightSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode);
void gf_ForwardObserverCreateShellDialog (int lp_forwardObserverOwner);
void gf_ArtilleryCamaraShake (point lp_impactPoint);
void gf_ArtilleryStart (int lp_artillaryType, color lp_pingColor, point lp_targetPoint, unit lp_forwardObserver, int lp_player);
void gf_LevelUpTalentRifleman (int lp_itemNo, unit lp_triggUnit, int lp_trigPlayer);
void gf_LevelUpTalentMedic (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentAssault (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentMarksman (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentRecon (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentDemolitions (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentEngineer (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentCommando (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentPsiOps (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentTechnician (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentForwardObserver (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentFlamethrower (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentPathfinder (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_LevelUpTalentChemExpert (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer);
void gf_UpdateTalentText (int lp_itemNo, int lp_triggPlayer, int lp_itemLevel);
bool gf_TalentSelectionOption (int lp_itemNo, int lp_triggPlayer);
bool gf_TalentSelectionLeftTree (int lp_itemNo, int lp_triggPlayer, int lp_tier1Total);
bool gf_TalentSelectionRightTree (int lp_itemNo, int lp_triggPlayer, int lp_tier1Total);
void gf_UpdateTalentImage (int lp_itemNo, int lp_triggPlayer);
void gf_UpdateAllTalentImages (int lp_triggPlayer);
void gf_UpdateTalentAbility (int lp_itemNo, int lp_triggPlayer);
void gf_UpdateTalentSystem (int lp_itemNo, int lp_triggPlayer);
void gf_TalentTreeCreation (int lp_player);
void gf_TalentButton (int lp_panel, int lp_player, int lp_talentNumber);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ClassSelectOverride;
trigger gt_Dahlia;
trigger gt_ShowPathtoMilitaryBase;
trigger gt_NOTDInitialize;
trigger gt_PlayerIntialize;
trigger gt_Environment;
trigger gt_RegisterMarineEvents;
trigger gt_StorylineDialogCreation;
trigger gt_StorylineSelection;
trigger gt_ModeSelection;
trigger gt_FinaliseStorylineandMode;
trigger gt_ManualSave;
trigger gt_AutoSave;
trigger gt_MapInitLoadPlayer;
trigger gt_VoteKick;
trigger gt_Clear;
trigger gt_SquadStatsCheck;
trigger gt_CiviliansCheck;
trigger gt_TeamLocation;
trigger gt_ClassPointsCheck;
trigger gt_WinsCheck;
trigger gt_AmmoCheck;
trigger gt_NavyCross;
trigger gt_NightmareMode;
trigger gt_SpectatorModeType;
trigger gt_SpectatorModeClick;
trigger gt_SpectatorModeOff;
trigger gt_ManualReload;
trigger gt_AmmoUsage;
trigger gt_AmmoUsageL3;
trigger gt_ReceivesDamage;
trigger gt_L3Kills;
trigger gt_TeamKill;
trigger gt_KarmaBite;
trigger gt_LevelUp;
trigger gt_PetLevelUp;
trigger gt_PredatorDies;
trigger gt_Helium3AcquiredCredits;
trigger gt_DeadMarine;
trigger gt_PsiOpsDeath;
trigger gt_ImmortalRevive;
trigger gt_ZombieDeathEffects;
trigger gt_InfestorKilled;
trigger gt_InfestorAmbientSpawns;
trigger gt_InfestorAI;
trigger gt_ClearImmortalEnemies;
trigger gt_VictoryBonus;
trigger gt_ClassPointsUpdateVictoryOnly;
trigger gt_ReturntoEarth;
trigger gt_GameOverCheck;
trigger gt_NOTDCreditsRoll;
trigger gt_Barrels;
trigger gt_BarrelKills;
trigger gt_GateEnterAirlockMainGateOuter;
trigger gt_GateEnterAirlockMainGateInner;
trigger gt_NavyCrossCheck;
trigger gt_NightmareBonus;
trigger gt_ChapterEndMedicRatingBonus;
trigger gt_VetPugGameBonus;
trigger gt_AFKCheck;
trigger gt_PlayerLeavesGame;
trigger gt_PlayerQuitsGame;
trigger gt_MineShaft;
trigger gt_SethReinforcements;
trigger gt_ZeusLetoAI;
trigger gt_ZeusLetoRespawn;
trigger gt_ZeusLetoHardenedCarapace;
trigger gt_MineBossKill;
trigger gt_OM1EnterCommTower;
trigger gt_OM1DownloadCycle;
trigger gt_OM1DownloadComplete;
trigger gt_OM2aOgilvyFound;
trigger gt_OM2bIvanFound;
trigger gt_OM3ArmoryTurrets;
trigger gt_OM4ScrapyardSalvageInit;
trigger gt_OM4ScrapyardSalvageCycle;
trigger gt_OM4ChemicalSealComplete;
trigger gt_OM5RamirezKilled;
trigger gt_OM5RamirezsTaunts;
trigger gt_OM6CommTowerTransmission;
trigger gt_OM7CharlieSecTeam;
trigger gt_OM8EnterBridgeTerminal;
trigger gt_OM8BBQDead;
trigger gt_OM11Delta2;
trigger gt_OM12EnterPrisonerHoldingArea;
trigger gt_OM12Prisoner1JohnAnderton;
trigger gt_OM12Prisoner2FaricaAugustin;
trigger gt_ECInitialize;
trigger gt_ECW1EnterMine;
trigger gt_W1DataTransferProcess;
trigger gt_W1DataTransferComplete;
trigger gt_HuggerSpawns;
trigger gt_ECW2ScrapyardAmbush;
trigger gt_W2EnterMilitaryBase;
trigger gt_W3SampleCollectionProcess;
trigger gt_ECOptionalCamMissionStart;
trigger gt_OptionalSecurityCamerasCollection;
trigger gt_OptionalSecurityCamerasMobs;
trigger gt_ECW4AirlockRoadAmbush;
trigger gt_Boss1SpawnCinematic;
trigger gt_Boss1AI;
trigger gt_Boss1CarapaceHardens33;
trigger gt_Boss1HardCarapace;
trigger gt_Boss1OMCaptureTartarus;
trigger gt_Boss1OMIncapacitateSuccessful;
trigger gt_Boss1TartarusKilled;
trigger gt_Boss1bSpawn;
trigger gt_Boss1bFightMobs;
trigger gt_Boss1bRegenerationStarts;
trigger gt_Boss1EilethyiaKilled;
trigger gt_Wave4EnterAirlockGate2P;
trigger gt_Wave4EnterAirlockGate3P;
trigger gt_Wave4EnterAirlockBackupGate;
trigger gt_Wave4EnterAirlockNorthGate;
trigger gt_ECDelta1Transport;
trigger gt_ECEnterTruck;
trigger gt_ECCivReward;
trigger gt_ECZombieTime;
trigger gt_Wave5AirlockBattle;
trigger gt_Wave6Cocoons;
trigger gt_BroodMotherAmbush;
trigger gt_Boss2Spawn;
trigger gt_Boss2ErebosCinematic;
trigger gt_Boss2AI;
trigger gt_Boss2Killed;
trigger gt_Boss3SpawnMenoetes;
trigger gt_Boss3AI;
trigger gt_Boss3Killed;
trigger gt_Wave7DropshipEVACRecruit;
trigger gt_Wave7DropshipEVACVeteran;
trigger gt_ECNydusFirstBlood;
trigger gt_OptionalParrotKill;
trigger gt_OptionalEnterLabChapter1DrBergmann;
trigger gt_Chapter2Initialize;
trigger gt_Chapter2AmbientSpawns;
trigger gt_Chapter2ErebosAI;
trigger gt_Chapter2ErebosHPLifesteal;
trigger gt_Chapter2ErebosKilled;
trigger gt_OptionalPowerGeneratorRestart;
trigger gt_Wave8EnterScrapyardDoor;
trigger gt_Wave8BanelingSurprise;
trigger gt_Wave9DrBergmannEncounter;
trigger gt_Wave10OptionalCivilianRescueInitialization;
trigger gt_Wave10OptionalCivilianRescueSave;
trigger gt_Wave10OptionalCivilianEntersContainment;
trigger gt_W10DomeA;
trigger gt_W11DomeB;
trigger gt_W12DomeC;
trigger gt_W13DomeD;
trigger gt_Wave13BioDomeDMobs;
trigger gt_Wave13BioDomeDDestroyed;
trigger gt_Wave14Betrayal;
trigger gt_W14BlackOps;
trigger gt_BlackOpsAIGunshipSupport;
trigger gt_BlackOpsAIReactive;
trigger gt_Chapter3Initialize;
trigger gt_ECOPTIONALTruckEscortBegins;
trigger gt_ECOPTIONALTruckDestroyed;
trigger gt_ECOPTIONALTruckEvacSuccessful;
trigger gt_Chapter3QueenEngaged;
trigger gt_Chapter3MiniMarineEvasionAI;
trigger gt_Wave15RandomMobs;
trigger gt_Wave16RandomMobs;
trigger gt_Wave17RandomMobs;
trigger gt_Wave18Finale;
trigger gt_QueenShriek67HP;
trigger gt_QueenShriek33HP;
trigger gt_QueenChaseSequence;
trigger gt_QueenKilled;
trigger gt_ACInitialize;
trigger gt_ACDrTanakaDeath;
trigger gt_ACC1ItemSpawn;
trigger gt_ACW1Landing;
trigger gt_ACW1EnterArmory;
trigger gt_ACProwlerEnters;
trigger gt_ACProwlerDies;
trigger gt_ACW2DefendwithSecTeamArmory;
trigger gt_ACW2CharlieFind;
trigger gt_ACW3CharlieFound;
trigger gt_ACDemeterSpawn;
trigger gt_DemeterEngaged;
trigger gt_DemeterKilled;
trigger gt_ACW4MindlessHordes;
trigger gt_ACW5HeadtotheLab;
trigger gt_ACEnterScrapyardGate;
trigger gt_ACEnterLabNorthGate;
trigger gt_ACEnterSiteAlphaGate;
trigger gt_ACEnterApolloDockGate;
trigger gt_ACEnterApolloReactorGate;
trigger gt_ACBoss2SpawnCronus;
trigger gt_ACCronusKilled;
trigger gt_ACC2Initialize;
trigger gt_ACC2ItemSpawn;
trigger gt_TanakaTerminalSpeech;
trigger gt_ACW6GuardDrTanakaatLab;
trigger gt_ACW7GuardDrTanakaatLabPart2;
trigger gt_ACW8ZombieInvasion;
trigger gt_ACW9ChaseDrTanakaPoisonGas;
trigger gt_TanakaInjured;
trigger gt_ACW10ShowdownatEvacPoint;
trigger gt_ACW10TanakaIntercepted;
trigger gt_ACBoss3SpawnCerberus;
trigger gt_ACBoss3Killed;
trigger gt_ACC3Initialize;
trigger gt_ACW11EntertheAirlock;
trigger gt_ACW11TanakaChoiceDialog;
trigger gt_ACW12aVentilationShaft;
trigger gt_ACW12aVentControlCycle;
trigger gt_ACW12bComplianceNexus;
trigger gt_NexusKillTracking;
trigger gt_ACW13AhiveRun;
trigger gt_ACW14Delta1EVAC;
trigger gt_ACNakagawaRescueKenny;
trigger gt_ACNakagawaRescueErin;
trigger gt_ACNakagawaRescueNgoc;
trigger gt_ACNakagawaRescueSteph;
trigger gt_ACDelta1Onboarding;
trigger gt_ACIVAXSpawn;
trigger gt_ACIVAXMissleVision;
trigger gt_ACIVAXSatchelVisual;
trigger gt_ACIVAXSatchelUpgrade;
trigger gt_ACIVAXCloak;
trigger gt_ACIVAXCloakedMovement;
trigger gt_ACIVAXStunImmunity;
trigger gt_ACIVAXKilled;
trigger gt_ACW15HoldOut;
trigger gt_ACW16HoldOutPart2;
trigger gt_ACBoss4SpawnPerses;
trigger gt_ACBoss4AI;
trigger gt_ACBoss4PersesAI;
trigger gt_ACBoss4Killed;
trigger gt_STInitialize;
trigger gt_STTeam2DeathTraps;
trigger gt_STC1ItemSpawn;
trigger gt_STW1ApolloFinalHoldoutDeaths;
trigger gt_STW1HarassMobCycle;
trigger gt_STW1AgronWarning;
trigger gt_STW1EnterAirlockColonyGate;
trigger gt_STW1EnterAirlockEastGate;
trigger gt_STW2EnterArmoryDeimos;
trigger gt_STW1EnterAirlockNorthGate;
trigger gt_STW1HereWeGo;
trigger gt_STW1EnterEastWingGateRESCUE;
trigger gt_STInfectedCiviliansPeriodic;
trigger gt_LtShengAI;
trigger gt_STBoss1DeimosEngaged;
trigger gt_STBoss1DeimosAttackShock;
trigger gt_STBoss1DeimosKilled;
trigger gt_STW3NorthWestCocoonSurprise;
trigger gt_STW3ToTheCommTower;
trigger gt_STW4TotheScienceLab;
trigger gt_STW4EnterLab;
trigger gt_STW5LabCinematic;
trigger gt_STBoss2SpawnNazara;
trigger gt_STBoss2AI;
trigger gt_STBoss2Clone;
trigger gt_STBoss2Killed;
trigger gt_STW6LaserTime;
trigger gt_STW7LaserEscalates;
trigger gt_STW7HALShutdownInitiate;
trigger gt_STW7HALShutdownCycle;
trigger gt_STW7HALShutdownComplete;
trigger gt_STC2Initialize;
trigger gt_STC2ItemSpawn;
trigger gt_STW8ChaseBergmann;
trigger gt_STW8DrBergmannSearchPeriodic;
trigger gt_STW10BossSpawnApoptosis;
trigger gt_STW10ApotosisBloodWave;
trigger gt_STW10ApoptosisAttacked;
trigger gt_STW10ApoptosisKilled;
trigger gt_STW10IVAXMission;
trigger gt_STW11HiddenHandRevealed;
trigger gt_SecTeamChoice;
trigger gt_STC3aInitialize;
trigger gt_STW13CiviliansGoWild;
trigger gt_STC3aInfectedCiviliansPeriodic;
trigger gt_STC3aEngageCommunicationLines;
trigger gt_STW14BossSpawnHephaestus;
trigger gt_STW14BossAI;
trigger gt_STW14BossKilled;
trigger gt_STC3aReactorCoreTerminalsReached;
trigger gt_STC3aReactorDLCycle;
trigger gt_STC3aReactorDLComplete;
trigger gt_STW15Random3;
trigger gt_STW16ReactorSelfDestructBeginsESCAPE;
trigger gt_STW17EVAC;
trigger gt_STC3bInitialize;
trigger gt_STW13GetToTheThors;
trigger gt_STC3bThorPilot;
trigger gt_STC3bThorActivation;
trigger gt_STC3bPowerGeneratorRestart;
trigger gt_STC3bPowerGeneratorComplete;
trigger gt_STW14bBossSpawnAthena;
trigger gt_STW14bBossKilled;
trigger gt_STW15bBioDomeThreat;
trigger gt_SealDomeA;
trigger gt_SealDomeB;
trigger gt_SealDomeC;
trigger gt_SealDomeD;
trigger gt_DomesSealedandHadesLocated;
trigger gt_STW16bBossFightHades;
trigger gt_HadesTentaclesInfection;
trigger gt_STW16bBossBlackholePeriodic;
trigger gt_STW16bBossPhase1Death;
trigger gt_STW16bBossExecuted;
trigger gt_SurvivalInit;
trigger gt_SurvivalW15;
trigger gt_SurvivalW610;
trigger gt_SurvivalW1115;
trigger gt_SurvivalW1620;
trigger gt_SurvivalW2125;
trigger gt_SurvivalW2630;
trigger gt_SurvivalCronusAAI;
trigger gt_SurvivalCronusBAI;
trigger gt_SurvivalW3135;
trigger gt_SurvivalW3640;
trigger gt_ShowInventory;
trigger gt_OpenEquipment;
trigger gt_WeaponSwapDisable;
trigger gt_UpdateWeightItems;
trigger gt_ItemTransferBlock;
trigger gt_UnequipItem;
trigger gt_EquipItem;
trigger gt_ItemDropChangetoNeutral;
trigger gt_ItemGained;
trigger gt_DropMagazine;
trigger gt_MagazineUse;
trigger gt_StackMagsIntoBox;
trigger gt_UseBandagewithAbility;
trigger gt_RoadFlare;
trigger gt_BuyItem;
trigger gt_BuyStandardItem;
trigger gt_ClassCreation;
trigger gt_DialogButtonClicks;
trigger gt_CreateTeamStatusDialog;
trigger gt_SaveButtonClick;
trigger gt_TeamStatusClickedTalentTree;
trigger gt_PeriodicTeamUIUpdate;
trigger gt_CreateMedalsDialog;
trigger gt_ToggleMedalsDialog;
trigger gt_CreateStatsDialog;
trigger gt_ToggleStatsDialog;
trigger gt_ToggleStatsWeaponModsDialog;
trigger gt_ModifyHeroStats;
trigger gt_DisableStatAndModsModification;
trigger gt_Backstab;
trigger gt_CriticalStrike;
trigger gt_ConcentratedFireCriticalStrike;
trigger gt_HarvesterofSorrowCriticalStrike;
trigger gt_GrenadeLauncherFireUpEnd;
trigger gt_SonicTrapLimit5;
trigger gt_SonicTrapVision;
trigger gt_Anticipation;
trigger gt_Concentration;
trigger gt_ExecuteMovespeedBonus;
trigger gt_SupplyStation;
trigger gt_LaserDesignator;
trigger gt_Flare;
trigger gt_ReaperMK13Created;
trigger gt_RefresherResetCooldowns;
trigger gt_Sadist;
trigger gt_ArmageddonBombLimit3;
trigger gt_FieldNexusRevokeSharedVision;
trigger gt_FieldNexusShareVision;
trigger gt_Synergy;
trigger gt_X1Guardian;
trigger gt_TacticalNuke;
trigger gt_RavagingPhantom;
trigger gt_Inception;
trigger gt_MindLinkShareDamage;
trigger gt_MindLinkShareVision;
trigger gt_CancelMindLink;
trigger gt_HammeroftheGodsCamShake;
trigger gt_AMRounds;
trigger gt_MiniTKPenalty;
trigger gt_ModifyShellLimit;
trigger gt_FireMission;
trigger gt_ShockwaveBarrage;
trigger gt_NapalmBarrage;
trigger gt_MobileInfantry;
trigger gt_SurveillanceFlares;
trigger gt_GunshipBuddy;
trigger gt_GunshipSelection;
trigger gt_GunshipSupport;
trigger gt_GunshipOtherKeys;
trigger gt_GunshipImpactQuake;
trigger gt_HugRevealWhenActivated;
trigger gt_TalentSelection;
trigger gt_TalentTreeToggle;

//--------------------------------------------------------------------------------------------------
// Custom Script: README - Player Bank Data
//--------------------------------------------------------------------------------------------------
//Player Bank Data
//These stores player data
//The first index: 0-120 is data number
//All of 0-40 can be used
//The second index: player number
//e.g. Player 1 = 1
//Important: range of data must be of range 0 - 1000000
//For encryption

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
}

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
bool gf_ValidPlayer (int lp_player) {
    // Implementation
    return ((lp_player >= gv_indexBaseValue) && (lp_player <= gv_numberofPlayers));
}

void gf_UIDialogCreation (int lp_height, int lp_width, int lp_offsetX, int lp_offsetY, int lp_anchor) {
    // Implementation
    DialogCreate(lp_width, lp_height, lp_anchor, lp_offsetX, lp_offsetY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
}

trigger auto_gf_NOTDBanlist_Trigger = null;

void gf_NOTDBanlist () {
    if (auto_gf_NOTDBanlist_Trigger == null) {
        auto_gf_NOTDBanlist_Trigger = TriggerCreate("auto_gf_NOTDBanlist_TriggerFunc");
    }

    TriggerExecute(auto_gf_NOTDBanlist_Trigger, false, false);
}

bool auto_gf_NOTDBanlist_TriggerFunc (bool testConds, bool runActions) {
    playergroup auto19E39D56_g;
    int auto19E39D56_p;

    // Variable Declarations
    int lv_currentPlayer;
    bool lv_banActivated;

    // Variable Initialization
    lv_currentPlayer = 1;

    // Implementation
    auto19E39D56_g = gv_marineSquad; 
    auto19E39D56_p = 1;
    for ( ; auto19E39D56_p <= PlayerGroupCount(auto19E39D56_g) ; auto19E39D56_p += BoolToInt(lv_currentPlayer == PlayerGroupPlayer(auto19E39D56_g, auto19E39D56_p)) ) {
        lv_currentPlayer = PlayerGroupPlayer(auto19E39D56_g, auto19E39D56_p);
        if ((gf_PlayerBanCheck(PlayerHandle(lv_currentPlayer)) || gf_PlayerAutomaticBanCheck(lv_currentPlayer))) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaChat, ((StringExternal("Param/Value/EC7D13E1") + PlayerName(lv_currentPlayer)) + StringExternal("Param/Value/875FB6A5")));
            UIDisplayMessage(PlayerGroupSingle(lv_currentPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/E8E3F69D"));
            PlayerModifyPropertyInt(lv_currentPlayer, c_playerPropDamageTakenPercent, c_playerPropOperSetTo, 400);
            PlayerModifyPropertyInt(lv_currentPlayer, c_playerPropDamageDealtPercent, c_playerPropOperSetTo, 25);
            lv_banActivated = true;
            gv_playerBanned[lv_currentPlayer] = true;
            libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lv_currentPlayer], "Assets\\Textures\\nukeicon3b.dds", PlayerGroupAll());
        }

    }
    if ((lv_banActivated == true)) {
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    return true;
}

bool gf_PlayerBanCheck (string lp_playerHandle) {
    // Implementation
    IntLoopBegin(1, UserDataFieldValueCount("Banlist", "Player Handle"));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lp_playerHandle == UserDataGetString("Banlist", "Banlist", "Player Handle", IntLoopCurrent()))) {
            return true;
        }

    }
    IntLoopEnd();
    return false;
}

bool gf_PlayerAutomaticBanCheck (int lp_player) {
    // Implementation
    if ((gf_StatsGetMaxModPoints(lp_player) < 0)) {
        return true;
    }
    if ((gf_StatsGetMaxModPoints(lp_player) > 0) && (gv_playerLifeTimeCreditsAcquired[lp_player] < 10000)) {
        return true;
    }
    if ((gv_playerXP[lp_player] < 135000) && (gv_playerGamesPlayed[lp_player] > 4500)) {
        return true;
    }
    else if ((gv_playerXP[lp_player] >= 260000) && (gv_playerKarma[lp_player] < 1500)) {
        return true;
    }
    else if (((gv_playerXP[lp_player] / gv_playerGamesPlayed[lp_player]) >= 300)) {
        return true;
    }
    else if (((gv_playerXP[lp_player] / gv_playerGamesPlayed[lp_player]) < 30) && (gv_playerXP[lp_player] >= 40000)) {
        return true;
    }
    else if ((gf_BOInsigniaBought(lp_player) == true) && (gv_playerLifeTimeCreditsAcquired[lp_player] < 10000)) {
        return true;
    }
    else if (((gv_playerXP[lp_player] >= 160000) && (gv_playerXP[lp_player] <= 170000)) && (gv_playerGamesPlayed[lp_player] > 4500)) {
        return true;
    }
    else if ((gv_playerXP[lp_player] >= 600000)) {
        return true;
    }
    else if ((gv_playerXP[lp_player] < 3500) && (gv_combatActionRibbon[lp_player] > 50)) {
        return true;
    }
    else if ((gv_lifeSavingMedal[lp_player] > gv_combatActionRibbon[lp_player])) {
        return true;
    }
    else if ((gv_silverStar[lp_player] > gv_combatActionRibbon[lp_player])) {
        return true;
    }
    else if ((gf_StatsGetMaxModPoints(lp_player) > 20)) {
        return true;
    }
    return false;
}

void gf_NOTDFormatTimerWindow (int lp_tw) {
    // Implementation
    TimerWindowSetFixedHeight(lp_tw, 60);
    TimerWindowSetColor(lp_tw, c_timerWindowColorTime, Color(75.29, 75.29, 0.00), 0.0);
    TimerWindowSetStyle(lp_tw, c_timerWindowStyleHorizontalTitleTime, false);
    TimerWindowSetFormat(lp_tw, StringToText("<mintotal/>:<sec2/>"));
}

trigger auto_gf_PlayerAlliances_Trigger = null;

void gf_PlayerAlliances () {
    if (auto_gf_PlayerAlliances_Trigger == null) {
        auto_gf_PlayerAlliances_Trigger = TriggerCreate("auto_gf_PlayerAlliances_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayerAlliances_Trigger, false, false);
}

bool auto_gf_PlayerAlliances_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_allyOuterLoop;

    // Variable Initialization

    // Implementation
    PlayerSetColorIndex(13, 1, true);
    PlayerSetColorIndex(14, 1, true);
    PlayerSetColorIndex(9, 0, true);
    libNtve_gf_SetPlayerGroupAlliance(gv_marineSquad, libNtve_ge_AllianceSetting_Ally);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), 9, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    PlayerGroupLoopEnd();
    return true;
}

trigger auto_gf_LocationIntialization_Trigger = null;

void gf_LocationIntialization () {
    if (auto_gf_LocationIntialization_Trigger == null) {
        auto_gf_LocationIntialization_Trigger = TriggerCreate("auto_gf_LocationIntialization_TriggerFunc");
    }

    TriggerExecute(auto_gf_LocationIntialization_Trigger, false, false);
}

bool auto_gf_LocationIntialization_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    gv_localModelPing[1] = "PingNumeric1";
    gv_localModelPing[2] = "PingNumeric2";
    gv_localModelPing[3] = "PingNumeric3";
    gv_localModelPing[4] = "PingNumeric4";
    gv_localModelPing[5] = "PingNumeric5";
    gv_localModelPing[6] = "PingNumeric6";
    gv_localModelPing[7] = "PingNumeric7";
    gv_localModelPing[8] = "PingNumeric8";
    gv_militaryBaseSpawn[1] = RegionFromId(6);
    gv_militaryBaseSpawn[2] = RegionFromId(5);
    gv_militaryBaseSpawn[3] = RegionFromId(7);
    gv_militaryBaseSpawn[4] = RegionFromId(4);
    gv_militaryBaseSpawn[5] = RegionFromId(182);
    gv_mineSpawn[1] = RegionFromId(21);
    gv_mineSpawn[2] = RegionFromId(12);
    gv_mineSpawn[3] = RegionFromId(22);
    gv_reinforcementSpawn[1] = RegionFromId(128);
    gv_reinforcementSpawn[2] = RegionFromId(129);
    gv_reinforcementSpawn[3] = RegionFromId(130);
    gv_reinforcementSpawn[4] = RegionFromId(131);
    gv_reinforcementSpawn[5] = RegionFromId(132);
    gv_reinforcementSpawn[6] = RegionFromId(133);
    gv_reinforcementSpawnHeight[1] = 21.5;
    gv_bioDomeSpawn[1] = RegionFromId(79);
    gv_bioDomeSpawn[2] = RegionFromId(78);
    gv_bioDomeSpawn[3] = RegionFromId(80);
    gv_bioDomeSpawn[4] = RegionFromId(81);
    gv_secTeamMiniRally[1] = RegionFromId(170);
    gv_secTeamMiniRally[2] = RegionFromId(171);
    gv_secTeamMiniRally[3] = RegionFromId(172);
    gv_lZ[1] = RegionFromId(71);
    gv_lZ[2] = RegionFromId(72);
    gv_lZ[3] = RegionFromId(73);
    gv_lZ[4] = RegionFromId(74);
    gv_lZ[5] = RegionFromId(75);
    gv_lZ[6] = RegionFromId(76);
    gv_lZ[7] = RegionFromId(77);
    gv_charlie = UnitFromId(2211);
    gv_bioDome[1] = UnitFromId(728);
    gv_bioDome[2] = UnitFromId(160);
    gv_bioDome[3] = UnitFromId(765);
    gv_bioDome[4] = UnitFromId(619);
    gv_cityRescue[1] = RegionFromId(104);
    gv_cityRescue[2] = RegionFromId(105);
    gv_cityRescue[3] = RegionFromId(106);
    gv_cityRescue[4] = RegionFromId(107);
    gv_cityRescue[5] = RegionFromId(108);
    gv_cityRescue[6] = RegionFromId(109);
    gv_cityRescue[7] = RegionFromId(110);
    gv_cityRescue[8] = RegionFromId(111);
    gv_cityRescue[9] = RegionFromId(112);
    gv_tartarusCocoon = UnitFromId(2556);
    gv_civPool[0] = "Colonist2";
    gv_civPool[1] = "ColonistFemale2";
    gv_sensorTower[0] = UnitFromId(838);
    gv_sensorTower[1] = UnitFromId(839);
    gv_pathtoMilitaryBase[1] = PointFromId(942);
    gv_pathtoMilitaryBase[2] = PointFromId(1813);
    gv_pathtoMilitaryBase[3] = PointFromId(1814);
    gv_pathtoMilitaryBase[4] = PointFromId(1815);
    gv_pathtoMilitaryBase[5] = PointFromId(1816);
    gv_pathtoMilitaryBase[6] = PointFromId(1817);
    gv_pathtoMilitaryBase[7] = PointFromId(1818);
    gv_pathtoMilitaryBase[8] = PointFromId(1819);
    gv_pathtoMilitaryBase[9] = PointFromId(1820);
    gv_pathtoMilitaryBase[10] = PointFromId(1821);
    gv_pathtoMilitaryBase[11] = PointFromId(1822);
    gv_pathtoMilitaryBase[12] = PointFromId(1823);
    gv_pathtoMilitaryBase[13] = PointFromId(1831);
    gv_pathtoMilitaryBase[14] = PointFromId(1832);
    gv_pathtoMilitaryBase[15] = PointFromId(1841);
    gv_pathtoMilitaryBase[16] = PointFromId(1842);
    gv_pathtoMilitaryBase[17] = PointFromId(1844);
    gv_pathtoMilitaryBase[18] = PointFromId(1854);
    gv_nydusNetwork[1] = RegionFromId(57);
    gv_nydusNetwork[2] = RegionFromId(58);
    gv_nydusNetwork[3] = RegionFromId(59);
    gv_nydusNetwork[4] = RegionFromId(60);
    gv_nydusNetwork[5] = RegionFromId(61);
    gv_nydusNetwork[6] = RegionFromId(62);
    gv_nydusNetwork[7] = RegionFromId(63);
    gv_nydusNetwork[8] = RegionFromId(64);
    gv_nydusNetwork[9] = RegionFromId(65);
    gv_nydusNetwork[10] = RegionFromId(66);
    return true;
}

void gf_MapNightMemoryLoad (int lp_player) {
    // Variable Declarations
    int lv_search;

    // Variable Initialization
    lv_search = 1;

    // Implementation
    gv_playerXP[lp_player] = RandomInt(5000, 20000);
    gv_playerRating[lp_player] = RandomInt(1600, 2000);
    gv_playerGamesPlayed[lp_player] = gv_playerBankData[3][lp_player];
    if ((gv_totalPlayers > 1)) {
        gv_playerGamesPlayed[lp_player] = (gv_playerGamesPlayed[lp_player] + 1);
    }

    gv_playerMedicPlayed[lp_player] = gv_playerBankData[4][lp_player];
    gv_playerKarma[lp_player] = 2000;
    if ((gv_playerStats[lp_player] < 100000)) {
        gv_playerStats[lp_player] = 100000;
    }

    gv_playerCredits[lp_player] = 0;
    gv_playerLifeTimeCreditsAcquired[lp_player] = 0;
    if ((gv_playerLifeTimeCreditsAcquired[lp_player] < gv_playerCredits[lp_player])) {
        gv_playerLifeTimeCreditsAcquired[lp_player] = gv_playerCredits[lp_player];
    }

    if ((gv_playerCredits[lp_player] > 10000)) {
        gv_playerCredits[lp_player] = 10000;
    }

    gv_combatActionRibbon[lp_player] = RandomInt(0, 30);
    gv_lifeSavingMedal[lp_player] = RandomInt(0, 30);
    gv_bronzeStar[lp_player] = RandomInt(0, 30);
    gv_silverStar[lp_player] = RandomInt(0, 30);
    gv_legionOfMerit[lp_player] = RandomInt(0, 30);
    gv_distinguishedServiceMedal[lp_player] = RandomInt(0, 30);
    gv_navyCross[lp_player] = RandomInt(0, 30);
    gv_expeditionaryMedal[lp_player] = RandomInt(0, 30);
    gv_superiorServiceMedal[lp_player] = RandomInt(0, 30);
    gv_medalOfHonor[lp_player] = RandomInt(0, 30);
    gv_playerColorCode[lp_player] = gv_playerBankData[29][lp_player];
    gv_playerPetCode[lp_player] = gv_playerBankData[30][lp_player];
    gv_eCWinNormal[lp_player] = gv_playerBankData[31][lp_player];
    gv_eCWinNM[lp_player] = gv_playerBankData[32][lp_player];
    gv_aCWinNormal[lp_player] = gv_playerBankData[33][lp_player];
    gv_aCWinNM[lp_player] = gv_playerBankData[34][lp_player];
    gv_sTWinNormal[lp_player] = gv_playerBankData[35][lp_player];
    gv_sTWinNM[lp_player] = gv_playerBankData[36][lp_player];
    gv_survivalWin[lp_player] = gv_playerBankData[37][lp_player];
    gv_eCSpeed[lp_player] = gv_playerBankData[38][lp_player];
    gv_aCSpeed[lp_player] = gv_playerBankData[39][lp_player];
    gv_sTSpeed[lp_player] = gv_playerBankData[40][lp_player];
    gv_eCNMSpeed[lp_player] = gv_playerBankData[41][lp_player];
    gv_aCNMSpeed[lp_player] = gv_playerBankData[42][lp_player];
    gv_sTNMSpeed[lp_player] = gv_playerBankData[43][lp_player];
    gv_survivalWinNM[lp_player] = gv_playerBankData[44][lp_player];
    gv_bootCampComplete[lp_player] = gv_playerBankData[45][lp_player];
    if ((gv_playerRating[lp_player] < 500)) {
        gv_playerRating[lp_player] = 1500;
    }

    if ((gv_playerKarma[lp_player] < 500)) {
        gv_playerKarma[lp_player] = 1500;
    }

    gv_playerKarma[lp_player] = libNtve_gf_ArithmeticIntClamp(gv_playerKarma[lp_player], 1000, 2000);
    gv_playerRating[lp_player] = libNtve_gf_ArithmeticIntClamp(gv_playerRating[lp_player], 1000, 2500);
    while ((lv_search < 17) && (gv_playerXP[lp_player] >= UserDataGetInt("Ranks", UserDataInstance("Ranks", (lv_search + 1)), "XP Required", 1))) {
        lv_search += 1;
    }
    gv_playerRank[lp_player] = lv_search;
    lv_search = 1;
    while ((lv_search < 6) && (gv_playerXP[lp_player] >= UserDataGetInt("CreditAllocations", UserDataInstance("CreditAllocations", (lv_search + 1)), "Minimum XP", 1))) {
        lv_search += 1;
    }
    gv_playerCreditMultipler[lp_player] = UserDataInstance("CreditAllocations", lv_search);
    if ((gv_playerRank[lp_player] == 1)) {
        PlayerSetColorIndex(lp_player, 13, true);
    }

    IntLoopBegin(21, 28);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerBankData[IntLoopCurrent()][lp_player] > 1000)) {
            gv_playerBankData[IntLoopCurrent()][lp_player] = 0;
        }
        else if ((gv_playerBankData[IntLoopCurrent()][lp_player] > 750)) {
            gv_playerBankData[IntLoopCurrent()][lp_player] = 750;
        }
    }
    IntLoopEnd();
    gv_playerCP[lp_player].lv_rifleman = RandomInt(0, 30);
    gv_playerCP[lp_player].lv_medic = RandomInt(0, 30);
    gv_playerCP[lp_player].lv_assaultFlamerTech = RandomInt(0, 30);
    gv_playerCP[lp_player].lv_recon = RandomInt(0, 30);
    gv_playerCP[lp_player].lv_marksman = RandomInt(0, 30);
    gv_playerCP[lp_player].lv_demoFOChem = RandomInt(0, 30);
    gv_playerCP[lp_player].lv_engiePF = RandomInt(0, 30);
    gv_playerCP[lp_player].lv_commandoPO = RandomInt(0, 30);
    gf_SetCombatKnifeDamage(lp_player);
}

void gf_MemoryLoad (int lp_player) {
    // Variable Declarations
    int lv_search;

    // Variable Initialization
    lv_search = 1;

    // Implementation
    gv_playerXP[lp_player] = gv_playerBankData[1][lp_player];
    gv_playerRating[lp_player] = gv_playerBankData[2][lp_player];
    gv_playerGamesPlayed[lp_player] = gv_playerBankData[3][lp_player];
    if ((gv_totalPlayers > 1)) {
        gv_playerGamesPlayed[lp_player] = (gv_playerGamesPlayed[lp_player] + 1);
    }

    gv_playerMedicPlayed[lp_player] = gv_playerBankData[4][lp_player];
    gv_playerKarma[lp_player] = gv_playerBankData[5][lp_player];
    if ((gv_playerStats[lp_player] < 100000)) {
        gv_playerStats[lp_player] = 100000;
    }

    gv_playerCredits[lp_player] = gv_playerBankData[7][lp_player];
    gv_playerLifeTimeCreditsAcquired[lp_player] = gv_playerBankData[8][lp_player];
    if ((gv_playerLifeTimeCreditsAcquired[lp_player] < gv_playerCredits[lp_player])) {
        gv_playerLifeTimeCreditsAcquired[lp_player] = gv_playerCredits[lp_player];
    }

    if ((gv_playerCredits[lp_player] > 10000)) {
        gv_playerCredits[lp_player] = 10000;
    }

    gv_combatActionRibbon[lp_player] = gv_playerBankData[11][lp_player];
    gv_lifeSavingMedal[lp_player] = gv_playerBankData[12][lp_player];
    gv_bronzeStar[lp_player] = gv_playerBankData[13][lp_player];
    gv_silverStar[lp_player] = gv_playerBankData[14][lp_player];
    gv_legionOfMerit[lp_player] = gv_playerBankData[15][lp_player];
    gv_distinguishedServiceMedal[lp_player] = gv_playerBankData[16][lp_player];
    gv_navyCross[lp_player] = gv_playerBankData[17][lp_player];
    gv_expeditionaryMedal[lp_player] = gv_playerBankData[18][lp_player];
    gv_superiorServiceMedal[lp_player] = gv_playerBankData[19][lp_player];
    gv_medalOfHonor[lp_player] = gv_playerBankData[20][lp_player];
    gv_playerColorCode[lp_player] = gv_playerBankData[29][lp_player];
    gv_playerPetCode[lp_player] = gv_playerBankData[30][lp_player];
    gv_eCWinNormal[lp_player] = gv_playerBankData[31][lp_player];
    gv_eCWinNM[lp_player] = gv_playerBankData[32][lp_player];
    gv_aCWinNormal[lp_player] = gv_playerBankData[33][lp_player];
    gv_aCWinNM[lp_player] = gv_playerBankData[34][lp_player];
    gv_sTWinNormal[lp_player] = gv_playerBankData[35][lp_player];
    gv_sTWinNM[lp_player] = gv_playerBankData[36][lp_player];
    gv_survivalWin[lp_player] = gv_playerBankData[37][lp_player];
    gv_eCSpeed[lp_player] = gv_playerBankData[38][lp_player];
    gv_aCSpeed[lp_player] = gv_playerBankData[39][lp_player];
    gv_sTSpeed[lp_player] = gv_playerBankData[40][lp_player];
    gv_eCNMSpeed[lp_player] = gv_playerBankData[41][lp_player];
    gv_aCNMSpeed[lp_player] = gv_playerBankData[42][lp_player];
    gv_sTNMSpeed[lp_player] = gv_playerBankData[43][lp_player];
    gv_survivalWinNM[lp_player] = gv_playerBankData[44][lp_player];
    gv_bootCampComplete[lp_player] = gv_playerBankData[45][lp_player];
    if ((gv_playerRating[lp_player] < 500)) {
        gv_playerRating[lp_player] = 1500;
    }

    if ((gv_playerKarma[lp_player] < 500)) {
        gv_playerKarma[lp_player] = 1500;
    }

    gv_playerKarma[lp_player] = libNtve_gf_ArithmeticIntClamp(gv_playerKarma[lp_player], 1000, 2000);
    gv_playerRating[lp_player] = libNtve_gf_ArithmeticIntClamp(gv_playerRating[lp_player], 1000, 2500);
    while ((lv_search < 17) && (gv_playerXP[lp_player] >= UserDataGetInt("Ranks", UserDataInstance("Ranks", (lv_search + 1)), "XP Required", 1))) {
        lv_search += 1;
    }
    gv_playerRank[lp_player] = lv_search;
    lv_search = 1;
    while ((lv_search < 6) && (gv_playerXP[lp_player] >= UserDataGetInt("CreditAllocations", UserDataInstance("CreditAllocations", (lv_search + 1)), "Minimum XP", 1))) {
        lv_search += 1;
    }
    gv_playerCreditMultipler[lp_player] = UserDataInstance("CreditAllocations", lv_search);
    if ((gv_playerRank[lp_player] == 1)) {
        PlayerSetColorIndex(lp_player, 13, true);
    }

    IntLoopBegin(21, 28);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerBankData[IntLoopCurrent()][lp_player] > 1000)) {
            gv_playerBankData[IntLoopCurrent()][lp_player] = 0;
        }
        else if ((gv_playerBankData[IntLoopCurrent()][lp_player] > 750)) {
            gv_playerBankData[IntLoopCurrent()][lp_player] = 750;
        }
    }
    IntLoopEnd();
    gv_playerCP[lp_player].lv_rifleman = gv_playerBankData[21][lp_player];
    gv_playerCP[lp_player].lv_medic = gv_playerBankData[22][lp_player];
    gv_playerCP[lp_player].lv_assaultFlamerTech = gv_playerBankData[23][lp_player];
    gv_playerCP[lp_player].lv_recon = gv_playerBankData[24][lp_player];
    gv_playerCP[lp_player].lv_marksman = gv_playerBankData[25][lp_player];
    gv_playerCP[lp_player].lv_demoFOChem = gv_playerBankData[26][lp_player];
    gv_playerCP[lp_player].lv_engiePF = gv_playerBankData[27][lp_player];
    gv_playerCP[lp_player].lv_commandoPO = gv_playerBankData[28][lp_player];
    gf_SetCombatKnifeDamage(lp_player);
}

trigger auto_gf_SetDifficulty_Trigger = null;

void gf_SetDifficulty () {
    if (auto_gf_SetDifficulty_Trigger == null) {
        auto_gf_SetDifficulty_Trigger = TriggerCreate("auto_gf_SetDifficulty_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetDifficulty_Trigger, false, false);
}

bool auto_gf_SetDifficulty_TriggerFunc (bool testConds, bool runActions) {
    int autoB90D3843_val;

    // Variable Declarations
    int lv_xPPool;
    int lv_ratingPool;
    int lv_missionTimePanel;
    int lv_missionTimeLabel;

    // Variable Initialization
    lv_missionTimePanel = c_invalidDialogControlId;
    lv_missionTimeLabel = c_invalidDialogControlId;

    // Implementation
    if ((GameAttributeGameValue("2") == "0001")) {
        TriggerExecute(gt_NavyCross, true, false);
    }

    gf_SetPlayerLives();
    gf_PlayerCountAdjustments();
    gf_SQDifficultyAdjustments();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MissionTimePanel/BackgroundImage");
    lv_missionTimePanel = DialogControlLastCreated();
    autoB90D3843_val = gv_mode;
    if (autoB90D3843_val == 1) {
        if ((gv_noNewbie == true)) {
            gv_difficulty = UserDataGetText("Mode", "Veteran", "Mode Name", 1);
            libNtve_gf_SetDialogItemImage(lv_missionTimePanel, "Assets\\Textures\\ui_commandcard_protossframe_normal.dds", PlayerGroupAll());
        }
        else {
            gv_difficulty = UserDataGetText("Mode", "Recruit", "Mode Name", 1);
            libNtve_gf_SetDialogItemImage(lv_missionTimePanel, "Assets\\Textures\\ui_commandcard_terranframe_normal.dds", PlayerGroupAll());
            PlayerGroupLoopBegin(PlayerGroupAll());
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                PlayerSetDifficulty(PlayerGroupLoopCurrent(), 1);
            }
            PlayerGroupLoopEnd();
        }
    }
    else if (autoB90D3843_val == 2) {
        TriggerEnable(gt_InfestorAI, true);
        gv_nightmare = true;
        gv_difficulty = UserDataGetText("Mode", "Nightmare", "Mode Name", 1);
        libNtve_gf_SetDialogItemImage(lv_missionTimePanel, "Assets\\Textures\\ui_commandcard_redframe_normal.dds", PlayerGroupAll());
        PlayerGroupLoopBegin(PlayerGroupAll());
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            PlayerSetDifficulty(PlayerGroupLoopCurrent(), 3);
        }
        PlayerGroupLoopEnd();
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 75.0, 0.0);
        if ((gv_totalPlayers == 8) && (gv_squadRating >= 2300)) {
            gv_spawnFactor += 1;
        }

        if ((gv_totalPlayers >= 5)) {
            gv_difficultyHPScaling += 0.3;
        }
        else {
            gv_difficultyHPScaling += 0.2;
        }
    }
    else if (autoB90D3843_val == 3) {
        gv_difficulty = UserDataGetText("Mode", "Hell", "Mode Name", 1);
    }
    else {
    }
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ConsoleUIContainer/MissionTimePanel/TimeLabel");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), (UserDataGetText("Storyline", UserDataInstance("Storyline", gv_storyline), "Story Name", 1) + (gv_space + gv_difficulty)), PlayerGroupAll());
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyScalingHP", "Modification.VitalMaxFractionArray[" + IntToString(0) + "]", 13, FixedToString(gv_difficultyHPScaling, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyScalingHP", "Modification.VitalMaxFractionArray[" + IntToString(0) + "]", 14, FixedToString(gv_difficultyHPScaling, c_fixedPrecisionAny));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
    gf_DisplaySquadInformation();
    if ((GameIsTestMap(false) == false)) {
        gf_NOTDBanlist();
    }

    Wait(20.0, c_timeReal);
    TriggerEnable(gt_NightmareMode, false);
    return true;
}

void gf_SetPlayerLives () {
    playergroup auto784ED87A_g;
    int auto784ED87A_p;

    // Variable Declarations
    int lv_experiencePool;
    int lv_ratingPool;
    int lv_index;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    auto784ED87A_g = gv_marineSquad; 
    auto784ED87A_p = 1;
    for ( ; auto784ED87A_p <= PlayerGroupCount(auto784ED87A_g) ; auto784ED87A_p += BoolToInt(lv_index == PlayerGroupPlayer(auto784ED87A_g, auto784ED87A_p)) ) {
        lv_index = PlayerGroupPlayer(auto784ED87A_g, auto784ED87A_p);
        lv_experiencePool += gv_playerXP[lv_index];
        if ((gv_noNewbie == false) && (gv_playerRating[lv_index] > 1800)) {
            lv_ratingPool += 1800;
        }
        else {
            lv_ratingPool += gv_playerRating[lv_index];
        }
        if ((gv_playerRating[lv_index] >= 1900)) {
            gv_playerLives[lv_index] = 0;
        }
        else if ((gv_playerRating[lv_index] >= 1800)) {
            gv_playerLives[lv_index] = 1;
        }
        else if ((gv_playerRating[lv_index] >= 1700)) {
            gv_playerLives[lv_index] = 2;
        }
        else if ((gv_playerRating[lv_index] >= 1600)) {
            gv_playerLives[lv_index] = 3;
        }
        else if ((gv_playerXP[lv_index] < 100)) {
            gv_playerLives[lv_index] = 5;
        }
        libNtve_gf_SetDialogItemText(gv_statsPlayerLivesLeft[lv_index], IntToText(gv_playerLives[lv_index]), PlayerGroupAll());
    }
    gv_squadXP = (lv_experiencePool / gv_totalPlayers);
    gv_squadRating = (lv_ratingPool / gv_totalPlayers);
}

void gf_PlayerCountAdjustments () {
    int auto9839E8AD_val;

    // Implementation
    auto9839E8AD_val = gv_totalPlayers;
    if (auto9839E8AD_val == 8) {
        gv_spawnFactor = 4;
        gv_difficultyHPScaling += 0.1;

    }
    else if (auto9839E8AD_val == 7) {
        gv_spawnFactor = 4;
        gv_difficultyHPScaling += 0.05;

    }
    else if (auto9839E8AD_val == 6) {
        gv_spawnFactor = 4;
        gv_difficultyHPScaling -= 0.04;

    }
    else if (auto9839E8AD_val == 5) {
        gv_spawnFactor = 4;
        gv_difficultyHPScaling -= 0.08;

    }
    else if (auto9839E8AD_val == 4) {
        gv_spawnFactor = 3;
        gv_difficultyHPScaling -= 0.08;

    }
    else {
        gv_spawnFactor = 3;
        gv_difficultyHPScaling -= 0.12;
        if ((gv_totalPlayers <= 2)) {
            gv_magazineAdjustment -= 1;
            gv_difficultyHPScaling -= 0.1;
        }

    }
}

void gf_SQDifficultyAdjustments () {
    // Implementation
    if ((gv_squadRating >= 2400)) {
        gv_magazineAdjustment += 6;
        gv_spawnFactor += 4;
        gv_difficultyHPScaling += 0.95;
    }
    else if ((gv_squadRating >= 2300)) {
        gv_magazineAdjustment += 6;
        gv_spawnFactor += 4;
        gv_difficultyHPScaling += 0.9;
    }
    else if ((gv_squadRating >= 2200)) {
        gv_magazineAdjustment += 5;
        gv_spawnFactor += 3;
        gv_difficultyHPScaling += 0.8;
    }
    else if ((gv_squadRating >= 2100)) {
        gv_magazineAdjustment += 5;
        gv_spawnFactor += 3;
        gv_difficultyHPScaling += 0.75;
    }
    else if ((gv_squadRating >= 2000)) {
        gv_magazineAdjustment += 4;
        gv_spawnFactor += 2;
        gv_difficultyHPScaling += 0.65;
    }
    else if ((gv_squadRating >= 1900)) {
        gv_magazineAdjustment += 3;
        gv_spawnFactor += 2;
        gv_difficultyHPScaling += 0.5;
    }
    else if ((gv_squadRating >= 1800)) {
        gv_magazineAdjustment += 2;
        gv_spawnFactor += 2;
        gv_difficultyHPScaling += 0.4;
    }
    else if ((gv_squadRating >= 1650)) {
        gv_spawnFactor += 1;
        gv_difficultyHPScaling += 0.27;
    }
    else if ((gv_squadRating >= 1550) && (gv_noNewbie == true)) {
        gv_difficultyHPScaling += 0.18;
    }
    if ((gv_noNewbie == false)) {
        gv_difficultyHPScaling -= 0.12;
    }

}

trigger auto_gf_SaveInitBoundaryCheck_Trigger = null;
int auto_gf_SaveInitBoundaryCheck_lp_playerNo;

void gf_SaveInitBoundaryCheck (int lp_playerNo) {
    auto_gf_SaveInitBoundaryCheck_lp_playerNo = lp_playerNo;

    if (auto_gf_SaveInitBoundaryCheck_Trigger == null) {
        auto_gf_SaveInitBoundaryCheck_Trigger = TriggerCreate("auto_gf_SaveInitBoundaryCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_SaveInitBoundaryCheck_Trigger, false, false);
}

bool auto_gf_SaveInitBoundaryCheck_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_SaveInitBoundaryCheck_lp_playerNo;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = lp_playerNo;

    // Implementation
    gf_StatsStorePlayerStats(lv_index);
    gf_StatsStorePlayerWeaponModPoints(lv_index);
    gv_playerBankData[1][lv_index] = gv_playerXP[lv_index];
    gv_playerBankData[2][lv_index] = gv_playerRating[lv_index];
    gv_playerBankData[3][lv_index] = gv_playerGamesPlayed[lv_index];
    gv_playerBankData[4][lv_index] = gv_playerMedicPlayed[lv_index];
    gv_playerBankData[5][lv_index] = gv_playerKarma[lv_index];
    gv_playerBankData[6][lv_index] = gv_playerStats[lv_index];
    gv_playerBankData[7][lv_index] = gv_playerCredits[lv_index];
    if (((gv_playerBankData[7][lv_index] - gv_startingCredits[lv_index]) > 500) && (GameIsTestMap(false) == false)) {
        gv_playerBankData[7][lv_index] = (gv_startingCredits[lv_index] + 500);
    }

    if ((gv_playerBankData[7][lv_index] > 10000)) {
        gv_playerBankData[7][lv_index] = 10000;
    }

    gv_playerBankData[8][lv_index] = gv_playerLifeTimeCreditsAcquired[lv_index];
    gv_playerWeaponsMod2[lv_index] = ModI(gv_playerWeaponsMod2[lv_index], 100000);
    if (((ModI(lv_index, 10000) / 100) > 0) && (ModI(gv_playerPetCode[lv_index], 1000) < 100)) {
        gv_playerWeaponsMod2[lv_index] = lv_index;
    }

    if (((gv_playerWeaponsMod1[lv_index] <= 11111) || (gv_playerWeaponsMod1[lv_index] >= 99999))) {
        gv_playerWeaponsMod1[lv_index] = 55555;
    }

    gv_playerBankData[9][lv_index] = gv_playerWeaponsMod1[lv_index];
    gv_playerBankData[10][lv_index] = gv_playerWeaponsMod2[lv_index];
    gv_playerBankData[11][lv_index] = gv_combatActionRibbon[lv_index];
    gv_playerBankData[12][lv_index] = gv_lifeSavingMedal[lv_index];
    gv_playerBankData[13][lv_index] = gv_bronzeStar[lv_index];
    gv_playerBankData[14][lv_index] = gv_silverStar[lv_index];
    gv_playerBankData[15][lv_index] = gv_legionOfMerit[lv_index];
    gv_playerBankData[16][lv_index] = gv_distinguishedServiceMedal[lv_index];
    gv_playerBankData[17][lv_index] = gv_navyCross[lv_index];
    gv_playerBankData[18][lv_index] = gv_expeditionaryMedal[lv_index];
    gv_playerBankData[19][lv_index] = gv_superiorServiceMedal[lv_index];
    gv_playerBankData[20][lv_index] = gv_medalOfHonor[lv_index];
    gv_playerBankData[21][lv_index] = gv_playerCP[lv_index].lv_rifleman;
    gv_playerBankData[22][lv_index] = gv_playerCP[lv_index].lv_medic;
    gv_playerBankData[23][lv_index] = gv_playerCP[lv_index].lv_assaultFlamerTech;
    gv_playerBankData[24][lv_index] = gv_playerCP[lv_index].lv_recon;
    gv_playerBankData[25][lv_index] = gv_playerCP[lv_index].lv_marksman;
    gv_playerBankData[26][lv_index] = gv_playerCP[lv_index].lv_demoFOChem;
    gv_playerBankData[27][lv_index] = gv_playerCP[lv_index].lv_engiePF;
    gv_playerBankData[28][lv_index] = gv_playerCP[lv_index].lv_commandoPO;
    gv_playerBankData[29][lv_index] = gv_playerColorCode[lv_index];
    gv_playerBankData[30][lv_index] = gv_playerPetCode[lv_index];
    gv_playerBankData[31][lv_index] = gv_eCWinNormal[lv_index];
    gv_playerBankData[32][lv_index] = gv_eCWinNM[lv_index];
    gv_playerBankData[33][lv_index] = gv_aCWinNormal[lv_index];
    gv_playerBankData[34][lv_index] = gv_aCWinNM[lv_index];
    gv_playerBankData[35][lv_index] = gv_sTWinNormal[lv_index];
    gv_playerBankData[36][lv_index] = gv_sTWinNM[lv_index];
    gv_playerBankData[37][lv_index] = gv_survivalWin[lv_index];
    gv_playerBankData[38][lv_index] = gv_eCSpeed[lv_index];
    gv_playerBankData[39][lv_index] = gv_aCSpeed[lv_index];
    gv_playerBankData[40][lv_index] = gv_sTSpeed[lv_index];
    gv_playerBankData[41][lv_index] = gv_eCNMSpeed[lv_index];
    gv_playerBankData[42][lv_index] = gv_aCNMSpeed[lv_index];
    gv_playerBankData[43][lv_index] = gv_sTNMSpeed[lv_index];
    gv_playerBankData[44][lv_index] = gv_survivalWinNM[lv_index];
    gv_playerBankData[45][lv_index] = gv_bootCampComplete[lv_index];
    IntLoopBegin(0, gv_bankSize);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerBankData[IntLoopCurrent()][lv_index] > 1000000)) {
            gv_playerBankData[IntLoopCurrent()][lv_index] = 1000000;
        }

        if ((gv_playerBankData[IntLoopCurrent()][lv_index] < 0)) {
            gv_playerBankData[IntLoopCurrent()][lv_index] = 0;
        }

    }
    IntLoopEnd();
    if ((gv_playerBankData[2][lv_index] > 3000)) {
        gv_playerBankData[2][lv_index] = 3000;
    }

    return true;
}

trigger auto_gf_AutoSaveLong_Trigger = null;

void gf_AutoSaveLong () {
    if (auto_gf_AutoSaveLong_Trigger == null) {
        auto_gf_AutoSaveLong_Trigger = TriggerCreate("auto_gf_AutoSaveLong_TriggerFunc");
    }

    TriggerExecute(auto_gf_AutoSaveLong_Trigger, false, false);
}

bool auto_gf_AutoSaveLong_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        Wait(0.8, c_timeReal);
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && ((gv_playerXP[PlayerGroupLoopCurrent()] - gv_startingXP[PlayerGroupLoopCurrent()]) <= 350) && (gv_playerBanned[PlayerGroupLoopCurrent()] == false)) {
            gf_Save(PlayerGroupLoopCurrent(), gv_bankSize);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

trigger auto_gf_Save_Trigger = null;
int auto_gf_Save_lp_playerNo;
int auto_gf_Save_lp_bankSize;

void gf_Save (int lp_playerNo, int lp_bankSize) {
    auto_gf_Save_lp_playerNo = lp_playerNo;
    auto_gf_Save_lp_bankSize = lp_bankSize;

    if (auto_gf_Save_Trigger == null) {
        auto_gf_Save_Trigger = TriggerCreate("auto_gf_Save_TriggerFunc");
    }

    TriggerExecute(auto_gf_Save_Trigger, false, false);
}

bool auto_gf_Save_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_Save_lp_playerNo;
    int lp_bankSize = auto_gf_Save_lp_bankSize;

    int init_i;

    int auto59F2B628_ae;
    int auto59F2B628_ai;

    // Variable Declarations
    string[7] lv_tempString;
    int lv_iLocal;
    bank lv_activeBank;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_tempString[init_i] = "";
    }

    // Implementation
    gf_SaveInitBoundaryCheck(lp_playerNo);
    BankLoad("notdbank5", lp_playerNo);
    lv_activeBank = BankLastCreated();
    auto59F2B628_ae = 6;
    auto59F2B628_ai = 1;
    lv_iLocal = 1;
    for ( ; ( (auto59F2B628_ai >= 0 && lv_iLocal <= auto59F2B628_ae) || (auto59F2B628_ai <= 0 && lv_iLocal >= auto59F2B628_ae) ) ; lv_iLocal += auto59F2B628_ai ) {
        lib1_gf_StarcodeStartCode();
        IntLoopBegin((((lv_iLocal - 1) * 20) + 1), (20 * lv_iLocal));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lib1_gf_StarcodeStoreIntegerValue(gv_playerBankData[IntLoopCurrent()][lp_playerNo], 1000000);
        }
        IntLoopEnd();
        lv_tempString[lv_iLocal] = lib1_gf_StarcodeCompressString(lib1_gf_StarcodeGetCode());
        lv_tempString[lv_iLocal] = lib1_gf_StarcodeEncryptString(lv_tempString[lv_iLocal], "XaviAbilityEarendil");
        lv_tempString[lv_iLocal] = lib1_gf_StarcodeHashString(lv_tempString[lv_iLocal], 3);
        BankValueSetFromString(BankLastCreated(), IntToString(lv_iLocal), IntToString(lv_iLocal), lv_tempString[lv_iLocal]);
        Wait(0.05, c_timeGame);
    }
    BankSave(lv_activeBank);
    Wait(1.0, c_timeGame);
    BankLoad("NOTDBackup", lp_playerNo);
    lv_activeBank = BankLastCreated();
    IntLoopBegin(1, 6);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        BankValueSetFromString(BankLastCreated(), IntToString(IntLoopCurrent()), IntToString(IntLoopCurrent()), lv_tempString[IntLoopCurrent()]);
    }
    IntLoopEnd();
    BankSave(lv_activeBank);
    return true;
}

void gf_ResetPlayerData (int lp_playerNo, int lp_bankSize) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gv_playerBankData[IntLoopCurrent()][lp_playerNo] = 0;
    }
    IntLoopEnd();
    gv_playerBankData[9][lp_playerNo] = 55555;
    gv_playerBankData[10][lp_playerNo] = 55;
    IntLoopBegin(11, lp_bankSize);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gv_playerBankData[IntLoopCurrent()][lp_playerNo] = 0;
    }
    IntLoopEnd();
}

void gf_LoadAcknowledge (int lp_playerNo) {
    // Implementation
    UIDisplayMessage(PlayerGroupSingle(lp_playerNo), c_messageAreaDebug, (StringExternal("Param/Value/5B4DEB8C") + (PlayerName(lp_playerNo) + StringExternal("Param/Value/42731D11"))));
}

void gf_LoadBoundaryCheck (int lp_playerNo, int lp_bankSize) {
    // Implementation
    if (((gv_playerBankData[2][lp_playerNo] > 3000) || (gv_playerBankData[5][lp_playerNo] > 3000) || (gv_playerBankData[6][lp_playerNo] > 199999))) {
        gf_ResetPlayerData(lp_playerNo, lp_bankSize);
        gf_LoadAcknowledge(lp_playerNo);
    }

    if ((gf_StatsStatsChecking(lp_playerNo) == false)) {
        gv_playerBankData[6][lp_playerNo] = 100000;
    }

    if ((gv_playerBankData[7][lp_playerNo] > 10000)) {
        gv_playerBankData[7][lp_playerNo] = 10000;
    }

    gv_playerBankData[29][lp_playerNo] = ModI(gv_playerBankData[29][lp_playerNo], 100000);
    if (((ModI(gv_playerBankData[29][lp_playerNo], 100000) - ModI(gv_playerBankData[29][lp_playerNo], 10000)) != 10000)) {
        gv_playerBankData[8][lp_playerNo] = 0;
        gv_playerBankData[29][lp_playerNo] += 10000;
    }

    if (((ModI(gv_playerBankData[30][lp_playerNo], 100000) - ModI(gv_playerBankData[30][lp_playerNo], 10000)) != 20000)) {
        if ((ModI(gv_playerBankData[30][lp_playerNo], 1000) >= 100)) {
            gv_playerBankData[30][lp_playerNo] = 20108;
        }
        else {
            gv_playerBankData[30][lp_playerNo] = 20008;
        }
        gv_playerBankData[29][lp_playerNo] = 10000;
    }

}

trigger auto_gf_LoadPlayerBankFile_Trigger = null;
int auto_gf_LoadPlayerBankFile_lp_playerNo;
int auto_gf_LoadPlayerBankFile_lp_bankSize;

void gf_LoadPlayerBankFile (int lp_playerNo, int lp_bankSize) {
    auto_gf_LoadPlayerBankFile_lp_playerNo = lp_playerNo;
    auto_gf_LoadPlayerBankFile_lp_bankSize = lp_bankSize;

    if (auto_gf_LoadPlayerBankFile_Trigger == null) {
        auto_gf_LoadPlayerBankFile_Trigger = TriggerCreate("auto_gf_LoadPlayerBankFile_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadPlayerBankFile_Trigger, false, false);
}

bool auto_gf_LoadPlayerBankFile_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_LoadPlayerBankFile_lp_playerNo;
    int lp_bankSize = auto_gf_LoadPlayerBankFile_lp_bankSize;

    int autoF3822D72_ae;
    int autoF3822D72_ai;

    // Variable Declarations
    string lv_tempString;
    int lv_iLocal;

    // Variable Initialization
    lv_tempString = "";

    // Implementation
    if ((BankExists("notdbank5", lp_playerNo) == true)) {
        BankLoad("notdbank5", lp_playerNo);
    }
    else {
        gf_LoadAcknowledge(lp_playerNo);
        gf_ResetPlayerData(lp_playerNo, gv_bankSize);
        return true;
    }
    autoF3822D72_ae = 6;
    autoF3822D72_ai = 1;
    lv_iLocal = 1;
    for ( ; ( (autoF3822D72_ai >= 0 && lv_iLocal <= autoF3822D72_ae) || (autoF3822D72_ai <= 0 && lv_iLocal >= autoF3822D72_ae) ) ; lv_iLocal += autoF3822D72_ai ) {
        lv_tempString = BankValueGetAsString(BankLastCreated(), IntToString(lv_iLocal), IntToString(lv_iLocal));
        if ((lib1_gf_StarcodeValidateString(lv_tempString, 3) == true)) {
            lv_tempString = lib1_gf_StarcodeRemoveHashfromString(lv_tempString, 3);
            lv_tempString = lib1_gf_StarcodeDecryptString(lv_tempString, "XaviAbilityEarendil");
            lv_tempString = lib1_gf_StarcodeDecompressString(lv_tempString);
            lib1_gf_StarcodeSetCode(lv_tempString);
            IntLoopBegin(0, 19);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                gv_playerBankData[((20 * lv_iLocal) - IntLoopCurrent())][lp_playerNo] = lib1_gf_StarcodeGetIntegerValue(1000000);
            }
            IntLoopEnd();
        }
        else {
            gf_ResetPlayerData(lp_playerNo, gv_bankSize);
            gf_LoadAcknowledge(lp_playerNo);
            break;
        }
        Wait(0.001, c_timeGame);
    }
    gf_LoadBoundaryCheck(lp_playerNo, gv_bankSize);
    return true;
}

trigger auto_gf_LoadPlayerBackupBankFile_Trigger = null;
int auto_gf_LoadPlayerBackupBankFile_lp_playerNo;

void gf_LoadPlayerBackupBankFile (int lp_playerNo) {
    auto_gf_LoadPlayerBackupBankFile_lp_playerNo = lp_playerNo;

    if (auto_gf_LoadPlayerBackupBankFile_Trigger == null) {
        auto_gf_LoadPlayerBackupBankFile_Trigger = TriggerCreate("auto_gf_LoadPlayerBackupBankFile_TriggerFunc");
    }

    TriggerExecute(auto_gf_LoadPlayerBackupBankFile_Trigger, false, false);
}

bool auto_gf_LoadPlayerBackupBankFile_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_LoadPlayerBackupBankFile_lp_playerNo;

    int init_i;

    // Variable Declarations
    string[7] lv_tempString1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_tempString1[init_i] = "";
    }

    // Implementation
    BankLoad("notdbank5", lp_playerNo);
    IntLoopBegin(1, 6);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_tempString1[IntLoopCurrent()] = BankValueGetAsString(BankLastCreated(), IntToString(IntLoopCurrent()), IntToString(IntLoopCurrent()));
    }
    IntLoopEnd();
    BankLoad("NOTDBackup", lp_playerNo);
    IntLoopBegin(1, 6);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        BankValueSetFromString(BankLastCreated(), IntToString(IntLoopCurrent()), IntToString(IntLoopCurrent()), lv_tempString1[IntLoopCurrent()]);
    }
    IntLoopEnd();
    BankSave(BankLastCreated());
    return true;
}

trigger auto_gf_Spectate_Trigger = null;
int auto_gf_Spectate_lp_spectatorPlayer;
int auto_gf_Spectate_lp_spectatedPlayer;

void gf_Spectate (int lp_spectatorPlayer, int lp_spectatedPlayer) {
    auto_gf_Spectate_lp_spectatorPlayer = lp_spectatorPlayer;
    auto_gf_Spectate_lp_spectatedPlayer = lp_spectatedPlayer;

    if (auto_gf_Spectate_Trigger == null) {
        auto_gf_Spectate_Trigger = TriggerCreate("auto_gf_Spectate_TriggerFunc");
    }

    TriggerExecute(auto_gf_Spectate_Trigger, false, false);
}

bool auto_gf_Spectate_TriggerFunc (bool testConds, bool runActions) {
    int lp_spectatorPlayer = auto_gf_Spectate_lp_spectatorPlayer;
    int lp_spectatedPlayer = auto_gf_Spectate_lp_spectatedPlayer;

    // Variable Declarations
    int lv_spectatedIndex;
    int lv_spectatorIndex;

    // Variable Initialization
    lv_spectatedIndex = lp_spectatedPlayer;
    lv_spectatorIndex = lp_spectatorPlayer;

    // Implementation
    gv_spectatorModeOn[lp_spectatorPlayer] = true;
    if ((gv_spectatedBefore[lv_spectatedIndex] == false)) {
        gv_spectatedBefore[lv_spectatedIndex] = true;
        gf_CreateSpectatorDialog(lv_spectatedIndex);
    }

    if ((UnitIsAlive(gv_marineHero[lv_spectatedIndex]) == true)) {
        CameraFollowUnitGroup(lp_spectatorPlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_marineHero[lv_spectatedIndex]), true, false);
    }
    else {
        CameraFollowUnitGroup(lp_spectatorPlayer, libNtve_gf_ConvertUnitToUnitGroup(gv_playerPet[lv_spectatedIndex]), true, false);
    }
    CameraSetValue(lp_spectatorPlayer, c_cameraValueDistance, 7.0, 2.5, -1, 10);
    CameraSetValue(lp_spectatorPlayer, c_cameraValuePitch, 40.0, 2.5, -1, 10);
    CameraSetValue(lp_spectatorPlayer, c_cameraValueFieldOfView, 75.0, 2.5, -1, 10);
    CameraSetValue(lp_spectatorPlayer, c_cameraValueFarClip, 45.0, 0.0, -1, 10);
    CameraLockInput(lp_spectatorPlayer, true);
    SoundPlay(SoundLink("Ghost_CloakOn", -1), PlayerGroupSingle(lp_spectatorPlayer), 35.0, 0.0);
    if ((gv_gameUIHidden[lv_spectatorIndex] == false)) {
        libNtve_gf_HideGameUI(false, PlayerGroupSingle(lp_spectatorPlayer));
        gv_gameUIHidden[lv_spectatorIndex] = true;
    }

    DialogSetVisible(gv_spectatedDialog[lv_spectatedIndex], PlayerGroupSingle(lp_spectatorPlayer), true);
    gv_spectated[lv_spectatedIndex] = true;
    while (true) {
        Wait(1.0, c_timeGame);
        if (((gv_spectatorModeOn[lv_spectatorIndex] == false) || ((UnitIsAlive(gv_marineHero[lv_spectatedIndex]) == false) && (UnitIsAlive(gv_playerPet[lv_spectatedIndex]) == false)))) {
            gv_spectatorModeOn[lv_spectatorIndex] = false;
            CameraApplyInfo(lp_spectatorPlayer, CameraInfoDefault(), 0.0, -1, 10, true);
            CameraSetValue(lp_spectatorPlayer, c_cameraValueDistance, 32.0, 0.0, -1, 10);
            CameraFollowUnitGroup(lp_spectatorPlayer, gv_marines, false, false);
            CameraPan(lp_spectatorPlayer, libNtve_gf_CenterOfUnitGroup(gv_marines), 0.0, -1, 10, false);
            DialogSetVisible(gv_spectatedDialog[lv_spectatedIndex], PlayerGroupSingle(lp_spectatorPlayer), false);
            if ((gv_gameUIHidden[lp_spectatorPlayer] == true)) {
                libNtve_gf_HideGameUI(true, PlayerGroupSingle(lp_spectatorPlayer));
                gv_gameUIHidden[lp_spectatorPlayer] = false;
            }

            CameraLockInput(lp_spectatorPlayer, false);
            gv_spectated[lp_spectatedPlayer] = false;
            break;
        }

        if ((UnitIsAlive(gv_marineHero[lv_spectatedIndex]) == true) && (gv_spectatorModeOn[lv_spectatorIndex] == true)) {
            CameraSetValue(lp_spectatorPlayer, c_cameraValueYaw, UnitGetFacing(gv_marineHero[lv_spectatedIndex]), 5.0, -1, 10);
        }
        else if ((UnitIsAlive(gv_playerPet[lv_spectatedIndex]) == true) && (gv_spectatorModeOn[lv_spectatorIndex] == true)) {
            CameraSetValue(lp_spectatorPlayer, c_cameraValueYaw, UnitGetFacing(gv_playerPet[lv_spectatedIndex]), 5.0, -1, 10);
        }
    }
    return true;
}

trigger auto_gf_CreateSpectatorDialog_Trigger = null;
int auto_gf_CreateSpectatorDialog_lp_spectatedPlayer;

void gf_CreateSpectatorDialog (int lp_spectatedPlayer) {
    auto_gf_CreateSpectatorDialog_lp_spectatedPlayer = lp_spectatedPlayer;

    if (auto_gf_CreateSpectatorDialog_Trigger == null) {
        auto_gf_CreateSpectatorDialog_Trigger = TriggerCreate("auto_gf_CreateSpectatorDialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateSpectatorDialog_Trigger, false, false);
}

bool auto_gf_CreateSpectatorDialog_TriggerFunc (bool testConds, bool runActions) {
    int lp_spectatedPlayer = auto_gf_CreateSpectatorDialog_lp_spectatedPlayer;

    // Implementation
    DialogCreate(500, 600, c_anchorTopLeft, 50, 100, true);
    gv_spectatedDialog[lp_spectatedPlayer] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 500, 600, c_anchorTopLeft, 0, 0, StringToText(""), Color(100,100,100), false, 2.0);
    gv_spectatedLabel[lp_spectatedPlayer] = DialogControlLastCreated();
    return true;
}

trigger auto_gf_UpdateSpectatorLabel_Trigger = null;
int auto_gf_UpdateSpectatorLabel_lp_spectatedPlayer;

void gf_UpdateSpectatorLabel (int lp_spectatedPlayer) {
    auto_gf_UpdateSpectatorLabel_lp_spectatedPlayer = lp_spectatedPlayer;

    if (auto_gf_UpdateSpectatorLabel_Trigger == null) {
        auto_gf_UpdateSpectatorLabel_Trigger = TriggerCreate("auto_gf_UpdateSpectatorLabel_TriggerFunc");
    }

    TriggerExecute(auto_gf_UpdateSpectatorLabel_Trigger, false, false);
}

bool auto_gf_UpdateSpectatorLabel_TriggerFunc (bool testConds, bool runActions) {
    int lp_spectatedPlayer = auto_gf_UpdateSpectatorLabel_lp_spectatedPlayer;

    // Variable Declarations
    text lv_temp;
    int lv_ratingInt;
    text lv_ratingText;
    int lv_xPInt;
    text lv_xPText;
    text lv_tooltip;

    // Variable Initialization
    lv_ratingInt = (gv_playerRating[lp_spectatedPlayer] - gv_startingRating[lp_spectatedPlayer]);
    lv_xPInt = (gv_playerXP[lp_spectatedPlayer] - gv_startingXP[lp_spectatedPlayer]);

    // Implementation
    lv_ratingText = IntToText(lv_ratingInt);
    if ((lv_ratingInt >= 0)) {
        lv_ratingText = (StringExternal("Param/Value/8F9ED0A1") + lv_ratingText);
    }

    lv_xPText = IntToText(lv_xPInt);
    if ((lv_xPInt >= 0)) {
        lv_xPText = (StringExternal("Param/Value/0567028D") + lv_xPText);
    }

    lv_tooltip = (StringExternal("Param/Value/8650EF40") + PlayerName(lp_spectatedPlayer));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/E07B1374"));
    TextExpressionSetToken("Param/Expression/4FB8FD67", "A", UnitTypeGetName(UnitGetType(gv_marineHero[lp_spectatedPlayer])));
    lv_temp = TextExpressionAssemble("Param/Expression/4FB8FD67");
    lv_tooltip = (lv_tooltip + lv_temp);
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/2C0576F3"));
    lv_tooltip = (lv_tooltip + IntToText(gv_playerRating[lp_spectatedPlayer]));
    lv_tooltip = (lv_tooltip + (StringExternal("Param/Value/9E94AC95") + (lv_ratingText + StringExternal("Param/Value/4505387E"))));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/835B7760"));
    lv_tooltip = (lv_tooltip + IntToText(gv_playerXP[lp_spectatedPlayer]));
    lv_tooltip = (lv_tooltip + (StringExternal("Param/Value/0BA97876") + (lv_xPText + StringExternal("Param/Value/CC209D9A"))));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/8BEB60C9"));
    lv_tooltip = (lv_tooltip + IntToText(gv_playerGamesPlayed[lp_spectatedPlayer]));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/672C2DC4"));
    lv_tooltip = (lv_tooltip + IntToText(libNtve_gf_UnitGetPropertyKills(gv_marineHero[lp_spectatedPlayer], c_unitPropCurrent)));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/71DA941A"));
    lv_tooltip = (lv_tooltip + FixedToText(gv_hitsTaken[lp_spectatedPlayer], 0));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/75805F30"));
    lv_tooltip = (lv_tooltip + FixedToText(gv_playerDamageTaken[lp_spectatedPlayer], 0));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/67897E79"));
    lv_tooltip = (lv_tooltip + IntToText(gv_marineMags[lp_spectatedPlayer]));
    lv_tooltip = (lv_tooltip + StringExternal("Param/Value/2B103DA8"));
    libNtve_gf_SetDialogItemText(gv_spectatedLabel[lp_spectatedPlayer], lv_tooltip, PlayerGroupAll());
    return true;
}

trigger auto_gf_FlareAreaRecruit_Trigger = null;
point auto_gf_FlareAreaRecruit_lp_flarePoint;
fixed auto_gf_FlareAreaRecruit_lp_flareRadius;

void gf_FlareAreaRecruit (point lp_flarePoint, fixed lp_flareRadius) {
    auto_gf_FlareAreaRecruit_lp_flarePoint = lp_flarePoint;
    auto_gf_FlareAreaRecruit_lp_flareRadius = lp_flareRadius;

    if (auto_gf_FlareAreaRecruit_Trigger == null) {
        auto_gf_FlareAreaRecruit_Trigger = TriggerCreate("auto_gf_FlareAreaRecruit_TriggerFunc");
    }

    TriggerExecute(auto_gf_FlareAreaRecruit_Trigger, false, false);
}

bool auto_gf_FlareAreaRecruit_TriggerFunc (bool testConds, bool runActions) {
    point lp_flarePoint = auto_gf_FlareAreaRecruit_lp_flarePoint;
    fixed lp_flareRadius = auto_gf_FlareAreaRecruit_lp_flareRadius;

    // Variable Declarations
    unit lv_roadFlare;

    // Variable Initialization

    // Implementation
    if ((gv_noNewbie == false)) {
        libNtve_gf_UnitCreateFacingPoint(1, "RoadFlareFire", 0, 9, lp_flarePoint, lp_flarePoint);
    }

    return true;
}

void gf_DisplaySquadInformation () {
    // Implementation
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((gv_infoPanelHeroRank + (UserDataGetText("SquadInformation", "Squad Rating", "Information", 1) + IntToText(gv_squadRating))) + gv_endStyling));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((gv_infoPanelHeroRank + (UserDataGetText("SquadInformation", "Squad XP", "Information", 1) + IntToText(gv_squadXP))) + gv_endStyling));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((gv_infoPanelHeroRank + gv_difficulty) + gv_endStyling));
}

fixed gf_CommandoReload (fixed lp_currentReload, unit lp_firingUnit) {
    // Implementation
    if ((UnitGetType(lp_firingUnit) == "Commando") && ((UnitHasBehavior(lp_firingUnit, "AdrenalineLevel1") == true) || (UnitHasBehavior(lp_firingUnit, "AdrenalineLevel2") == true) || (UnitHasBehavior(lp_firingUnit, "AdrenalineLevel3") == true)) && ((UnitHasBehavior(lp_firingUnit, "SurgicalStrikeLevel1") == true) || (UnitHasBehavior(lp_firingUnit, "SurgicalStrikeLevel2") == true) || (UnitHasBehavior(lp_firingUnit, "SurgicalStrikeLevel3") == true))) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(lp_firingUnit)), c_messageAreaDebug, StringExternal("Param/Value/4FDD6E8D"));
        return (lp_currentReload / 2.0);
    }

    return lp_currentReload;
}

void gf_ReloadMagazine (int lp_player, unit lp_reloadingUnit, int lp_reload, string lp_weapon) {
    int auto8B2AE1C2_val;

    // Variable Declarations
    int lv_assaultAmmo;
    int lv_baseAmmo;
    int lv_hasHighCapacityMagazine;
    int lv_index;
    fixed lv_reloadTime;

    // Variable Initialization

    // Implementation
    gv_reloading[lp_player] = true;
    UnitAbilityEnable(lp_reloadingUnit, "Reload", false);
    gv_marineRounds[lp_player] = 0;
    if ((UnitHasBehavior(lp_reloadingUnit, "HighCapacityClip") == true)) {
        lv_hasHighCapacityMagazine = 1;
    }

    if ((UnitGetType(lp_reloadingUnit) == "TychusChaingun")) {
        if ((gv_marineMags[lp_player] >= (gv_talentLevel[3][lp_player] + (lv_hasHighCapacityMagazine + 1)))) {
            lv_assaultAmmo = (gv_talentLevel[3][lp_player] + (lv_hasHighCapacityMagazine + 1));
            gv_marineMags[lp_player] -= lv_assaultAmmo;
        }
        else {
            lv_assaultAmmo = gv_marineMags[lp_player];
            gv_marineMags[lp_player] = 0;
        }
    }
    else {
        if ((gv_marineMags[lp_player] >= (lv_hasHighCapacityMagazine + 1))) {
            lv_baseAmmo = (lv_hasHighCapacityMagazine + 1);
            gv_marineMags[lp_player] -= lv_baseAmmo;
        }
        else {
            lv_baseAmmo = gv_marineMags[lp_player];
            gv_marineMags[lp_player] = 0;
        }
    }
    gf_EquipmentUpdateMarineWeight(lp_player);
    gf_UpdateAmmoDialog(lp_player);
    lv_reloadTime = gf_GetWeaponReload(lp_player, lp_reloadingUnit, lp_reload, lp_weapon);
    CatalogFieldValueSet(c_gameCatalogBehavior, "Reload", "Duration", lp_player, FixedToString((lv_reloadTime * 1.4), c_fixedPrecisionAny));
    UnitBehaviorAddPlayer(lp_reloadingUnit, "Reload", lp_player, 1);
    auto8B2AE1C2_val = lp_reload;
    if (auto8B2AE1C2_val == ge_ReloadType_Manual) {
        ActorScopeSend(ActorScopeFromUnit(lp_reloadingUnit), "Signal Manual");
        Wait((lv_reloadTime - 0.1), c_timeReal);
    }
    else if (auto8B2AE1C2_val == ge_ReloadType_Perfect) {
        ActorScopeSend(ActorScopeFromUnit(lp_reloadingUnit), "Signal Perfect");
        Wait((lv_reloadTime - 0.1), c_timeReal);
    }
    else if (auto8B2AE1C2_val == ge_ReloadType_Automatic) {
        Wait((lv_reloadTime - 0.4), c_timeReal);
    }
    else {
    }
    gf_ReloadCleanup(lp_player, lp_reloadingUnit);
    if ((UnitGetType(lp_reloadingUnit) == "TychusChaingun")) {
        gv_marineRounds[lp_player] = (gv_playerRoundLimit[lp_player] * lv_assaultAmmo);
        gv_magazinesUsed[lp_player] += lv_assaultAmmo;
    }
    else {
        gv_marineRounds[lp_player] = (gv_playerRoundLimit[lp_player] * lv_baseAmmo);
        gv_magazinesUsed[lp_player] += lv_baseAmmo;
    }
    gf_UpdateAmmoDialog(lp_player);
    UnitBehaviorRemovePlayer(lp_reloadingUnit, "InsufficientAmmo", lp_player, 1);
    gv_reloading[lp_player] = false;
}

void gf_AmmoUsage (int lp_player, unit lp_attackingUnit, int lp_reload, string lp_weapon) {
    // Implementation
    gf_UpdateAmmoDialog(lp_player);
    gf_ActivateDeactiveReload(lp_player, lp_attackingUnit);
    Wait(1.0, c_timeGame);
    if ((gv_marineRounds[lp_player] <= 0) && (gv_reloading[lp_player] == false)) {
        if ((gv_marineMags[lp_player] <= 0)) {
            UnitBehaviorAddPlayer(lp_attackingUnit, "InsufficientAmmo", lp_player, 1);
            gf_OutofAmmoMessage(lp_attackingUnit);
        }
        else {
            UnitIssueOrder(lp_attackingUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            gf_ReloadMagazine(lp_player, lp_attackingUnit, lp_reload, lp_weapon);
        }
    }
    else {
        if (((gv_marineMags[lp_player] >= 1) && (gv_marineMags[lp_player] <= 3)) && (UnitIsAlive(lp_attackingUnit) == true)) {
            gf_LowAmmoMessage(lp_attackingUnit);
        }

    }
}

trigger auto_gf_ActivateDeactiveReload_Trigger = null;
int auto_gf_ActivateDeactiveReload_lp_player;
unit auto_gf_ActivateDeactiveReload_lp_attackingUnit;

void gf_ActivateDeactiveReload (int lp_player, unit lp_attackingUnit) {
    auto_gf_ActivateDeactiveReload_lp_player = lp_player;
    auto_gf_ActivateDeactiveReload_lp_attackingUnit = lp_attackingUnit;

    if (auto_gf_ActivateDeactiveReload_Trigger == null) {
        auto_gf_ActivateDeactiveReload_Trigger = TriggerCreate("auto_gf_ActivateDeactiveReload_TriggerFunc");
    }

    TriggerExecute(auto_gf_ActivateDeactiveReload_Trigger, false, false);
}

bool auto_gf_ActivateDeactiveReload_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ActivateDeactiveReload_lp_player;
    unit lp_attackingUnit = auto_gf_ActivateDeactiveReload_lp_attackingUnit;

    // Variable Declarations
    int lv_assaultAmmoMag;
    int lv_highCapacityClip;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior(lp_attackingUnit, "HighCapacityClip") == true)) {
        lv_highCapacityClip = 1;
    }

    if ((UnitGetType(lp_attackingUnit) == "TychusChaingun")) {
        lv_assaultAmmoMag = (gv_talentLevel[3][lp_player] + (lv_highCapacityClip + 1));
    }

    if ((((UnitGetType(lp_attackingUnit) != "TychusChaingun") && (gv_marineRounds[lp_player] > ((gv_playerRoundLimit[lp_player] * (lv_highCapacityClip + 1)) / 2))) || ((UnitGetType(lp_attackingUnit) == "TychusChaingun") && (gv_marineRounds[lp_player] > ((gv_playerRoundLimit[lp_player] * lv_assaultAmmoMag) / 2))))) {
        UnitAbilityEnable(lp_attackingUnit, "Reload", false);
    }
    else {
        UnitAbilityEnable(lp_attackingUnit, "Reload", true);
    }
    return true;
}

void gf_OutofAmmoMessage (unit lp_reloadingUnit) {
    // Variable Declarations
    int lv_reloadingText;

    // Variable Initialization
    lv_reloadingText = c_textTagNone;

    // Implementation
    TextTagCreate(StringExternal("Param/Value/68E80C9E"), 24, UnitGetPosition(lp_reloadingUnit), 1.5, true, true, PlayerGroupActive());
    lv_reloadingText = TextTagLastCreated();
    TextTagAttachToUnit(lv_reloadingText, lp_reloadingUnit, 1.5);
    Wait(9.0, c_timeReal);
    TextTagDestroy(lv_reloadingText);
}

void gf_LowAmmoMessage (unit lp_reloadingUnit) {
    // Variable Declarations
    int lv_reloadingText;

    // Variable Initialization
    lv_reloadingText = c_textTagNone;

    // Implementation
    TextTagCreate(StringExternal("Param/Value/CFC5D923"), 20, UnitGetPosition(lp_reloadingUnit), 1.5, true, true, PlayerGroupActive());
    lv_reloadingText = TextTagLastCreated();
    TextTagAttachToUnit(lv_reloadingText, lp_reloadingUnit, 1.5);
    Wait(5.0, c_timeReal);
    TextTagDestroy(lv_reloadingText);
}

void gf_ReloadCleanup (int lp_player, unit lp_reloadingUnit) {
    // Implementation
    if ((UnitWeaponGet(lp_reloadingUnit, 1) == "Shotgun")) {
        SoundPlayOnUnit(SoundLink("ShotgunPump", -1), PlayerGroupAll(), lp_reloadingUnit, 15.0, 75.0, 0.0);
    }

    if ((UnitAbilityCheck(lp_reloadingUnit, "attack", false) == true)) {
        UnitAbilityEnable(lp_reloadingUnit, "attack", true);
    }

    if ((UnitAbilityCheck(lp_reloadingUnit, "L3LaunchGrenade", false) == true)) {
        UnitAbilityEnable(lp_reloadingUnit, "L3LaunchGrenade", true);
    }

}

fixed gf_GetWeaponReload (int lp_player, unit lp_reloadingUnit, int lp_reload, string lp_weapon) {
    // Variable Declarations
    int lv_index;
    fixed lv_reloadTime;

    // Variable Initialization
    lv_reloadTime = 4.0;

    // Implementation
    while ((lp_weapon != UserDataGetGameLink("WeaponReloads", UserDataInstance("WeaponReloads", lv_index), "Weapon", 1))) {
        lv_index += 1;
    }
    if ((lp_reload == ge_ReloadType_Automatic)) {
        lv_reloadTime = (UserDataGetFixed("WeaponReloads", UserDataInstance("WeaponReloads", lv_index), "Auto Reload Factor", 1) * gf_WeaponsProfReloadTimeFactor(lp_player));
    }
    else {
        lv_reloadTime = (UserDataGetFixed("WeaponReloads", UserDataInstance("WeaponReloads", lv_index), "Manual Reload Factor", 1) * gf_WeaponsProfReloadTimeFactor(lp_player));
    }
    if ((lp_reload == ge_ReloadType_Automatic) && (gv_nightmare == true)) {
        lv_reloadTime *= 2.0;
    }

    lv_reloadTime = gf_CommandoReload(lv_reloadTime, lp_reloadingUnit);
    lv_reloadTime = (lv_reloadTime - (IntToFixed(gv_statsAgility3[lp_player]) * 0.08));
    if ((lp_reload == ge_ReloadType_Automatic)) {
        lv_reloadTime = MaxF(lv_reloadTime, 0.4);
    }
    else {
        lv_reloadTime = MaxF(lv_reloadTime, 0.1);
    }
    if ((lp_reload == ge_ReloadType_Perfect)) {
        lv_reloadTime = (lv_reloadTime * 0.8);
    }

    return lv_reloadTime;
}

void gf_UpdateAmmoDialog (int lp_playerNumber) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lp_playerNumber][0], IntToText(gv_marineRounds[lp_playerNumber]), PlayerGroupActive());
    libNtve_gf_SetDialogItemText(gv_ammoCounterDialogItem[lp_playerNumber][1], IntToText(gv_marineMags[lp_playerNumber]), PlayerGroupActive());
}

trigger auto_gf_BadlyInjured_Trigger = null;
unit auto_gf_BadlyInjured_lp_injuredUnit;

void gf_BadlyInjured (unit lp_injuredUnit) {
    auto_gf_BadlyInjured_lp_injuredUnit = lp_injuredUnit;

    if (auto_gf_BadlyInjured_Trigger == null) {
        auto_gf_BadlyInjured_Trigger = TriggerCreate("auto_gf_BadlyInjured_TriggerFunc");
    }

    TriggerExecute(auto_gf_BadlyInjured_Trigger, false, false);
}

bool auto_gf_BadlyInjured_TriggerFunc (bool testConds, bool runActions) {
    unit lp_injuredUnit = auto_gf_BadlyInjured_lp_injuredUnit;

    int autoE9E3D706_n;
    int autoE9E3D706_i;

    // Variable Declarations
    unit lv_localUnitA;
    int lv_localIntA;
    int lv_index;
    playergroup lv_injuredPlayer;
    int lv_injuredTextTag;

    // Variable Initialization
    lv_localUnitA = lp_injuredUnit;
    lv_localIntA = UnitGetOwner(lv_localUnitA);
    lv_index = UnitGetOwner(lv_localUnitA);
    lv_injuredPlayer = PlayerGroupSingle(lv_index);
    lv_injuredTextTag = c_textTagNone;

    // Implementation
    gv_playerRecovery[lv_localIntA] = true;
    libNtve_gf_MakeUnitInvulnerable(lv_localUnitA, true);
    if ((gv_playerXP[lv_localIntA] > 500)) {
        UnitAbilityEnable(lv_localUnitA, "attack", false);
    }

    UnitSetPropertyFixed(lv_localUnitA, c_unitPropMovementSpeed, 0.8);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryCombat, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategorySpell, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryAlert, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryME, true);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryDoodad, true);
    if ((gv_fPS[lv_localIntA] == false)) {
        CameraPan(lv_index, UnitGetPosition(gv_marineHero[lv_localIntA]), 0.0, -1, 10, false);
        CameraSetValue(lv_index, c_cameraValueDistance, 22.0, 0.8, -1, 10);
    }

    SoundPlay(SoundLink("Heartbeat", -1), lv_injuredPlayer, 100.0, 0.0);
    if ((gv_playerRating[lv_localIntA] > 2200)) {
        gv_playerRating[lv_localIntA] -= 5;
    }
    else if ((gv_playerRating[lv_localIntA] > 1800)) {
        gv_playerRating[lv_localIntA] -= 3;
    }
    else if (true) {
        gv_playerRating[lv_localIntA] -= 1;
    }
    gv_playerLives[lv_localIntA] -= 1;
    gf_Save(lv_localIntA, gv_bankSize);
    libNtve_gf_SetDialogItemText(gv_statsPlayerLivesLeft[lv_localIntA], IntToText(gv_playerLives[lv_localIntA]), PlayerGroupAll());
    if ((gv_playerLives[lv_localIntA] == 1)) {
        TextTagCreate((StringExternal("Param/Value/431FEC2D") + (IntToText(gv_playerLives[lv_localIntA]) + StringExternal("Param/Value/B93CD477"))), 24, UnitGetPosition(lv_localUnitA), 1.5, true, false, PlayerGroupActive());
    }
    else {
        TextTagCreate((StringExternal("Param/Value/EADB924C") + (IntToText(gv_playerLives[lv_localIntA]) + StringExternal("Param/Value/10CB3A8D"))), 24, UnitGetPosition(lv_localUnitA), 1.5, true, false, PlayerGroupActive());
    }
    if ((gv_playerXP[lv_localIntA] <= 500) && (RandomInt(0, 2) == 1)) {
        UIDisplayMessage(PlayerGroupSingle(lv_localIntA), c_messageAreaSubtitle, StringExternal("Param/Value/E2FE4ACA"));
    }

    lv_injuredTextTag = TextTagLastCreated();
    TextTagAttachToUnit(lv_injuredTextTag, lv_localUnitA, 1.5);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(lv_localUnitA));
    CameraShakeStart(lv_index, c_cameraPositionTarget, c_cameraDirectionZ, 0.18, 1.0, 100.0, 1.1);
    autoE9E3D706_n = 7;
    for (autoE9E3D706_i = 1; autoE9E3D706_i <= autoE9E3D706_n; autoE9E3D706_i += 1) {
        if ((UnitIsAlive(lv_localUnitA) == true)) {
            UnitSetPropertyFixed(lv_localUnitA, c_unitPropLife, (UnitGetPropertyFixed(lv_localUnitA, c_unitPropLife, c_unitPropCurrent) + 5.0));
        }

        Wait(0.2, c_timeGame);
    }
    if ((UnitIsAlive(lv_localUnitA) == true)) {
    }
    else {
        UnitSetPropertyFixed(lv_localUnitA, c_unitPropMovementSpeed, 1.25);
    }
    Wait(2.0, c_timeGame);
    if ((gv_fPS[lv_localIntA] == false)) {
        CameraSetValue(lv_index, c_cameraValueDistance, 30.0, 1.0, -1, 10);
    }

    SoundChannelMute(lv_injuredPlayer, c_soundCategoryCombat, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategorySpell, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryAlert, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryME, false);
    SoundChannelMute(lv_injuredPlayer, c_soundCategoryDoodad, false);
    TextTagDestroy(lv_injuredTextTag);
    if ((UnitIsAlive(lv_localUnitA) == true)) {
        UnitResetSpeed(lv_localUnitA);
        UnitAbilityEnable(lv_localUnitA, "attack", true);
        libNtve_gf_MakeUnitInvulnerable(lv_localUnitA, false);
        gv_playerRecovery[lv_localIntA] = false;
    }

    return true;
}

bool gf_AilmentResistanceCheck (unit lp_localUnitA) {
    // Variable Declarations
    unit lv_localUnitA;
    int lv_index;

    // Variable Initialization
    lv_localUnitA = lp_localUnitA;
    lv_index = UnitGetOwner(lp_localUnitA);

    // Implementation
    return !(((!(UnitHasBehavior(lv_localUnitA, "C2Armor")) && !(UnitHasBehavior(lv_localUnitA, "C4Armor")) && (RandomFixed(0.0, 100.0) > (gv_statsEndurance2[lv_index] * 2.2))) || (UnitHasBehavior(lv_localUnitA, "C2Armor") && (RandomFixed(0.0, 100.0) > (40.0 + (gv_statsEndurance2[lv_index] * 2.2)))) || (UnitHasBehavior(lv_localUnitA, "C4Armor") && (RandomFixed(0.0, 100.0) > (20.0 + (gv_statsEndurance2[lv_index] * 2.2))))));
}

trigger auto_gf_RankUp_Trigger = null;
int auto_gf_RankUp_lp_player;

void gf_RankUp (int lp_player) {
    auto_gf_RankUp_lp_player = lp_player;

    if (auto_gf_RankUp_Trigger == null) {
        auto_gf_RankUp_Trigger = TriggerCreate("auto_gf_RankUp_TriggerFunc");
    }

    TriggerExecute(auto_gf_RankUp_Trigger, false, false);
}

bool auto_gf_RankUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_RankUp_lp_player;

    // Variable Declarations
    int lv_rankUpTextTag;
    actor lv_rankUpActor;

    // Variable Initialization
    lv_rankUpTextTag = c_textTagNone;

    // Implementation
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupAll(), 200.0, 0.0);
    libNtve_gf_AttachModelToUnit(gv_marineHero[lp_player], "RankUp", "Ref_Center");
    lv_rankUpActor = libNtve_gf_ActorLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, (PlayerName(lp_player) + (StringExternal("Param/Value/D40821C3") + UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Title Full", 1))));
    TextTagCreate(StringExternal("Param/Value/0E5EDA3D"), 45, UnitGetPosition(UnitGroupLoopCurrent()), 3.0, true, false, PlayerGroupAll());
    lv_rankUpTextTag = TextTagLastCreated();
    TextTagAttachToUnit(lv_rankUpTextTag, gv_marineHero[lp_player], 3.25);
    TextTagSetBackgroundImage(lv_rankUpTextTag, UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Icon", 1), false);
    TextTagShowBackground(lv_rankUpTextTag, true);
    Wait(15.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TextTagDestroy(lv_rankUpTextTag);
    libNtve_gf_KillModel(lv_rankUpActor);
    libNtve_gf_SetDialogItemText(gv_statsPlayerNextXP[lp_player], (IntToText(gv_playerXP[lp_player]) + (gv_forwardSlash + IntToText(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lp_player] + 1)), "XP Required", 1)))), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_statsPlayerNextLevelPromotionLabel[lp_player], UserDataGetText("Ranks", UserDataInstance("Ranks", (gv_playerRank[lp_player] + 1)), "Title Full", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(gv_statsPlayerNextLevelProgressBar[lp_player], IntToFixed(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lp_player] + 1)), "XP Required", 1)), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(gv_statsPlayerNextLevelProgressBar[lp_player], IntToFixed(gv_playerXP[lp_player]), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(gv_playerNameLabel[lp_player], (UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Title Full", 1) + PlayerName(lp_player)), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_playerNameRankIcon[lp_player], UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_player], UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Icon", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_player], UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Title Full", 1), PlayerGroupAll());
    return true;
}

void gf_CreatePredator (int lp_player, point lp_creationLocation) {
    // Implementation
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, lp_player, true);
    }
    PlayerGroupLoopEnd();
    gf_TipLocalNOTD(2000, lp_player, StringExternal("Param/Value/B864C5C3"));
    gf_CreatePet(lp_player, lp_creationLocation);
    TriggerAddEventUnitDied(gt_PredatorDies, UnitRefFromVariable("gv_playerPet[lp_player]"));
    UnitGroupSelect(UnitLastCreatedGroup(), lp_player, true);
    UnitControlGroupAddUnit(lp_player, 1, UnitLastCreated());
    libNtve_gf_MakeUnitInvulnerable(gv_playerPet[lp_player], true);
    UnitSetPropertyFixed(gv_playerPet[lp_player], c_unitPropLevel, 1.0);
    UnitGroupAdd(gv_pets, gv_playerPet[lp_player]);
    libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lp_player], UserDataGetImagePath("CustomPetImages", "Pet Images", "Pet Image", (ModI(gv_playerPetCode[lp_player], 100) + 1)), PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(gv_teamStatusPortraitButton[lp_player], c_triggerBlendModeNormal, PlayerGroupAll());
    DialogControlHookup(gv_teamStatusPlayerPanel[lp_player], c_triggerControlTypeUnitStatus, "PetHealth");
    gv_teamStatusLifeBar[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemUnit(gv_teamStatusLifeBar[lp_player], gv_playerPet[lp_player], PlayerGroupAll());
    DialogControlSetAnimationState(gv_teamStatusPlayerPanel[lp_player], PlayerGroupAll(), "MarineDeath", "PetBorn");
    if ((PlayerStatus(lp_player) == c_playerStatusLeft)) {
        DialogControlSetAnimationState(gv_teamStatusPlayerPanel[lp_player], PlayerGroupAll(), "Player", "Leaver");
    }

    UnitFlashSelection(gv_playerPet[lp_player], 4.0);
    TriggerEnable(gt_PetLevelUp, true);
    TriggerEnable(gt_Backstab, true);
    Wait(8.0, c_timeReal);
    libNtve_gf_MakeUnitInvulnerable(gv_playerPet[lp_player], false);
}

trigger auto_gf_DeathDisplay_Trigger = null;
string auto_gf_DeathDisplay_lp_damageEffect;
int auto_gf_DeathDisplay_lp_playerNumber;
unit auto_gf_DeathDisplay_lp_killer;

void gf_DeathDisplay (string lp_damageEffect, int lp_playerNumber, unit lp_killer) {
    auto_gf_DeathDisplay_lp_damageEffect = lp_damageEffect;
    auto_gf_DeathDisplay_lp_playerNumber = lp_playerNumber;
    auto_gf_DeathDisplay_lp_killer = lp_killer;

    if (auto_gf_DeathDisplay_Trigger == null) {
        auto_gf_DeathDisplay_Trigger = TriggerCreate("auto_gf_DeathDisplay_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeathDisplay_Trigger, false, false);
}

bool auto_gf_DeathDisplay_TriggerFunc (bool testConds, bool runActions) {
    string lp_damageEffect = auto_gf_DeathDisplay_lp_damageEffect;
    int lp_playerNumber = auto_gf_DeathDisplay_lp_playerNumber;
    unit lp_killer = auto_gf_DeathDisplay_lp_killer;

    // Variable Declarations
    int lv_index;
    text lv_baseMessage;

    // Variable Initialization
    lv_index = 1;
    lv_baseMessage = (PlayerName(lp_playerNumber) + (StringExternal("Param/Value/6E496CA7") + (UnitTypeGetName(UnitGetType(gv_marineHero[lp_playerNumber])) + StringExternal("Param/Value/B0A61D95"))));

    // Implementation
    if ((((UnitGetOwner(libNtve_gf_KillingUnit()) >= 13) && (UnitGetOwner(libNtve_gf_KillingUnit()) <= 14)) == true)) {
        if ((UnitTypeTestAttribute(UnitGetType(lp_killer), c_unitAttributeHeroic) == true)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_baseMessage + (StringExternal("Param/Value/ADA92E45") + (UnitTypeGetName(UnitGetType(libNtve_gf_KillingUnit())) + StringExternal("Param/Value/7DFE6CBB")))));
        }
        else {
            while ((lv_index <= UserDataInstanceCount("DeathTexts")) && (UnitGetType(lp_killer) != UserDataGetUnit("DeathTexts", UserDataInstance("DeathTexts", lv_index), "Killer", 1))) {
                lv_index += 1;
            }
            if ((lv_index <= UserDataInstanceCount("DeathTexts"))) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_baseMessage + UserDataGetText("DeathTexts", UserDataInstance("DeathTexts", lv_index), "Death Message", 1)));
            }
            else {
                TextExpressionSetToken("Param/Expression/1B9D6FE5", "A", lv_baseMessage);
                TextExpressionSetToken("Param/Expression/1B9D6FE5", "B", StringExternal("Param/Value/42DA9A5D"));
                TextExpressionSetToken("Param/Expression/1B9D6FE5", "C", UnitTypeGetName(UnitGetType(lp_killer)));
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/1B9D6FE5"));
            }
        }
    }
    else if (((lp_damageEffect == "StingerMK3DamageAllies") || (lp_damageEffect == "StingerMK3Damage") || (lp_damageEffect == "SatchelLevel1Damage") || (lp_damageEffect == "SatchelLevel2Damage") || (lp_damageEffect == "VultureSpiderMinesDamage"))) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_baseMessage + StringExternal("Param/Value/4BBC15E6")));
    }
    else if ((UnitGetOwner(lp_killer) == lp_playerNumber)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_baseMessage + StringExternal("Param/Value/0EC88977")));
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (lv_baseMessage + StringExternal("Param/Value/3331F97F")));
    }
    return true;
}

void gf_DeathRating (unit lp_deadMarine, int lp_playerNumber) {
    // Implementation
    if ((gv_alivePlayers == 1) && (gv_totalPlayers > 3)) {
        gv_playerRating[lp_playerNumber] += 1;
    }

    gv_alivePlayers -= 1;
    if ((gv_victimOfTK[lp_playerNumber] == false)) {
        if ((gv_playerRating[lp_playerNumber] >= 2200)) {
            gv_playerRating[lp_playerNumber] -= 10;
        }
        else if ((gv_playerRating[lp_playerNumber] >= 1900)) {
            gv_playerRating[lp_playerNumber] -= 7;
        }
        else if ((gv_playerRating[lp_playerNumber] >= 1800)) {
            gv_playerRating[lp_playerNumber] -= 5;
        }
        else if ((gv_playerRating[lp_playerNumber] >= 1700)) {
            gv_playerRating[lp_playerNumber] -= 4;
        }
        else if ((gv_playerRating[lp_playerNumber] >= 1600)) {
            gv_playerRating[lp_playerNumber] -= 3;
        }
        else if ((gv_playerRating[lp_playerNumber] >= 1550)) {
            gv_playerRating[lp_playerNumber] -= 2;
        }
        else if ((gv_playerRating[lp_playerNumber] >= 1425) && (RandomInt(0, 4) == 1)) {
            gv_playerRating[lp_playerNumber] -= 1;
        }
        if ((gv_wave < 3)) {
            gv_playerRating[lp_playerNumber] -= 7;
        }
        else if ((gv_wave < 5)) {
            gv_playerRating[lp_playerNumber] -= 5;
        }
        else if ((gv_wave < 7)) {
            gv_playerRating[lp_playerNumber] -= 3;
        }
        if (((UnitGetType(lp_deadMarine) == "TychusChaingun") || (UnitGetType(lp_deadMarine) == "DominionKillTeam")) && (gv_wave < 7)) {
            gv_playerRating[lp_playerNumber] -= 3;
        }
    }

}

trigger auto_gf_DeathCamera_Trigger = null;
region auto_gf_DeathCamera_lp_deathLocation;
unit auto_gf_DeathCamera_lp_deadMarine;
int auto_gf_DeathCamera_lp_playerNumber;

void gf_DeathCamera (region lp_deathLocation, unit lp_deadMarine, int lp_playerNumber) {
    auto_gf_DeathCamera_lp_deathLocation = lp_deathLocation;
    auto_gf_DeathCamera_lp_deadMarine = lp_deadMarine;
    auto_gf_DeathCamera_lp_playerNumber = lp_playerNumber;

    if (auto_gf_DeathCamera_Trigger == null) {
        auto_gf_DeathCamera_Trigger = TriggerCreate("auto_gf_DeathCamera_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeathCamera_Trigger, false, false);
}

bool auto_gf_DeathCamera_TriggerFunc (bool testConds, bool runActions) {
    region lp_deathLocation = auto_gf_DeathCamera_lp_deathLocation;
    unit lp_deadMarine = auto_gf_DeathCamera_lp_deadMarine;
    int lp_playerNumber = auto_gf_DeathCamera_lp_playerNumber;

    // Implementation
    CameraLookAtUnit(lp_playerNumber, null);
    CameraApplyInfo(lp_playerNumber, CameraInfoDefault(), 2.0, -1, 10, true);
    CameraPan(lp_playerNumber, RegionGetCenter(lp_deathLocation), 0.0, -1, 10, false);
    CameraLockInput(lp_playerNumber, false);
    CameraShakeStart(lp_playerNumber, c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 1.6, 100.0, 0.7);
    if ((UnitGetType(lp_deadMarine) == "Flamethrower3")) {
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_marineHero[IntLoopCurrent()]), RegionGetCenter(lp_deathLocation)) < 6.0)) {
                CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 1.6, 100.0, 0.7);
            }

        }
        IntLoopEnd();
    }
    return true;
}

trigger auto_gf_DeathDialogDestruction_Trigger = null;
int auto_gf_DeathDialogDestruction_lp_playerNumber;

void gf_DeathDialogDestruction (int lp_playerNumber) {
    auto_gf_DeathDialogDestruction_lp_playerNumber = lp_playerNumber;

    if (auto_gf_DeathDialogDestruction_Trigger == null) {
        auto_gf_DeathDialogDestruction_Trigger = TriggerCreate("auto_gf_DeathDialogDestruction_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeathDialogDestruction_Trigger, false, false);
}

bool auto_gf_DeathDialogDestruction_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNumber = auto_gf_DeathDialogDestruction_lp_playerNumber;

    // Implementation
    DialogDestroy(gv_talentTree[lp_playerNumber]);
    DialogControlDestroy(gv_equipmentButton[lp_playerNumber]);
    DialogDestroy(gv_statsPlayerStatsDialog[lp_playerNumber]);
    DialogDestroy(gv_ammoCounterDialog[lp_playerNumber]);
    if ((gv_shellDialog[lp_playerNumber] != c_invalidDialogId)) {
        DialogDestroy(gv_shellDialog[lp_playerNumber]);
    }

    return true;
}

trigger auto_gf_SmartSpawnNOTD_Trigger = null;
string auto_gf_SmartSpawnNOTD_lp_spawningUnit;
fixed auto_gf_SmartSpawnNOTD_lp_spawnRange;

void gf_SmartSpawnNOTD (string lp_spawningUnit, fixed lp_spawnRange) {
    auto_gf_SmartSpawnNOTD_lp_spawningUnit = lp_spawningUnit;
    auto_gf_SmartSpawnNOTD_lp_spawnRange = lp_spawnRange;

    if (auto_gf_SmartSpawnNOTD_Trigger == null) {
        auto_gf_SmartSpawnNOTD_Trigger = TriggerCreate("auto_gf_SmartSpawnNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_SmartSpawnNOTD_Trigger, false, false);
}

bool auto_gf_SmartSpawnNOTD_TriggerFunc (bool testConds, bool runActions) {
    string lp_spawningUnit = auto_gf_SmartSpawnNOTD_lp_spawningUnit;
    fixed lp_spawnRange = auto_gf_SmartSpawnNOTD_lp_spawnRange;

    int auto7948FB3E_n;
    int auto7948FB3E_i;

    // Variable Declarations
    point lv_unitSpawnPoint;
    unit lv_spawnUnit;
    bool lv_spawnPointReset;

    // Variable Initialization
    lv_unitSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), lp_spawnRange));

    // Implementation
    auto7948FB3E_n = 2;
    for (auto7948FB3E_i = 1; auto7948FB3E_i <= auto7948FB3E_n; auto7948FB3E_i += 1) {
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_unitSpawnPoint) < 5.0)) {
                lv_spawnPointReset = true;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_spawnPointReset == true)) {
            lv_unitSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), lp_spawnRange));
        }

    }
    while ((PointPathingIsConnected(lv_unitSpawnPoint, UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))) == false)) {
        lv_unitSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), lp_spawnRange));
    }
    UnitCreate(1, lp_spawningUnit, 0, 14, lv_unitSpawnPoint, libNtve_gf_RandomAngle());
    lv_spawnUnit = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, lv_spawnUnit);
    Wait(0.25, c_timeGame);
    UnitIssueOrder(lv_spawnUnit, Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
    return true;
}

void gf_WaveSpawnAroundMarines (string lp_spawningUnit, fixed lp_spawnRange, int lp_spawnAmount) {
    // Variable Declarations
    point lv_unitSpawnPoint;
    unitgroup lv_spawnUnit;
    int lv_attempts;

    // Variable Initialization
    lv_unitSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), lp_spawnRange));
    lv_spawnUnit = UnitGroupEmpty();

    // Implementation
    if ((UnitGroupCount(gv_marines, c_unitCountAlive) == 0)) {
        return ;
    }

    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        while (((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_unitSpawnPoint) < 5.0) || (PointPathingPassable(lv_unitSpawnPoint) == false) || (PointPathingIsConnected(lv_unitSpawnPoint, UnitGetPosition(UnitGroupLoopCurrent())) == false) || (!((((PointGetX(lv_unitSpawnPoint) >= 2) && (PointGetX(lv_unitSpawnPoint) <= 254)) && ((PointGetY(lv_unitSpawnPoint) >= 2) && (PointGetY(lv_unitSpawnPoint) <= 254)))))) && (lv_attempts <= 4)) {
            lv_unitSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), lp_spawnRange));
        }
    }
    UnitGroupLoopEnd();
    UnitCreate(lp_spawnAmount, lp_spawningUnit, 0, 14, lv_unitSpawnPoint, libNtve_gf_RandomAngle());
    Wait(0.1, c_timeGame);
    lv_spawnUnit = UnitLastCreatedGroup();
    UnitGroupLoopBegin(lv_spawnUnit);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(lv_spawnUnit, false);
    AISetGroupNotUsableInWaves(lv_spawnUnit, false);
    AIAttackWaveUseGroup(14, lv_spawnUnit);
}

trigger auto_gf_WaveSpawnAtRegion_Trigger = null;
string auto_gf_WaveSpawnAtRegion_lp_spawningUnit;
region auto_gf_WaveSpawnAtRegion_lp_spawnRegion;
int auto_gf_WaveSpawnAtRegion_lp_spawnAmount;

void gf_WaveSpawnAtRegion (string lp_spawningUnit, region lp_spawnRegion, int lp_spawnAmount) {
    auto_gf_WaveSpawnAtRegion_lp_spawningUnit = lp_spawningUnit;
    auto_gf_WaveSpawnAtRegion_lp_spawnRegion = lp_spawnRegion;
    auto_gf_WaveSpawnAtRegion_lp_spawnAmount = lp_spawnAmount;

    if (auto_gf_WaveSpawnAtRegion_Trigger == null) {
        auto_gf_WaveSpawnAtRegion_Trigger = TriggerCreate("auto_gf_WaveSpawnAtRegion_TriggerFunc");
    }

    TriggerExecute(auto_gf_WaveSpawnAtRegion_Trigger, false, false);
}

bool auto_gf_WaveSpawnAtRegion_TriggerFunc (bool testConds, bool runActions) {
    string lp_spawningUnit = auto_gf_WaveSpawnAtRegion_lp_spawningUnit;
    region lp_spawnRegion = auto_gf_WaveSpawnAtRegion_lp_spawnRegion;
    int lp_spawnAmount = auto_gf_WaveSpawnAtRegion_lp_spawnAmount;

    // Variable Declarations
    point lv_unitSpawnPoint;
    unitgroup lv_spawnUnit;
    int lv_attempts;

    // Variable Initialization
    lv_unitSpawnPoint = RegionRandomPoint(lp_spawnRegion);
    lv_spawnUnit = UnitGroupEmpty();

    // Implementation
    if ((UnitGroupCount(gv_marines, c_unitCountAlive) == 0)) {
        return true;
    }

    while (((PointPathingPassable(lv_unitSpawnPoint) == false) || (PointPathingIsConnected(lv_unitSpawnPoint, UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))) == false) || (!((((PointGetX(lv_unitSpawnPoint) >= 2) && (PointGetX(lv_unitSpawnPoint) <= 254)) && ((PointGetY(lv_unitSpawnPoint) >= 2) && (PointGetY(lv_unitSpawnPoint) <= 254)))))) && (lv_attempts <= 4)) {
        lv_unitSpawnPoint = RegionRandomPoint(lp_spawnRegion);
    }
    UnitCreate(lp_spawnAmount, lp_spawningUnit, 0, 14, lv_unitSpawnPoint, libNtve_gf_RandomAngle());
    Wait(0.1, c_timeGame);
    lv_spawnUnit = UnitLastCreatedGroup();
    UnitGroupLoopBegin(lv_spawnUnit);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    AISetGroupScriptControlled(lv_spawnUnit, false);
    AISetGroupNotUsableInWaves(lv_spawnUnit, false);
    AIAttackWaveUseGroup(14, lv_spawnUnit);
    return true;
}

trigger auto_gf_ClearZombieWave_Trigger = null;

void gf_ClearZombieWave () {
    if (auto_gf_ClearZombieWave_Trigger == null) {
        auto_gf_ClearZombieWave_Trigger = TriggerCreate("auto_gf_ClearZombieWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClearZombieWave_Trigger, false, false);
}

bool auto_gf_ClearZombieWave_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitGroupLoopBegin(UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Infestor2")) {
            UnitKill(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Infestor2")) {
            UnitKill(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

bool gf_ExpedCheck () {
    // Implementation
    IntLoopBegin(1, 14);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_classCount[IntLoopCurrent()] > 1)) {
            return false;
        }

    }
    IntLoopEnd();
    if ((gv_totalPlayers == 8)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_WinUpdate (int lp_player, bool lp_nMSpeed, bool lp_speed) {
    // Implementation
    if ((gv_survivalMode == true)) {
        if ((gv_nightmare == true)) {
            gv_survivalWinNM[lp_player] += 1;
        }
        else {
            gv_survivalWin[lp_player] += 1;
        }
    }
    else if ((gv_storyline == 1)) {
        if ((lp_nMSpeed == true)) {
            gv_eCNMSpeed[lp_player] += 1;
        }
        else if ((lp_speed == true)) {
            gv_eCSpeed[lp_player] += 1;
        }
        else if ((gv_nightmare == true)) {
            gv_eCWinNM[lp_player] += 1;
        }
        else if ((lp_speed == false)) {
            gv_eCWinNormal[lp_player] += 1;
        }
    }
    else if ((gv_storyline == 2)) {
        if ((lp_nMSpeed == true)) {
            gv_aCNMSpeed[lp_player] += 1;
        }
        else if ((lp_speed == true)) {
            gv_aCSpeed[lp_player] += 1;
        }
        else if ((gv_nightmare == true)) {
            gv_aCWinNM[lp_player] += 1;
        }
        else if ((lp_speed == false)) {
            gv_aCWinNormal[lp_player] += 1;
        }
    }
    else if ((gv_storyline == 3)) {
        if ((lp_nMSpeed == true)) {
            gv_sTNMSpeed[lp_player] += 1;
        }
        else if ((lp_speed == true)) {
            gv_sTSpeed[lp_player] += 1;
        }
        else if ((gv_nightmare == true)) {
            gv_sTWinNM[lp_player] += 1;
        }
        else if ((lp_speed == false)) {
            gv_sTWinNormal[lp_player] += 1;
        }
    }
}

void gf_VictoryBonusXP () {
    // Implementation
    if ((gv_totalPlayers == gv_alivePlayers)) {
        gf_AwardPlayerXPNOTD(5);
        gf_AwardCreditsNOTD(40);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/CFA17E6B"));
    }

    if ((gv_noNewbie == false)) {
        gf_AwardPlayerXPNOTD(10);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/DCD19264"));
        gf_AwardCreditsNOTD(20);
    }
    else if ((gv_nightmare == true)) {
        gf_AwardPlayerXPNOTD(30);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/D48BFD10"));
        gf_AwardCreditsNOTD(80);
    }
    else if ((gv_squadRating > 1800)) {
        gf_AwardPlayerXPNOTD(25);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/C996F396"));
        gf_AwardCreditsNOTD(50);
    }
    else if ((gv_squadRating > 1700)) {
        gf_AwardPlayerXPNOTD(20);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/ED5A6EF5"));
        gf_AwardCreditsNOTD(40);
    }
    else if (true) {
        gf_AwardPlayerXPNOTD(15);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/4EE0D498"));
        gf_AwardCreditsNOTD(30);
    }
}

void gf_MedalofHonorAward (int lp_medalNumber) {
    // Implementation
    if ((gv_nightmare == true) && ((gv_totalPlayers == gv_alivePlayers) || (gv_mOHAwardException == true)) && (gv_totalPlayers >= 3)) {
        TextExpressionSetToken("Param/Expression/4D6170D4", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/4D6170D4"));
        gf_UnifiedAwards(25, 0.0, 300, 1, 2);
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive)) {
                gv_medalOfHonor[IntLoopCurrent()] += 1;
                gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
            }

        }
        IntLoopEnd();
        SoundPlay(SoundLink("UI_BnetSearchOpen", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(1.75, c_timeGame);
    }

}

void gf_CombatActionAward (int lp_medalNumber) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) || (gv_cPAwardException[IntLoopCurrent()] == true))) {
            if (((gv_storyline == 3) || ((gv_storyline <= 2) && ((gv_playerRating[IntLoopCurrent()] < 1800) || ((gv_noNewbie == true) && (gv_playerRating[IntLoopCurrent()] < 1990)))))) {
                gv_playerRating[IntLoopCurrent()] += 1;
            }

            gv_combatActionRibbon[IntLoopCurrent()] += 1;
            TextExpressionSetToken("Param/Expression/FEC5EBF1", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/FEC5EBF1"));
            gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
            if ((gv_playerXP[IntLoopCurrent()] <= 500)) {
                gv_playerKarma[IntLoopCurrent()] += 2;
            }
            else {
                gv_playerKarma[IntLoopCurrent()] += 1;
            }
        }

    }
    IntLoopEnd();
}

void gf_LifeSavingAward (int lp_medalNumber) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) || (gv_cPAwardException[IntLoopCurrent()] == true)) && (UnitGetType(gv_marineHero[IntLoopCurrent()]) == "Medic2") && ((gv_lifeSavingMedal[IntLoopCurrent()] < 20) || ((gv_lifeSavingMedal[IntLoopCurrent()] >= 20) && (gv_nightmare == true)))) {
            gv_lifeSavingMedal[IntLoopCurrent()] += 1;
            TextExpressionSetToken("Param/Expression/D3BA9547", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/D3BA9547"));
            gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
        }

    }
    IntLoopEnd();
}

void gf_BronzeStarAward (int lp_medalNumber) {
    unitgroup auto5607B0F3_g;
    int auto5607B0F3_u;

    // Variable Declarations
    int lv_player;
    unit lv_pet;

    // Variable Initialization

    // Implementation
    auto5607B0F3_g = gv_pets;
    auto5607B0F3_u = 1;
    for ( ; auto5607B0F3_u <= UnitGroupCount(auto5607B0F3_g, c_unitCountAll) ; auto5607B0F3_u += BoolToInt(lv_pet == UnitGroupUnit(auto5607B0F3_g, auto5607B0F3_u)) ) {
        lv_pet = UnitGroupUnit(auto5607B0F3_g, auto5607B0F3_u);
        lv_player = UnitGetOwner(lv_pet);
        if ((PlayerStatus(lv_player) == c_playerStatusActive) && (libNtve_gf_UnitGetPropertyKills(lv_pet, c_unitPropCurrent) >= 50) && ((gv_bronzeStar[lv_player] < 20) || ((gv_bronzeStar[lv_player] >= 20) && (gv_nightmare == true)))) {
            gv_bronzeStar[lv_player] += 1;
            TextExpressionSetToken("Param/Expression/710E94FC", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/710E94FC"));
            gf_SetMedalVariables(lv_player, lp_medalNumber);
        }

    }
}

void gf_DSMAward (int lp_medalNumber) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && ((gv_distinguishedServiceMedal[IntLoopCurrent()] < 20) || ((gv_distinguishedServiceMedal[IntLoopCurrent()] >= 20) && (gv_nightmare == true)))) {
            gv_distinguishedServiceMedal[IntLoopCurrent()] += 1;
            TextExpressionSetToken("Param/Expression/D7FE6A11", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/D7FE6A11"));
            gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
        }

    }
    IntLoopEnd();
}

void gf_LegionOfMeritAward (int lp_medalNumber) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && ((gv_legionOfMerit[IntLoopCurrent()] < 20) || ((gv_legionOfMerit[IntLoopCurrent()] >= 20) && (gv_nightmare == true)))) {
            gv_legionOfMerit[IntLoopCurrent()] += 1;
            TextExpressionSetToken("Param/Expression/2FE78331", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/2FE78331"));
            gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
        }

    }
    IntLoopEnd();
}

void gf_ExpeditionaryAward (int lp_medalNumber) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if (((gv_expeditionaryMedal[IntLoopCurrent()] < 20) || ((gv_expeditionaryMedal[IntLoopCurrent()] >= 20) && (gv_nightmare == true))) && (PlayerStatus(IntLoopCurrent()) == c_playerStatusActive)) {
            gv_expeditionaryMedal[IntLoopCurrent()] += 1;
            TextExpressionSetToken("Param/Expression/72793672", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/72793672"));
            gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
        }

    }
    IntLoopEnd();
}

void gf_SilverStarAward (int lp_medalNumber) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitGetType(gv_marineHero[IntLoopCurrent()]) == "Rifleman") && (PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (gv_hitsTaken[IntLoopCurrent()] <= 10) && ((gv_silverStar[IntLoopCurrent()] < 20) || ((gv_silverStar[IntLoopCurrent()] >= 20) && (gv_nightmare == true)))) {
            gv_silverStar[IntLoopCurrent()] += 1;
            TextExpressionSetToken("Param/Expression/8074E518", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/8074E518"));
            gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
        }

    }
    IntLoopEnd();
}

void gf_NavyCrossAward (int lp_medalNumber) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && ((gv_navyCross[IntLoopCurrent()] < 20) || ((gv_navyCross[IntLoopCurrent()] >= 20) && (gv_nightmare == true)))) {
            gv_navyCross[IntLoopCurrent()] += 1;
            TextExpressionSetToken("Param/Expression/9A873C53", "A", UserDataGetText("Medals", UserDataInstance("Medals", lp_medalNumber), "Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/9A873C53"));
            gf_SetMedalVariables(IntLoopCurrent(), lp_medalNumber);
        }

    }
    IntLoopEnd();
}

void gf_SpeedBonusXP () {
    // Variable Declarations
    int lv_speedXP;

    // Variable Initialization

    // Implementation
    if ((gv_noNewbie == false)) {
        lv_speedXP = 10;
    }
    else if ((gv_nightmare == true)) {
        lv_speedXP = 40;
    }
    else if (true) {
        lv_speedXP = 30;
    }
    gf_AwardPlayerXPNOTD(lv_speedXP);
    TextExpressionSetToken("Param/Expression/8261F9D4", "A", IntToText(lv_speedXP));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/8261F9D4"));
}

trigger auto_gf_GameOverInit_Trigger = null;

void gf_GameOverInit () {
    if (auto_gf_GameOverInit_Trigger == null) {
        auto_gf_GameOverInit_Trigger = TriggerCreate("auto_gf_GameOverInit_TriggerFunc");
    }

    TriggerExecute(auto_gf_GameOverInit_Trigger, false, false);
}

bool auto_gf_GameOverInit_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerRandom[IntLoopCurrent()] == true)) {
            gv_playerKarma[IntLoopCurrent()] += 5;
        }
        else {
            gv_playerKarma[IntLoopCurrent()] += 1;
        }
    }
    IntLoopEnd();
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    if ((gv_victory == true)) {
        SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "VictoryMusic", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/02F14065"));
        TriggerExecute(gt_VictoryBonus, true, true);
    }
    else {
        SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_EndCreditsO", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        if ((RandomInt(0, 1) == 1)) {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/DEFC0404"));
        }
        else {
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/C6FDB822"));
        }
        GameSetLighting("NOTDGameOverLight", 5.0);
    }
    gf_AutoSaveLong();
    Wait(5.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerXP[IntLoopCurrent()] < 500)) {
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDirective, StringExternal("Param/Value/E405D451"));
        }

    }
    IntLoopEnd();
    DialogDestroyAll();
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitInventoryContainerOpen(PlayerGroupAll(), UnitGroupLoopCurrent(), 1, false);
        UnitInventoryContainerOpen(PlayerGroupAll(), UnitGroupLoopCurrent(), 2, false);
    }
    UnitGroupLoopEnd();
    CinematicFade(false, 3.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    Wait(3.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_EndGameUINOTD();
    TriggerEnable(gt_ReturntoEarth, true);
    if ((gv_victory == true) && (gv_storyline == 1)) {
        libNtve_gf_HideGameUI(false, PlayerGroupAll());
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/3D74E3DA"));
        Wait(7.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/2CE8F35C"));
        Wait(10.0, c_timeReal);
    }
    else {
        Wait(5.0, c_timeReal);
    }
    TriggerExecute(gt_NOTDCreditsRoll, true, false);
    return true;
}

trigger auto_gf_EndGameUINOTD_Trigger = null;

void gf_EndGameUINOTD () {
    if (auto_gf_EndGameUINOTD_Trigger == null) {
        auto_gf_EndGameUINOTD_Trigger = TriggerCreate("auto_gf_EndGameUINOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_EndGameUINOTD_Trigger, false, false);
}

bool auto_gf_EndGameUINOTD_TriggerFunc (bool testConds, bool runActions) {
    int init_i;

    int auto73CB4E9B_ae;
    int auto73CB4E9B_ai;
    int autoF9DEE8F2_ae;
    int autoF9DEE8F2_ai;

    // Variable Declarations
    int lv_dialogX;
    int lv_dialogY;
    int lv_dialogPositionY;
    int lv_itemSpacingX;
    int lv_itemSpacingY;
    int lv_itemIconXY;
    int lv_itemIconPositionY;
    int lv_playerNameTextX;
    int lv_playerNameTextY;
    int lv_playerNamePositionX;
    int lv_playerRankIconXY;
    int lv_playerRankPositionX;
    int lv_itemIconPositionX;
    int lv_itemX;
    int lv_itemBarPositionY;
    int lv_playerNamePositionY;
    int lv_itemBarX;
    int lv_itemBarY;
    int lv_itemBarPositionX;
    int lv_ratingPositiveItemBarX;
    int lv_ratingNegativeItemBarX;
    int lv_ratingPositiveItemBarPositionX;
    int lv_medalIconXY;
    int lv_finalTextX;
    int lv_finalTextY;
    int lv_finalTextXPosition;
    int lv_finalTextYPosition;
    int lv_victoryButtonX;
    int lv_victoryButtonY;
    int lv_victoryTextX;
    int lv_victoryTextY;
    int lv_victoryButtonPositionX;
    int lv_victoryButtonPositionY;
    int lv_victoryTextPositionX;
    int lv_victoryTextPositionY;
    int lv_iLocal;
    int lv_jLocal;
    color lv_redTint;
    string lv_victoryButtonImage;
    int[9] lv_rankIcon;
    text lv_rankTitle;
    string lv_rankImage;

    // Variable Initialization
    lv_dialogPositionY = -150;
    lv_itemSpacingX = 5;
    lv_itemSpacingY = 5;
    lv_itemIconXY = 50;
    lv_itemIconPositionY = 10;
    lv_playerNameTextX = 169;
    lv_playerNameTextY = gv_playerNameTextY;
    lv_playerNamePositionX = (lv_itemSpacingX + 110);
    lv_playerRankIconXY = gv_playerNameTextY;
    lv_playerRankPositionX = (lv_playerNamePositionX - (lv_playerRankIconXY + 5));
    lv_itemIconPositionX = (lv_playerNameTextX + lv_playerNamePositionX + (lv_itemSpacingX * 3));
    lv_itemX = gv_itemX;
    lv_itemBarPositionY = ((lv_itemSpacingY * 3) + (lv_itemIconPositionY + lv_itemIconXY));
    lv_playerNamePositionY = (lv_itemBarPositionY + 5);
    lv_itemBarX = gv_itemX;
    lv_itemBarY = lv_playerNameTextY;
    lv_itemBarPositionX = lv_itemIconPositionX;
    lv_ratingPositiveItemBarX = ((lv_itemX * 5) / 6);
    lv_ratingNegativeItemBarX = (lv_itemX / 6);
    lv_ratingPositiveItemBarPositionX = (lv_itemIconPositionX + (lv_itemX / 6));
    lv_medalIconXY = lv_playerNameTextY;
    lv_finalTextX = 300;
    lv_finalTextY = lv_itemBarY;
    lv_finalTextYPosition = (((lv_playerNameTextY + lv_itemSpacingY) * 8) + ((lv_itemSpacingY * 2) + lv_itemBarPositionY));
    lv_victoryButtonX = 450;
    lv_victoryButtonY = 60;
    lv_victoryTextX = 450;
    lv_victoryTextY = lv_victoryButtonY;
    lv_victoryButtonPositionY = (((lv_finalTextY + lv_itemSpacingY) * 3) + ((lv_itemSpacingY * 0) + lv_finalTextYPosition));
    lv_victoryTextPositionX = (lv_victoryButtonPositionX + 50);
    lv_victoryTextPositionY = (lv_victoryButtonPositionY + 15);
    lv_redTint = Color(100.00, 19.61, 19.61);
    lv_victoryButtonImage = "NOTD Red Frames.dds";
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_rankIcon[init_i] = c_invalidDialogControlId;
    }
    lv_rankTitle = StringExternal("Param/Value/074C6AA8");
    lv_rankImage = "Assets/Textures/btn-ability-terran-heal.dds";

    // Implementation
    lv_dialogX = ((lv_itemSpacingX * 14) + ((lv_playerNameTextX + (4 * lv_itemX)) + 230));
    lv_dialogY = ((lv_itemSpacingY * 19) + ((lv_itemIconXY + (lv_itemBarY * 11)) + 100));
    lv_victoryButtonPositionX = ((lv_dialogX / 2) - (lv_victoryButtonX / 2));
    lv_finalTextXPosition = (lv_victoryButtonPositionX + 70);
    lv_victoryTextPositionX = (lv_victoryButtonPositionX + 27);
    if ((gv_victory == true)) {
        lv_redTint = Color(100,100,100);
        lv_victoryButtonImage = "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds";
    }

    DialogCreate(lv_dialogX, lv_dialogY, c_anchorCenter, 0, lv_dialogPositionY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_endGameDialog1 = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeImage, "EndGameUI/EndGameUITemplate/UIBorder");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_redTint, PlayerGroupAll());
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "EndGameUI/ScorePageFirst");
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "EndGameUI/EndGameUITemplate/ScrollButton");
    gv_scrollEndGameUIButtons[0] = DialogControlLastCreated();
    DialogSetVisible(DialogLastCreated(), PlayerGroupActive(), true);
    DialogCreate(lv_dialogX, lv_dialogY, c_anchorCenter, 0, lv_dialogPositionY, true);
    DialogSetImageVisible(DialogLastCreated(), false);
    gv_endGameDialog2 = DialogLastCreated();
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeImage, "EndGameUI/EndGameUITemplate/UIBorder");
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), lv_redTint, PlayerGroupAll());
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "EndGameUI/ScorePageSecond");
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypeButton, "EndGameUI/EndGameUITemplate/ScrollButton");
    gv_scrollEndGameUIButtons[1] = DialogControlLastCreated();
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) != c_playerStatusUnused)) {
            if ((gv_playerDoctor[IntLoopCurrent()] == true)) {
                lv_rankTitle = StringExternal("Param/Value/FEF9177A");
                lv_rankImage = "Assets\\Textures\\btn-ability-terran-heal.dds";
            }
            else {
                lv_rankTitle = UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[IntLoopCurrent()]), "Title Full", 1);
                lv_rankImage = UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[IntLoopCurrent()]), "Icon", 1);
            }
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_playerRankIconXY, lv_playerRankIconXY, c_anchorTopLeft, lv_playerRankPositionX, (lv_playerNamePositionY + ((IntLoopCurrent() - 1) * (gv_playerNameTextY + lv_itemSpacingY))), lv_rankTitle, lv_rankImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
            libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_playerRankIconXY, lv_playerRankIconXY, c_anchorTopLeft, lv_playerRankPositionX, (lv_playerNamePositionY + ((IntLoopCurrent() - 1) * (gv_playerNameTextY + lv_itemSpacingY))), lv_rankTitle, lv_rankImage, c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        }

    }
    IntLoopEnd();
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) != c_playerStatusUnused)) {
            libNtve_gf_CreateDialogItemLabel(gv_endGameDialog1, lv_playerNameTextX, lv_playerNameTextY, c_anchorTopLeft, lv_playerNamePositionX, (lv_playerNamePositionY + ((IntLoopCurrent() - 1) * (lv_playerNameTextY + lv_itemSpacingY))), PlayerName(IntLoopCurrent()), Color(100,100,100), false, 0.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpPanelListBoxItemTitle", PlayerGroupAll());
            libNtve_gf_CreateDialogItemLabel(gv_endGameDialog2, lv_playerNameTextX, lv_playerNameTextY, c_anchorTopLeft, lv_playerNamePositionX, (lv_playerNamePositionY + ((IntLoopCurrent() - 1) * (lv_playerNameTextY + lv_itemSpacingY))), PlayerName(IntLoopCurrent()), Color(100,100,100), false, 0.0);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HelpPanelListBoxItemTitle", PlayerGroupAll());
        }

    }
    IntLoopEnd();
    auto73CB4E9B_ae = 4;
    auto73CB4E9B_ai = 1;
    lv_iLocal = 1;
    for ( ; ( (auto73CB4E9B_ai >= 0 && lv_iLocal <= auto73CB4E9B_ae) || (auto73CB4E9B_ai <= 0 && lv_iLocal >= auto73CB4E9B_ae) ) ; lv_iLocal += auto73CB4E9B_ai ) {
        if ((lv_iLocal != 2) && (lv_iLocal != 3)) {
            IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_itemBarImages[lv_iLocal][IntLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_itemBarImages[(lv_iLocal + 4)][IntLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                gv_itemBarButtons[lv_iLocal][IntLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                gv_itemBarButtons[(lv_iLocal + 4)][IntLoopCurrent()] = DialogControlLastCreated();
            }
            IntLoopEnd();
        }
        else {
            IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                libNtve_gf_CreateDialogItemImage(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                gv_itemBarImages[(lv_iLocal + 4)][IntLoopCurrent()] = DialogControlLastCreated();
                libNtve_gf_CreateDialogItemButton(gv_endGameDialog2, lv_itemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                gv_itemBarButtons[(lv_iLocal + 4)][IntLoopCurrent()] = DialogControlLastCreated();
            }
            IntLoopEnd();
            if ((lv_iLocal == 2)) {
                IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_ratingNegativeItemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_itemBarRatingImages[IntLoopCurrent()][2] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_ratingNegativeItemBarX, lv_itemBarY, c_anchorTopLeft, lv_itemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    gv_itemBarRatingButtons[IntLoopCurrent()][2] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_ratingPositiveItemBarX, lv_itemBarY, c_anchorTopLeft, lv_ratingPositiveItemBarPositionX, (lv_itemBarPositionY + (IntLoopCurrent() - 1)), StringToText(""), "Assets\\Textures\\black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                    gv_itemBarRatingImages[IntLoopCurrent()][1] = DialogControlLastCreated();
                    libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_ratingPositiveItemBarX, lv_itemBarY, c_anchorTopLeft, lv_ratingPositiveItemBarPositionX, (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_itemBarY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                    gv_itemBarRatingButtons[IntLoopCurrent()][1] = DialogControlLastCreated();
                }
                IntLoopEnd();
            }
            else if ((lv_iLocal == 3)) {
                IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    autoF9DEE8F2_ae = 3;
                    autoF9DEE8F2_ai = 1;
                    lv_jLocal = 0;
                    for ( ; ( (autoF9DEE8F2_ai >= 0 && lv_jLocal <= autoF9DEE8F2_ae) || (autoF9DEE8F2_ai <= 0 && lv_jLocal >= autoF9DEE8F2_ae) ) ; lv_jLocal += autoF9DEE8F2_ai ) {
                        libNtve_gf_CreateDialogItemImage(gv_endGameDialog1, lv_medalIconXY, lv_medalIconXY, c_anchorTopLeft, ((lv_jLocal * (lv_medalIconXY + lv_itemSpacingX)) + lv_itemBarPositionX), (((lv_medalIconXY + lv_itemSpacingX) * (IntLoopCurrent() - 1)) + lv_itemBarPositionY), StringToText(""), "Assets/Textures/black.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
                        gv_medalsItemImages[lv_jLocal][IntLoopCurrent()] = DialogControlLastCreated();
                        libNtve_gf_CreateDialogItemButton(gv_endGameDialog1, lv_medalIconXY, lv_medalIconXY, c_anchorTopLeft, ((lv_jLocal * (lv_medalIconXY + lv_itemSpacingX)) + lv_itemBarPositionX), (lv_itemBarPositionY + ((IntLoopCurrent() - 1) * (lv_medalIconXY + lv_itemSpacingY))), StringToText(""), StringToText(""), "");
                        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
                        gv_medalsItemButtons[lv_jLocal][IntLoopCurrent()] = DialogControlLastCreated();
                    }
                }
                IntLoopEnd();
            }
        }
        lv_itemBarPositionX += ((lv_itemSpacingX * 3) + lv_itemBarX);
        lv_itemIconPositionX += ((lv_itemSpacingX * 3) + lv_itemBarX);
        lv_ratingPositiveItemBarPositionX += ((lv_itemSpacingX * 3) + lv_itemBarX);
    }
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog1, lv_finalTextX, lv_finalTextY, c_anchorTopLeft, lv_finalTextXPosition, (lv_finalTextYPosition + ((lv_finalTextY + lv_itemSpacingY) * (IntLoopCurrent() - 1))), StringToText(""), Color(100,100,100), false, 0.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
        gv_finalTextLabel[IntLoopCurrent()][0] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_endGameDialog2, lv_finalTextX, lv_finalTextY, c_anchorTopLeft, lv_finalTextXPosition, (lv_finalTextYPosition + ((lv_finalTextY + lv_itemSpacingY) * (IntLoopCurrent() - 1))), StringToText(""), Color(100,100,100), false, 0.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "HeaderExtendedTemplate", PlayerGroupAll());
        gv_finalTextLabel[IntLoopCurrent()][1] = DialogControlLastCreated();
    }
    IntLoopEnd();
    gv_victoryButton1 = DialogControlLastCreated();
    if ((gv_victory == true)) {
        DialogControlCreateFromTemplate(gv_endGameDialog1, c_triggerControlTypeButton, "EndGameUI/VictoryButton");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY);
        gv_victoryButton1 = DialogControlLastCreated();
        DialogControlCreateFromTemplate(gv_endGameDialog2, c_triggerControlTypeButton, "EndGameUI/VictoryButton");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY);
        gv_victoryButton2 = DialogControlLastCreated();
    }
    else {
        DialogControlCreateFromTemplate(gv_endGameDialog1, c_triggerControlTypeButton, "EndGameUI/DefeatButton");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY);
        gv_victoryButton1 = DialogControlLastCreated();
        DialogControlCreateFromTemplate(gv_endGameDialog2, c_triggerControlTypeButton, "EndGameUI/DefeatButton");
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lv_victoryButtonPositionX, lv_victoryButtonPositionY);
        gv_victoryButton2 = DialogControlLastCreated();
    }
    TriggerEnable(gt_ReturntoEarth, true);
    gf_EndGameUISetNOTD();
    return true;
}

trigger auto_gf_EndGameUISetNOTD_Trigger = null;

void gf_EndGameUISetNOTD () {
    if (auto_gf_EndGameUISetNOTD_Trigger == null) {
        auto_gf_EndGameUISetNOTD_Trigger = TriggerCreate("auto_gf_EndGameUISetNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_EndGameUISetNOTD_Trigger, false, false);
}

bool auto_gf_EndGameUISetNOTD_TriggerFunc (bool testConds, bool runActions) {
    int auto62116798_ae;
    int auto62116798_ai;
    int autoFDB228BA_ae;
    int autoFDB228BA_ai;
    int autoD93C9B9F_ae;
    int autoD93C9B9F_ai;

    // Variable Declarations
    int[9] lv_xPGained;
    int[9] lv_ratingGained;
    int lv_maxXP;
    int lv_minRating;
    int lv_maxRating;
    int lv_maxGamesPlayed;
    int lv_maxKills;
    int lv_maxHits;
    fixed lv_maxDamageTaken;
    int lv_maxWins;
    int[9] lv_totalWins;
    int lv_iLocal;
    int lv_jLocal;

    // Variable Initialization

    // Implementation
    IntLoopBegin(0, 1);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_SetDialogItemText(gv_finalTextLabel[1][IntLoopCurrent()], (StringExternal("Param/Value/8D1DE837") + IntToText(gv_squadRating)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_finalTextLabel[2][IntLoopCurrent()], (StringExternal("Param/Value/184B235F") + IntToText(gv_squadXP)), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_finalTextLabel[3][IntLoopCurrent()], (StringExternal("Param/Value/BC194400") + gv_difficulty), PlayerGroupAll());
    }
    IntLoopEnd();
    Wait(0.5, c_timeGame);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) != c_playerStatusUnused)) {
            lv_totalWins[IntLoopCurrent()] = ((gv_survivalWin[IntLoopCurrent()] + gv_survivalWinNM[IntLoopCurrent()]) + (gv_sTWinNormal[IntLoopCurrent()] + ((gv_sTWinNM[IntLoopCurrent()] + (gv_sTSpeed[IntLoopCurrent()] + gv_sTNMSpeed[IntLoopCurrent()])) + (gv_eCWinNormal[IntLoopCurrent()] + ((gv_eCWinNM[IntLoopCurrent()] + (gv_eCSpeed[IntLoopCurrent()] + gv_eCNMSpeed[IntLoopCurrent()])) + (gv_aCWinNormal[IntLoopCurrent()] + (gv_aCWinNM[IntLoopCurrent()] + (gv_aCSpeed[IntLoopCurrent()] + gv_aCNMSpeed[IntLoopCurrent()]))))))));
            lv_xPGained[IntLoopCurrent()] = (gv_playerXP[IntLoopCurrent()] - gv_startingXP[IntLoopCurrent()]);
            if ((lv_xPGained[IntLoopCurrent()] >= 0)) {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[1][IntLoopCurrent()], (StringExternal("Param/Value/6FFC4D93") + IntToText(lv_xPGained[IntLoopCurrent()])), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[1][IntLoopCurrent()], IntToText(lv_xPGained[IntLoopCurrent()]), PlayerGroupAll());
            }
            lv_ratingGained[IntLoopCurrent()] = (gv_playerRating[IntLoopCurrent()] - gv_startingRating[IntLoopCurrent()]);
            if ((lv_ratingGained[IntLoopCurrent()] >= 0)) {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[IntLoopCurrent()][1], (StringExternal("Param/Value/07E6F2F0") + IntToText(lv_ratingGained[IntLoopCurrent()])), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[IntLoopCurrent()][2], (StringExternal("Param/Value/FA56F8FC") + IntToText(lv_ratingGained[IntLoopCurrent()])), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[IntLoopCurrent()][1], IntToText(lv_ratingGained[IntLoopCurrent()]), PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_itemBarRatingButtons[IntLoopCurrent()][2], IntToText(lv_ratingGained[IntLoopCurrent()]), PlayerGroupAll());
            }
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[4][IntLoopCurrent()], IntToText(gv_playerGamesPlayed[IntLoopCurrent()]), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[5][IntLoopCurrent()], IntToText(PlayerScoreValueGetAsInt(IntLoopCurrent(), "UnitsKilledCount")), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[6][IntLoopCurrent()], FixedToText(gv_hitsTaken[IntLoopCurrent()], 0), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[7][IntLoopCurrent()], IntToText(FixedToInt(gv_playerDamageTaken[IntLoopCurrent()])), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_itemBarButtons[8][IntLoopCurrent()], IntToText(lv_totalWins[IntLoopCurrent()]), PlayerGroupAll());
        }

        lv_minRating = MinI(lv_ratingGained[IntLoopCurrent()], lv_minRating);
        lv_minRating = MinI(0, lv_minRating);
        lv_maxRating = MaxI(lv_ratingGained[IntLoopCurrent()], lv_maxRating);
        lv_maxRating = MaxI(0, lv_maxRating);
        lv_maxXP = MaxI(lv_xPGained[IntLoopCurrent()], lv_maxXP);
        lv_maxGamesPlayed = MaxI(gv_playerGamesPlayed[IntLoopCurrent()], lv_maxGamesPlayed);
        lv_maxHits = MaxI(FixedToInt(gv_hitsTaken[IntLoopCurrent()]), lv_maxHits);
        lv_maxDamageTaken = MaxF(gv_playerDamageTaken[IntLoopCurrent()], lv_maxDamageTaken);
        lv_maxWins = MaxI(lv_totalWins[IntLoopCurrent()], lv_maxWins);
        lv_maxKills = MaxI(PlayerScoreValueGetAsInt(IntLoopCurrent(), "UnitsKilledCount"), lv_maxKills);
    }
    IntLoopEnd();
    auto62116798_ae = gv_numberofPlayers;
    auto62116798_ai = 1;
    lv_jLocal = gv_indexBaseValue;
    for ( ; ( (auto62116798_ai >= 0 && lv_jLocal <= auto62116798_ae) || (auto62116798_ai <= 0 && lv_jLocal >= auto62116798_ae) ) ; lv_jLocal += auto62116798_ai ) {
        if ((lv_xPGained[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[1][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_protoss.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[1][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_xPGained[lv_jLocal]) / IntToFixed(lv_maxXP)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((gv_playerGamesPlayed[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[4][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_terran.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[4][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(gv_playerGamesPlayed[lv_jLocal]) / IntToFixed(lv_maxGamesPlayed)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((PlayerScoreValueGetAsInt(lv_jLocal, "UnitsKilledCount") > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[5][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_terran.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[5][lv_jLocal], PlayerGroupAll(), FixedToInt(((PlayerScoreValueGetAsFixed(lv_jLocal, "UnitsKilledCount") / IntToFixed(lv_maxKills)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((gv_hitsTaken[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[6][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_backdrop_zerg.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[6][lv_jLocal], PlayerGroupAll(), FixedToInt(((gv_hitsTaken[lv_jLocal] / IntToFixed(lv_maxHits)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((gv_playerDamageTaken[lv_jLocal] > 1.0)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[7][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_backdrop_zerg.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[7][lv_jLocal], PlayerGroupAll(), FixedToInt(((gv_playerDamageTaken[lv_jLocal] / lv_maxDamageTaken) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        if ((lv_totalWins[lv_jLocal] > 1)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarImages[8][lv_jLocal], "Assets\\Textures\\ui_loadingbar_bar_highlighted_terran.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarImages[8][lv_jLocal], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_totalWins[lv_jLocal]) / IntToFixed(lv_maxWins)) * IntToFixed(gv_itemX))), gv_playerNameTextY);
        }

        autoFDB228BA_ae = 4;
        autoFDB228BA_ai = 1;
        lv_iLocal = 1;
        for ( ; ( (autoFDB228BA_ai >= 0 && lv_iLocal <= autoFDB228BA_ae) || (autoFDB228BA_ai <= 0 && lv_iLocal >= autoFDB228BA_ae) ) ; lv_iLocal += autoFDB228BA_ai ) {
            if ((gv_medalsAwardedText[lv_iLocal][lv_jLocal] != null)) {
                libNtve_gf_SetDialogItemImage(gv_medalsItemImages[lv_iLocal][lv_jLocal], gv_medalsAwardedImages[lv_iLocal][lv_jLocal], PlayerGroupAll());
                libNtve_gf_SetDialogItemTooltip(gv_medalsItemButtons[lv_iLocal][lv_jLocal], gv_medalsAwardedText[lv_iLocal][lv_jLocal], PlayerGroupAll());
            }

        }
    }
    autoD93C9B9F_ae = gv_numberofPlayers;
    autoD93C9B9F_ai = 1;
    lv_jLocal = gv_indexBaseValue;
    for ( ; ( (autoD93C9B9F_ai >= 0 && lv_jLocal <= autoD93C9B9F_ae) || (autoD93C9B9F_ai <= 0 && lv_jLocal >= autoD93C9B9F_ae) ) ; lv_jLocal += autoD93C9B9F_ai ) {
        if ((lv_ratingGained[lv_jLocal] > 0)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarRatingImages[lv_jLocal][1], "Assets\\Textures\\ui_loadingbar_bar_highlighted_protoss.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarRatingImages[lv_jLocal][1], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_ratingGained[lv_jLocal]) / IntToFixed(lv_maxRating)) * ((5.0 / 6.0) * IntToFixed(gv_itemX)))), gv_playerNameTextY);
            DialogControlSetPosition(gv_itemBarRatingImages[lv_jLocal][1], PlayerGroupAll(), c_anchorTopLeft, 664, (75 + ((lv_jLocal - 1) * (25 + 5))));
        }
        else if ((lv_ratingGained[lv_jLocal] < 0) && (PlayerStatus(lv_jLocal) != c_playerStatusUnused)) {
            libNtve_gf_SetDialogItemImage(gv_itemBarRatingImages[lv_jLocal][2], "Assets\\Textures\\ui_loadingbar_bar_backdrop_zerg.dds", PlayerGroupAll());
            DialogControlSetSize(gv_itemBarRatingImages[lv_jLocal][2], PlayerGroupAll(), FixedToInt(((IntToFixed(lv_ratingGained[lv_jLocal]) / IntToFixed(lv_minRating)) * ((1.0 / 6.0) * IntToFixed(gv_itemX)))), gv_playerNameTextY);
            DialogControlSetPosition(gv_itemBarRatingImages[lv_jLocal][2], PlayerGroupAll(), c_anchorTopLeft, (614 + (50 - FixedToInt(((IntToFixed(lv_ratingGained[lv_jLocal]) / IntToFixed(lv_minRating)) * (IntToFixed(gv_itemX) / 6.0))))), (75 + ((lv_jLocal - 1) * (25 + 5))));
        }
    }
    return true;
}

trigger auto_gf_ZombieAIWorldEvents_Trigger = null;

void gf_ZombieAIWorldEvents () {
    if (auto_gf_ZombieAIWorldEvents_Trigger == null) {
        auto_gf_ZombieAIWorldEvents_Trigger = TriggerCreate("auto_gf_ZombieAIWorldEvents_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZombieAIWorldEvents_Trigger, false, false);
}

bool auto_gf_ZombieAIWorldEvents_TriggerFunc (bool testConds, bool runActions) {
    int autoB5287105_n;
    int autoB5287105_i;

    // Variable Declarations
    region lv_localRegionA;

    // Variable Initialization

    // Implementation
    gf_GameState();
    while ((gv_gameOver == false)) {
        UnitGroupLoopBegin(gv_zombieWave);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitHasBehavior(UnitGroupLoopCurrent(), "TauntLevel1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "TauntLevel2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "TauntLevel3") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "LookAttack") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ImYourFatherTauntedLevel1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ImYourFatherTauntedLevel2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ImYourFatherTauntedLevel3") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "ComplianceMatrix") == true) || (((UnitGetOwner(UnitGroupLoopCurrent()) >= 1) && (UnitGetOwner(UnitGroupLoopCurrent()) <= 8)) == true))) {
            }
            else {
                if (((UnitGetType(UnitGroupLoopCurrent()) == "InfestedAbominationBurrowed") || (UnitGetType(UnitGroupLoopCurrent()) == "RoachBurrowed") || (UnitGetType(UnitGroupLoopCurrent()) == "Devourer2") || (UnitGetType(UnitGroupLoopCurrent()) == "Slasher2") || (UnitGetType(UnitGroupLoopCurrent()) == "ZerglingBurrowed") || (UnitGetType(UnitGroupLoopCurrent()) == "Hugger2") || (UnitGetType(UnitGroupLoopCurrent()) == "Perses"))) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 5.0))), c_orderQueueReplace);
                }
                else if (true) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), c_orderQueueReplace);
                }
            }
            Wait(0.01, c_timeGame);
        }
        UnitGroupLoopEnd();
        if ((RandomInt(0, 10) == 1) && (gv_wave > 1) && (gv_squadXP >= 75)) {
            if ((RandomInt(0, 1) == 1)) {
                SoundPlay(SoundLink("ZombieHowlAmbience", -1), PlayerGroupAll(), 100.0, 0.0);
            }

            if ((RandomInt(0, 30) == 1) && (gv_squadRating >= 1600) && (gv_noNewbie == true) && (gv_cinematicMode == false)) {
                libNtve_gf_UnitCreateFacingPoint(1, "BrainBug2", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBrainBug", 0)), c_orderQueueReplace);
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_brainBugs);
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                if ((gv_noNewbie == false)) {
                    libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
                }

            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        }

        if ((RandomInt(1, 500) == 1) && (gv_wave > 1) && (gv_cinematicMode == false)) {
            lv_localRegionA = gf_GetRegionNotNearMarines(5.0);
            autoB5287105_n = (gv_spawnFactor * 5);
            for (autoB5287105_i = 1; autoB5287105_i <= autoB5287105_n; autoB5287105_i += 1) {
                if ((gv_nightmare == true) && (RandomInt(1, 10) == 1)) {
                    UnitCreate(1, "BanelingBurrowed", 0, 13, gf_RandomPointinRegiononMap(lv_localRegionA), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
                }
                else {
                    UnitCreate(1, "Blindling2", 0, 13, gf_RandomPointinRegiononMap(lv_localRegionA), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBlindling", 0)), c_orderQueueReplace);
                }
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                if ((gv_nightmare == true) && (RandomInt(1, 7) == 1)) {
                    UnitCreate(1, "ZerglingBurrowed", 0, 13, RegionRandomPoint(lv_localRegionA), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                }

                Wait(0.05, c_timeGame);
            }
            UnitCreate(1, "BanelingBurrowed", 0, 13, RegionRandomPoint(lv_localRegionA), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        else if (((RandomInt(1, 225) == 1) || (gv_wave == 5)) && (gv_oMCommTower == false) && (gv_survivalMode == false) && (gv_storyline != 3) && (gv_wave > 1)) {
            gv_oMCommTower = true;
            ObjectiveCreate(StringExternal("Param/Value/2E1900EB"), StringExternal("Param/Value/49791ACC"), c_objectiveStateActive, false);
            gv_commTowerObjective = ObjectiveLastCreated();
            gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/683F9C4F"));
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(135)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0, 270.0);
            TriggerEnable(gt_OM6CommTowerTransmission, false);
            TriggerEnable(gt_OM1EnterCommTower, true);
        }
        else if ((gv_noNewbie == true) && (gv_survivalMode == false) && (RandomInt(1, 400) == 1) && (gv_oMScrapyard == false) && (gv_alivePlayers > 1) && (gv_wave > 1) && (gv_storyline != 3)) {
            gv_oMScrapyard = true;
            TriggerExecute(gt_OM4ScrapyardSalvageInit, true, false);
        }
        else if (((RandomInt(1, 350) == 1) || ((RandomInt(1, 275) == 1) && (gv_storyline != 1))) && (gv_wave > 1) && (gv_cinematicMode == false) && (gv_bossFight == false) && (gv_noNewbie == true) && (gv_squadRating > 1575)) {
            gf_RandomNydusPop();
        }
        else if ((gv_survivalMode == true) && (RandomInt(1, 275) == 1) && (gv_bossFight == false) && (gv_wave > 1)) {
            gf_SporelingWave();
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

region gf_GetRegionNotNearMarines (fixed lp_radius) {
    // Variable Declarations
    region lv_region;

    // Variable Initialization

    // Implementation
    lv_region = RegionCircle(RegionRandomPoint(RegionEntireMap()), lp_radius);
    while (gf_PointNearUnitGroup(RegionGetCenter(lv_region), 15.0, gv_marines)) {
        lv_region = RegionCircle(RegionRandomPoint(RegionEntireMap()), lp_radius);
    }
    return lv_region;
}

point gf_RandomPointinRegiononMap (region lp_enclosingRegion) {
    // Variable Declarations
    point lv_localpoint;

    // Variable Initialization
    lv_localpoint = RegionRandomPoint(lp_enclosingRegion);

    // Implementation
    while ((RegionContainsPoint(RegionPlayableMap(), lv_localpoint) == false)) {
        lv_localpoint = RegionRandomPoint(lp_enclosingRegion);
    }
    return lv_localpoint;
}

bool gf_PointNearUnitGroup (point lp_point, fixed lp_distance, unitgroup lp_group) {
    // Implementation
    return (DistanceBetweenPoints(lp_point, UnitGetPosition(UnitGroupClosestToPoint(lp_group, lp_point))) <= lp_distance);
}

trigger auto_gf_GameState_Trigger = null;

void gf_GameState () {
    if (auto_gf_GameState_Trigger == null) {
        auto_gf_GameState_Trigger = TriggerCreate("auto_gf_GameState_TriggerFunc");
    }

    TriggerExecute(auto_gf_GameState_Trigger, false, false);
}

bool auto_gf_GameState_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while (!((gv_gameOver == true))) {
        Wait(1.0, c_timeGame);
    }
    TriggerExecute(gt_GameOverCheck, true, false);
    Wait(1.0, c_timeGame);
    gf_GameOverInit();
    return true;
}

trigger auto_gf_BlackMaskApplication_Trigger = null;

void gf_BlackMaskApplication () {
    if (auto_gf_BlackMaskApplication_Trigger == null) {
        auto_gf_BlackMaskApplication_Trigger = TriggerCreate("auto_gf_BlackMaskApplication_TriggerFunc");
    }

    TriggerExecute(auto_gf_BlackMaskApplication_Trigger, false, false);
}

bool auto_gf_BlackMaskApplication_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while ((gv_gameOver == false)) {
        if ((gv_noNewbie == true)) {
            PlayerGroupLoopBegin(gv_marineSquad);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                VisExploreArea(PlayerGroupLoopCurrent(), RegionEntireMap(), false, false);
            }
            PlayerGroupLoopEnd();
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

trigger auto_gf_SporelingWave_Trigger = null;

void gf_SporelingWave () {
    if (auto_gf_SporelingWave_Trigger == null) {
        auto_gf_SporelingWave_Trigger = TriggerCreate("auto_gf_SporelingWave_TriggerFunc");
    }

    TriggerExecute(auto_gf_SporelingWave_Trigger, false, false);
}

bool auto_gf_SporelingWave_TriggerFunc (bool testConds, bool runActions) {
    int auto665562D3_n;
    int auto665562D3_i;

    // Variable Declarations
    unitgroup lv_sporelingGroup;

    // Variable Initialization
    lv_sporelingGroup = UnitGroupEmpty();

    // Implementation
    auto665562D3_n = 5;
    for (auto665562D3_i = 1; auto665562D3_i <= auto665562D3_n; auto665562D3_i += 1) {
        UnitCreate(1, "ZergDropPod", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 12.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_sporelingGroup, UnitLastCreated());
        Wait(RandomFixed(0.0, 3.0), c_timeGame);
    }
    Wait(3.9, c_timeGame);
    UnitGroupLoopBegin(lv_sporelingGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((gv_nightmare == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreep", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }

        if ((RandomInt(0, 1000) == 1) && (gv_nightmare == true)) {
            UnitCreate(1, "SpineCrawler", 0, 13, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        }
        else if ((RandomInt(0, 100) == 1)) {
            UnitCreate(1, "UrsadakCalf", 0, 13, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        }
        else if ((RandomInt(0, 75) == 1) && (gv_nightmare == true)) {
            UnitCreate(1, "ZombieBroodMother2", 0, 13, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBroodmother", 0)), c_orderQueueReplace);
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        }
        else if ((RandomInt(0, 35) == 1)) {
            UnitCreate(1, "BrainBug", 0, 13, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        }
        else if (true) {
            UnitCreateEffectPoint(UnitGroupLoopCurrent(), "Shotgun", UnitGetPosition(UnitGroupLoopCurrent()));
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        }
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(RandomFixed(0.0, 1.0), c_timeGame);
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_RandomNydusPop_Trigger = null;

void gf_RandomNydusPop () {
    if (auto_gf_RandomNydusPop_Trigger == null) {
        auto_gf_RandomNydusPop_Trigger = TriggerCreate("auto_gf_RandomNydusPop_TriggerFunc");
    }

    TriggerExecute(auto_gf_RandomNydusPop_Trigger, false, false);
}

bool auto_gf_RandomNydusPop_TriggerFunc (bool testConds, bool runActions) {
    int auto13CC017A_n;
    int auto13CC017A_i;

    // Variable Declarations
    unit lv_affectedMarine;
    point lv_localPointA;
    region lv_localRegionA;
    unit lv_localUnitInfestedWorm;
    actor lv_localActorRumble;

    // Variable Initialization
    lv_affectedMarine = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
    lv_localPointA = RegionRandomPoint(RegionCircle(UnitGetPosition(lv_affectedMarine), 3.0));

    // Implementation
    libNtve_gf_CreateModelAtPoint("NydusRumble", lv_localPointA);
    lv_localActorRumble = libNtve_gf_ActorLastCreated();
    gf_MarineSpeechNOTD(lv_affectedMarine, StringExternal("Param/Value/367C586B"));
    Wait(1.2, c_timeReal);
    libNtve_gf_KillModel(lv_localActorRumble);
    UnitCreate(1, "InfestedWorm", 0, 14, lv_localPointA, libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "NydusWormTimedLife", UnitLastCreated(), 1);
    lv_localUnitInfestedWorm = UnitLastCreated();
    Wait(1.2, c_timeReal);
    if ((gv_nightmare == false)) {
        Wait(1.0, c_timeReal);
    }

    if ((gv_nightmare == false)) {
        Wait(1.0, c_timeReal);
    }

    auto13CC017A_n = 20;
    for (auto13CC017A_i = 1; auto13CC017A_i <= auto13CC017A_n; auto13CC017A_i += 1) {
        UnitCreate(1, "Parasite2", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(lv_localUnitInfestedWorm), 1.35)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(0.12, c_timeGame);
    }
    return true;
}

point gf_RandomPointatGroundHeight (region lp_region, fixed lp_groundHeight) {
    // Variable Declarations
    point lv_randomPoint;

    // Variable Initialization
    lv_randomPoint = RegionRandomPoint(lp_region);

    // Implementation
    if ((WorldHeight(c_heightMapGround, lv_randomPoint) < lp_groundHeight)) {
        return lv_randomPoint;
    }
    else {
        return gf_RandomPointatGroundHeight(lp_region, lp_groundHeight);
    }
}

bool gf_CPDecayFactor () {
    // Implementation
    if ((((gv_nightmare == true) && (RandomInt(1, 100) <= 15)) || ((gv_nightmare == false) && (gv_noNewbie == true) && (RandomInt(1, 100) <= 20)) || ((gv_nightmare == false) && (gv_noNewbie == false) && (RandomInt(1, 100) <= 25)))) {
        return true;
    }
    else {
        return false;
    }
}

trigger auto_gf_MarineSpeechNOTD_Trigger = null;
unit auto_gf_MarineSpeechNOTD_lp_speechUnit;
text auto_gf_MarineSpeechNOTD_lp_speech;

void gf_MarineSpeechNOTD (unit lp_speechUnit, text lp_speech) {
    auto_gf_MarineSpeechNOTD_lp_speechUnit = lp_speechUnit;
    auto_gf_MarineSpeechNOTD_lp_speech = lp_speech;

    if (auto_gf_MarineSpeechNOTD_Trigger == null) {
        auto_gf_MarineSpeechNOTD_Trigger = TriggerCreate("auto_gf_MarineSpeechNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_MarineSpeechNOTD_Trigger, false, false);
}

bool auto_gf_MarineSpeechNOTD_TriggerFunc (bool testConds, bool runActions) {
    unit lp_speechUnit = auto_gf_MarineSpeechNOTD_lp_speechUnit;
    text lp_speech = auto_gf_MarineSpeechNOTD_lp_speech;

    // Variable Declarations
    int lv_localTextTag;

    // Variable Initialization
    lv_localTextTag = c_textTagNone;

    // Implementation
    if ((UnitIsAlive(lp_speechUnit) == true)) {
        SoundPlayAtPoint(SoundLink("Transmission", -1), PlayerGroupAll(), UnitGetPosition(lp_speechUnit), 1.5, 31.0, 0.0);
        if ((UnitGroupHasUnit(gv_marines, lp_speechUnit) == true)) {
            TextTagCreate((UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[UnitGetOwner(lp_speechUnit)]), "Title Brief", 1) + PlayerName(UnitGetOwner(lp_speechUnit)) + StringExternal("Param/Value/96EC434E") + lp_speech), 24, UnitGetPosition(lp_speechUnit), 1.5, true, true, PlayerGroupActive());
        }
        else {
            TextTagCreate((UnitTypeGetName(UnitGetType(lp_speechUnit)) + (StringExternal("Param/Value/C5735DA3") + lp_speech)), 24, UnitGetPosition(lp_speechUnit), 1.5, true, true, PlayerGroupActive());
        }
        lv_localTextTag = TextTagLastCreated();
        TextTagSetColor(lv_localTextTag, c_textTagColorText, Color(95.69, 84.31, 16.86));
        TextTagAttachToUnit(lv_localTextTag, lp_speechUnit, 1.5);
        TextTagSetTime(lv_localTextTag, c_textTagTimeDuration, 5.0);
        TextTagSetTime(lv_localTextTag, c_textTagTimeFadeDuration, 0.0);
        TextTagSetTime(lv_localTextTag, c_textTagTimeFadeOut, 0.0);
    }

    return true;
}

trigger auto_gf_CoordinateTextNOTD_Trigger = null;
point auto_gf_CoordinateTextNOTD_lp_displayPoint;
text auto_gf_CoordinateTextNOTD_lp_speech;

void gf_CoordinateTextNOTD (point lp_displayPoint, text lp_speech) {
    auto_gf_CoordinateTextNOTD_lp_displayPoint = lp_displayPoint;
    auto_gf_CoordinateTextNOTD_lp_speech = lp_speech;

    if (auto_gf_CoordinateTextNOTD_Trigger == null) {
        auto_gf_CoordinateTextNOTD_Trigger = TriggerCreate("auto_gf_CoordinateTextNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_CoordinateTextNOTD_Trigger, false, false);
}

bool auto_gf_CoordinateTextNOTD_TriggerFunc (bool testConds, bool runActions) {
    point lp_displayPoint = auto_gf_CoordinateTextNOTD_lp_displayPoint;
    text lp_speech = auto_gf_CoordinateTextNOTD_lp_speech;

    // Variable Declarations
    int lv_localTextTag;

    // Variable Initialization
    lv_localTextTag = c_textTagNone;

    // Implementation
    SoundPlayAtPoint(SoundLink("Transmission", -1), PlayerGroupAll(), lp_displayPoint, 1.5, 20.0, 0.0);
    TextTagCreate(lp_speech, 24, lp_displayPoint, 1.0, true, false, PlayerGroupActive());
    lv_localTextTag = TextTagLastCreated();
    Wait(5.0, c_timeReal);
    TextTagDestroy(lv_localTextTag);
    return true;
}

trigger auto_gf_RadioNOTD_Trigger = null;
text auto_gf_RadioNOTD_lp_speechUnit;
text auto_gf_RadioNOTD_lp_speech;

void gf_RadioNOTD (text lp_speechUnit, text lp_speech) {
    auto_gf_RadioNOTD_lp_speechUnit = lp_speechUnit;
    auto_gf_RadioNOTD_lp_speech = lp_speech;

    if (auto_gf_RadioNOTD_Trigger == null) {
        auto_gf_RadioNOTD_Trigger = TriggerCreate("auto_gf_RadioNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_RadioNOTD_Trigger, false, false);
}

bool auto_gf_RadioNOTD_TriggerFunc (bool testConds, bool runActions) {
    text lp_speechUnit = auto_gf_RadioNOTD_lp_speechUnit;
    text lp_speech = auto_gf_RadioNOTD_lp_speech;

    // Implementation
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupActive(), 75.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/A5117E49") + (lp_speechUnit + (StringExternal("Param/Value/5DDB7741") + (lp_speech + StringExternal("Param/Value/3778460A"))))));
    return true;
}

trigger auto_gf_TipNOTD_Trigger = null;
int auto_gf_TipNOTD_lp_tipThreshold;
text auto_gf_TipNOTD_lp_tipText;

void gf_TipNOTD (int lp_tipThreshold, text lp_tipText) {
    auto_gf_TipNOTD_lp_tipThreshold = lp_tipThreshold;
    auto_gf_TipNOTD_lp_tipText = lp_tipText;

    if (auto_gf_TipNOTD_Trigger == null) {
        auto_gf_TipNOTD_Trigger = TriggerCreate("auto_gf_TipNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipNOTD_Trigger, false, false);
}

bool auto_gf_TipNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_tipThreshold = auto_gf_TipNOTD_lp_tipThreshold;
    text lp_tipText = auto_gf_TipNOTD_lp_tipText;

    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerXP[IntLoopCurrent()] < lp_tipThreshold)) {
            SoundPlay(SoundLink("UI_TipButtonAppear", -1), PlayerGroupSingle(IntLoopCurrent()), 100.0, 0.0);
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDirective, (StringExternal("Param/Value/3FAE88EC") + lp_tipText));
        }

    }
    IntLoopEnd();
    Wait(8.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

trigger auto_gf_TipLocalNOTD_Trigger = null;
int auto_gf_TipLocalNOTD_lp_tipThreshold;
int auto_gf_TipLocalNOTD_lp_tipPlayer;
text auto_gf_TipLocalNOTD_lp_tipText;

void gf_TipLocalNOTD (int lp_tipThreshold, int lp_tipPlayer, text lp_tipText) {
    auto_gf_TipLocalNOTD_lp_tipThreshold = lp_tipThreshold;
    auto_gf_TipLocalNOTD_lp_tipPlayer = lp_tipPlayer;
    auto_gf_TipLocalNOTD_lp_tipText = lp_tipText;

    if (auto_gf_TipLocalNOTD_Trigger == null) {
        auto_gf_TipLocalNOTD_Trigger = TriggerCreate("auto_gf_TipLocalNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_TipLocalNOTD_Trigger, false, false);
}

bool auto_gf_TipLocalNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_tipThreshold = auto_gf_TipLocalNOTD_lp_tipThreshold;
    int lp_tipPlayer = auto_gf_TipLocalNOTD_lp_tipPlayer;
    text lp_tipText = auto_gf_TipLocalNOTD_lp_tipText;

    // Implementation
    if ((gv_playerXP[lp_tipPlayer] < lp_tipThreshold)) {
        SoundPlay(SoundLink("UI_TipButtonAppear", -1), PlayerGroupSingle(lp_tipPlayer), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupSingle(lp_tipPlayer), c_messageAreaDirective, (StringExternal("Param/Value/C7CA12A0") + lp_tipText));
    }

    Wait(9.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    return true;
}

trigger auto_gf_CreateItemNOTD_Trigger = null;
string auto_gf_CreateItemNOTD_lp_itemToBeCreated;
int auto_gf_CreateItemNOTD_lp_quantity;

void gf_CreateItemNOTD (string lp_itemToBeCreated, int lp_quantity) {
    auto_gf_CreateItemNOTD_lp_itemToBeCreated = lp_itemToBeCreated;
    auto_gf_CreateItemNOTD_lp_quantity = lp_quantity;

    if (auto_gf_CreateItemNOTD_Trigger == null) {
        auto_gf_CreateItemNOTD_Trigger = TriggerCreate("auto_gf_CreateItemNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateItemNOTD_Trigger, false, false);
}

bool auto_gf_CreateItemNOTD_TriggerFunc (bool testConds, bool runActions) {
    string lp_itemToBeCreated = auto_gf_CreateItemNOTD_lp_itemToBeCreated;
    int lp_quantity = auto_gf_CreateItemNOTD_lp_quantity;

    int auto85AA9F7C_n;
    int auto85AA9F7C_i;

    // Variable Declarations
    point lv_itemSpawnPoint;

    // Variable Initialization
    lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());

    // Implementation
    auto85AA9F7C_n = lp_quantity;
    for (auto85AA9F7C_i = 1; auto85AA9F7C_i <= auto85AA9F7C_n; auto85AA9F7C_i += 1) {
        lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());
        while ((PointPathingPassable(lv_itemSpawnPoint) == false)) {
            lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());
        }
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_itemSpawnPoint) <= 15.0)) {
                UnitCreate(1, "TerranDropPod", 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
                Wait(1.45, c_timeReal);
                UnitKill(UnitLastCreated());
                break;
            }

        }
        UnitGroupLoopEnd();
        UnitCreate(1, lp_itemToBeCreated, 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
        Wait(0.1, c_timeGame);
    }
    return true;
}

trigger auto_gf_CreateItemLocalNOTD_Trigger = null;
string auto_gf_CreateItemLocalNOTD_lp_itemToBeCreated;
int auto_gf_CreateItemLocalNOTD_lp_quantity;
region auto_gf_CreateItemLocalNOTD_lp_deploymentArea;

void gf_CreateItemLocalNOTD (string lp_itemToBeCreated, int lp_quantity, region lp_deploymentArea) {
    auto_gf_CreateItemLocalNOTD_lp_itemToBeCreated = lp_itemToBeCreated;
    auto_gf_CreateItemLocalNOTD_lp_quantity = lp_quantity;
    auto_gf_CreateItemLocalNOTD_lp_deploymentArea = lp_deploymentArea;

    if (auto_gf_CreateItemLocalNOTD_Trigger == null) {
        auto_gf_CreateItemLocalNOTD_Trigger = TriggerCreate("auto_gf_CreateItemLocalNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateItemLocalNOTD_Trigger, false, false);
}

bool auto_gf_CreateItemLocalNOTD_TriggerFunc (bool testConds, bool runActions) {
    string lp_itemToBeCreated = auto_gf_CreateItemLocalNOTD_lp_itemToBeCreated;
    int lp_quantity = auto_gf_CreateItemLocalNOTD_lp_quantity;
    region lp_deploymentArea = auto_gf_CreateItemLocalNOTD_lp_deploymentArea;

    int auto447EA4F6_n;
    int auto447EA4F6_i;

    // Variable Declarations
    point lv_itemSpawnPoint;

    // Variable Initialization
    lv_itemSpawnPoint = RegionRandomPoint(RegionPlayableMap());

    // Implementation
    auto447EA4F6_n = lp_quantity;
    for (auto447EA4F6_i = 1; auto447EA4F6_i <= auto447EA4F6_n; auto447EA4F6_i += 1) {
        lv_itemSpawnPoint = RegionRandomPoint(lp_deploymentArea);
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_itemSpawnPoint) <= 15.0)) {
                UnitCreate(1, "TerranDropPod", 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
                Wait(1.45, c_timeReal);
                UnitKill(UnitLastCreated());
                break;
            }

        }
        UnitGroupLoopEnd();
        UnitCreate(1, lp_itemToBeCreated, 0, 0, lv_itemSpawnPoint, libNtve_gf_RandomAngle());
        Wait(0.1, c_timeGame);
    }
    return true;
}

void gf_UnifiedAwards (int lp_playerXP, fixed lp_marineXP, int lp_credits, int lp_karma, int lp_rating) {
    // Implementation
    if ((lp_rating != 0)) {
        gf_AwardRatingNOTD(lp_rating);
    }

    if ((lp_playerXP != 0)) {
        gf_AwardPlayerXPNOTD(lp_playerXP);
    }

    if ((lp_marineXP != 0)) {
        gf_AwardMarineXPNOTD(lp_marineXP);
    }

    if ((lp_karma != 0)) {
        gf_AwardKarmaNOTD(lp_karma);
    }

    if ((lp_credits != 0)) {
        gf_AwardCreditsNOTD(lp_credits);
    }

}

trigger auto_gf_AwardPlayerXPNOTD_Trigger = null;
int auto_gf_AwardPlayerXPNOTD_lp_xPAwarded;

void gf_AwardPlayerXPNOTD (int lp_xPAwarded) {
    auto_gf_AwardPlayerXPNOTD_lp_xPAwarded = lp_xPAwarded;

    if (auto_gf_AwardPlayerXPNOTD_Trigger == null) {
        auto_gf_AwardPlayerXPNOTD_Trigger = TriggerCreate("auto_gf_AwardPlayerXPNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardPlayerXPNOTD_Trigger, false, false);
}

bool auto_gf_AwardPlayerXPNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_xPAwarded = auto_gf_AwardPlayerXPNOTD_lp_xPAwarded;

    playergroup autoBD1DEB66_g;
    int autoBD1DEB66_p;

    // Variable Declarations
    int lv_xPAwarded;
    int lv_index;
    int lv_localHitPar;

    // Variable Initialization
    lv_xPAwarded = FixedToInt((IntToFixed(lp_xPAwarded) * gv_classLimitMultiplier));

    // Implementation
    autoBD1DEB66_g = gv_marineSquad; 
    autoBD1DEB66_p = 1;
    for ( ; autoBD1DEB66_p <= PlayerGroupCount(autoBD1DEB66_g) ; autoBD1DEB66_p += BoolToInt(lv_index == PlayerGroupPlayer(autoBD1DEB66_g, autoBD1DEB66_p)) ) {
        lv_index = PlayerGroupPlayer(autoBD1DEB66_g, autoBD1DEB66_p);
        if (((UnitIsAlive(gv_marineHero[lv_index]) == true) || (gv_cPAwardException[lv_index] == true))) {
            gv_playerXP[lv_index] += lv_xPAwarded;
            lv_localHitPar = gv_hitPar;
            lv_localHitPar = FixedToInt((IntToFixed(gv_hitPar) * UserDataGetFixed("Classes", gv_playerClass[lv_index], "Hit Tolerance", 1)));
            if ((gv_playerRating[lv_index] >= 1800)) {
                lv_localHitPar = FixedToInt((IntToFixed(lv_localHitPar) * 0.6));
            }
            else if ((gv_playerRating[lv_index] >= 1700)) {
                lv_localHitPar = FixedToInt((IntToFixed(lv_localHitPar) * 0.7));
            }
            else if ((gv_playerRating[lv_index] >= 1600)) {
                lv_localHitPar = FixedToInt((IntToFixed(lv_localHitPar) * 0.8));
            }
            if ((gv_nightmare == true)) {
                lv_localHitPar = (lv_localHitPar * 2);
            }

            if ((gv_playerRating[lv_index] >= 2100) && (gv_hitsTaken[lv_index] >= lv_localHitPar) && (gv_squadRating > 1600)) {
                gv_playerRating[lv_index] -= 6;
            }
            else if ((gv_playerRating[lv_index] >= 1900) && (gv_hitsTaken[lv_index] >= lv_localHitPar) && (gv_squadRating > 1600)) {
                gv_playerRating[lv_index] -= 4;
            }
            else if ((gv_playerRating[lv_index] >= 1800) && (gv_hitsTaken[lv_index] >= lv_localHitPar) && (gv_squadRating > 1600)) {
                gv_playerRating[lv_index] -= 3;
            }
            else if ((gv_playerRating[lv_index] >= 1700) && (gv_hitsTaken[lv_index] >= lv_localHitPar)) {
                gv_playerRating[lv_index] -= 2;
            }
            else if ((gv_playerRating[lv_index] >= 1600) && (gv_hitsTaken[lv_index] >= lv_localHitPar)) {
                gv_playerRating[lv_index] -= 1;
            }
        }
        else if ((UnitIsAlive(gv_playerPet[lv_index]) == true)) {
            gv_playerXP[lv_index] += (lv_xPAwarded / 2);
        }
        gf_UIUpdateXP(lv_index);
        if ((gv_playerXP[lv_index] >= UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_index] + 1)), "XP Required", 1)) && (gv_playerHasRankedUp[lv_index] == false)) {
            gv_playerHasRankedUp[lv_index] = true;
            gv_playerRank[lv_index] = (gv_playerRank[lv_index] + 1);
            gf_RankUp(lv_index);
        }

    }
    return true;
}

trigger auto_gf_AwardRatingNOTD_Trigger = null;
int auto_gf_AwardRatingNOTD_lp_ratingAwarded;

void gf_AwardRatingNOTD (int lp_ratingAwarded) {
    auto_gf_AwardRatingNOTD_lp_ratingAwarded = lp_ratingAwarded;

    if (auto_gf_AwardRatingNOTD_Trigger == null) {
        auto_gf_AwardRatingNOTD_Trigger = TriggerCreate("auto_gf_AwardRatingNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardRatingNOTD_Trigger, false, false);
}

bool auto_gf_AwardRatingNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_ratingAwarded = auto_gf_AwardRatingNOTD_lp_ratingAwarded;

    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            if ((gv_playerRating[IntLoopCurrent()] >= 2000)) {
                if ((lp_ratingAwarded > 1)) {
                    gv_playerRating[IntLoopCurrent()] += (lp_ratingAwarded / 2);
                }
                else if ((lp_ratingAwarded == 1) && (RandomInt(0, 3) != 1)) {
                    gv_playerRating[IntLoopCurrent()] += lp_ratingAwarded;
                }
            }
            else {
                gv_playerRating[IntLoopCurrent()] += lp_ratingAwarded;
            }
        }

    }
    IntLoopEnd();
    return true;
}

trigger auto_gf_AwardKarmaNOTD_Trigger = null;
int auto_gf_AwardKarmaNOTD_lp_karmaAwarded;

void gf_AwardKarmaNOTD (int lp_karmaAwarded) {
    auto_gf_AwardKarmaNOTD_lp_karmaAwarded = lp_karmaAwarded;

    if (auto_gf_AwardKarmaNOTD_Trigger == null) {
        auto_gf_AwardKarmaNOTD_Trigger = TriggerCreate("auto_gf_AwardKarmaNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardKarmaNOTD_Trigger, false, false);
}

bool auto_gf_AwardKarmaNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_karmaAwarded = auto_gf_AwardKarmaNOTD_lp_karmaAwarded;

    // Implementation
    PlayerGroupLoopBegin(gv_activePlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == true)) {
            gv_playerKarma[PlayerGroupLoopCurrent()] += lp_karmaAwarded;
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

trigger auto_gf_AwardMarineXPNOTD_Trigger = null;
fixed auto_gf_AwardMarineXPNOTD_lp_marineXPAwarded;

void gf_AwardMarineXPNOTD (fixed lp_marineXPAwarded) {
    auto_gf_AwardMarineXPNOTD_lp_marineXPAwarded = lp_marineXPAwarded;

    if (auto_gf_AwardMarineXPNOTD_Trigger == null) {
        auto_gf_AwardMarineXPNOTD_Trigger = TriggerCreate("auto_gf_AwardMarineXPNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardMarineXPNOTD_Trigger, false, false);
}

bool auto_gf_AwardMarineXPNOTD_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_marineXPAwarded = auto_gf_AwardMarineXPNOTD_lp_marineXPAwarded;

    // Implementation
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + lp_marineXPAwarded));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pets);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropXP, c_unitPropCurrent) + lp_marineXPAwarded));
        }

    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_AwardCreditsNOTD_Trigger = null;
int auto_gf_AwardCreditsNOTD_lp_creditsAwarded;

void gf_AwardCreditsNOTD (int lp_creditsAwarded) {
    auto_gf_AwardCreditsNOTD_lp_creditsAwarded = lp_creditsAwarded;

    if (auto_gf_AwardCreditsNOTD_Trigger == null) {
        auto_gf_AwardCreditsNOTD_Trigger = TriggerCreate("auto_gf_AwardCreditsNOTD_TriggerFunc");
    }

    TriggerExecute(auto_gf_AwardCreditsNOTD_Trigger, false, false);
}

bool auto_gf_AwardCreditsNOTD_TriggerFunc (bool testConds, bool runActions) {
    int lp_creditsAwarded = auto_gf_AwardCreditsNOTD_lp_creditsAwarded;

    // Variable Declarations
    int lv_index;
    int lv_creditAllocation;
    int lv_personalCreditAllocation;
    int lv_startingCredits;
    int lv_netCreditsAwarded;

    // Variable Initialization
    lv_netCreditsAwarded = FixedToInt((IntToFixed(lp_creditsAwarded) * gv_classLimitMultiplier));

    // Implementation
    SoundPlay(SoundLink("UI_TerranNewUnitAcquired", -1), PlayerGroupAll(), 100.0, 0.0);
    lv_creditAllocation = (lv_netCreditsAwarded / PlayerGroupCount(gv_marineSquad));
    if ((gv_totalPlayers == 1)) {
        lv_creditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.15));
    }
    else if ((gv_totalPlayers < 3)) {
        lv_creditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.35));
    }
    else if ((gv_totalPlayers < 5)) {
        lv_creditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.7));
    }
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_index = PlayerGroupLoopCurrent();
        lv_startingCredits = gv_playerCredits[lv_index];
        lv_personalCreditAllocation = lv_creditAllocation;
        if ((UnitIsAlive(gv_marineHero[lv_index]) == false) && (UnitIsAlive(gv_playerPet[lv_index]) == true)) {
            lv_personalCreditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.75));
        }
        else if ((UnitIsAlive(gv_marineHero[lv_index]) == false) && (UnitIsAlive(gv_playerPet[lv_index]) == false)) {
            lv_personalCreditAllocation = FixedToInt((IntToFixed(lv_creditAllocation) * 0.5));
        }
        gv_playerCredits[lv_index] += FixedToInt((IntToFixed(lv_personalCreditAllocation) * UserDataGetFixed("CreditAllocations", gv_playerCreditMultipler[lv_index], "Credit Multiplier", 1)));
        gv_playerLifeTimeCreditsAcquired[lv_index] += (gv_playerCredits[lv_index] - lv_startingCredits);
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerCredits[lv_index]);
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashLabel[lv_index], IntToText(gv_playerCredits[lv_index]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashAcquiredLabel[lv_index], IntToText(gv_playerLifeTimeCreditsAcquired[lv_index]), PlayerGroupAll());
    }
    PlayerGroupLoopEnd();
    return true;
}

trigger auto_gf_SetMedalVariables_Trigger = null;
int auto_gf_SetMedalVariables_lp_playerNo;
int auto_gf_SetMedalVariables_lp_medalID;

void gf_SetMedalVariables (int lp_playerNo, int lp_medalID) {
    auto_gf_SetMedalVariables_lp_playerNo = lp_playerNo;
    auto_gf_SetMedalVariables_lp_medalID = lp_medalID;

    if (auto_gf_SetMedalVariables_Trigger == null) {
        auto_gf_SetMedalVariables_Trigger = TriggerCreate("auto_gf_SetMedalVariables_TriggerFunc");
    }

    TriggerExecute(auto_gf_SetMedalVariables_Trigger, false, false);
}

bool auto_gf_SetMedalVariables_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_SetMedalVariables_lp_playerNo;
    int lp_medalID = auto_gf_SetMedalVariables_lp_medalID;

    // Variable Declarations
    int lv_medalLevel;

    // Variable Initialization

    // Implementation
    IntLoopBegin(1, 4);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((!((gv_medalsAwardedText[IntLoopCurrent()][lp_playerNo] != null)))) {
            gv_medalsAwardedText[IntLoopCurrent()][lp_playerNo] = UserDataGetText("Medals", UserDataInstance("Medals", lp_medalID), "Display Name", 1);
            if ((lp_medalID == 1)) {
                lv_medalLevel = (gv_combatActionRibbon[lp_playerNo] / 50);
            }
            else if ((lp_medalID == 2)) {
                lv_medalLevel = (gv_lifeSavingMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 3)) {
                lv_medalLevel = (gv_bronzeStar[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 4)) {
                lv_medalLevel = (gv_silverStar[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 5)) {
                lv_medalLevel = (gv_legionOfMerit[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 6)) {
                lv_medalLevel = (gv_distinguishedServiceMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 7)) {
                lv_medalLevel = (gv_navyCross[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 8)) {
                lv_medalLevel = (gv_expeditionaryMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 9)) {
                lv_medalLevel = (gv_superiorServiceMedal[lp_playerNo] / 10);
            }
            else if ((lp_medalID == 10)) {
                lv_medalLevel = (gv_medalOfHonor[lp_playerNo] / 50);
            }
            if ((lv_medalLevel >= 6)) {
                gv_medalsAwardedImages[IntLoopCurrent()][lp_playerNo] = UserDataGetImagePath("MedalLevels", UserDataInstance("MedalLevels", 6), "Medal Image", 1);
            }
            else {
                gv_medalsAwardedImages[IntLoopCurrent()][lp_playerNo] = UserDataGetImagePath("MedalLevels", UserDataInstance("MedalLevels", lv_medalLevel), "Medal Image", 1);
            }
            break;
        }

    }
    IntLoopEnd();
    return true;
}

bool gf_PreCinematicProcessing () {
    playergroup auto844882A6_g;
    int auto844882A6_p;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    gv_cinematicMode = true;
    auto844882A6_g = gv_marineSquad; 
    auto844882A6_p = 1;
    for ( ; auto844882A6_p <= PlayerGroupCount(auto844882A6_g) ; auto844882A6_p += BoolToInt(lv_index == PlayerGroupPlayer(auto844882A6_g, auto844882A6_p)) ) {
        lv_index = PlayerGroupPlayer(auto844882A6_g, auto844882A6_p);
        libNtve_gf_StoreUnitSelection(lv_index, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
        UnitGroupLoopBegin(UnitGroup(null, lv_index, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }
        UnitGroupLoopEnd();
        CameraLockInput(lv_index, true);
    }
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gv_talentTreeOpen[IntLoopCurrent()] = false;
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        DialogSetVisible(gv_equipment, PlayerGroupAll(), false);
        DialogSetVisible(gv_ammoCounterDialog[IntLoopCurrent()], PlayerGroupAll(), false);
        DialogSetVisible(gv_shellDialog[IntLoopCurrent()], PlayerGroupAll(), false);
    }
    IntLoopEnd();
    UIClearBattleNetButtonOffset(PlayerGroupAll());
    UnitGroupLoopBegin(gv_zombieWave);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_blackOps);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    IntLoopBegin(gv_indexBaseValue, 5);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_infestor[IntLoopCurrent()]) == true)) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        }

    }
    IntLoopEnd();
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_gunshipCinematicActive[IntLoopCurrent()] == true) && (gv_gameUIHidden[IntLoopCurrent()] == true)) {
            libNtve_gf_HideGameUI(true, PlayerGroupSingle(IntLoopCurrent()));
            gv_gameUIHidden[IntLoopCurrent()] = false;
        }

    }
    IntLoopEnd();
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_gameUIHidden[IntLoopCurrent()] == false)) {
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(IntLoopCurrent()));
            gv_gameUIHidden[IntLoopCurrent()] = true;
        }

    }
    IntLoopEnd();
    DialogControlSetVisible(gv_teamUI, PlayerGroupAll(), false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
    Wait(0.5, c_timeGame);
    return true;
}

bool gf_PostCinematicProcessing () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(gv_zombieWave);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_blackOps);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    IntLoopBegin(gv_indexBaseValue, 5);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_infestor[IntLoopCurrent()]) == true)) {
            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        }

    }
    IntLoopEnd();
    gv_cinematicMode = false;
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_gunshipCinematicActive[IntLoopCurrent()] == true) && (UIFrameVisible(IntLoopCurrent(), c_syncFrameTypeCommandPanel) == false)) {
            libNtve_gf_HideGameUI(false, PlayerGroupSingle(IntLoopCurrent()));
        }

    }
    IntLoopEnd();
    UISetBattleNetButtonOffset(PlayerGroupAll(), 8, 253);
    UnitGroupLoopBegin(UnitGroup(null, 9, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraLockInput(PlayerGroupLoopCurrent(), false);
        if ((gv_gameUIHidden[PlayerGroupLoopCurrent()] == true)) {
            libNtve_gf_HideGameUI(true, PlayerGroupSingle(PlayerGroupLoopCurrent()));
            gv_gameUIHidden[PlayerGroupLoopCurrent()] = false;
        }

        libNtve_gf_RestoreUnitSelection(PlayerGroupLoopCurrent());
        UnitGroupLoopBegin(UnitGroup(null, PlayerGroupLoopCurrent(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) != "Kitten")) {
                libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
            }

            libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        }
        UnitGroupLoopEnd();
        DialogSetVisible(gv_shellDialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        DialogSetVisible(gv_ammoCounterDialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        DialogSetVisible(gv_equipment, PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoDefault(), 0.0, -1, 10, true);
        if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == true)) {
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_marineHero[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
        }
        else if ((UnitIsAlive(gv_playerPet[PlayerGroupLoopCurrent()]) == true)) {
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(gv_playerPet[PlayerGroupLoopCurrent()]), 0.0, -1, 10, false);
        }
        else if (true) {
            CameraPan(PlayerGroupLoopCurrent(), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 0.0, -1, 10, false);
        }
    }
    PlayerGroupLoopEnd();
    DialogControlSetVisible(gv_teamUI, PlayerGroupAll(), true);
    return true;
}

trigger auto_gf_MineBossSeth_Trigger = null;

void gf_MineBossSeth () {
    if (auto_gf_MineBossSeth_Trigger == null) {
        auto_gf_MineBossSeth_Trigger = TriggerCreate("auto_gf_MineBossSeth_TriggerFunc");
    }

    TriggerExecute(auto_gf_MineBossSeth_Trigger, false, false);
}

bool auto_gf_MineBossSeth_TriggerFunc (bool testConds, bool runActions) {
    int autoFCA5C201_n;
    int autoFCA5C201_i;
    int auto9B83864A_n;
    int auto9B83864A_i;
    int auto889828CB_n;
    int auto889828CB_i;

    // Variable Declarations
    int lv_numberofMarines;
    int lv_cycle;
    unitgroup lv_positiveGroup;
    unitgroup lv_negativeGroup;
    unit lv_targetUnit;
    point lv_sethPosition;
    actor lv_localActorRumble;
    point lv_localPointA;
    int lv_sethRewardDice;

    // Variable Initialization
    lv_cycle = 1;
    lv_positiveGroup = UnitGroupEmpty();
    lv_negativeGroup = UnitGroupEmpty();
    lv_sethRewardDice = RandomInt(1, 4);

    // Implementation
    lv_localPointA = RegionRandomPoint(RegionFromId(155));
    libNtve_gf_CreateModelAtPoint("NydusRumble", lv_localPointA);
    lv_localActorRumble = libNtve_gf_ActorLastCreated();
    gv_bossFight = true;
    Wait(1.0, c_timeGame);
    UnitCreate(1, "Seth", 0, 14, lv_localPointA, libNtve_gf_RandomAngle());
    UnitBehaviorAdd(UnitLastCreated(), "MineshaftSeth", UnitLastCreated(), 1);
    gv_zeus = UnitLastCreated();
    libNtve_gf_PauseUnit(UnitLastCreated(), true);
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitGroupAdd(gv_mineShaftMobs, UnitLastCreated());
    SoundPlay(SoundLink("TTychus05TaldarimExecutor00040", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_alivePlayers <= 3)) {
        UnitSetPropertyFixed(gv_zeus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_zeus, c_unitPropLifeMax, c_unitPropNormal) * 0.65));
    }
    else if ((gv_alivePlayers == 4)) {
        UnitSetPropertyFixed(gv_zeus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_zeus, c_unitPropLifeMax, c_unitPropNormal) * 0.75));
    }
    else if ((gv_alivePlayers == 5)) {
        UnitSetPropertyFixed(gv_zeus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_zeus, c_unitPropLifeMax, c_unitPropNormal) * 0.8));
    }
    else if ((gv_alivePlayers == 6)) {
        UnitSetPropertyFixed(gv_zeus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_zeus, c_unitPropLifeMax, c_unitPropNormal) * 0.85));
    }
    else if ((gv_alivePlayers == 7)) {
        UnitSetPropertyFixed(gv_zeus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_zeus, c_unitPropLifeMax, c_unitPropNormal) * 0.9));
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/C669D621"));
    Wait(5.0, c_timeGame);
    libNtve_gf_KillModel(lv_localActorRumble);
    TriggerEnable(gt_MineBossKill, true);
    libNtve_gf_PauseUnit(gv_zeus, false);
    libNtve_gf_MakeUnitInvulnerable(gv_zeus, false);
    gv_currentBoss = "Seth";
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_zeus, ge_Ping_Disabled);
    TriggerEnable(gt_SethReinforcements, true);
    autoFCA5C201_n = 1000;
    for (autoFCA5C201_i = 1; autoFCA5C201_i <= autoFCA5C201_n; autoFCA5C201_i += 1) {
        if ((UnitGetPropertyFixed(gv_zeus, c_unitPropLife, c_unitPropCurrent) < 10.0)) {
            UnitKill(gv_zeus);
        }

        if ((UnitIsAlive(gv_zeus) == false)) {
            libNtve_gf_ShowHideBossBar(false, 1);
            TriggerEnable(gt_SethReinforcements, false);
            UnitGroupLoopBegin(gv_marines);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "PolarityPositiveHidden", 1);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "PolarityNegativeHidden", 1);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "NegativePolarity", 1);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "PositivePolarity", 1);
            }
            UnitGroupLoopEnd();
            auto9B83864A_n = 8;
            for (auto9B83864A_i = 1; auto9B83864A_i <= auto9B83864A_n; auto9B83864A_i += 1) {
                libNtve_gf_CreateUnitsAtPoint2(1, "Magazine", 0, 0, RegionRandomPoint(RegionCircle(lv_sethPosition, 3.0)));
                Wait(0.12, c_timeReal);
            }
            if ((lv_sethRewardDice == 1)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "Chaingun", 0, 0, RegionRandomPoint(RegionCircle(lv_sethPosition, 3.0)));
            }
            else if ((lv_sethRewardDice == 2)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "StingerMK3", 0, 0, RegionRandomPoint(RegionCircle(lv_sethPosition, 3.0)));
            }
            else if ((lv_sethRewardDice == 3)) {
                libNtve_gf_CreateUnitsAtPoint2(1, "L3GrenadeLauncher", 0, 0, RegionRandomPoint(RegionCircle(lv_sethPosition, 3.0)));
            }
            else if ((lv_sethRewardDice == 4)) {
                auto889828CB_n = 3;
                for (auto889828CB_i = 1; auto889828CB_i <= auto889828CB_n; auto889828CB_i += 1) {
                    Wait(0.12, c_timeReal);
                    libNtve_gf_CreateUnitsAtPoint2(1, "Helium3Canister", 0, 0, RegionRandomPoint(RegionCircle(lv_sethPosition, 3.0)));
                }
            }
            Wait(0.1, c_timeReal);
            libNtve_gf_CreateUnitsAtPoint2(1, "Helium3Canister", 0, 0, RegionRandomPoint(RegionCircle(lv_sethPosition, 3.0)));
            SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
            gf_AwardPlayerXPNOTD(3);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/EC783BDB"));
            Wait(5.0, c_timeReal);
            UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
            gv_bossFight = false;
            break;
        }
        else {
            lv_sethPosition = UnitGetPosition(gv_zeus);
            libNtve_gf_MakeUnitInvulnerable(gv_zeus, false);
        }
        if ((lv_cycle == 2)) {
            SoundPlay(SoundLink("TTychus05TaldarimExecutor00041", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        if ((ModI(lv_cycle, 3) == 0)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/20BD04E5"));
            GameSetLighting("NOTDSethCharge", 1.0);
            if ((lv_cycle == 3)) {
                UnitBehaviorAddPlayer(gv_zeus, "SethChargingLevel1", 14, 1);
            }
            else if ((lv_cycle == 6)) {
                UnitBehaviorAddPlayer(gv_zeus, "SethChargingLevel2", 14, 1);
            }
            else if ((lv_cycle == 9)) {
                UnitBehaviorAddPlayer(gv_zeus, "SethChargingLevel3", 14, 1);
            }
            else if ((lv_cycle >= 12)) {
                UnitBehaviorAddPlayer(gv_zeus, "SethChargingLevel4", 14, 1);
            }
            Wait(5.0, c_timeGame);
            IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.5, 2.0, 100.0, 1.5);
            }
            IntLoopEnd();
            if ((UnitIsAlive(gv_boss) == true) && (UnitGetType(gv_boss) == "Apoptosis")) {
                GameSetLighting("NOTDApoptosisLighting", 1.0);
            }
            else if (true) {
                GameSetLighting(gv_defaultLighting, 1.0);
            }
            Wait(5.0, c_timeGame);
        }
        else {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/0DA72546"));
            UnitBehaviorAddPlayer(gv_zeus, "SethCharging", 13, 1);
            Wait(6.0, c_timeGame);
            SoundPlay(SoundLink("SS_LightningProjectorImpact", -1), PlayerGroupAll(), 100.0, 0.0);
            IntLoopBegin(1, 8);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
            }
            IntLoopEnd();
            UnitGroupLoopBegin(gv_marines);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "PolarityPositiveHidden", 5);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "PolarityNegativeHidden", 5);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "NegativePolarity", 5);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "PositivePolarity", 5);
            }
            UnitGroupLoopEnd();
            while (true) {
                lv_numberofMarines = UnitGroupCount(gv_marines, c_unitCountAlive);
                if ((UnitGroupCount(lv_positiveGroup, c_unitCountAlive) < CeilingI((IntToFixed(lv_numberofMarines) / 2.0)))) {
                    lv_targetUnit = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
                    if ((UnitGroupHasUnit(lv_positiveGroup, lv_targetUnit) == false)) {
                        UnitGroupAdd(lv_positiveGroup, lv_targetUnit);
                    }

                }
                else {
                    break;
                }
            }
            UnitGroupLoopBegin(lv_positiveGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "PositivePolarity", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(gv_marines);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitHasBehavior(UnitGroupLoopCurrent(), "PositivePolarity") == false)) {
                    UnitGroupAdd(lv_negativeGroup, lv_targetUnit);
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "NegativePolarity", UnitGroupLoopCurrent(), 1);
                }

            }
            UnitGroupLoopEnd();
            if ((gv_nightmare == true)) {
                Wait(10.0, c_timeGame);
            }
            else {
                Wait(13.0, c_timeGame);
            }
            UnitGroupLoopBegin(lv_positiveGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitGroupRemove(lv_positiveGroup, UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(lv_negativeGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitGroupRemove(lv_negativeGroup, UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }
        lv_cycle += 1;
    }
    return true;
}

trigger auto_gf_MineBossZeusLeto_Trigger = null;

void gf_MineBossZeusLeto () {
    if (auto_gf_MineBossZeusLeto_Trigger == null) {
        auto_gf_MineBossZeusLeto_Trigger = TriggerCreate("auto_gf_MineBossZeusLeto_TriggerFunc");
    }

    TriggerExecute(auto_gf_MineBossZeusLeto_Trigger, false, false);
}

bool auto_gf_MineBossZeusLeto_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitCreate(1, "Zeus", 0, 14, RegionRandomPoint(RegionFromId(155)), libNtve_gf_RandomAngle());
    gv_zeus = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitGroupAdd(gv_mineShaftMobs, UnitLastCreated());
    libNtve_gf_PauseUnit(gv_zeus, true);
    libNtve_gf_MakeUnitInvulnerable(gv_zeus, true);
    SoundPlay(SoundLink("Ultralisk_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeGame);
    UnitCreate(1, "Leto", 0, 14, RegionRandomPoint(RegionFromId(155)), libNtve_gf_RandomAngle());
    gv_leto = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitGroupAdd(gv_mineShaftMobs, UnitLastCreated());
    SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_PauseUnit(gv_leto, true);
    libNtve_gf_MakeUnitInvulnerable(gv_leto, true);
    TriggerEnable(gt_ZeusLetoAI, true);
    TriggerEnable(gt_ZeusLetoHardenedCarapace, true);
    TriggerEnable(gt_ZeusLetoRespawn, true);
    gf_TipNOTD(30000, StringExternal("Param/Value/0353117D"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/FE4BD6DD"));
    if ((gv_noNewbie == true)) {
        gv_zeusLetoLives = 4;
    }

    TriggerEnable(gt_MineBossKill, true);
    Wait(2.0, c_timeReal);
    libNtve_gf_PauseUnit(gv_zeus, false);
    libNtve_gf_PauseUnit(gv_leto, false);
    libNtve_gf_MakeUnitInvulnerable(gv_zeus, false);
    libNtve_gf_MakeUnitInvulnerable(gv_leto, false);
    UnitBehaviorAdd(gv_zeus, "RampageApplyBehaviorZuesLeto", gv_zeus, 1);
    UnitBehaviorAdd(gv_leto, "RampageApplyBehaviorZuesLeto", gv_leto, 1);
    Wait(5.0, c_timeReal);
    gf_TipNOTD(20000, StringExternal("Param/Value/606A90B6"));
    return true;
}

void gf_BossBarCreation (int lp_race, unit lp_unit, int lp_usePing) {
    // Variable Declarations
    string lv_portrait;
    text lv_name;
    string lv_pngModel;
    color lv_pingColor;
    fixed lv_pingDuration;

    // Variable Initialization
    lv_portrait = UserDataGetImagePath("BossData", gv_currentBoss, "Portrait", 1);
    lv_name = UserDataGetText("BossData", gv_currentBoss, "Name", 1);
    lv_pngModel = UserDataGetModel("BossData", gv_currentBoss, "Minimap Ping", 1);
    lv_pingColor = UserDataGetColor("BossData", gv_currentBoss, "Ping Color", 1);
    lv_pingDuration = UserDataGetFixed("BossData", gv_currentBoss, "Ping Duration", 1);

    // Implementation
    if ((UserDataGetImagePath("BossData", gv_currentBoss, "Portrait", 1) != null)) {
        libNtve_gf_DisplayBossBar(1, lv_portrait, lv_name, 100, PlayerGroupActive());
        libNtve_gf_SetBossBarBoss(1, lp_unit, true);
        libNtve_gf_SetBossBarRace(1, lp_race, true);
    }

    if ((lp_usePing == ge_Ping_Enabled)) {
        PingCreate(PlayerGroupActive(), "PingBoss", UnitGetPosition(lp_unit), lv_pingColor, lv_pingDuration);
        PingSetUnit(PingLastCreated(), lp_unit);
        gv_bossPing = PingLastCreated();
    }

}

void gf_BossAfterAction () {
    // Implementation
    libNtve_gf_ShowHideBossBar(false, 1);
    PingDestroy(gv_bossPing);
    gv_bossFight = false;
}

trigger auto_gf_ECEnvironmentalChanges_Trigger = null;

void gf_ECEnvironmentalChanges () {
    if (auto_gf_ECEnvironmentalChanges_Trigger == null) {
        auto_gf_ECEnvironmentalChanges_Trigger = TriggerCreate("auto_gf_ECEnvironmentalChanges_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECEnvironmentalChanges_Trigger, false, false);
}

bool auto_gf_ECEnvironmentalChanges_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitSetState(UnitFromId(2503), c_unitStateSelectable, true);
    UnitSetState(UnitFromId(178), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(1857), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(178), c_unitStateInvulnerable, true);
    if ((gv_noNewbie == false)) {
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(188), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(189), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(190), "DecalProtoss");
    }
    UnitRemove(UnitFromId(2625));
    UnitRemove(UnitFromId(2635));
    UnitRemove(UnitFromId(1271));
    UnitRemove(UnitFromId(2159));
    UnitRemove(UnitFromId(2158));
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "TOCastanarBrutaliskCage");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "TerrainObjectCastanarBrutaCageDoodad");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(28), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(219), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(147), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(177), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(183), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(184), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(185), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(206), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(140), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(141), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(198), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(199), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(229), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(230), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(50), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(134), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(192), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(147), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(148), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(151), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(79), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(78), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(80), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(81), "DecalProtoss");
    return true;
}

trigger auto_gf_ECC1ItemSpawn_Trigger = null;

void gf_ECC1ItemSpawn () {
    if (auto_gf_ECC1ItemSpawn_Trigger == null) {
        auto_gf_ECC1ItemSpawn_Trigger = TriggerCreate("auto_gf_ECC1ItemSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECC1ItemSpawn_Trigger, false, false);
}

bool auto_gf_ECC1ItemSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_magazineSpawn;

    // Variable Initialization
    lv_magazineSpawn = 24;

    // Implementation
    if ((gv_nightmare == true)) {
        lv_magazineSpawn = 28;
    }

    lv_magazineSpawn += gv_magazineAdjustment;
    if ((gv_noNewbie == false)) {
        lv_magazineSpawn = 26;
    }

    gf_CreateItemNOTD("Magazine", lv_magazineSpawn);
    gf_CreateItemNOTD("AmmoBox", 3);
    if ((gv_navyCrossMode == false)) {
        gf_CreateItemNOTD("Medpack", 8);
        gf_CreateItemNOTD("Bandage", 5);
    }

    gf_CreateItemNOTD("AntiVenom", 5);
    gf_CreateItemNOTD("OccularImplants", 4);
    gf_CreateItemNOTD("RoadFlare", 9);
    gf_CreateItemNOTD("ThermalSight", 1);
    gf_CreateItemNOTD("CombatMobilityAugment", 1);
    gf_CreateItemNOTD("C2Armor", 2);
    gf_CreateItemNOTD("C4Armor", 2);
    gf_CreateItemNOTD("Flamethrower", 1);
    gf_CreateItemNOTD("Shotgun", 1);
    if ((gv_noNewbie == true)) {
        gf_CreateItemNOTD("Chaingun", 1);
        gf_CreateItemNOTD("ReactiveArmor", 1);
        gf_CreateItemNOTD("BarrettM112", 1);
        gf_CreateItemNOTD("UA420AssaultRifle", 2);
        gf_CreateItemNOTD("XS4Armor", 1);
        gf_CreateItemNOTD("MP9A2SubMachineGun", 2);
    }
    else {
        gf_CreateItemNOTD("UA420AssaultRifle", 3);
        gf_CreateItemNOTD("SniperRifle", 2);
    }
    gf_CreateItemNOTD("SniperRifle", 2);
    gf_CreateItemNOTD("HEAmmo", 2);
    gf_CreateItemNOTD("HPAmmo", 2);
    gf_CreateItemNOTD("APAmmo", 2);
    gf_CreateItemNOTD("FMJAmmo", 2);
    if ((gv_noNewbie == false)) {
        gf_CreateItemLocalNOTD("APAmmo", 2, RegionFromId(3));
        gf_CreateItemLocalNOTD("Flamethrower", 2, RegionFromId(3));
        gf_CreateItemLocalNOTD("Magazine", 3, RegionFromId(3));
    }

    return true;
}

trigger auto_gf_ECC1AmbientSpawns_Trigger = null;

void gf_ECC1AmbientSpawns () {
    if (auto_gf_ECC1AmbientSpawns_Trigger == null) {
        auto_gf_ECC1AmbientSpawns_Trigger = TriggerCreate("auto_gf_ECC1AmbientSpawns_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECC1AmbientSpawns_Trigger, false, false);
}

bool auto_gf_ECC1AmbientSpawns_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while ((gv_wave < 7) && (gv_gameOver == false)) {
        if ((gv_cinematicMode == false)) {
            AIAttackWaveSetTargetUnitGroup(14, gv_marines);
            gf_WaveSpawnAroundMarines("ZombieLevel12", 40.0, 1);
            AIAttackWaveSend(14, (10 - gv_spawnFactor), true);
            if ((RandomInt(0, 4) == 1) && (gv_alivePlayers > 4)) {
                AIAttackWaveSetTargetUnitGroup(14, gv_marines);
                gf_WaveSpawnAroundMarines("RoachBurrowed", 50.0, 1);
                if ((gv_noNewbie == false)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
                }

                AIAttackWaveSend(14, ((10 + libNtve_gf_DifficultyValueInt(3, 0, 0, 0)) - gv_spawnFactor), true);
            }

        }

    }
    return true;
}

trigger auto_gf_EpsilonMineMobs_Trigger = null;

void gf_EpsilonMineMobs () {
    if (auto_gf_EpsilonMineMobs_Trigger == null) {
        auto_gf_EpsilonMineMobs_Trigger = TriggerCreate("auto_gf_EpsilonMineMobs_TriggerFunc");
    }

    TriggerExecute(auto_gf_EpsilonMineMobs_Trigger, false, false);
}

bool auto_gf_EpsilonMineMobs_TriggerFunc (bool testConds, bool runActions) {
    int autoCB160BF8_n;
    int autoCB160BF8_i;
    int auto23A4DDD6_n;
    int auto23A4DDD6_i;
    int auto3DE93C99_n;
    int auto3DE93C99_i;

    // Variable Declarations
    region[8] lv_mineAttackSpawn;

    // Variable Initialization

    // Implementation
    lv_mineAttackSpawn[0] = RegionFromId(53);
    lv_mineAttackSpawn[1] = RegionFromId(12);
    lv_mineAttackSpawn[2] = RegionFromId(21);
    lv_mineAttackSpawn[3] = RegionFromId(63);
    lv_mineAttackSpawn[4] = RegionFromId(129);
    lv_mineAttackSpawn[5] = RegionFromId(170);
    lv_mineAttackSpawn[6] = RegionFromId(22);
    autoCB160BF8_n = 2;
    for (autoCB160BF8_i = 1; autoCB160BF8_i <= autoCB160BF8_n; autoCB160BF8_i += 1) {
        Wait(5.0, c_timeGame);
        if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 120)) {
            libNtve_gf_UnitCreateFacingPoint((gv_spawnFactor + 1), "ZombieLevel12", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.15, c_timeGame);
            if ((RandomInt(0, 3) == 1)) {
                libNtve_gf_UnitCreateFacingPoint((gv_spawnFactor + 1), "ZerglingBurrowed", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
                UnitGroupIssueOrder(UnitGroup(null, 14, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            }
            else {
                libNtve_gf_UnitCreateFacingPoint((gv_spawnFactor + 1), "ZombieLevel12", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.15, c_timeGame);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(1))), c_orderQueueReplace);
        }

    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/A9F3D299"));
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/F4D87224"));
    gf_ECC1ItemSpawn();
    auto23A4DDD6_n = 9;
    for (auto23A4DDD6_i = 1; auto23A4DDD6_i <= auto23A4DDD6_n; auto23A4DDD6_i += 1) {
        Wait(RandomFixed(0.5, 2.5), c_timeGame);
        auto3DE93C99_n = (gv_spawnFactor * 4);
        for (auto3DE93C99_i = 1; auto3DE93C99_i <= auto3DE93C99_n; auto3DE93C99_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel12", 0, 14, RegionRandomPoint(lv_mineAttackSpawn[RandomInt(0, 6)]), RegionGetCenter(RegionFromId(1)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.3, c_timeGame);
            if ((RandomInt(0, 3) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(2, "ZerglingBurrowed", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
                UnitGroupIssueOrder(UnitGroup(null, 14, RegionFromId(16), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }

        }
    }
    return true;
}

void gf_TerminalUpdate (unit lp_terminalUnit, fixed lp_experienceChange) {
    // Implementation
    UnitFlashSelection(lp_terminalUnit, 0.5);
    UnitSetPropertyFixed(gv_marineHero[UnitGetOwner(lp_terminalUnit)], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[UnitGetOwner(lp_terminalUnit)], c_unitPropXP, c_unitPropCurrent) + lp_experienceChange));
}

void gf_LogEntryPlayback (int lp_logEntry) {
    // Implementation
    SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 80.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, UserDataGetText("MiningCampLogs", UserDataInstance("MiningCampLogs", lp_logEntry), "Log Entry", RandomInt(1, 3)));
}

trigger auto_gf_TissueSampleComplete_Trigger = null;

void gf_TissueSampleComplete () {
    if (auto_gf_TissueSampleComplete_Trigger == null) {
        auto_gf_TissueSampleComplete_Trigger = TriggerCreate("auto_gf_TissueSampleComplete_TriggerFunc");
    }

    TriggerExecute(auto_gf_TissueSampleComplete_Trigger, false, false);
}

bool auto_gf_TissueSampleComplete_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    ObjectiveSetState(gv_secondaryObjective, c_objectiveStateCompleted);
    gv_globalIntA = 0;
    gf_AwardPlayerXPNOTD(1);
    gv_hitPar = 25;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/DE4B52FF"));
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(25), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(26), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(27), "DecalProtoss");
    if ((gv_noNewbie == false)) {
        libNtve_gf_KillModel(gv_hexModels[1]);
        libNtve_gf_KillModel(gv_hexModels[2]);
        libNtve_gf_KillModel(gv_hexModels[3]);
    }

    if ((gv_performanceTimer <= 36)) {
        if ((gv_noNewbie == true)) {
            gf_AwardPlayerXPNOTD(3);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/EACCCFD6"));
        }
        else {
            gf_AwardPlayerXPNOTD(1);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/0ED9301E"));
        }
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) && (((gv_noNewbie == true) && (gv_playerRating[IntLoopCurrent()] < 1700)) || ((gv_noNewbie == false) && (gv_playerRating[IntLoopCurrent()] < 1550)))) {
                gv_playerRating[IntLoopCurrent()] += 1;
            }

        }
        IntLoopEnd();
    }
    else {
        if ((gv_performanceTimer > 45)) {
            gf_AwardRatingNOTD(-1);
        }

    }
    gv_performanceTimer = 0;
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    libNtve_gf_ShowHideBossBar(false, 1);
    gf_TipNOTD(2000, StringExternal("Param/Value/9EB6B8C4"));
    ObjectiveDestroy(gv_secondaryObjective);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/DF413802"));
    Wait(10.0, c_timeReal);
    if ((gv_noNewbie == false)) {
        HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/B8BCD8D6"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/6AB43B51"), StringExternal("Param/Value/1B4F39CB"), "Assets\\Textures\\btn-techupgrade-terran-consumption.dds");
    }

    Wait(7.0, c_timeReal);
    TipAlertPanelClear(PlayerGroupAll());
    return true;
}

void gf__1stBossAfterAction () {
    // Implementation
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/8D3499E8"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/ACC6387D"));
    Wait(5.0, c_timeReal);
    gf_TipNOTD(500, StringExternal("Param/Value/0E20D898"));
    TriggerExecute(gt_AutoSave, true, false);
    TriggerExecute(gt_AFKCheck, true, false);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
}

trigger auto_gf_MenoEvasion_Trigger = null;
int auto_gf_MenoEvasion_lp_range;

void gf_MenoEvasion (int lp_range) {
    auto_gf_MenoEvasion_lp_range = lp_range;

    if (auto_gf_MenoEvasion_Trigger == null) {
        auto_gf_MenoEvasion_Trigger = TriggerCreate("auto_gf_MenoEvasion_TriggerFunc");
    }

    TriggerExecute(auto_gf_MenoEvasion_Trigger, false, false);
}

bool auto_gf_MenoEvasion_TriggerFunc (bool testConds, bool runActions) {
    int lp_range = auto_gf_MenoEvasion_lp_range;

    // Variable Declarations
    marker lv_untitledVariable001;

    // Variable Initialization

    // Implementation
    while ((UnitIsAlive(gv_menoestes) == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(gv_menoestes), UnitGetPosition(UnitGroupClosestToPoint(gv_marines, UnitGetPosition(gv_menoestes)))) <= lp_range)) {
            AICastFlee(gv_menoestes, UnitGroupClosestToPoint(gv_marines, UnitGetPosition(gv_menoestes)), 50, lv_untitledVariable001);
        }
        else {
            libNtve_gf_AICast(gv_menoestes, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())));
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}

void gf_DropshipArrival () {
    // Variable Declarations
    region lv_localRegionA;
    point lv_localPointA;
    point lv_localPoint;
    point[9] lv_dropPodPoints;
    unitgroup lv_dropPods;
    int lv_lZChoice;

    // Variable Initialization
    lv_dropPods = UnitGroupEmpty();
    lv_lZChoice = RandomInt(1, 7);

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, 9, RegionGetCenter(RegionFromId(10)), PointFromId(212));
    gv_dropship = UnitLastCreated();
    gf_AwardPlayerXPNOTD(1);
    if ((libNtve_gf_UnitGroupIsDead(UnitGroup("RoadFlareFire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0)) == false)) {
        lv_localPoint = libNtve_gf_CenterOfUnitGroup(UnitGroup("RoadFlareFire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        gf_RadioNOTD(gv_characterCWOHussein, StringExternal("Param/Value/5C44EE60"));
    }
    else {
        lv_localPoint = RegionGetCenter(gv_lZ[lv_lZChoice]);
    }
    UnitIssueOrder(gv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), lv_localPoint), c_orderQueueReplace);
    PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(gv_dropship), ColorWithAlpha(58.82, 84.31, 98.04, 0.00), 30.0);
    PingSetUnit(PingLastCreated(), gv_dropship);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterCWOHussein, StringExternal("Param/Value/699F1ACC"));
    PingCreate(PlayerGroupActive(), "PingObjective", lv_localPoint, ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 10.0);
    Wait(5.0, c_timeReal);
    UnitGroupRemove(gv_zombieWave, gv_infestedParrot);
    UnitIssueOrder(gv_infestedParrot, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(4))), c_orderQueueReplace);
    UnitSetPropertyFixed(gv_dropship, c_unitPropMovementSpeed, 6.0);
    Wait(1.0, c_timeReal);
    UnitSetPropertyFixed(gv_dropship, c_unitPropMovementSpeed, 5.0);
    Wait(1.0, c_timeReal);
    UnitSetPropertyFixed(gv_dropship, c_unitPropMovementSpeed, 4.0);
    MinimapPing(PlayerGroupActive(), lv_localPoint, 30.0, Color(0.00, 100.00, 0.00));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(gv_dropship, true, IntLoopCurrent());
    }
    IntLoopEnd();
    Wait(3.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/7B8C4D80"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/C9063DC6"), StringExternal("Param/Value/C0E903E4"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/9128F33D"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/460272C9"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterCWOHussein, StringExternal("Param/Value/758D5CB1"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DAB8AD38"));
    if ((UnitIsAlive(gv_dropship) == true)) {
        lv_localRegionA = RegionCircle(UnitGetPosition(gv_dropship), 3.0);
        IntLoopBegin(0, 4);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_localPointA = RegionRandomPoint(lv_localRegionA);
            lv_dropPodPoints[IntLoopCurrent()] = RegionRandomPoint(lv_localRegionA);
            UnitCreate(1, "TerranDropPod", 0, 0, lv_dropPodPoints[IntLoopCurrent()], libNtve_gf_RandomAngle());
            UnitGroupAdd(lv_dropPods, UnitLastCreated());
            Wait(0.2, c_timeGame);
        }
        IntLoopEnd();
        Wait(1.8, c_timeReal);
        IntLoopBegin(0, 4);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            UnitCreate(1, "Magazine", 0, 0, RegionRandomPoint(RegionCircle(lv_dropPodPoints[IntLoopCurrent()], 1.0)), libNtve_gf_RandomAngle());
            Wait(0.12, c_timeGame);
            UnitCreate(1, "Magazine", 0, 0, RegionRandomPoint(RegionCircle(lv_dropPodPoints[IntLoopCurrent()], 1.0)), libNtve_gf_RandomAngle());
            Wait(0.12, c_timeGame);
            UnitCreate(1, "Magazine", 0, 0, RegionRandomPoint(RegionCircle(lv_dropPodPoints[IntLoopCurrent()], 1.0)), libNtve_gf_RandomAngle());
            Wait(0.12, c_timeGame);
            if ((IntLoopCurrent() == 1)) {
                UnitCreate(1, "ThermalSight", 0, 0, RegionRandomPoint(RegionCircle(lv_dropPodPoints[IntLoopCurrent()], 1.0)), libNtve_gf_RandomAngle());
            }

            UnitSetPropertyFixed(gv_dropship, c_unitPropMovementSpeed, 5.0);
            Wait(0.7, c_timeReal);
        }
        IntLoopEnd();
        UnitGroupLoopBegin(lv_dropPods);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
            Wait(0.1, c_timeGame);
        }
        UnitGroupLoopEnd();
        lv_localPoint = RegionGetCenter(RegionFromId(10));
        UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(gv_dropship), OrderTargetingPoint(AbilityCommand("move", 0), lv_localPoint), c_orderQueueReplace);
        UnitSetPropertyFixed(gv_dropship, c_unitPropMovementSpeed, 6.0);
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(gv_characterCWOHussein, StringExternal("Param/Value/E6F00E7C"));
    }

    gf_TipNOTD(1000, StringExternal("Param/Value/FE50CD1F"));
    Wait(2.0, c_timeReal);
    UnitRemove(gv_dropship);
}

trigger auto_gf_ECRecruitDropshipWaves_Trigger = null;

void gf_ECRecruitDropshipWaves () {
    if (auto_gf_ECRecruitDropshipWaves_Trigger == null) {
        auto_gf_ECRecruitDropshipWaves_Trigger = TriggerCreate("auto_gf_ECRecruitDropshipWaves_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECRecruitDropshipWaves_Trigger, false, false);
}

bool auto_gf_ECRecruitDropshipWaves_TriggerFunc (bool testConds, bool runActions) {
    int autoD4A5CC7A_n;
    int autoD4A5CC7A_i;
    int auto42E0717D_n;
    int auto42E0717D_i;
    int auto66FB63A7_n;
    int auto66FB63A7_i;
    int autoF2F14C47_n;
    int autoF2F14C47_i;
    int auto1B7770DD_n;
    int auto1B7770DD_i;
    int autoF5D50B6F_n;
    int autoF5D50B6F_i;
    int autoC2C361F4_n;
    int autoC2C361F4_i;
    int auto8CBE833A_n;
    int auto8CBE833A_i;

    // Implementation
    autoD4A5CC7A_n = 15;
    for (autoD4A5CC7A_i = 1; autoD4A5CC7A_i <= autoD4A5CC7A_n; autoD4A5CC7A_i += 1) {
        auto42E0717D_n = gv_spawnFactor;
        for (auto42E0717D_i = 1; auto42E0717D_i <= auto42E0717D_n; auto42E0717D_i += 1) {
            if ((RandomInt(0, 5) == 1)) {
                if ((RandomInt(0, 2) == 1) && (gv_squadXP >= 3000)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Devourer2", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 75.0)), RegionGetCenter(RegionFromId(1)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 59.0)), RegionGetCenter(RegionFromId(1)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                    if ((gv_noNewbie == false)) {
                        UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
                    }

                }
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }
            else {
                gf_WaveSpawnAroundMarines("ZombieLevel22", 50.0, 1);
                AIAttackWaveSend(14, 1, true);
            }
            Wait(0.2, c_timeReal);
        }
        Wait(3.5, c_timeReal);
    }
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("TRaynor03Raynor00019", -1), PlayerGroupAll(), 100.0, 0.0);
    auto66FB63A7_n = 10;
    for (auto66FB63A7_i = 1; auto66FB63A7_i <= auto66FB63A7_n; auto66FB63A7_i += 1) {
        if (((gv_alivePlayers > 4) && (RandomInt(0, 2) == 1))) {
            gf_WaveSpawnAroundMarines("UltraliskBurrowed", 100.0, 1);
            AIAttackWaveSend(14, 1, true);
        }
        autoF2F14C47_n = gv_spawnFactor;
        for (autoF2F14C47_i = 1; autoF2F14C47_i <= autoF2F14C47_n; autoF2F14C47_i += 1) {
            if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 120)) {
                gf_WaveSpawnAroundMarines("InfestorTerran2", 100.0, 2);
                AIAttackWaveSend(14, 1, true);
            }

            Wait(0.2, c_timeReal);
        }
        Wait(2.5, c_timeReal);
    }
    SoundPlay(SoundLink("TRaynor03Raynor00017", -1), PlayerGroupAll(), 100.0, 0.0);
    auto1B7770DD_n = 8;
    for (auto1B7770DD_i = 1; auto1B7770DD_i <= auto1B7770DD_n; auto1B7770DD_i += 1) {
        autoF5D50B6F_n = gv_spawnFactor;
        for (autoF5D50B6F_i = 1; autoF5D50B6F_i <= autoF5D50B6F_n; autoF5D50B6F_i += 1) {
            autoC2C361F4_n = 4;
            for (autoC2C361F4_i = 1; autoC2C361F4_i <= autoC2C361F4_n; autoC2C361F4_i += 1) {
                if ((RandomInt(0, 7) == 1)) {
                    gf_WaveSpawnAroundMarines("UltraliskBurrowed", 100.0, 1);
                    AIAttackWaveSend(14, 1, true);
                }
                else {
                    auto8CBE833A_n = 2;
                    for (auto8CBE833A_i = 1; auto8CBE833A_i <= auto8CBE833A_n; auto8CBE833A_i += 1) {
                        gf_WaveSpawnAroundMarines("ZombieLevel22", 59.0, 2);
                        AIAttackWaveSend(14, 1, true);
                    }
                }
            }
        }
    }
    return true;
}

trigger auto_gf_ECVeteranDropshipIntialWaves_Trigger = null;

void gf_ECVeteranDropshipIntialWaves () {
    if (auto_gf_ECVeteranDropshipIntialWaves_Trigger == null) {
        auto_gf_ECVeteranDropshipIntialWaves_Trigger = TriggerCreate("auto_gf_ECVeteranDropshipIntialWaves_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECVeteranDropshipIntialWaves_Trigger, false, false);
}

bool auto_gf_ECVeteranDropshipIntialWaves_TriggerFunc (bool testConds, bool runActions) {
    int autoC8B642CB_n;
    int autoC8B642CB_i;
    int autoA96D101B_n;
    int autoA96D101B_i;
    int autoD6B0C011_n;
    int autoD6B0C011_i;
    int auto4C3660BA_n;
    int auto4C3660BA_i;
    int auto2E32F782_n;
    int auto2E32F782_i;
    int autoB771A4B9_n;
    int autoB771A4B9_i;
    int auto948BCD84_n;
    int auto948BCD84_i;

    // Implementation
    autoC8B642CB_n = 15;
    for (autoC8B642CB_i = 1; autoC8B642CB_i <= autoC8B642CB_n; autoC8B642CB_i += 1) {
        autoA96D101B_n = gv_spawnFactor;
        for (autoA96D101B_i = 1; autoA96D101B_i <= autoA96D101B_n; autoA96D101B_i += 1) {
            if ((RandomInt(0, 7) == 1)) {
                gf_SmartSpawnNOTD("RoachBurrowed", 50.0);
            }
            else {
                if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 140)) {
                    gf_SmartSpawnNOTD("ZombieLevel22", 50.0);
                    Wait(0.1, c_timeReal);
                    gf_SmartSpawnNOTD("ZombieLevel22", 50.0);
                }

            }
            Wait(0.1, c_timeReal);
        }
        Wait(3.5, c_timeReal);
    }
    Wait(10.0, c_timeReal);
    autoD6B0C011_n = 10;
    for (autoD6B0C011_i = 1; autoD6B0C011_i <= autoD6B0C011_n; autoD6B0C011_i += 1) {
        if (((gv_alivePlayers > 4) && (RandomInt(0, 1) == 1))) {
            gf_SmartSpawnNOTD("UltraliskBurrowed", 85.0);
        }
        auto4C3660BA_n = gv_spawnFactor;
        for (auto4C3660BA_i = 1; auto4C3660BA_i <= auto4C3660BA_n; auto4C3660BA_i += 1) {
            if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 140)) {
                gf_SmartSpawnNOTD("InfestorTerran2", 75.0);
                Wait(0.1, c_timeReal);
                gf_SmartSpawnNOTD("InfestorTerran2", 75.0);
            }

            Wait(0.1, c_timeReal);
        }
        Wait(2.5, c_timeReal);
    }
    Wait(45.0, c_timeReal);
    auto2E32F782_n = gv_spawnFactor;
    for (auto2E32F782_i = 1; auto2E32F782_i <= auto2E32F782_n; auto2E32F782_i += 1) {
        gf_SmartSpawnNOTD("RoachBurrowed", 75.0);
        Wait(0.1, c_timeReal);
    }
    Wait(30.0, c_timeReal);
    autoB771A4B9_n = 10;
    for (autoB771A4B9_i = 1; autoB771A4B9_i <= autoB771A4B9_n; autoB771A4B9_i += 1) {
        auto948BCD84_n = gv_spawnFactor;
        for (auto948BCD84_i = 1; auto948BCD84_i <= auto948BCD84_n; auto948BCD84_i += 1) {
            if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 140)) {
                gf_SmartSpawnNOTD("InfestorTerran2", 75.0);
                Wait(0.1, c_timeReal);
                gf_SmartSpawnNOTD("InfestorTerran2", 75.0);
            }

            Wait(0.1, c_timeReal);
        }
        Wait(RandomFixed(3.0, 8.0), c_timeReal);
    }
    return true;
}

trigger auto_gf_ECVeteranDropshipSecondWaves_Trigger = null;

void gf_ECVeteranDropshipSecondWaves () {
    if (auto_gf_ECVeteranDropshipSecondWaves_Trigger == null) {
        auto_gf_ECVeteranDropshipSecondWaves_Trigger = TriggerCreate("auto_gf_ECVeteranDropshipSecondWaves_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECVeteranDropshipSecondWaves_Trigger, false, false);
}

bool auto_gf_ECVeteranDropshipSecondWaves_TriggerFunc (bool testConds, bool runActions) {
    int auto685D93B0_n;
    int auto685D93B0_i;
    int auto44B48732_n;
    int auto44B48732_i;
    int autoD4783B51_n;
    int autoD4783B51_i;
    int auto9116B497_n;
    int auto9116B497_i;

    // Implementation
    auto685D93B0_n = 10;
    for (auto685D93B0_i = 1; auto685D93B0_i <= auto685D93B0_n; auto685D93B0_i += 1) {
        auto44B48732_n = gv_spawnFactor;
        for (auto44B48732_i = 1; auto44B48732_i <= auto44B48732_n; auto44B48732_i += 1) {
            autoD4783B51_n = RandomInt(1, 3);
            for (autoD4783B51_i = 1; autoD4783B51_i <= autoD4783B51_n; autoD4783B51_i += 1) {
                if ((RandomInt(0, 6) == 1)) {
                    gf_SmartSpawnNOTD("UltraliskBurrowed", 85.0);
                }
                else {
                    auto9116B497_n = 2;
                    for (auto9116B497_i = 1; auto9116B497_i <= auto9116B497_n; auto9116B497_i += 1) {
                        gf_SmartSpawnNOTD("HulkBurrowed", 55.0);
                        Wait(0.15, c_timeReal);
                        gf_SmartSpawnNOTD("ZombieLevel22", 40.0);
                        Wait(0.15, c_timeReal);
                    }
                }
                Wait(0.1, c_timeReal);
            }
        }
        Wait(6.0, c_timeReal);
    }
    return true;
}

trigger auto_gf_ECNydusSpawn_Trigger = null;
int auto_gf_ECNydusSpawn_lp_nydusSpawnQuantity;

void gf_ECNydusSpawn (int lp_nydusSpawnQuantity) {
    auto_gf_ECNydusSpawn_lp_nydusSpawnQuantity = lp_nydusSpawnQuantity;

    if (auto_gf_ECNydusSpawn_Trigger == null) {
        auto_gf_ECNydusSpawn_Trigger = TriggerCreate("auto_gf_ECNydusSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECNydusSpawn_Trigger, false, false);
}

bool auto_gf_ECNydusSpawn_TriggerFunc (bool testConds, bool runActions) {
    int lp_nydusSpawnQuantity = auto_gf_ECNydusSpawn_lp_nydusSpawnQuantity;

    int auto2484D58D_n;
    int auto2484D58D_i;
    int auto189E4CD8_n;
    int auto189E4CD8_i;

    // Variable Declarations
    int[5] lv_nydusSpawnAreas;
    int lv_localIntA;
    int lv_nydusSelector;
    region lv_localRegionA;
    revealer[10] lv_localRevealer;
    point lv_localPointA;
    int lv_i;
    unit lv_concernedMarine;
    int lv_nydusSpawnQuantity;

    // Variable Initialization
    lv_localIntA = 1;
    lv_nydusSpawnQuantity = lp_nydusSpawnQuantity;

    // Implementation
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/9106C1B5"));
    Wait(10.0, c_timeGame);
    auto2484D58D_n = lv_nydusSpawnQuantity;
    for (auto2484D58D_i = 1; auto2484D58D_i <= auto2484D58D_n; auto2484D58D_i += 1) {
        lv_nydusSelector = RandomInt(1, 10);
        while (((lv_nydusSelector == lv_nydusSpawnAreas[1]) || (lv_nydusSelector == lv_nydusSpawnAreas[2]) || (lv_nydusSelector == lv_nydusSpawnAreas[3]) || (lv_nydusSelector == lv_nydusSpawnAreas[4]))) {
            lv_nydusSelector = RandomInt(1, 10);
        }
        lv_nydusSpawnAreas[lv_localIntA] = lv_nydusSelector;
        lv_localIntA += 1;
    }
    Wait(1.0, c_timeGame);
    lv_localIntA = 1;
    auto189E4CD8_n = lv_nydusSpawnQuantity;
    for (auto189E4CD8_i = 1; auto189E4CD8_i <= auto189E4CD8_n; auto189E4CD8_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "NydusCanal", 0, 14, RegionGetCenter(gv_nydusNetwork[lv_nydusSpawnAreas[lv_localIntA]]), RegionRandomPoint(RegionPlayableMap()));
        UnitGroupAdd(gv_nydusWormGroup, UnitLastCreated());
        if ((gv_nightmare == true)) {
            UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", UnitLastCreated(), 1);
            Wait(0.1, c_timeGame);
            libNtve_gf_UnitCreateFacingPoint(1, "SpineCrawler", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitLastCreated()), 8.0)), RegionRandomPoint(RegionPlayableMap()));
        }

        Wait(0.1, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, 14, RegionRandomPoint(gv_nydusNetwork[lv_nydusSpawnAreas[lv_localIntA]]), RegionRandomPoint(RegionPlayableMap()));
        PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(gv_nydusNetwork[lv_nydusSpawnAreas[lv_localIntA]]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 300.0);
        Wait(0.1, c_timeGame);
        lv_localIntA += 1;
    }
    lv_localIntA = 1;
    while ((lv_localIntA < 9)) {
        IntLoopBegin(0, (lv_nydusSpawnQuantity - 1));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            VisExploreArea(lv_localIntA, gv_nydusNetwork[lv_nydusSpawnAreas[IntLoopCurrent()]], true, false);
        }
        IntLoopEnd();
        lv_localIntA += 1;
    }
    Wait(2.0, c_timeReal);
    lv_concernedMarine = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lv_concernedMarine, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, (StringExternal("Param/Value/87B81A51") + PlayerName(UnitGetOwner(lv_concernedMarine))), StringExternal("Param/Value/73A03076"), 3.7, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/E14D6B71"));
    gf_ECNydusMobs();
    return true;
}

trigger auto_gf_ECNydusMobs_Trigger = null;

void gf_ECNydusMobs () {
    if (auto_gf_ECNydusMobs_Trigger == null) {
        auto_gf_ECNydusMobs_Trigger = TriggerCreate("auto_gf_ECNydusMobs_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECNydusMobs_Trigger, false, false);
}

bool auto_gf_ECNydusMobs_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while ((UnitGroupCount(gv_nydusWormGroup, c_unitCountAlive) > 0) && (gv_nydusFailed == false)) {
        Wait(10.0, c_timeReal);
        UnitGroupLoopBegin(gv_nydusWormGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((gv_nydusDanger == true)) {
                libNtve_gf_UnitCreateFacingPoint(3, "Slasher", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(3, "ZombieLevel2", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if (((gv_squadRating >= 1750))) {
                Wait(0.1, c_timeGame);
                libNtve_gf_UnitCreateFacingPoint(2, "Parasite", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }

            if (((gv_squadRating >= 1650) && (RandomInt(0, 8) == 1))) {
                Wait(0.1, c_timeGame);
                libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }

        }
        UnitGroupLoopEnd();
    }
    if ((gv_nydusFailed == false)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/49319E6D"));
        gv_nydusDanger = false;
        gf_AwardPlayerXPNOTD(3);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/880D9A12"));
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    else {
        gf_AwardRatingNOTD(-2);
        TriggerEnable(gt_ECNydusFirstBlood, false);
        UnitGroupLoopBegin(gv_nydusWormGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    return true;
}

trigger auto_gf_ECChapter2ItemSpawn_Trigger = null;

void gf_ECChapter2ItemSpawn () {
    if (auto_gf_ECChapter2ItemSpawn_Trigger == null) {
        auto_gf_ECChapter2ItemSpawn_Trigger = TriggerCreate("auto_gf_ECChapter2ItemSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECChapter2ItemSpawn_Trigger, false, false);
}

bool auto_gf_ECChapter2ItemSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_magazineSpawn;

    // Variable Initialization
    lv_magazineSpawn = 10;

    // Implementation
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/4D3BD96A"));
    if ((gv_nightmare == true)) {
        lv_magazineSpawn = 15;
        gf_CreateItemNOTD("Helium3Canister", 1);
    }

    gf_CreateItemNOTD("Helium3Canister", 1);
    gf_CreateItemNOTD("Magazine", lv_magazineSpawn);
    gf_CreateItemNOTD("AmmoBox", 3);
    if ((gv_navyCrossMode == false)) {
        gf_CreateItemNOTD("Medpack", 10);
    }

    gf_CreateItemNOTD("OccularImplants", 2);
    gf_CreateItemNOTD("HighCapacityClip", 2);
    gf_CreateItemNOTD("NanoHealthAugment", 2);
    gf_CreateItemNOTD("ThermalSight", 1);
    gf_CreateItemNOTD("PersonnelArcReactor", 2);
    gf_CreateItemNOTD("CombatMobilityAugment", 1);
    gf_CreateItemNOTD("C4Armor", 2);
    gf_CreateItemNOTD("C6Armor", 1);
    if ((gv_noNewbie == true)) {
        gf_CreateItemNOTD("ReactiveArmor", 1);
    }

    gf_CreateItemNOTD("Shotgun", 2);
    gf_CreateItemNOTD("LaserRifle", 2);
    if ((gv_noNewbie == true)) {
        gf_CreateItemNOTD("BarrettM112", 1);
        gf_CreateItemNOTD("Chaingun", 1);
    }
    else {
        gf_CreateItemNOTD("UA420AssaultRifle", 1);
    }
    return true;
}

trigger auto_gf_ErebosReturns_Trigger = null;

void gf_ErebosReturns () {
    if (auto_gf_ErebosReturns_Trigger == null) {
        auto_gf_ErebosReturns_Trigger = TriggerCreate("auto_gf_ErebosReturns_TriggerFunc");
    }

    TriggerExecute(auto_gf_ErebosReturns_Trigger, false, false);
}

bool auto_gf_ErebosReturns_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    Wait(RandomFixed(1.0, 30.0), c_timeReal);
    TriggerEnable(gt_Chapter2ErebosKilled, true);
    UnitIssueOrder(gv_erebos2, Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
    UnitSetState(gv_erebos2, c_unitStateInvulnerable, false);
    UnitSetState(gv_erebos2, c_unitStateTargetable, true);
    UnitSetState(gv_erebos2, c_unitStateRadarable, true);
    UnitSetState(gv_erebos2, c_unitStateDetectable, true);
    UnitSetTeamColorIndex(gv_erebos2, 0);
    UnitSetPropertyFixed(gv_erebos2, c_unitPropLifeRegen, 4.0);
    UnitGroupAdd(gv_zombieWave, gv_erebos2);
    if ((gv_noNewbie == true)) {
        UnitBehaviorAddPlayer(gv_erebos2, "ErebosBlind", 14, 1);
    }

    if (((gv_alivePlayers >= 4) && (gv_alivePlayers <= 8)) && (gv_noNewbie == true)) {
        UnitSetPropertyFixed(gv_erebos2, c_unitPropLifeMax, 18000.0);
        UnitSetPropertyFixed(gv_erebos2, c_unitPropLife, 18000.0);
        UnitSetPropertyFixed(gv_erebos2, c_unitPropMovementSpeed, 2.3);
    }
    else {
        UnitSetPropertyFixed(gv_erebos2, c_unitPropLifeMax, 12000.0);
        UnitSetPropertyFixed(gv_erebos2, c_unitPropLife, 12000.0);
        UnitSetPropertyFixed(gv_erebos2, c_unitPropLifeRegen, 1.0);
    }
    TriggerEnable(gt_Chapter2ErebosAI, true);
    TriggerEnable(gt_Chapter2ErebosHPLifesteal, true);
    if (((gv_nightmare == true) || (gv_squadRating >= 1800))) {
        UnitBehaviorAddPlayer(gv_erebos2, "Frenzy35", 14, 1);
        UnitBehaviorAddPlayer(gv_erebos2, "AdvancedMutation", 14, 1);
        UnitSetPropertyFixed(gv_erebos2, c_unitPropLifeRegen, 6.0);
    }

    UnitBehaviorAddPlayer(gv_erebos2, "EnergyVortex", 14, 1);
    return true;
}

void gf_PowerGeneratorsComplete () {
    // Implementation
    if ((gv_wave < 10)) {
        ObjectiveCreate(StringExternal("Param/Value/D4674EA9"), StringExternal("Param/Value/EA8C7D2D"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
    }

    gv_generatorMissionSuccessful = true;
    UnitGroupIssueOrder(UnitGroupFromId(4), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroupFromId(5));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E658C7CF"));
    if ((gv_camsMissionSuccessful == true)) {
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/226488C6"));
        PlayerGroupLoopBegin(gv_marineSquad);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            IntLoopBegin(gv_indexBaseValue, 5);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(gv_camsUnlocked[IntLoopCurrent()], 7.0), 0.0, false);
            }
            IntLoopEnd();
        }
        PlayerGroupLoopEnd();
    }

    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/D028085E"));
}

trigger auto_gf_BlackOpsAIInitiative_Trigger = null;

void gf_BlackOpsAIInitiative () {
    if (auto_gf_BlackOpsAIInitiative_Trigger == null) {
        auto_gf_BlackOpsAIInitiative_Trigger = TriggerCreate("auto_gf_BlackOpsAIInitiative_TriggerFunc");
    }

    TriggerExecute(auto_gf_BlackOpsAIInitiative_Trigger, false, false);
}

bool auto_gf_BlackOpsAIInitiative_TriggerFunc (bool testConds, bool runActions) {
    int auto7CBCB6F4_n;
    int auto7CBCB6F4_i;
    int auto41D7D14B_n;
    int auto41D7D14B_i;

    // Variable Declarations
    unitgroup lv_blackOpsArea;
    unit lv_localUnitA;
    int lv_localIntA;
    bool lv_orderGiven;

    // Variable Initialization
    lv_blackOpsArea = UnitGroupEmpty();
    lv_localIntA = 1;

    // Implementation
    while ((UnitGroupCount(gv_blackOps, c_unitCountAlive) > 0)) {
        Wait(7.0, c_timeReal);
        UnitIssueOrder(gv_blackOpsSentinel, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(gv_marines), 20.0))), c_orderQueueReplace);
        Wait(0.3, c_timeReal);
        lv_localIntA = 1;
        UnitGroupLoopBegin(gv_blackOps);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((RandomInt(0, 2) == 1) && (UnitHasBehavior(UnitGroupLoopCurrent(), "GhostCloak") == true) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_CenterOfUnitGroup(gv_marines)) > 12.0) && (UnitHasBehavior(UnitGroupLoopCurrent(), "ComplianceMatrix") == false) && (UnitHasBehavior(UnitGroupLoopCurrent(), "MindMeld") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(libNtve_gf_CenterOfUnitGroup(gv_marines), 12.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_CenterOfUnitGroup(gv_marines)) > 15.0) && (UnitHasBehavior(UnitGroupLoopCurrent(), "ComplianceMatrix") == false) && (UnitHasBehavior(UnitGroupLoopCurrent(), "MindMeld") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(libNtve_gf_CenterOfUnitGroup(gv_marines), 12.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
            }
            lv_localUnitA = UnitGroupLoopCurrent();
            lv_orderGiven = false;
            lv_localIntA = 1;
            auto7CBCB6F4_n = 8;
            for (auto7CBCB6F4_i = 1; auto7CBCB6F4_i <= auto7CBCB6F4_n; auto7CBCB6F4_i += 1) {
                if ((libNtve_gf_UnitInRegion(gv_marineHero[lv_localIntA], RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 17.0)) == true) && (RandomInt(0, 2) == 1) && (lv_orderGiven == false) && (UnitHasBehavior(UnitGroupLoopCurrent(), "ComplianceMatrix") == false) && (UnitHasBehavior(UnitGroupLoopCurrent(), "MindMeld") == false)) {
                    lv_orderGiven = true;
                    libNtve_gf_UnitCreateFacingPoint(1, "SpiderMine", 0, 13, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 4.0)), RegionGetCenter(RegionFromId(1)));
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), false);
                }

                lv_localIntA += 1;
            }
            lv_orderGiven = false;
            lv_localIntA = 1;
            auto41D7D14B_n = 8;
            for (auto41D7D14B_i = 1; auto41D7D14B_i <= auto41D7D14B_n; auto41D7D14B_i += 1) {
                if ((libNtve_gf_UnitInRegion(gv_marineHero[lv_localIntA], RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 11.0)) == true) && (UnitGetPropertyFixed(gv_marineHero[lv_localIntA], c_unitPropLife, c_unitPropCurrent) <= 75.0) && (libNtve_gf_UnitIsVisibleToPlayer(gv_marineHero[lv_localIntA], 13) == true) && (lv_orderGiven == false) && (UnitHasBehavior(UnitGroupLoopCurrent(), "ComplianceMatrix") == false) && (UnitHasBehavior(UnitGroupLoopCurrent(), "MindMeld") == false)) {
                    lv_orderGiven = true;
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_marineHero[lv_localIntA]), c_orderQueueReplace);
                }

                lv_localIntA += 1;
            }
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(gv_blackOpsDroneTeam);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "ComplianceMatrix") == false) && (UnitHasBehavior(UnitGroupLoopCurrent(), "MindMeld") == false)) {
                if ((RandomInt(0, 1) == 1)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("move", 1), UnitGroupRandomUnit(gv_blackOps, c_unitCountAlive)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("move", 1), UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), c_orderQueueReplace);
                }
            }

        }
        UnitGroupLoopEnd();
    }
    return true;
}

trigger auto_gf_ECChapter3AirDrop_Trigger = null;

void gf_ECChapter3AirDrop () {
    if (auto_gf_ECChapter3AirDrop_Trigger == null) {
        auto_gf_ECChapter3AirDrop_Trigger = TriggerCreate("auto_gf_ECChapter3AirDrop_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECChapter3AirDrop_Trigger, false, false);
}

bool auto_gf_ECChapter3AirDrop_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/B5E0AFBC"));
    gf_CreateItemNOTD("Magazine", 15);
    gf_CreateItemNOTD("StingerMK3", 1);
    if ((gv_navyCrossMode == false)) {
        gf_CreateItemNOTD("Medpack", 7);
    }

    gf_CreateItemNOTD("LaserRifle", 2);
    gf_CreateItemNOTD("BarrettM112", 1);
    gf_CreateItemNOTD("Chaingun", 1);
    gf_CreateItemNOTD("Helium3Canister", 1);
    return true;
}

trigger auto_gf_CharlieCompanyAI_Trigger = null;

void gf_CharlieCompanyAI () {
    if (auto_gf_CharlieCompanyAI_Trigger == null) {
        auto_gf_CharlieCompanyAI_Trigger = TriggerCreate("auto_gf_CharlieCompanyAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_CharlieCompanyAI_Trigger, false, false);
}

bool auto_gf_CharlieCompanyAI_TriggerFunc (bool testConds, bool runActions) {
    int auto3E63BABB_n;
    int auto3E63BABB_i;

    // Variable Declarations
    bool lv_heroesInRange;
    unit lv_myFavHero;
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Implementation
    while ((gv_gameOver == false)) {
        Wait(7.0, c_timeReal);
        UnitGroupLoopBegin(gv_easyCompany);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_heroesInRange = false;
            lv_localIntA = 1;
            auto3E63BABB_n = 8;
            for (auto3E63BABB_i = 1; auto3E63BABB_i <= auto3E63BABB_n; auto3E63BABB_i += 1) {
                if ((DistanceBetweenPoints(UnitGetPosition(gv_marineHero[lv_localIntA]), UnitGetPosition(UnitGroupLoopCurrent())) <= 20.0) && (lv_heroesInRange == false)) {
                    lv_heroesInRange = true;
                    lv_myFavHero = gv_marineHero[lv_localIntA];
                }

                lv_localIntA += 1;
            }
            if ((lv_heroesInRange == true)) {
                if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_myFavHero)) > 5.0)) {
                    if (((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) <= 60.0) || (RandomInt(0, 3) == 1))) {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == "SiegeBreaker") || (UnitGetType(UnitGroupLoopCurrent()) == "SpartanCompany"))) {
                            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_myFavHero), 5.0))), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_myFavHero), 3.0))), c_orderQueueReplace);
                        }
                    }
                    else {
                        if (((UnitGetType(UnitGroupLoopCurrent()) == "SiegeBreaker") || (UnitGetType(UnitGroupLoopCurrent()) == "SpartanCompany"))) {
                            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_myFavHero), 5.0))), c_orderQueueReplace);
                        }
                        else {
                            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_myFavHero), 3.0))), c_orderQueueReplace);
                        }
                    }
                }

            }
            else {
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Turbo", 0)), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), c_orderQueueReplace);
            }
        }
        UnitGroupLoopEnd();
    }
    return true;
}

trigger auto_gf_BrokenArrow_Trigger = null;

void gf_BrokenArrow () {
    if (auto_gf_BrokenArrow_Trigger == null) {
        auto_gf_BrokenArrow_Trigger = TriggerCreate("auto_gf_BrokenArrow_TriggerFunc");
    }

    TriggerExecute(auto_gf_BrokenArrow_Trigger, false, false);
}

bool auto_gf_BrokenArrow_TriggerFunc (bool testConds, bool runActions) {
    int auto43FA23E6_n;
    int auto43FA23E6_i;

    // Variable Declarations
    point lv_cASPoint;
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Implementation
    while ((lv_localIntA < 13) && (UnitIsAlive(gv_finalBoss) == true)) {
        Wait(RandomFixed(5.0, 8.0), c_timeReal);
        auto43FA23E6_n = 10;
        for (auto43FA23E6_i = 1; auto43FA23E6_i <= auto43FA23E6_n; auto43FA23E6_i += 1) {
            lv_cASPoint = RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(gv_marines), 35.0));
            while ((!((((PointGetX(lv_cASPoint) >= 10) && (PointGetX(lv_cASPoint) <= 246)) && ((PointGetY(lv_cASPoint) >= 10) && (PointGetY(lv_cASPoint) <= 246)))))) {
                lv_cASPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 15.0));
            }
        }
        PlayerCreateEffectPoint(9, "Initial", lv_cASPoint);
        lv_localIntA += 1;
    }
    return true;
}

trigger auto_gf_KollersFireMission_Trigger = null;

void gf_KollersFireMission () {
    if (auto_gf_KollersFireMission_Trigger == null) {
        auto_gf_KollersFireMission_Trigger = TriggerCreate("auto_gf_KollersFireMission_TriggerFunc");
    }

    TriggerExecute(auto_gf_KollersFireMission_Trigger, false, false);
}

bool auto_gf_KollersFireMission_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofForwardObserver;
    fixed lv_barrageTimeInterval;
    int lv_randomInteger;
    unitgroup lv_unitsinRegion;
    point lv_fireMissionTarget;
    point lv_randomPoint;

    // Variable Initialization
    lv_ownerofForwardObserver = 9;
    lv_barrageTimeInterval = (3.0 / IntToFixed(20));
    lv_unitsinRegion = UnitGroupEmpty();
    lv_fireMissionTarget = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_finalBoss), 5.0));

    // Implementation
    PlayerCreateEffectPoint(9, "ForwardObserverLaunch", lv_fireMissionTarget);
    PlayerCreateEffectPoint(9, "ForwardObserverShellFlight", lv_fireMissionTarget);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", lv_fireMissionTarget, ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0, 270.0);
    PlayerCreateEffectPoint(9, "FireMissionLevel1CreatePersistent", lv_fireMissionTarget);
    Wait(1.0, c_timeGame);
    PlayerCreateEffectPoint(9, "ForwardObserverShellFlight", lv_fireMissionTarget);
    Wait(2.0, c_timeGame);
    IntLoopBegin(1, 25);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_randomInteger = RandomInt(1, 3);
        lv_randomPoint = RegionRandomPoint(RegionCircle(lv_fireMissionTarget, 7.0));
        PlayerCreateEffectPoint(9, UserDataGetGameLink("FireMissionDamageEffects", "Level 3", "Damage Effects", lv_randomInteger), lv_randomPoint);
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_randomPoint) <= 3.0)) {
                CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 1.5, 2.0, 100.0, 1.2);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_randomPoint) <= 5.0)) {
                CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.75, 2.0, 100.0, 1.0);
            }
            else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_randomPoint) <= 7.0)) {
                CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.35, 2.0, 100.0, 0.75);
            }
        }
        UnitGroupLoopEnd();
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    IntLoopEnd();
    return true;
}

trigger auto_gf_QueenAI_Trigger = null;

void gf_QueenAI () {
    if (auto_gf_QueenAI_Trigger == null) {
        auto_gf_QueenAI_Trigger = TriggerCreate("auto_gf_QueenAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_QueenAI_Trigger, false, false);
}

bool auto_gf_QueenAI_TriggerFunc (bool testConds, bool runActions) {
    int auto16E98FA4_n;
    int auto16E98FA4_i;
    int auto6C55C02A_n;
    int auto6C55C02A_i;

    // Variable Declarations
    actor lv_frenzyActor;
    unitgroup lv_queenEggs;
    point lv_eggSpawnPoint;
    int lv_queenSpawnFactor;

    // Variable Initialization
    lv_queenEggs = UnitGroupEmpty();
    lv_queenSpawnFactor = 3;

    // Implementation
    while ((UnitIsAlive(gv_finalBoss) == true) && (gv_alivePlayers > 0)) {
        if ((RandomInt(0, 1) == 1) && (gv_queenBirthing == false) && (gv_queenFrenzy == false) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 185)) {
            gv_queenBirthing = true;
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/5FA0B4DE"));
            SoundPlay(SoundLink("ZombieQueenBirthing", -1), PlayerGroupActive(), 100.0, 0.0);
            UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 0.1);
            Wait(2.0, c_timeReal);
            if ((gv_squadRating >= 1900) && (gv_noNewbie == true) && (gv_alivePlayers >= 4)) {
                lv_queenSpawnFactor = 6;
            }
            else if ((gv_squadRating >= 1800) && (gv_noNewbie == true)) {
                lv_queenSpawnFactor = 5;
            }
            else if ((gv_squadRating >= 1700) && (gv_noNewbie == true)) {
                lv_queenSpawnFactor = 4;
            }
            auto6C55C02A_n = (gv_spawnFactor * 2);
            for (auto6C55C02A_i = 1; auto6C55C02A_i <= auto6C55C02A_n; auto6C55C02A_i += 1) {
                lv_eggSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_finalBoss), 5.0));
                if ((PointPathingPassable(lv_eggSpawnPoint) == true)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Egg", 0, 14, lv_eggSpawnPoint, RegionRandomPoint(RegionPlayableMap()));
                    UnitGroupAdd(lv_queenEggs, UnitLastCreated());
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_eggSpawnPoint);
                    Wait(0.15, c_timeReal);
                }

            }
            UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, gv_queenMoveSpeed);
            Wait(2.5, c_timeReal);
            UnitGroupLoopBegin(lv_queenEggs);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                    if ((gv_squadRating >= 1800) && (gv_noNewbie == true) && (RandomInt(0, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Stalker2", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
                    }
                    else {
                        if ((RandomInt(0, 2) == 1) && (gv_noNewbie == true)) {
                            libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
                            UnitBehaviorAddPlayer(UnitLastCreated(), "PersonalCloakingFree", 14, 1);
                        }
                        else {
                            libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
                        }
                    }
                    UnitBehaviorAdd(UnitLastCreated(), "Rampage", gv_boss, 1);
                    UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", gv_boss, 2);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    UnitGroupRemove(lv_queenEggs, UnitGroupLoopCurrent());
                    UnitKill(UnitGroupLoopCurrent());
                    Wait(0.2, c_timeReal);
                }

            }
            UnitGroupLoopEnd();
            Wait(3.0, c_timeReal);
            gv_queenBirthing = false;
        }
        else {
            if ((RandomInt(0, 4) == 1) && (gv_queenBirthing == false) && (gv_queenFrenzy == false) && (gv_queenEscapeMode == false)) {
                gv_queenFrenzy = true;
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/4AF6E21F"));
                SoundPlay(SoundLink("ZombieQueenFrenzy", -1), PlayerGroupActive(), 100.0, 0.0);
                Wait(2.0, c_timeReal);
                UnitBehaviorAdd(gv_finalBoss, "Frenzy2", gv_finalBoss, 1);
                while (!((UnitBehaviorDuration(gv_finalBoss, "Frenzy2") == 0.0))) {
                    Wait(1.0, c_timeGame);
                }
                gv_queenFrenzy = false;
            }
            else {
                if ((RandomInt(0, 7) == 1) && (gv_squadRating >= 1750) && (gv_noNewbie == true) && (gv_queenBirthing == false) && (gv_queenFrenzy == false) && (gv_tartarusBirth == false) && (gv_alivePlayers > 3)) {
                    gv_queenBirthing = true;
                    gv_tartarusBirth = true;
                    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/08B54066"));
                    SoundPlay(SoundLink("ZombieQueenBirthing", -1), PlayerGroupActive(), 100.0, 0.0);
                    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 0.1);
                    Wait(2.0, c_timeReal);
                    if ((gv_squadRating >= 1900) && (gv_noNewbie == true) && (gv_alivePlayers >= 4)) {
                        lv_queenSpawnFactor = 6;
                    }
                    else if ((gv_squadRating >= 1800) && (gv_noNewbie == true)) {
                        lv_queenSpawnFactor = 5;
                    }
                    else if ((gv_squadRating >= 1700) && (gv_noNewbie == true)) {
                        lv_queenSpawnFactor = 4;
                    }
                    auto16E98FA4_n = 1;
                    for (auto16E98FA4_i = 1; auto16E98FA4_i <= auto16E98FA4_n; auto16E98FA4_i += 1) {
                        lv_eggSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_finalBoss), 5.0));
                        if ((PointPathingPassable(lv_eggSpawnPoint) == true)) {
                            libNtve_gf_UnitCreateFacingPoint(1, "LargeZombieCocoon", 0, 14, lv_eggSpawnPoint, RegionRandomPoint(RegionPlayableMap()));
                            UnitGroupAdd(lv_queenEggs, UnitLastCreated());
                            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, lv_eggSpawnPoint);
                            Wait(0.2, c_timeReal);
                        }

                    }
                    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, gv_queenMoveSpeed);
                    Wait(10.0, c_timeReal);
                    UnitGroupLoopBegin(lv_queenEggs);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
                            libNtve_gf_UnitCreateFacingPoint(1, "Tartarus", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
                            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
                            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                            UnitBehaviorRemoveCategory(UnitLastCreated(), c_unitBehaviorFlagPermanent);
                            UnitGroupRemove(lv_queenEggs, UnitGroupLoopCurrent());
                            UnitKill(UnitGroupLoopCurrent());
                            Wait(0.2, c_timeReal);
                        }

                    }
                    UnitGroupLoopEnd();
                    Wait(3.0, c_timeReal);
                    gv_queenBirthing = false;
                }

            }
        }
        if ((UnitGetPropertyFixed(gv_finalBoss, c_unitPropLife, c_unitPropCurrent) < 20.0)) {
            UnitKill(gv_finalBoss);
        }

        Wait(10.0, c_timeReal);
    }
    return true;
}

trigger auto_gf_ECEndCinematic_Trigger = null;

void gf_ECEndCinematic () {
    if (auto_gf_ECEndCinematic_Trigger == null) {
        auto_gf_ECEndCinematic_Trigger = TriggerCreate("auto_gf_ECEndCinematic_TriggerFunc");
    }

    TriggerExecute(auto_gf_ECEndCinematic_Trigger, false, false);
}

bool auto_gf_ECEndCinematic_TriggerFunc (bool testConds, bool runActions) {
    int auto0BCF887A_n;
    int auto0BCF887A_i;
    int autoCD8AD5F0_n;
    int autoCD8AD5F0_i;

    // Variable Declarations
    unit lv_eVACShip;
    region lv_eVACPoint;
    region lv_eVACSpawn;
    unit lv_cineIVAN;
    unit lv_cineBERGMANN;

    // Variable Initialization
    lv_eVACPoint = RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 5.0);
    lv_eVACSpawn = RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 30.0);

    // Implementation
    libNtve_gf_UnitCreateFacingPoint(1, "HerculesLanderFlying", 0, 0, RegionRandomPoint(lv_eVACSpawn), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)));
    lv_eVACShip = UnitLastCreated();
    UnitIssueOrder(lv_eVACShip, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lv_eVACPoint)), c_orderQueueReplace);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/D31BBAF3"));
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitAbilityEnable(UnitGroupLoopCurrent(), "TacNukeStrike", false);
    }
    UnitGroupLoopEnd();
    Wait(3.0, c_timeReal);
    auto0BCF887A_n = 3;
    for (auto0BCF887A_i = 1; auto0BCF887A_i <= auto0BCF887A_n; auto0BCF887A_i += 1) {
        UnitIssueOrder(lv_eVACShip, OrderTargetingPoint(AbilityCommand("HerculesLand", 0), RegionRandomPoint(lv_eVACPoint)), c_orderQueueReplace);
        Wait(3.0, c_timeReal);
    }
    Wait(2.0, c_timeReal);
    autoCD8AD5F0_n = 2;
    for (autoCD8AD5F0_i = 1; autoCD8AD5F0_i <= autoCD8AD5F0_n; autoCD8AD5F0_i += 1) {
        UnitCreate(1, "Corpsman", 0, 9, RegionRandomPoint(RegionCircle(UnitGetPosition(lv_eVACShip), 5.5)), libNtve_gf_RandomAngle());
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_easyCompany);
        UnitSetTeamColorIndex(UnitLastCreated(), 14);
        Wait(0.1, c_timeReal);
        UnitCreate(1, "Marine", 0, 9, RegionRandomPoint(RegionCircle(UnitGetPosition(lv_eVACShip), 5.5)), libNtve_gf_RandomAngle());
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_easyCompany);
        UnitSetTeamColorIndex(UnitLastCreated(), 14);
    }
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    if ((RandomInt(0, 5) == 1)) {
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/251CB8AC"));
    }
    else if ((RandomInt(0, 5) == 1)) {
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/481CA5D5"));
    }
    else if ((RandomInt(0, 5) == 1)) {
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/66D10A6E"));
    }
    TriggerExecute(gt_ChapterEndMedicRatingBonus, true, false);
    Wait(3.0, c_timeReal);
    gf_ClearZombieWave();
    gf_RadioNOTD(StringExternal("Param/Value/6B9F59C0"), StringExternal("Param/Value/F3EDB9C3"));
    UnitRemove(gv_ivan);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 0.0, 5.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 0.0, 5.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 0.0, 5.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 0.0, 5.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 0.0, 5.0);
    Wait(5.0, c_timeReal);
    PlayerGroupLoopBegin(gv_activePlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_ammoCounterDialog[PlayerGroupLoopCurrent()], PlayerGroupAll(), false);
        DialogSetVisible(gv_shellDialog[PlayerGroupLoopCurrent()], PlayerGroupAll(), false);
    }
    PlayerGroupLoopEnd();
    DialogControlSetVisible(gv_saveButton, PlayerGroupAll(), false);
    if ((gf_PreCinematicProcessing() == true)) {
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    GameSetLighting("NOTDDarkness", 0.0);
    UnitCreate(1, "IvanPlushenko", c_unitCreateIgnorePlacement, 0, PointFromId(3089), PointGetFacing(PointFromId(3089)));
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
    lv_cineIVAN = UnitLastCreated();
    UnitCreate(1, "DrBergmann", c_unitCreateIgnorePlacement, 0, PointFromId(3090), PointGetFacing(PointFromId(3090)));
    UnitBehaviorAddPlayer(UnitLastCreated(), "InceptionSlow", 0, 1);
    libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
    UnitSetState(UnitLastCreated(), c_unitStateTooltipable, false);
    UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
    UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
    UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    lv_cineBERGMANN = UnitLastCreated();
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(2327), 0.0, -1, 10, true);
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(2329), 4.5, -1, 10, true);
        VisRevealArea(IntLoopCurrent(), RegionPlayableMap(), 50.0, false);
    }
    IntLoopEnd();
    Wait(0.75, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/D9413C5B"));
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(2330), 0.0, -1, 10, true);
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(2331), 3.0, -1, 10, true);
    }
    IntLoopEnd();
    SoundPlay(SoundLink("BoltPull", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.5, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/95FA0B91"));
    Wait(2.75, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(2693), 0.0, -1, 10, true);
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(3052), 10.0, -1, 10, true);
    }
    IntLoopEnd();
    Wait(2.0, c_timeReal);
    UnitSetState(lv_cineBERGMANN, c_unitStateInvulnerable, false);
    UnitIssueOrder(lv_cineIVAN, OrderTargetingUnit(AbilityCommand("attack", 0), lv_cineBERGMANN), c_orderQueueReplace);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 0.3);
    }
    IntLoopEnd();
    SoundPlay(SoundLink("DesertEagle", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.2, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_cineBERGMANN));
    UnitKill(lv_cineBERGMANN);
    UnitIssueOrder(lv_cineIVAN, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    Wait(7.0, c_timeReal);
    if ((gf_PostCinematicProcessing() == true)) {
    }

    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, true);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    if ((UnitGroupCount(gv_marines, c_unitCountAlive) >= 1)) {
        gv_victory = true;
    }

    gv_gameOver = true;
    Wait(3.0, c_timeReal);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryCombat, 100.0, 3.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryDeath, 100.0, 3.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 3.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMusic, 100.0, 3.0);
    SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryMovement, 100.0, 3.0);
    return true;
}

trigger auto_gf_ACEnvironmentalChanges_Trigger = null;

void gf_ACEnvironmentalChanges () {
    if (auto_gf_ACEnvironmentalChanges_Trigger == null) {
        auto_gf_ACEnvironmentalChanges_Trigger = TriggerCreate("auto_gf_ACEnvironmentalChanges_TriggerFunc");
    }

    TriggerExecute(auto_gf_ACEnvironmentalChanges_Trigger, false, false);
}

bool auto_gf_ACEnvironmentalChanges_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitIssueOrder(UnitFromId(287), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitSetState(UnitFromId(2505), c_unitStateSelectable, true);
    UnitSetScale(gv_tartarusCocoon, 275.0, 275.0, 275.0);
    UnitRemove(UnitFromId(136));
    UnitRemove(UnitFromId(844));
    UnitRemove(UnitFromId(178));
    UnitRemove(UnitFromId(1271));
    UnitRemove(UnitFromId(2159));
    UnitRemove(UnitFromId(2158));
    UnitRemove(UnitFromId(1462));
    UnitCreate(1, "Delta1", c_unitCreateIgnorePlacement, 0, PointFromId(199), 38.0);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "TOCastanarBrutaliskCage");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "TerrainObjectCastanarBrutaCageDoodad");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(140), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(141), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(28), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(147), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(104), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(105), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(106), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(107), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(108), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(109), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(110), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(111), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(112), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(25), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(26), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(27), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(36), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(18), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(19), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(20), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(198), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(199), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(206), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(192), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(50), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(79), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(78), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(80), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(81), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(96), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(97), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(40), "KorhalBuildingDebris");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(204), "InfestedHomeLarge");
    CameraSetBounds(PlayerGroupActive(), RegionFromId(160), true);
    libNtve_gf_MakeUnitInvulnerable(gv_charlie, true);
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 1) != 1)) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_ACAmbientSpawn_Trigger = null;

void gf_ACAmbientSpawn () {
    if (auto_gf_ACAmbientSpawn_Trigger == null) {
        auto_gf_ACAmbientSpawn_Trigger = TriggerCreate("auto_gf_ACAmbientSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_ACAmbientSpawn_Trigger, false, false);
}

bool auto_gf_ACAmbientSpawn_TriggerFunc (bool testConds, bool runActions) {
    int auto3EA867AD_n;
    int auto3EA867AD_i;
    int auto3A78A35C_n;
    int auto3A78A35C_i;
    int auto8B975771_n;
    int auto8B975771_i;

    // Implementation
    while (true) {
        if ((gv_charlieFound == false)) {
            UnitBehaviorAddPlayer(gv_charlie, "Rampage", 0, 1);
        }

        Wait(2.7, c_timeReal);
        if ((gv_aCSpawnHalt == false) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 100) && (gv_aCSpawnRespite == false) && (gv_gameOver == false)) {
            AIAttackWaveSetTargetUnitGroup(14, gv_marines);
            if ((RandomInt(0, 15) == 1)) {
                auto3EA867AD_n = gv_spawnFactor;
                for (auto3EA867AD_i = 1; auto3EA867AD_i <= auto3EA867AD_n; auto3EA867AD_i += 1) {
                    if ((RandomInt(0, 5) == 1) && (gv_alivePlayers >= 4) && (gv_noNewbie == true)) {
                        gf_SmartSpawnNOTD("Wraith2", 80.0);
                    }
                    else {
                        gf_SmartSpawnNOTD("Mutalisk", 80.0);
                    }
                    AIAttackWaveUseUnit(14, UnitLastCreated());
                    if ((gv_wave == 14) && (libNtve_gf_UnitGroupIsDead(gv_colonists) == false)) {
                        AIAttackWaveSetTargetUnitGroup(14, gv_colonists);
                    }

                }
            }
            else if ((RandomInt(0, 30) == 1)) {
                auto3A78A35C_n = gv_spawnFactor;
                for (auto3A78A35C_i = 1; auto3A78A35C_i <= auto3A78A35C_n; auto3A78A35C_i += 1) {
                    if ((RandomInt(0, 2) == 1)) {
                        gf_SmartSpawnNOTD("Devourer2", 80.0);
                        if ((gv_wave == 14) && (libNtve_gf_UnitGroupIsDead(gv_colonists) == false)) {
                            AIAttackWaveSetTargetUnitGroup(14, gv_colonists);
                        }

                    }
                    else {
                        gf_SmartSpawnNOTD("UltraliskBurrowed", 70.0);
                    }
                }
            }
            else if ((RandomInt(0, 3) == 1)) {
                auto8B975771_n = (gv_spawnFactor * 3);
                for (auto8B975771_i = 1; auto8B975771_i <= auto8B975771_n; auto8B975771_i += 1) {
                    gf_SmartSpawnNOTD("ZombieLevel12", 55.0);
                }
            }
            AIAttackWaveSend(14, (12 - gv_spawnFactor), true);
        }

    }
    return true;
}

trigger auto_gf_ACSecTeamAI_Trigger = null;

void gf_ACSecTeamAI () {
    if (auto_gf_ACSecTeamAI_Trigger == null) {
        auto_gf_ACSecTeamAI_Trigger = TriggerCreate("auto_gf_ACSecTeamAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ACSecTeamAI_Trigger, false, false);
}

bool auto_gf_ACSecTeamAI_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while ((gv_gameOver == false)) {
        Wait(2.5, c_timeReal);
        UnitGroupLoopBegin(gv_secTeamAMarines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitHasBehavior(UnitGroupLoopCurrent(), "ComplianceMatrix") == false)) {
                if (((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(136)) == true) || (libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(46)) == true)) && (UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 3.0), 0), c_unitCountAlive) < 1)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Stimpack", 0)), c_orderQueueReplace);
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 2.0))), c_orderQueueReplace);
                }
                else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGroupCenterOfGroup(gv_marines)) > 9.0)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Stimpack", 0)), c_orderQueueReplace);
                    UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 2.8))), c_orderQueueReplace);
                }
                else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGroupCenterOfGroup(gv_marines)) < 3.1)) {
                }
                else if (true) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 2.0))), c_orderQueueReplace);
                }
            }
            else {
                UnitGroupRemove(gv_secTeamAMarines, UnitGroupLoopCurrent());
            }
            Wait(RandomFixed(0.05, 0.2), c_timeGame);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

trigger auto_gf_DemeterAI_Trigger = null;

void gf_DemeterAI () {
    if (auto_gf_DemeterAI_Trigger == null) {
        auto_gf_DemeterAI_Trigger = TriggerCreate("auto_gf_DemeterAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_DemeterAI_Trigger, false, false);
}

bool auto_gf_DemeterAI_TriggerFunc (bool testConds, bool runActions) {
    int autoD5DC545B_n;
    int autoD5DC545B_i;
    int autoFC4F0A18_n;
    int autoFC4F0A18_i;
    int auto5EF64B73_n;
    int auto5EF64B73_i;
    int autoCBB8BFA0_n;
    int autoCBB8BFA0_i;

    // Variable Declarations
    int lv_stareCycle;

    // Variable Initialization
    lv_stareCycle = 2;

    // Implementation
    while ((UnitIsAlive(gv_boss) == true)) {
        Wait(7.0, c_timeReal);
        if ((lv_stareCycle == 1)) {
            lv_stareCycle = 2;
            gf_TipNOTD(25000, StringExternal("Param/Value/7FD7EB19"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F235544E"));
            SoundPlay(SoundLink("Overseer_Pissed", -1), PlayerGroupAll(), 150.0, 0.0);
            if ((gv_nightmare == false)) {
                UnitSetState(gv_boss, c_unitStateMoveSuppressed, false);
            }

            auto5EF64B73_n = 4;
            for (auto5EF64B73_i = 1; auto5EF64B73_i <= auto5EF64B73_n; auto5EF64B73_i += 1) {
                Wait(1.0, c_timeReal);
                SoundPlay(SoundLink("StarePulse", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            if ((UnitIsAlive(gv_boss) == false)) {
                break;
            }

            UnitSetState(gv_boss, c_unitStateMoveSuppressed, true);
            SoundPlay(SoundLink("QueenOfBlades_ConsumptionLaunch", -1), PlayerGroupAll(), 115.0, 0.0);
            UnitGroupLoopBegin(gv_marines);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), 13) == true)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "FrozenGaze", gv_boss, 1);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
                    CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.05, 2.0, 100.0, 0.1);
                }

            }
            UnitGroupLoopEnd();
            autoCBB8BFA0_n = gv_spawnFactor;
            for (autoCBB8BFA0_i = 1; autoCBB8BFA0_i <= autoCBB8BFA0_n; autoCBB8BFA0_i += 1) {
                UnitCreate(1, "Slither", 0, 14, UnitGetPosition(gv_boss), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
                Wait(0.1, c_timeReal);
            }
        }
        else {
            lv_stareCycle = 1;
            gf_TipNOTD(25000, StringExternal("Param/Value/E9F81BB4"));
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/299BF98C"));
            SoundPlay(SoundLink("Queen_Pissed", -1), PlayerGroupAll(), 115.0, 0.0);
            if ((gv_nightmare == false)) {
                UnitSetState(gv_boss, c_unitStateMoveSuppressed, false);
            }

            autoD5DC545B_n = 4;
            for (autoD5DC545B_i = 1; autoD5DC545B_i <= autoD5DC545B_n; autoD5DC545B_i += 1) {
                Wait(1.0, c_timeReal);
                SoundPlay(SoundLink("StarePulse", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            if ((UnitIsAlive(gv_boss) == false)) {
                break;
            }

            UnitSetState(gv_boss, c_unitStateMoveSuppressed, true);
            SoundPlay(SoundLink("QueenOfBlades_ConsumptionLaunch", -1), PlayerGroupAll(), 115.0, 0.0);
            UnitGroupLoopBegin(gv_marines);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((libNtve_gf_UnitIsVisibleToPlayer(UnitGroupLoopCurrent(), 13) == false)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "FrozenGaze", gv_boss, 1);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
                    CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.05, 2.0, 100.0, 0.1);
                }

            }
            UnitGroupLoopEnd();
            autoFC4F0A18_n = gv_spawnFactor;
            for (autoFC4F0A18_i = 1; autoFC4F0A18_i <= autoFC4F0A18_n; autoFC4F0A18_i += 1) {
                UnitCreate(1, "Slither", 0, 14, UnitGetPosition(gv_boss), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
                Wait(0.1, c_timeReal);
            }
        }
    }
    return true;
}

trigger auto_gf_TanakaTerminalSpeech_Trigger = null;

void gf_TanakaTerminalSpeech () {
    if (auto_gf_TanakaTerminalSpeech_Trigger == null) {
        auto_gf_TanakaTerminalSpeech_Trigger = TriggerCreate("auto_gf_TanakaTerminalSpeech_TriggerFunc");
    }

    TriggerExecute(auto_gf_TanakaTerminalSpeech_Trigger, false, false);
}

bool auto_gf_TanakaTerminalSpeech_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_diceRoll;

    // Variable Initialization
    lv_diceRoll = RandomInt(1, 5);

    // Implementation
    UnitFlashSelection(gv_drTanaka, 12.0);
    if ((lv_diceRoll == 1)) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/EEF78AC9"));
    }
    else if ((lv_diceRoll == 2)) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/14EFB092"));
    }
    else if ((lv_diceRoll == 3)) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/68C9EDBA"));
    }
    else if ((lv_diceRoll == 4)) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/1EB20139"));
    }
    else if ((lv_diceRoll == 5)) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/775CC70B"));
    }
    return true;
}

trigger auto_gf_GasCameraCycle_Trigger = null;

void gf_GasCameraCycle () {
    if (auto_gf_GasCameraCycle_Trigger == null) {
        auto_gf_GasCameraCycle_Trigger = TriggerCreate("auto_gf_GasCameraCycle_TriggerFunc");
    }

    TriggerExecute(auto_gf_GasCameraCycle_Trigger, false, false);
}

bool auto_gf_GasCameraCycle_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    while ((gv_wave < 11)) {
        Wait(1.0, c_timeGame);
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_index = IntLoopCurrent();
            if ((UnitIsAlive(gv_marineHero[lv_index]) == true)) {
                CameraSetValue(IntLoopCurrent(), c_cameraValueYaw, UnitGetFacing(gv_marineHero[lv_index]), 3.5, -1, 10);
            }
            else if ((UnitIsAlive(gv_playerPet[lv_index]) == true)) {
                CameraSetValue(IntLoopCurrent(), c_cameraValueYaw, UnitGetFacing(gv_playerPet[lv_index]), 3.5, -1, 10);
            }
            else if (true) {
                CameraLookAtUnit(IntLoopCurrent(), null);
                CameraLockInput(IntLoopCurrent(), false);
                CameraFollowUnitGroup(IntLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_marineHero[lv_index]), false, false);
                CameraFollowUnitGroup(IntLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_playerPet[lv_index]), false, false);
            }
        }
        IntLoopEnd();
    }
    return true;
}

void gf_ACRescueSharedEventsAction (unit lp_radioUnit) {
    int auto864F8501_n;
    int auto864F8501_i;

    // Variable Declarations
    region lv_localRegion;

    // Variable Initialization
    lv_localRegion = RegionCircle(UnitGetPosition(lp_radioUnit), 7.0);

    // Implementation
    SoundPlayAtPoint(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), UnitGetPosition(gv_marineHero[gv_talentTreePlayer]), 1.5, 100.0, 0.0);
    if ((RandomInt(0, 1) == 1)) {
        gf_MarineSpeechNOTD(lp_radioUnit, StringExternal("Param/Value/DB2B3493"));
    }
    else if ((RandomInt(0, 1) == 1)) {
        gf_MarineSpeechNOTD(lp_radioUnit, StringExternal("Param/Value/F39DD32E"));
    }
    else if (true) {
        gf_MarineSpeechNOTD(lp_radioUnit, StringExternal("Param/Value/271AF673"));
    }
    Wait(3.0, c_timeGame);
    auto864F8501_n = (gv_spawnFactor * 1);
    for (auto864F8501_i = 1; auto864F8501_i <= auto864F8501_n; auto864F8501_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel12", 0, 14, RegionRandomPoint(lv_localRegion), RegionRandomPoint(lv_localRegion));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
}

trigger auto_gf_ACClosingCinematic_Trigger = null;

void gf_ACClosingCinematic () {
    if (auto_gf_ACClosingCinematic_Trigger == null) {
        auto_gf_ACClosingCinematic_Trigger = TriggerCreate("auto_gf_ACClosingCinematic_TriggerFunc");
    }

    TriggerExecute(auto_gf_ACClosingCinematic_Trigger, false, false);
}

bool auto_gf_ACClosingCinematic_TriggerFunc (bool testConds, bool runActions) {
    int autoA97E391D_n;
    int autoA97E391D_i;

    // Variable Declarations
    unitgroup lv_blackOpsTeam;

    // Variable Initialization
    lv_blackOpsTeam = UnitGroupEmpty();

    // Implementation
    TriggerExecute(gt_NightmareBonus, true, false);
    gf_UnifiedAwards(5, 0.0, 0, 0, 3);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pets);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/50673B96"));
    SoundPlay(SoundLink("TVMovieStatic", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C2DF0BE8"));
    SoundPlay(SoundLink("TVMovieStatic", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/949319EE"));
    SoundPlay(SoundLink("TVMovieStatic", -1), PlayerGroupActive(), 100.0, 0.0);
    ObjectiveDestroy(gv_primaryObjective);
    Wait(5.0, c_timeReal);
    autoA97E391D_n = 8;
    for (autoA97E391D_i = 1; autoA97E391D_i <= autoA97E391D_n; autoA97E391D_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "BlackOps", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 11.0)), UnitGroupCenterOfGroup(gv_marines));
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
        UnitBehaviorAddPlayer(UnitLastCreated(), "SpectreCloakingFree", 0, 1);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 1.2);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitGroupAdd(lv_blackOpsTeam, UnitLastCreated());
        Wait(0.1, c_timeGame);
    }
    Wait(0.1, c_timeReal);
    UnitGroupLoopBegin(lv_blackOpsTeam);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("TTychus01Raynor00012", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(lv_blackOpsTeam);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "SpectreCloakingFree", 1);
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), UnitGroupCenterOfGroup(gv_marines), 0.5);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGroupCenterOfGroup(gv_marines), 5.0, UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
        Wait(RandomFixed(0.3, 1.8), c_timeReal);
    }
    UnitGroupLoopEnd();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(UnitGroupRandomUnit(lv_blackOpsTeam, c_unitCountAlive), true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7D40826F"), StringExternal("Param/Value/3E48A243"), 2.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.3, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(UnitGroupRandomUnit(lv_blackOpsTeam, c_unitCountAlive), true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterBlackOpsOperator, StringExternal("Param/Value/1A466CFB"), 5.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((UnitGroupCount(gv_marines, c_unitCountAlive) >= 1)) {
        gv_victory = true;
    }

    gv_gameOver = true;
    return true;
}

trigger auto_gf_STEnvironmentalChanges_Trigger = null;

void gf_STEnvironmentalChanges () {
    if (auto_gf_STEnvironmentalChanges_Trigger == null) {
        auto_gf_STEnvironmentalChanges_Trigger = TriggerCreate("auto_gf_STEnvironmentalChanges_TriggerFunc");
    }

    TriggerExecute(auto_gf_STEnvironmentalChanges_Trigger, false, false);
}

bool auto_gf_STEnvironmentalChanges_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitIssueOrder(UnitFromId(287), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitSetState(UnitFromId(1857), c_unitStateSelectable, false);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "CastanarBrutaliskCageWrecked");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "OvermindRemains");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "AiurOvermindIntestines");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(196), "AiurOvermindDoodad");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(104), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(105), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(106), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(107), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(108), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(109), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(110), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(111), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(112), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(183), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(184), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(185), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(206), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(36), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(229), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(230), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(134), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(25), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(26), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(27), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(136), "ColonistCorpse");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(136), "MarineCorpse");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(136), "ScientistCorpseGory");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(40), "KorhalBuildingDebris");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(204), "InfestedHomeLarge");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(96), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(97), "DecalProtoss");
    UnitSetScale(gv_tartarusCocoon, 185.0, 185.0, 185.0);
    UnitRemove(UnitFromId(2625));
    UnitRemove(UnitFromId(2635));
    UnitRemove(UnitFromId(136));
    UnitRemove(UnitFromId(325));
    UnitRemove(UnitFromId(25));
    UnitRemove(UnitFromId(205));
    UnitRemove(UnitFromId(276));
    UnitRemove(UnitFromId(2155));
    UnitRemove(UnitFromId(844));
    UnitRemove(UnitFromId(178));
    UnitRemove(UnitFromId(2992));
    UnitRemove(UnitFromId(2994));
    UnitRemove(UnitFromId(2993));
    UnitCreate(1, "Delta1", 0, 0, PointFromId(199), 38.0);
    UnitGroupLoopBegin(UnitGroup("InfestedCocoon", c_playerAny, RegionFromId(40), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(29), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitCreate(1, "LtSheng", 0, 9, RegionRandomPoint(RegionFromId(115)), 230.0);
    gv_ltSheng = UnitLastCreated();
    UnitSetTeamColorIndex(gv_ltSheng, 0);
    libNtve_gf_MakeUnitInvulnerable(gv_ltSheng, true);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 3) != 1)) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_DeimosMinionAI_Trigger = null;

void gf_DeimosMinionAI () {
    if (auto_gf_DeimosMinionAI_Trigger == null) {
        auto_gf_DeimosMinionAI_Trigger = TriggerCreate("auto_gf_DeimosMinionAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_DeimosMinionAI_Trigger, false, false);
}

bool auto_gf_DeimosMinionAI_TriggerFunc (bool testConds, bool runActions) {
    int autoA00E8982_n;
    int autoA00E8982_i;
    int auto8783283C_n;
    int auto8783283C_i;

    // Variable Declarations
    unitgroup lv_deimosEggs;
    unitgroup lv_deimosMinions;

    // Variable Initialization
    lv_deimosEggs = UnitGroupEmpty();
    lv_deimosMinions = UnitGroupEmpty();

    // Implementation
    autoA00E8982_n = 20;
    for (autoA00E8982_i = 1; autoA00E8982_i <= autoA00E8982_n; autoA00E8982_i += 1) {
        if ((UnitIsAlive(gv_deimos) == true)) {
            auto8783283C_n = (gv_spawnFactor * 2);
            for (auto8783283C_i = 1; auto8783283C_i <= auto8783283C_n; auto8783283C_i += 1) {
                UnitCreate(1, "Egg", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_deimos), 5.5)), libNtve_gf_RandomAngle());
                UnitGroupAdd(lv_deimosEggs, UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
                Wait(0.1, c_timeGame);
            }
        }
        else {
            break;
        }
        Wait(10.0, c_timeReal);
        if ((UnitIsAlive(gv_deimos) == true)) {
            UnitGroupLoopBegin(lv_deimosEggs);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitCreate(1, "Minion", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
                UnitGroupAdd(lv_deimosMinions, UnitLastCreated());
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                UnitGroupRemove(lv_deimosEggs, UnitGroupLoopCurrent());
                UnitKill(UnitGroupLoopCurrent());
                Wait(0.1, c_timeGame);
            }
            UnitGroupLoopEnd();
        }
        else {
            break;
        }
        Wait(15.0, c_timeReal);
        if ((UnitIsAlive(gv_deimos) == true)) {
            gf_RadioNOTD(StringExternal("Param/Value/E32A665D"), StringExternal("Param/Value/140AC869"));
            UnitGroupLoopBegin(lv_deimosMinions);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitCreate(1, "NapalmFire", 0, 0, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
                UnitGroupRemove(lv_deimosMinions, UnitGroupLoopCurrent());
                UnitSetPropertyFixed(gv_deimos, c_unitPropLife, (UnitGetPropertyFixed(gv_deimos, c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent)));
                UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, 7.0);
                Wait(0.1, c_timeGame);
            }
            UnitGroupLoopEnd();
        }
        else {
            break;
        }
    }
    return true;
}

trigger auto_gf_STC2AmbientSpawns_Trigger = null;

void gf_STC2AmbientSpawns () {
    if (auto_gf_STC2AmbientSpawns_Trigger == null) {
        auto_gf_STC2AmbientSpawns_Trigger = TriggerCreate("auto_gf_STC2AmbientSpawns_TriggerFunc");
    }

    TriggerExecute(auto_gf_STC2AmbientSpawns_Trigger, false, false);
}

bool auto_gf_STC2AmbientSpawns_TriggerFunc (bool testConds, bool runActions) {
    int auto5BDB808E_n;
    int auto5BDB808E_i;

    // Implementation
    while ((gv_gameOver == false)) {
        Wait(5.7, c_timeReal);
        if ((RandomInt(0, 7) == 1) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 90) && (gv_alivePlayers > 3)) {
            gf_SmartSpawnNOTD("Strangler", 80.0);
        }
        else if ((RandomInt(0, 3) == 1) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 90) && (UnitIsAlive(gv_finalBoss) == false)) {
            gf_SmartSpawnNOTD("UltraliskBurrowed", 50.0);
        }
        else if ((RandomInt(0, 4) == 1) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 90)) {
            gf_SmartSpawnNOTD("Wraith2", 70.0);
        }
        else if ((RandomInt(0, 3) == 1) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 90) && (UnitIsAlive(gv_finalBoss) == false)) {
            auto5BDB808E_n = gv_spawnFactor;
            for (auto5BDB808E_i = 1; auto5BDB808E_i <= auto5BDB808E_n; auto5BDB808E_i += 1) {
                gf_SmartSpawnNOTD("SeekerBurrowed", 70.0);
                Wait(0.2, c_timeReal);
            }
        }
        else if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 80) && (UnitIsAlive(gv_finalBoss) == false)) {
            gf_SmartSpawnNOTD("RoachBurrowed", 30.0);
        }
    }
    return true;
}

trigger auto_gf_BergmannFound_Trigger = null;
unit auto_gf_BergmannFound_lp_rescueMarine;

void gf_BergmannFound (unit lp_rescueMarine) {
    auto_gf_BergmannFound_lp_rescueMarine = lp_rescueMarine;

    if (auto_gf_BergmannFound_Trigger == null) {
        auto_gf_BergmannFound_Trigger = TriggerCreate("auto_gf_BergmannFound_TriggerFunc");
    }

    TriggerExecute(auto_gf_BergmannFound_Trigger, false, false);
}

bool auto_gf_BergmannFound_TriggerFunc (bool testConds, bool runActions) {
    unit lp_rescueMarine = auto_gf_BergmannFound_lp_rescueMarine;

    int auto5D533209_n;
    int auto5D533209_i;

    // Variable Declarations
    region lv_drBergmannCaptureZone;
    unit lv_rescueMarine;

    // Variable Initialization
    lv_rescueMarine = lp_rescueMarine;

    // Implementation
    gv_wave = 9;
    gv_hitPar = 55;
    gf_AwardPlayerXPNOTD(3);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitBehaviorRemove(gv_drBergmann, "SpeedDebuff", 2);
    gf_AwardRatingNOTD(1);
    UnitIssueOrder(gv_drBergmann, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    gf_RadioNOTD(PlayerName(UnitGetOwner(lv_rescueMarine)), StringExternal("Param/Value/97707086"));
    Wait(5.0, c_timeReal);
    UnitIssueOrder(gv_drBergmann, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    PingCreate(gv_marineSquad, "PingObjective", UnitGetPosition(gv_drBergmann), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0);
    Wait(15.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/8D39612A"));
    Wait(15.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/3B8FE58E"));
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    lv_drBergmannCaptureZone = RegionCircle(UnitGetPosition(gv_drBergmann), 9.0);
    UnitSetOwner(gv_drBergmann, 9, false);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/713DE317"));
    Wait(2.5, c_timeReal);
    libNtve_gf_MakeUnitInvulnerable(gv_drBergmann, false);
    SoundPlay(SoundLink("Ghost_SnipeImpact", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitDamage(UnitGroupRandomUnit(gv_zombieWave, c_unitCountAlive), "PrecisionShotLevel2Damage", gv_drBergmann, 0.0);
    Wait(2.5, c_timeReal);
    SoundPlay(SoundLink("CharAmbientMarine400004", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "BlackOps", 0, 13, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_drBergmann), 7.0)), UnitGetPosition(gv_drBergmann));
    gv_blackOpsOperator = UnitLastCreated();
    UnitIssueOrder(gv_blackOpsOperator, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    SoundPlay(SoundLink("Ghost_SnipeImpact", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitDamage(gv_blackOpsOperator, "PrecisionShotLevel2Damage", gv_drBergmann, 0.0);
    Wait(7.0, c_timeReal);
    if ((UnitIsAlive(gv_drBergmann) == true)) {
        gv_drBergmannSaved = true;
        gf_AwardPlayerXPNOTD(3);
        gf_AwardRatingNOTD(1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/12F45668"));
        UnitSetPropertyFixed(gv_drBergmann, c_unitPropLifeRegen, 8.0);
        gf_BergmannAI(lv_rescueMarine);
        gf_RadioNOTD(PlayerName(UnitGetOwner(lv_rescueMarine)), StringExternal("Param/Value/64FA8B5C"));
        Wait(3.0, c_timeReal);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4F006F2A"));
        UnitWeaponAdd(gv_drBergmann, "Crowbar", null);
    }
    else {
        gf_RadioNOTD(PlayerName(UnitGetOwner(lv_rescueMarine)), StringExternal("Param/Value/ED77EF38"));
        gf_AwardKarmaNOTD(-1);
    }
    Wait(7.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    auto5D533209_n = (gv_spawnFactor * 3);
    for (auto5D533209_i = 1; auto5D533209_i <= auto5D533209_n; auto5D533209_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(lv_drBergmannCaptureZone), UnitGetPosition(gv_drBergmann));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(RandomFixed(0.1, 1.2), c_timeGame);
    }
    TriggerExecute(gt_STW10BossSpawnApoptosis, true, false);
    return true;
}

trigger auto_gf_BergmannAI_Trigger = null;
unit auto_gf_BergmannAI_lp_rescueMarine;

void gf_BergmannAI (unit lp_rescueMarine) {
    auto_gf_BergmannAI_lp_rescueMarine = lp_rescueMarine;

    if (auto_gf_BergmannAI_Trigger == null) {
        auto_gf_BergmannAI_Trigger = TriggerCreate("auto_gf_BergmannAI_TriggerFunc");
    }

    TriggerExecute(auto_gf_BergmannAI_Trigger, false, false);
}

bool auto_gf_BergmannAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_rescueMarine = auto_gf_BergmannAI_lp_rescueMarine;

    // Variable Declarations
    unit lv_rescueMarine;

    // Variable Initialization
    lv_rescueMarine = lp_rescueMarine;

    // Implementation
    while ((UnitIsAlive(gv_drBergmann) == true)) {
        Wait(3.0, c_timeReal);
        if ((DistanceBetweenPoints(UnitGetPosition(gv_drBergmann), UnitGetPosition(lv_rescueMarine)) > 7.0)) {
            UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(gv_drBergmann), UnitGetPosition(lv_rescueMarine)) < 2.5)) {
        }
        else if (true) {
            UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
        }
    }
    return true;
}

trigger auto_gf_ReactorMeltdownAmbience_Trigger = null;

void gf_ReactorMeltdownAmbience () {
    if (auto_gf_ReactorMeltdownAmbience_Trigger == null) {
        auto_gf_ReactorMeltdownAmbience_Trigger = TriggerCreate("auto_gf_ReactorMeltdownAmbience_TriggerFunc");
    }

    TriggerExecute(auto_gf_ReactorMeltdownAmbience_Trigger, false, false);
}

bool auto_gf_ReactorMeltdownAmbience_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while ((gv_gameOver == false)) {
        Wait(5.0, c_timeReal);
        if ((RandomInt(0, 1) == 1)) {
            SoundPlay(SoundLink("Terran_ExplosionSmall", -1), PlayerGroupActive(), 100.0, 0.0);
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 8.0)));
            IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 2.0, 100.0, 2.5);
            }
            IntLoopEnd();
        }
    }
    return true;
}

void gf_DomeAuthorization (unit lp_hexUnit) {
    // Implementation
    if ((gv_warningTextBreak == false)) {
        gv_warningTextBreak = true;
        UnitFlashSelection(EventUnit(), 1.0);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/A230C657"));
        Wait(7.0, c_timeReal);
        gv_warningTextBreak = false;
    }

}

void gf_DomeFlash (unit lp_firstMarine, unit lp_secondMarine, region lp_region) {
    // Implementation
    UnitFlashSelection(lp_firstMarine, 1.0);
    UnitFlashSelection(lp_secondMarine, 1.0);
    libNtve_gf_RemoveDoodadsinRegion(lp_region, "DecalProtoss");
}

void gf_DomeTrigger (region lp_region1, region lp_region2, trigger lp_domeCompleted, unit lp_triggeringUnit) {
    // Implementation
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, lp_region1, 0), c_unitCountAlive) >= 1) && (UnitGroupCount(UnitGroupFilterRegion(gv_marines, lp_region2, 0), c_unitCountAlive) >= 1)) {
        TriggerEnable(lp_domeCompleted, false);
        gf_DomeFlash(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, lp_region1, 0), c_unitCountAlive), UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, lp_region2, 0), c_unitCountAlive), RegionFromId(81));
        TriggerExecute(gt_DomesSealedandHadesLocated, true, false);
    }
    else {
        gf_DomeAuthorization(lp_triggeringUnit);
    }
}

trigger auto_gf_HadesSporeDrops_Trigger = null;

void gf_HadesSporeDrops () {
    if (auto_gf_HadesSporeDrops_Trigger == null) {
        auto_gf_HadesSporeDrops_Trigger = TriggerCreate("auto_gf_HadesSporeDrops_TriggerFunc");
    }

    TriggerExecute(auto_gf_HadesSporeDrops_Trigger, false, false);
}

bool auto_gf_HadesSporeDrops_TriggerFunc (bool testConds, bool runActions) {
    int autoC3A2937C_n;
    int autoC3A2937C_i;

    // Variable Declarations
    unitgroup lv_sporelingGroup;

    // Variable Initialization
    lv_sporelingGroup = UnitGroupEmpty();

    // Implementation
    while ((UnitIsAlive(gv_finalBoss) == true) && (gv_gameOver == false)) {
        if ((gv_nightmare == true)) {
            Wait(12.0, c_timeReal);
        }
        else if ((gv_squadRating > 1800)) {
            Wait(16.0, c_timeReal);
        }
        else if (true) {
            Wait(18.0, c_timeReal);
        }
        autoC3A2937C_n = 2;
        for (autoC3A2937C_i = 1; autoC3A2937C_i <= autoC3A2937C_n; autoC3A2937C_i += 1) {
            UnitCreate(1, "ZergDropPod", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 15.0)), libNtve_gf_RandomAngle());
            UnitGroupAdd(lv_sporelingGroup, UnitLastCreated());
            Wait(RandomFixed(0.1, 3.0), c_timeGame);
        }
        Wait(3.9, c_timeGame);
        UnitGroupLoopBegin(lv_sporelingGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreep", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
            UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
            Wait(RandomFixed(0.0, 1.0), c_timeGame);
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    return true;
}

trigger auto_gf_SecTeamBEnding_Trigger = null;

void gf_SecTeamBEnding () {
    if (auto_gf_SecTeamBEnding_Trigger == null) {
        auto_gf_SecTeamBEnding_Trigger = TriggerCreate("auto_gf_SecTeamBEnding_TriggerFunc");
    }

    TriggerExecute(auto_gf_SecTeamBEnding_Trigger, false, false);
}

bool auto_gf_SecTeamBEnding_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_blackOpsTeam;
    int lv_devastatorSurvivalBonus;

    // Variable Initialization
    lv_blackOpsTeam = UnitGroupEmpty();
    lv_devastatorSurvivalBonus = UnitGroupCount(UnitGroup("Devastator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);

    // Implementation
    gv_wave = 17;
    gv_hitPar = 65;
    gf_AwardPlayerXPNOTD(10);
    gf_AwardRatingNOTD(5);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(gv_playerPet[IntLoopCurrent()], true);
    }
    IntLoopEnd();
    if ((lv_devastatorSurvivalBonus > 0)) {
        gf_AwardPlayerXPNOTD((5 * lv_devastatorSurvivalBonus));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, ((StringExternal("Param/Value/C616C751") + IntToText((5 * lv_devastatorSurvivalBonus))) + StringExternal("Param/Value/BAF05AC5")));
        gf_AwardRatingNOTD(1);
    }

    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/1ADA3260"));
    Wait(7.0, c_timeReal);
    SoundPlay(SoundLink("LabFidgetsAdjutantConfederateAdjutant00003", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/F2FD400A"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice, StringExternal("Param/Value/73057007"));
    TriggerExecute(gt_NightmareBonus, true, false);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            gv_cPAwardException[IntLoopCurrent()] = true;
        }

    }
    IntLoopEnd();
    if ((UnitGroupCount(gv_marines, c_unitCountAlive) >= 1)) {
        gv_victory = true;
        if ((gv_alivePlayers == gv_totalPlayers)) {
            gv_mOHAwardException = true;
        }

    }

    ObjectiveDestroy(gv_primaryObjective);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice, StringExternal("Param/Value/E69CF360"));
    if ((gv_nightmare == true)) {
        gf_AwardCreditsNOTD(120);
    }
    else {
        gf_AwardCreditsNOTD(80);
    }
    gv_gameOver = true;
    return true;
}

trigger auto_gf_SurvivalEnvironmentalChanges_Trigger = null;

void gf_SurvivalEnvironmentalChanges () {
    if (auto_gf_SurvivalEnvironmentalChanges_Trigger == null) {
        auto_gf_SurvivalEnvironmentalChanges_Trigger = TriggerCreate("auto_gf_SurvivalEnvironmentalChanges_TriggerFunc");
    }

    TriggerExecute(auto_gf_SurvivalEnvironmentalChanges_Trigger, false, false);
}

bool auto_gf_SurvivalEnvironmentalChanges_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    UnitIssueOrder(UnitFromId(197), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(828), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(620), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(168), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(829), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(827), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(2622), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitIssueOrder(UnitFromId(287), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitKill(UnitFromId(1462));
    UnitKill(UnitFromId(2831));
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(28), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(147), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(104), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(105), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(106), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(107), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(108), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(109), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(110), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(111), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(112), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(3), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(183), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(184), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(185), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(140), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(141), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(122), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(219), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(36), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(1), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(198), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(199), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(206), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(192), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(50), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(134), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(48), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(40), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(177), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(96), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(97), "DecalProtoss");
    UnitSetState(UnitFromId(2502), c_unitStateSelectable, true);
    return true;
}

void gf_SurvivalCronusAI (unit lp_cronus) {
    // Implementation
    if ((UnitGetPropertyFixed(lp_cronus, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/91A0BD6A"));
        if ((gv_nightmare == false)) {
            if ((RandomInt(0, 1) == 1)) {
                UnitCreateEffectUnit(lp_cronus, "CronusInitial", lp_cronus);
            }
            else {
                UnitCreateEffectUnit(lp_cronus, "CronusInitialAnticlockwise", lp_cronus);
            }
            Wait(8.5, c_timeGame);
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                UnitCreateEffectUnit(lp_cronus, "CronusInitial", lp_cronus);
                Wait(7.0, c_timeGame);
                UnitCreateEffectUnit(lp_cronus, "CronusInitialAnticlockwise", lp_cronus);
            }
            else {
                UnitCreateEffectUnit(lp_cronus, "CronusInitialAnticlockwise", lp_cronus);
                Wait(7.0, c_timeGame);
                UnitCreateEffectUnit(lp_cronus, "CronusInitial", lp_cronus);
            }
            Wait(8.5, c_timeGame);
        }
    }

    Wait(20.0, c_timeGame);
}

void gf_SurvivalWaveTitleDisplay (int lp_wave) {
    // Implementation
    TextExpressionSetToken("Param/Expression/749F018B", "A", IntToText(lp_wave));
    ObjectiveSetName(gv_primaryObjective, TextExpressionAssemble("Param/Expression/749F018B"));
    TextExpressionSetToken("Param/Expression/142E3EDE", "A", IntToText(lp_wave));
    UIShowTextCrawl(PlayerGroupAll(), TextExpressionAssemble("Param/Expression/142E3EDE"), UserDataGetText("SurvivalWaveNames", UserDataInstance("SurvivalWaveNames", lp_wave), "Wave Name", 1), 7.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(7.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
}

trigger auto_gf_SurvivalNydusSpawn_Trigger = null;

void gf_SurvivalNydusSpawn () {
    if (auto_gf_SurvivalNydusSpawn_Trigger == null) {
        auto_gf_SurvivalNydusSpawn_Trigger = TriggerCreate("auto_gf_SurvivalNydusSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_SurvivalNydusSpawn_Trigger, false, false);
}

bool auto_gf_SurvivalNydusSpawn_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while ((UnitGroupCount(gv_survivalNydusGroup, c_unitCountAlive) > 0) && (gv_gameOver == false)) {
        Wait(9.0, c_timeReal);
        UnitGroupLoopBegin(gv_survivalNydusGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 110)) {
                UnitCreate(1, "Devourer", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(0.2, c_timeGame);
            }

        }
        UnitGroupLoopEnd();
    }
    return true;
}

trigger auto_gf_SurvivalCreepDeposit_Trigger = null;

void gf_SurvivalCreepDeposit () {
    if (auto_gf_SurvivalCreepDeposit_Trigger == null) {
        auto_gf_SurvivalCreepDeposit_Trigger = TriggerCreate("auto_gf_SurvivalCreepDeposit_TriggerFunc");
    }

    TriggerExecute(auto_gf_SurvivalCreepDeposit_Trigger, false, false);
}

bool auto_gf_SurvivalCreepDeposit_TriggerFunc (bool testConds, bool runActions) {
    int auto7CBB97CF_n;
    int auto7CBB97CF_i;

    // Variable Declarations
    unitgroup lv_sporelingGroup;

    // Variable Initialization
    lv_sporelingGroup = UnitGroupEmpty();

    // Implementation
    auto7CBB97CF_n = 7;
    for (auto7CBB97CF_i = 1; auto7CBB97CF_i <= auto7CBB97CF_n; auto7CBB97CF_i += 1) {
        UnitCreate(1, "ZergDropPod", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 12.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_sporelingGroup, UnitLastCreated());
        Wait(RandomFixed(0.1, 2.5), c_timeGame);
    }
    Wait(1.2, c_timeGame);
    UnitGroupLoopBegin(lv_sporelingGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreepLarge", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetState(UnitLastCreated(), c_unitStateInvulnerable, true);
        UnitKill(UnitGroupLoopCurrent());
        Wait(RandomFixed(0.1, 0.5), c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_DisableAttackEquippingWeapons_Trigger = null;
int auto_gf_DisableAttackEquippingWeapons_lp_inventoryOwner;
string auto_gf_DisableAttackEquippingWeapons_lp_equipment;

void gf_DisableAttackEquippingWeapons (int lp_inventoryOwner, string lp_equipment) {
    auto_gf_DisableAttackEquippingWeapons_lp_inventoryOwner = lp_inventoryOwner;
    auto_gf_DisableAttackEquippingWeapons_lp_equipment = lp_equipment;

    if (auto_gf_DisableAttackEquippingWeapons_Trigger == null) {
        auto_gf_DisableAttackEquippingWeapons_Trigger = TriggerCreate("auto_gf_DisableAttackEquippingWeapons_TriggerFunc");
    }

    TriggerExecute(auto_gf_DisableAttackEquippingWeapons_Trigger, false, false);
}

bool auto_gf_DisableAttackEquippingWeapons_TriggerFunc (bool testConds, bool runActions) {
    int lp_inventoryOwner = auto_gf_DisableAttackEquippingWeapons_lp_inventoryOwner;
    string lp_equipment = auto_gf_DisableAttackEquippingWeapons_lp_equipment;

    // Variable Declarations
    unit lv_inventoryHero;
    fixed lv_boltPullWait;

    // Variable Initialization
    lv_inventoryHero = gv_marineHero[lp_inventoryOwner];

    // Implementation
    if ((lp_equipment == "Crowbar7")) {
        lv_boltPullWait = 0.1;
    }
    else if ((lp_equipment == "P45GaussPistol")) {
        lv_boltPullWait = 0.3;
    }
    else if ((lp_equipment == "MP9A2SubMachineGun")) {
        lv_boltPullWait = 0.7;
    }
    else if (((UnitGetType(lv_inventoryHero) == "Rifleman") || (UnitGetType(lv_inventoryHero) == "Commando") || (UnitGetType(lv_inventoryHero) == "Spectre"))) {
        lv_boltPullWait = 1.2;
    }
    else if (true) {
        lv_boltPullWait = 2.2;
    }
    if ((gv_nightmare == true)) {
        lv_boltPullWait = (lv_boltPullWait * 2.0);
    }

    lv_boltPullWait *= gv_baseMarineSwitchingMultiplier[lp_inventoryOwner];
    if ((gv_playerRating[lp_inventoryOwner] > 2400)) {
        lv_boltPullWait *= 0.5;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 2200)) {
        lv_boltPullWait *= 0.6;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 2000)) {
        lv_boltPullWait *= 0.7;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 1800)) {
        lv_boltPullWait *= 0.8;
    }
    else if ((gv_playerRating[lp_inventoryOwner] > 1600)) {
        lv_boltPullWait *= 0.9;
    }
    CatalogFieldValueSet(c_gameCatalogBehavior, "WeaponSwitch", "Duration", lp_inventoryOwner, FixedToString(lv_boltPullWait, c_fixedPrecisionAny));
    UnitBehaviorAdd(lv_inventoryHero, "WeaponSwitch", lv_inventoryHero, 1);
    Wait(lv_boltPullWait, c_timeGame);
    if ((gv_reloading[lp_inventoryOwner] == false)) {
        if ((((lp_equipment == "StingerMK3") && (gv_marineRounds[lp_inventoryOwner] < 10)) || ((lp_equipment == "L3GrenadeLauncher") && (gv_marineRounds[lp_inventoryOwner] < 3)) || (gv_marineRounds[lp_inventoryOwner] == 0))) {
            UnitBehaviorAddPlayer(lv_inventoryHero, "InsufficientAmmo", lp_inventoryOwner, 1);
        }
        else {
            UnitBehaviorRemovePlayer(lv_inventoryHero, "InsufficientAmmo", lp_inventoryOwner, 1);
        }
    }

    if ((UnitWeaponGet(lv_inventoryHero, 1) == "Shotgun")) {
        SoundPlayOnUnit(SoundLink("ShotgunPump", -1), PlayerGroupAll(), lv_inventoryHero, 15.0, 75.0, 0.0);
    }
    else {
        SoundPlayOnUnit(SoundLink("BoltPull", -1), PlayerGroupAll(), lv_inventoryHero, 15.0, 100.0, 0.0);
    }
    return true;
}

void gf_EquipmentUpdateMarineWeight (int lp_ownerOfEquipment) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_i;
    int lv_runningWeight;

    // Variable Initialization
    lv_playerIndex = lp_ownerOfEquipment;

    // Implementation
    if ((UnitIsAlive(gv_marineHero[lp_ownerOfEquipment]) == false)) {
        return ;
    }

    gv_marineWeightPoints[lp_ownerOfEquipment] = 0;
    UnitGroupLoopBegin(UnitInventoryGroup(gv_marineHero[lp_ownerOfEquipment]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2)) {
            gf_EquipmentUpdateMarineWeightPointPerItem(lp_ownerOfEquipment, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    gv_marineWeightPoints[lp_ownerOfEquipment] += gv_marineMags[lp_ownerOfEquipment];
    if ((gv_marineWeightPoints[lp_ownerOfEquipment] < 0)) {
        gv_marineWeightPoints[lp_ownerOfEquipment] = 0;
    }

    gv_marineWeightPoints[lp_ownerOfEquipment] = FixedToInt((IntToFixed(gv_marineWeightPoints[lp_ownerOfEquipment]) * (UserDataGetFixed("Classes", gv_playerClass[lp_ownerOfEquipment], "Weight Class", 1) - (IntToFixed(gv_statsStrength1[lp_ownerOfEquipment]) * 0.0075))));
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight10", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight100", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight20", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight200", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight5", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight50", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight500", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1000", 2);
    UnitBehaviorRemove(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2000", 2);
    lv_i = (gv_marineWeightPoints[lp_ownerOfEquipment] / 2000);
    lv_runningWeight = ModI(gv_marineWeightPoints[lp_ownerOfEquipment], 2000);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2000", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 1000);
    lv_runningWeight = ModI(lv_runningWeight, 1000);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1000", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 500);
    lv_runningWeight = ModI(lv_runningWeight, 500);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight500", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 200);
    lv_runningWeight = ModI(lv_runningWeight, 200);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight200", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 100);
    lv_runningWeight = ModI(lv_runningWeight, 100);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight100", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 50);
    lv_runningWeight = ModI(lv_runningWeight, 50);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight50", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 20);
    lv_runningWeight = ModI(lv_runningWeight, 20);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight20", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 10);
    lv_runningWeight = ModI(lv_runningWeight, 10);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight10", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 5);
    lv_runningWeight = ModI(lv_runningWeight, 5);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight5", lv_playerIndex, lv_i);
    }

    lv_i = (lv_runningWeight / 2);
    lv_runningWeight = ModI(lv_runningWeight, 2);
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight2", lv_playerIndex, lv_i);
    }

    lv_i = lv_runningWeight;
    if ((lv_i > 0)) {
        UnitBehaviorAddPlayer(gv_marineHero[lp_ownerOfEquipment], "ItemWeight1", lv_playerIndex, lv_i);
    }

}

unit gf_GiveMarineItem (int lp_player, string lp_item) {
    int init_i;

    // Variable Declarations
    int lv_inventorySize;
    bool[8] lv_openInventorySlot;
    int lv_destinationSlot;
    unit lv_returnItem;

    // Variable Initialization
    lv_inventorySize = gf_GetInventorySlots(gv_marineHero[lp_player]);
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_openInventorySlot[init_i] = true;
    }

    // Implementation
    UnitGroupLoopBegin(UnitInventoryGroup(gv_marineHero[lp_player]));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
            lv_openInventorySlot[(UnitInventorySlot(UnitGroupLoopCurrent()) - 1)] = false;
        }

    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, lv_inventorySize);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lv_openInventorySlot[IntLoopCurrent()] == true)) {
            lv_destinationSlot = (IntLoopCurrent() + 1);
        }

    }
    IntLoopEnd();
    if ((lv_destinationSlot != 0)) {
        UnitInventoryCreate(gv_marineHero[lp_player], lp_item);
        lv_returnItem = UnitInventoryLastCreated();
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lp_item, 0, lp_player, UnitGetPosition(gv_marineHero[lp_player]));
        lv_returnItem = UnitLastCreated();
    }
    return lv_returnItem;
}

int gf_GetEnhancementSlots (unit lp_hero) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_hero);

    // Implementation
    return UserDataGetInt("Classes", gv_playerClass[lv_player], "Enhancement Slots", 1);
}

int gf_GetInventorySlots (unit lp_hero) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_hero);

    // Implementation
    return UserDataGetInt("Classes", gv_playerClass[lv_player], "Inventory Slot Count", 1);
}

void gf_EquipmentUpdateMarineWeightPointPerItem (int lp_ownerofEquipment, unit lp_item) {
    // Variable Declarations
    int lv_index;
    fixed lv_weight;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    while ((UnitGetType(lp_item) != UserDataGetUnit("ItemWeights", UserDataInstance("ItemWeights", lv_index), "Item", 1))) {
        lv_index += 1;
    }
    if ((UserDataGetInt("ItemWeights", UserDataInstance("ItemWeights", lv_index), "Weight Reducible", 1) == 1)) {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt((UserDataGetFixed("ItemWeights", UserDataInstance("ItemWeights", lv_index), "Weight", 1) * gv_baseMarineWeightPointMultiplier[lp_ownerofEquipment])));
    }
    else {
        gv_marineWeightPoints[lp_ownerofEquipment] = (gv_marineWeightPoints[lp_ownerofEquipment] + FixedToInt(UserDataGetFixed("ItemWeights", UserDataInstance("ItemWeights", lv_index), "Weight", 1)));
    }
}

void gf_HEAmmoBurnDamage (int lp_firingMarineOwner, unit lp_weapon) {
    // Variable Declarations
    fixed lv_weaponDamage;
    string lv_weaponType;

    // Variable Initialization
    lv_weaponType = UnitGetType(lp_weapon);

    // Implementation
    IntLoopBegin(1, UserDataInstanceCount("ItemWeights"));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lv_weaponType == UserDataGetGameLink("ItemWeights", UserDataInstance("ItemWeights", IntLoopCurrent()), "Item", 1))) {
            lv_weaponDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, UserDataGetGameLink("ItemWeights", UserDataInstance("ItemWeights", IntLoopCurrent()), "Weapon Damage Effect", 1), "Amount", lp_firingMarineOwner));
        }

    }
    IntLoopEnd();
    CatalogFieldValueSet(c_gameCatalogEffect, "HEAmmoBurnDamage", "Amount", lp_firingMarineOwner, FixedToString((lv_weaponDamage * 0.05), c_fixedPrecisionAny));
}

void gf_PlayerColorChange (int lp_buyingPlayer) {
    // Variable Declarations
    int lv_colorCode;

    // Variable Initialization
    lv_colorCode = ModI(gv_playerColorCode[lp_buyingPlayer], 100);

    // Implementation
    if ((lv_colorCode == 1)) {
        PlayerSetColorIndex(lp_buyingPlayer, 0, true);
    }
    else if ((lv_colorCode == 2)) {
        PlayerSetColorIndex(lp_buyingPlayer, 1, true);
    }
    else if ((lv_colorCode == 3)) {
        PlayerSetColorIndex(lp_buyingPlayer, 2, true);
    }
    else if ((lv_colorCode == 4)) {
        PlayerSetColorIndex(lp_buyingPlayer, 3, true);
    }
    else if ((lv_colorCode == 5)) {
        PlayerSetColorIndex(lp_buyingPlayer, 4, true);
    }
    else if ((lv_colorCode == 6)) {
        PlayerSetColorIndex(lp_buyingPlayer, 5, true);
    }
    else if ((lv_colorCode == 7)) {
        PlayerSetColorIndex(lp_buyingPlayer, 6, true);
    }
    else if ((lv_colorCode == 8)) {
        PlayerSetColorIndex(lp_buyingPlayer, 7, true);
    }
    else if ((lv_colorCode == 9)) {
        PlayerSetColorIndex(lp_buyingPlayer, 15, true);
    }
    else if ((lv_colorCode == 10)) {
        PlayerSetColorIndex(lp_buyingPlayer, 9, true);
    }
    else if ((lv_colorCode == 11)) {
        PlayerSetColorIndex(lp_buyingPlayer, 10, true);
    }
    else if ((lv_colorCode == 12)) {
        PlayerSetColorIndex(lp_buyingPlayer, 11, true);
    }
    else if ((lv_colorCode == 13)) {
        PlayerSetColorIndex(lp_buyingPlayer, 12, true);
    }
    else if ((lv_colorCode == 14)) {
        PlayerSetColorIndex(lp_buyingPlayer, 13, true);
    }
    else if ((lv_colorCode == 15)) {
        PlayerSetColorIndex(lp_buyingPlayer, 14, true);
    }
}

void gf_CreatePet (int lp_owner, point lp_point) {
    // Implementation
    libNtve_gf_CreateUnitsWithDefaultFacing(1, UserDataGetUnit("CustomPets", "Pets", "Pet Type", (ModI(gv_playerPetCode[lp_owner], 100) + 1)), c_unitCreateIgnorePlacement, lp_owner, lp_point);
    gv_playerPet[lp_owner] = UnitLastCreated();
}

bool gf_BOInsigniaBought (int lp_owner) {
    // Implementation
    if ((ModI(gv_playerColorCode[lp_owner], 10000) >= 1000)) {
        return true;
    }
    else {
        return false;
    }
}

bool gf_KittensBought (int lp_owner) {
    // Variable Declarations
    int lv_colorCode;

    // Variable Initialization
    lv_colorCode = gv_playerColorCode[lp_owner];

    // Implementation
    if ((ModI(lv_colorCode, 1000) >= 100)) {
        return true;
    }
    else {
        return false;
    }
}

void gf_UpgradeBOInsigniaRank (int lp_owner) {
    // Implementation
    libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_owner], "NOTD Rank Icons\\Black Ops Insignia.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_owner], gv_characterBlackOpsOperator, PlayerGroupAll());
}

trigger auto_gf_CreateKittens_Trigger = null;
int auto_gf_CreateKittens_lp_owner;

void gf_CreateKittens (int lp_owner) {
    auto_gf_CreateKittens_lp_owner = lp_owner;

    if (auto_gf_CreateKittens_Trigger == null) {
        auto_gf_CreateKittens_Trigger = TriggerCreate("auto_gf_CreateKittens_TriggerFunc");
    }

    TriggerExecute(auto_gf_CreateKittens_Trigger, false, false);
}

bool auto_gf_CreateKittens_TriggerFunc (bool testConds, bool runActions) {
    int lp_owner = auto_gf_CreateKittens_lp_owner;

    int auto93F613AA_n;
    int auto93F613AA_i;

    // Variable Declarations
    point lv_point;

    // Variable Initialization
    lv_point = UnitGetPosition(gv_marineHero[lp_owner]);

    // Implementation
    auto93F613AA_n = 2;
    for (auto93F613AA_i = 1; auto93F613AA_i <= auto93F613AA_n; auto93F613AA_i += 1) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "Kitten", 0, lp_owner, lv_point);
        UnitGroupAdd(gv_kittens[lp_owner], UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    return true;
}

bool gf_WeaponsModPointMax (int lp_playerNo) {
    // Implementation
    if (((ModI(gv_playerWeaponsMod2[lp_playerNo], 10000) / 100) < 20)) {
        return false;
    }
    else {
        return true;
    }
}

trigger auto_gf_RemoveBoughtItems_Trigger = null;
int auto_gf_RemoveBoughtItems_lp_playerNo;

void gf_RemoveBoughtItems (int lp_playerNo) {
    auto_gf_RemoveBoughtItems_lp_playerNo = lp_playerNo;

    if (auto_gf_RemoveBoughtItems_Trigger == null) {
        auto_gf_RemoveBoughtItems_Trigger = TriggerCreate("auto_gf_RemoveBoughtItems_TriggerFunc");
    }

    TriggerExecute(auto_gf_RemoveBoughtItems_Trigger, false, false);
}

bool auto_gf_RemoveBoughtItems_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_RemoveBoughtItems_lp_playerNo;

    // Implementation
    UnitGroupLoopBegin(gv_boughtItems[lp_playerNo]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

trigger auto_gf_ShowCreditsLeft_Trigger = null;
int auto_gf_ShowCreditsLeft_lp_player;

void gf_ShowCreditsLeft (int lp_player) {
    auto_gf_ShowCreditsLeft_lp_player = lp_player;

    if (auto_gf_ShowCreditsLeft_Trigger == null) {
        auto_gf_ShowCreditsLeft_Trigger = TriggerCreate("auto_gf_ShowCreditsLeft_TriggerFunc");
    }

    TriggerExecute(auto_gf_ShowCreditsLeft_Trigger, false, false);
}

bool auto_gf_ShowCreditsLeft_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ShowCreditsLeft_lp_player;

    // Implementation
    TriggerExecute(gt_AutoSave, true, false);
    libNtve_gf_SetDialogItemText(gv_statsPlayerCashLabel[lp_player], IntToText(gv_playerCredits[lp_player]), PlayerGroupAll());
    TextTagCreate((gv_creditsLeft + IntToText(gv_playerCredits[lp_player])), 20, UnitGetPosition(gv_marineHero[lp_player]), 1.5, true, true, PlayerGroupActive());
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(79.22, 58.43, 100.00));
    TextTagAttachToUnit(TextTagLastCreated(), gv_marineHero[lp_player], 2.0);
    TextTagSetVelocity(TextTagLastCreated(), 0.25, 90.0);
    Wait(5.0, c_timeGame);
    TextTagDestroy(TextTagLastCreated());
    return true;
}

fixed gf_GD_Gap (int lp_hV) {
    int auto338E4570_val;

    // Implementation
    auto338E4570_val = lp_hV;
    if (auto338E4570_val == ge_GRIDDLG_HV_Horizontal) {
        return gv_gRIDDLG_GRIDGAP_X;
    }
    else if (auto338E4570_val == ge_GRIDDLG_HV_Vertical) {
        return gv_gRIDDLG_GRIDGAP_Y;
    }
    else {
    }
    return 0.0;
}

fixed gf_GD_GridToReal2 (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_ret;
    fixed lv_gap;
    fixed lv_sign;

    // Variable Initialization

    // Implementation
    lv_gap = gf_GD_Gap(lp_hV);
    if ((lp_grid >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = (AbsF(lp_grid) * gv_gRIDDLG_GRID);
    if ((lp_sizeOrPos == ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret = MaxF((lv_ret - lv_gap), 0.0);
    }

    return (lv_ret * lv_sign);
}

int gf_GD_GridToInteger (fixed lp_grid, int lp_hV, int lp_sizeOrPos) {
    // Implementation
    return FixedToInt(gf_GD_GridToReal2(lp_grid, lp_hV, lp_sizeOrPos));
}

fixed gf_GD_RealToGrid (fixed lp_value, int lp_hV, int lp_sizeOrPos) {
    // Variable Declarations
    fixed lv_sign;
    fixed lv_grid;
    fixed lv_gap;
    fixed lv_ret;
    int lv_gapCount;

    // Variable Initialization

    // Implementation
    lv_gap = gf_GD_Gap(lp_hV);
    if ((lp_value >= 0.0)) {
        lv_sign = 1.0;
    }
    else {
        lv_sign = -1.0;
    }
    lv_ret = AbsF(lp_value);
    if ((lp_sizeOrPos == ge_GRIDDLG_HV2_ClientSize)) {
        lv_ret += lv_gap;
    }

    lv_ret /= gv_gRIDDLG_GRID;
    return (lv_sign * lv_ret);
}

fixed gf_GD_IntegerToGrid (int lp_value, int lp_hV, int lp_sizeOrPos) {
    // Implementation
    return gf_GD_RealToGrid(IntToFixed(lp_value), lp_hV, lp_sizeOrPos);
}

void gf_MoveDialogItemInGridRelative (int lp_item, playergroup lp_players, int lp_anchor, int lp_relativeItem, int lp_relativeAnchor, fixed lp_offsetX, fixed lp_offsetY) {
    // Variable Declarations
    fixed lv_x;
    fixed lv_y;

    // Variable Initialization

    // Implementation
    lv_x = gf_GD_GridToReal2(lp_offsetX, ge_GRIDDLG_HV_Horizontal, ge_GRIDDLG_HV2_ClientPosition);
    lv_y = gf_GD_GridToReal2(lp_offsetY, ge_GRIDDLG_HV_Horizontal, ge_GRIDDLG_HV2_ClientPosition);
    DialogControlSetPositionRelative(lp_item, PlayerGroupAll(), lp_anchor, lp_relativeItem, lp_relativeAnchor, FixedToInt(lp_offsetX), FixedToInt(lp_offsetY));
}

trigger auto_gf_ClassSelectionUI_Trigger = null;

void gf_ClassSelectionUI () {
    if (auto_gf_ClassSelectionUI_Trigger == null) {
        auto_gf_ClassSelectionUI_Trigger = TriggerCreate("auto_gf_ClassSelectionUI_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClassSelectionUI_Trigger, false, false);
}

bool auto_gf_ClassSelectionUI_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;
    int lv_tempDialogFrame;

    // Variable Initialization
    lv_index = 1;
    lv_tempDialogFrame = c_invalidDialogControlId;

    // Implementation
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_index = PlayerGroupLoopCurrent();
        gf_UIDialogCreation(730, 575, 30, 100, c_anchorTopLeft);
        gv_classSelectionDialog[lv_index] = DialogLastCreated();
        DialogControlCreateFromTemplate(gv_classSelectionDialog[lv_index], c_triggerControlTypePanel, "ClassSelection/ClassSelectionNormal");
        lv_tempDialogFrame = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Title");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/82721D05"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class1Select");
        gv_classSelectionDialogItem[lv_index][1] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class1Label");
        gf_SetupClassSelection(lv_index, 1, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][1], gv_playerCP[lv_index].lv_rifleman);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class2Select");
        gv_classSelectionDialogItem[lv_index][2] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class2Label");
        gf_SetupClassSelection(lv_index, 2, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][2], gv_playerCP[lv_index].lv_medic);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class3Select");
        gv_classSelectionDialogItem[lv_index][3] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class3Label");
        gf_SetupClassSelection(lv_index, 3, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][3], gv_playerCP[lv_index].lv_assaultFlamerTech);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class4Select");
        gv_classSelectionDialogItem[lv_index][4] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class4Label");
        gf_SetupClassSelection(lv_index, 4, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][4], gv_playerCP[lv_index].lv_recon);
        if ((gv_playerXP[lv_index] >= 100) && (gv_playerKarma[lv_index] >= 1300)) {
            DialogControlSetEnabled(gv_classSelectionDialogItem[lv_index][4], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemTooltip(gv_classSelectionDialogItem[lv_index][4], UserDataGetText("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", 4), "Locked Text", 1), PlayerGroupAll());
        }
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class5Select");
        gv_classSelectionDialogItem[lv_index][5] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class5Label");
        gf_SetupClassSelection(lv_index, 5, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][5], gv_playerCP[lv_index].lv_marksman);
        if ((gv_playerXP[lv_index] >= 500) && (gv_playerKarma[lv_index] >= 1300)) {
            DialogControlSetEnabled(gv_classSelectionDialogItem[lv_index][5], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemTooltip(gv_classSelectionDialogItem[lv_index][5], UserDataGetText("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", 5), "Locked Text", 1), PlayerGroupAll());
        }
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class6Select");
        gv_classSelectionDialogItem[lv_index][6] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class6Label");
        gf_SetupClassSelection(lv_index, 6, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][6], gv_playerCP[lv_index].lv_demoFOChem);
        if ((gv_playerXP[lv_index] >= 2000) && (gv_playerKarma[lv_index] >= 1300)) {
            DialogControlSetEnabled(gv_classSelectionDialogItem[lv_index][6], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemTooltip(gv_classSelectionDialogItem[lv_index][6], UserDataGetText("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", 6), "Locked Text", 1), PlayerGroupAll());
        }
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class7Select");
        gv_classSelectionDialogItem[lv_index][7] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class7Label");
        gf_SetupClassSelection(lv_index, 7, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][7], gv_playerCP[lv_index].lv_engiePF);
        if (((gv_playerXP[lv_index] >= 5000) || ((gv_playerXP[lv_index] >= 2500) && (gv_playerRating[lv_index] >= 1700))) && (gv_playerKarma[lv_index] >= 1300)) {
            DialogControlSetEnabled(gv_classSelectionDialogItem[lv_index][7], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemTooltip(gv_classSelectionDialogItem[lv_index][7], UserDataGetText("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", 7), "Locked Text", 1), PlayerGroupAll());
        }
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class8Select");
        gv_classSelectionDialogItem[lv_index][8] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class8Label");
        gf_SetupClassSelection(lv_index, 8, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_index], gv_classSelectionDialogItem[lv_index][8], gv_playerCP[lv_index].lv_commandoPO);
        if (((gv_playerXP[lv_index] >= 10000) || ((gv_playerXP[lv_index] >= 5000) && (gv_playerRating[lv_index] >= 1700))) && (gv_playerKarma[lv_index] >= 1300)) {
            DialogControlSetEnabled(gv_classSelectionDialogItem[lv_index][8], PlayerGroupAll(), true);
        }
        else {
            libNtve_gf_SetDialogItemTooltip(gv_classSelectionDialogItem[lv_index][8], UserDataGetText("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", 8), "Locked Text", 1), PlayerGroupAll());
        }
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Random");
        gv_classSelectionDialogItem[lv_index][15] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "RandomLabel");
        gf_SetupClassSelection(lv_index, 15, DialogControlLastCreated());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "PlayerRankImage");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lv_index]), "Icon", 1), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "PlayerRankLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lv_index]), "Title Brief", 1) + PlayerName(lv_index)), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "NextPromotionLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/D2EEA0F9"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "NextPromotion");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_index] + 1)), "Title Full", 1), PlayerGroupAll());
        DialogControlCreate(gv_classSelectionDialog[lv_index], c_triggerControlTypeProgressBar);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 475, 37);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 50, 640);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), IntToFixed(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_index] + 1)), "XP Required", 1)), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerXP[lv_index]), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_index], 475, 37, c_anchorTopLeft, 50, 640, (IntToText(gv_playerXP[lv_index]) + (gv_forwardSlash + IntToText(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_index] + 1)), "XP Required", 1)))), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
        DialogSetVisible(gv_classSelectionDialog[lv_index], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    DialogControlSetVisible(gv_teamUI, PlayerGroupAll(), true);
    return true;
}

void gf_SurvivalClassSelectionUI () {
    // Variable Declarations
    int lv_player;
    int lv_tempDialogFrame;

    // Variable Initialization
    lv_player = 1;
    lv_tempDialogFrame = c_invalidDialogControlId;

    // Implementation
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_player = PlayerGroupLoopCurrent();
        gf_UIDialogCreation(730, 885, 30, 100, c_anchorTopLeft);
        gv_classSelectionDialog[lv_player] = DialogLastCreated();
        DialogControlCreateFromTemplate(gv_classSelectionDialog[lv_player], c_triggerControlTypePanel, "ClassSelection/ClassSelectionSurvival");
        lv_tempDialogFrame = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Title");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/9B5214EE"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class1Select");
        gv_classSelectionDialogItem[lv_player][1] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class1Label");
        gf_SetupClassSelection(lv_player, 1, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][1], gv_playerCP[lv_player].lv_rifleman);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class2Select");
        gv_classSelectionDialogItem[lv_player][2] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class2Label");
        gf_SetupClassSelection(lv_player, 2, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][2], gv_playerCP[lv_player].lv_medic);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class3Select");
        gv_classSelectionDialogItem[lv_player][3] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class3Label");
        gf_SetupClassSelection(lv_player, 3, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][3], gv_playerCP[lv_player].lv_assaultFlamerTech);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class4Select");
        gv_classSelectionDialogItem[lv_player][4] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class4Label");
        gf_SetupClassSelection(lv_player, 4, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][4], gv_playerCP[lv_player].lv_recon);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class5Select");
        gv_classSelectionDialogItem[lv_player][5] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class5Label");
        gf_SetupClassSelection(lv_player, 5, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][5], gv_playerCP[lv_player].lv_marksman);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class6Select");
        gv_classSelectionDialogItem[lv_player][6] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class6Label");
        gf_SetupClassSelection(lv_player, 6, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][6], gv_playerCP[lv_player].lv_demoFOChem);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class7Select");
        gv_classSelectionDialogItem[lv_player][7] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class7Label");
        gf_SetupClassSelection(lv_player, 7, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][7], gv_playerCP[lv_player].lv_engiePF);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class8Select");
        gv_classSelectionDialogItem[lv_player][8] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class8Label");
        gf_SetupClassSelection(lv_player, 8, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][8], gv_playerCP[lv_player].lv_commandoPO);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class9Select");
        gv_classSelectionDialogItem[lv_player][9] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class9Label");
        gf_SetupClassSelection(lv_player, 9, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][9], gv_playerCP[lv_player].lv_assaultFlamerTech);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class10Select");
        gv_classSelectionDialogItem[lv_player][10] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class10Label");
        gf_SetupClassSelection(lv_player, 10, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][10], gv_playerCP[lv_player].lv_demoFOChem);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class11Select");
        gv_classSelectionDialogItem[lv_player][11] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class11Label");
        gf_SetupClassSelection(lv_player, 11, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][11], gv_playerCP[lv_player].lv_assaultFlamerTech);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class12Select");
        gv_classSelectionDialogItem[lv_player][12] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class12Label");
        gf_SetupClassSelection(lv_player, 12, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][12], gv_playerCP[lv_player].lv_commandoPO);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class13Select");
        gv_classSelectionDialogItem[lv_player][13] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class13Label");
        gf_SetupClassSelection(lv_player, 13, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][13], gv_playerCP[lv_player].lv_engiePF);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Class14Select");
        gv_classSelectionDialogItem[lv_player][14] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "Class14Label");
        gf_SetupClassSelection(lv_player, 14, DialogControlLastCreated());
        gf_ClassPointBarCreation(gv_classSelectionDialog[lv_player], gv_classSelectionDialogItem[lv_player][14], gv_playerCP[lv_player].lv_demoFOChem);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "Random");
        gv_classSelectionDialogItem[lv_player][15] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "RandomLabel");
        gf_SetupClassSelection(lv_player, 15, DialogControlLastCreated());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "PlayerRankImage");
        libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lv_player]), "Icon", 1), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "PlayerRankLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lv_player]), "Title Brief", 1) + PlayerName(lv_player)), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "NextPromotionLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/93808253"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "NextPromotion");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_player] + 1)), "Title Full", 1), PlayerGroupAll());
        DialogControlCreate(gv_classSelectionDialog[lv_player], c_triggerControlTypeProgressBar);
        DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 475, 37);
        DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, 70, 640);
        libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), IntToFixed(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_player] + 1)), "XP Required", 1)), PlayerGroupAll());
        libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), IntToFixed(gv_playerXP[lv_player]), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(gv_classSelectionDialog[lv_player], 475, 37, c_anchorTopLeft, 70, 640, (IntToText(gv_playerXP[lv_player]) + (gv_forwardSlash + IntToText(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_player] + 1)), "XP Required", 1)))), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ModCenterSize20", PlayerGroupAll());
        DialogSetVisible(gv_classSelectionDialog[lv_player], PlayerGroupSingle(PlayerGroupLoopCurrent()), true);
    }
    PlayerGroupLoopEnd();
    DialogControlSetVisible(gv_teamUI, PlayerGroupAll(), true);
}

void gf_SetupClassSelection (int lp_player, int lp_classSlot, int lp_classLabel) {
    // Implementation
    libNtve_gf_SetDialogItemTooltip(gv_classSelectionDialogItem[lp_player][lp_classSlot], UserDataGetText("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", lp_classSlot), "Class Role", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_classSelectionDialogItem[lp_player][lp_classSlot], UserDataGetImagePath("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", lp_classSlot), "Class Image", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lp_classLabel, UserDataGetText("Classes", UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", lp_classSlot), "Class Name", 1), PlayerGroupAll());
}

void gf_ClassPointBarCreation (int lp_parentDialog, int lp_parentDialogItem, int lp_classPoints) {
    // Implementation
    DialogControlCreateFromTemplate(lp_parentDialog, c_triggerControlTypeProgressBar, "ClassSelection/ClassPoints");
    gf_MoveDialogItemInGridRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottom, lp_parentDialogItem, c_anchorBottom, 0.0, 15.0);
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), lp_classPoints, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), ((StringExternal("Param/Value/2FF21ADA") + IntToText(lp_classPoints)) + StringExternal("Param/Value/42F6F864")), PlayerGroupAll());
}

bool gf_ClassSelectionDialog (int lp_player, int lp_dialogItem) {
    // Implementation
    IntLoopBegin(1, 15);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lp_dialogItem == gv_classSelectionDialogItem[lp_player][IntLoopCurrent()])) {
            return true;
        }

    }
    IntLoopEnd();
    return false;
}

trigger auto_gf_ClassCreationMaster_Trigger = null;
int auto_gf_ClassCreationMaster_lp_player;
int auto_gf_ClassCreationMaster_lp_playerIndex;

void gf_ClassCreationMaster (int lp_player, int lp_playerIndex) {
    auto_gf_ClassCreationMaster_lp_player = lp_player;
    auto_gf_ClassCreationMaster_lp_playerIndex = lp_playerIndex;

    if (auto_gf_ClassCreationMaster_Trigger == null) {
        auto_gf_ClassCreationMaster_Trigger = TriggerCreate("auto_gf_ClassCreationMaster_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClassCreationMaster_Trigger, false, false);
}

bool auto_gf_ClassCreationMaster_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ClassCreationMaster_lp_player;
    int lp_playerIndex = auto_gf_ClassCreationMaster_lp_playerIndex;

    // Variable Declarations
    int lv_classPoints;

    // Variable Initialization

    // Implementation
    CameraApplyInfo(lp_player, CameraInfoDefault(), 0.0, -1, 10, true);
    CameraPan(lp_player, UnitGetPosition(gv_marineHero[lp_playerIndex]), 0.0, -1, 10, false);
    libNtve_gf_HideGameUI(true, PlayerGroupSingle(lp_player));
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeCommandPanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeInventoryPanel, true);
    UISetFrameVisible(PlayerGroupSingle(lp_player), c_syncFrameTypeMinimapPanel, true);
    CameraLockInput(lp_player, false);
    libNtve_gf_SetDialogItemUnit(gv_teamStatusLifeBar[lp_playerIndex], gv_marineHero[lp_playerIndex], PlayerGroupAll());
    UnitSetPropertyFixed(gv_marineHero[lp_playerIndex], c_unitPropLevel, 1.0);
    UnitSelect(gv_marineHero[lp_playerIndex], lp_player, true);
    UnitAbilityEnable(gv_marineHero[lp_playerIndex], "Reload", false);
    gf_AmmoUICreation(lp_player);
    gf_EquipmentDialogCreation(lp_playerIndex);
    if ((gv_playerRandom[lp_playerIndex] == true)) {
        gv_playerKarma[lp_playerIndex] -= 5;
    }
    else {
        gv_playerKarma[lp_playerIndex] -= 1;
    }
    UnitFlashSelection(gv_marineHero[lp_playerIndex], 5.0);
    UnitControlGroupAddUnit(lp_player, 1, gv_marineHero[lp_playerIndex]);
    if ((gv_playerKarma[lp_playerIndex] <= 1400)) {
        libNtve_gf_AttachModelToUnit(gv_marineHero[lp_playerIndex], "BriefingUnitSelectRedSmall", "Ref_Center");
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lp_player), c_messageAreaSubtitle, ((PlayerName(lp_player) + StringExternal("Param/Value/E8E46D7D")) + StringToText("")));
    }

    if ((gv_playerBanned[lp_playerIndex] == true)) {
        libNtve_gf_AttachModelToUnit(gv_marineHero[lp_playerIndex], "BriefingUnitSelectRedSmall", "Ref_Center");
        UnitBehaviorAddPlayer(gv_marineHero[lp_playerIndex], "PenalLegion", 14, 1);
    }

    if ((gv_playerXP[lp_playerIndex] <= 2000)) {
        UIDisplayMessage(PlayerGroupSingle(lp_player), c_messageAreaDirective, StringExternal("Param/Value/1FDEF267"));
    }

    gv_classCount[UserDataGetInt("Classes", gv_playerClass[lp_playerIndex], "Slot", 1)] += 1;
    gf_StartingBonuses(lp_playerIndex);
    if ((UnitGetType(gv_marineHero[lp_playerIndex]) == "Medic2")) {
        UnitIssueOrder(gv_marineHero[lp_playerIndex], Order(AbilityCommand("LearnMedic", 1)), c_orderQueueReplace);
        if ((gv_navyCrossMode == false)) {
            UnitInventoryCreate(gv_marineHero[lp_playerIndex], "Bandage");
        }

        if ((PlayerGroupCount(PlayerGroupActive()) > 2)) {
            gv_playerMedicPlayed[lp_playerIndex] += 1;
            if ((RandomInt(0, 3) == 1)) {
                gv_playerKarma[lp_playerIndex] += 1;
            }

        }

        if ((gv_playerCP[lp_playerIndex].lv_medic >= 10)) {
            gv_playerDoctor[lp_playerIndex] = true;
            UnitSetTeamColorIndex(gv_marineHero[lp_playerIndex], 0);
            UnitSetScale(gv_marineHero[lp_playerIndex], 113.0, 113.0, 113.0);
            gf_UISetDoctorTitle(lp_playerIndex);
        }
        else if ((gv_playerCP[lp_playerIndex].lv_medic > 5)) {
            UnitSetTeamColorIndex(gv_marineHero[lp_playerIndex], 2);
            gv_playerDoctor[lp_playerIndex] = true;
        }
    }
    else if ((UnitGetType(gv_marineHero[lp_playerIndex]) == "TychusChaingun")) {
        gv_playerRoundLimit[lp_playerIndex] = 40;
        gv_marineRounds[lp_playerIndex] = gv_playerRoundLimit[lp_playerIndex];
        gf_UpdateAmmoDialog(lp_playerIndex);
    }
    else if ((UnitGetType(gv_marineHero[lp_playerIndex]) == "Spectre")) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("MassDesignate", 0), false);
        TriggerEnable(gt_Backstab, true);
    }
    else if ((UnitGetType(gv_marineHero[lp_playerIndex]) == "Rifleman")) {
        TechTreeUpgradeAddLevel(lp_playerIndex, "RiflemanGrenades", 1);
    }
    else if ((UnitGetType(gv_marineHero[lp_playerIndex]) == "ForwardObserver")) {
        TechTreeAbilityAllow(lp_player, AbilityCommand("FlamethrowerGear", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("MarksmanGear", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("SlowRoast", 0), false);
        TechTreeAbilityAllow(lp_player, AbilityCommand("VeteransFocus", 0), false);
        TriggerEnable(gt_SurveillanceFlares, true);
    }
    else if ((UnitGetType(gv_marineHero[lp_playerIndex]) == "Pathfinder")) {
        UnitIssueOrder(gv_marineHero[lp_playerIndex], Order(AbilityCommand("LearnPathfinder", 6)), c_orderQueueReplace);
    }
    if ((ModI(gv_playerColorCode[lp_playerIndex], 100) == 0)) {
        PlayerSetColorIndex(lp_player, gf_GetClassColor(UnitGetType(gv_marineHero[lp_playerIndex])), true);
    }
    else {
        gf_PlayerColorChange(lp_player);
    }
    if ((gv_classLimitBroken == false)) {
        gf_ClassLimitCheck();
    }

    if ((gf_KittensBought(lp_playerIndex) == true)) {
        gf_CreateKittens(lp_playerIndex);
    }

    UnitInventoryContainerOpen(PlayerGroupActive(), gv_marineHero[lp_playerIndex], 1, true);
    UIClearMessages(PlayerGroupSingle(lp_player), c_messageAreaDirective);
    Wait(12.0, c_timeReal);
    gf_TipLocalNOTD(500, lp_player, StringExternal("Param/Value/2482F8A0"));
    return true;
}

void gf_RegisterMarineWithEvents (unit lp_marine) {
    // Implementation
    TriggerAddEventUnitDied(gt_TeamKill, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(lp_marine)));
    TriggerAddEventUnitDied(gt_DeadMarine, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(lp_marine)));
    TriggerAddEventUnitDied(gt_PsiOpsDeath, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(lp_marine)));
    TriggerAddEventUnitDamaged(gt_ReceivesDamage, UnitRefFromUnit(lib09BE6BA8_gf_ReturnUnit(lp_marine)), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

trigger auto_gf_AmmoUICreation_Trigger = null;
int auto_gf_AmmoUICreation_lp_player;

void gf_AmmoUICreation (int lp_player) {
    auto_gf_AmmoUICreation_lp_player = lp_player;

    if (auto_gf_AmmoUICreation_Trigger == null) {
        auto_gf_AmmoUICreation_Trigger = TriggerCreate("auto_gf_AmmoUICreation_TriggerFunc");
    }

    TriggerExecute(auto_gf_AmmoUICreation_Trigger, false, false);
}

bool auto_gf_AmmoUICreation_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AmmoUICreation_lp_player;

    // Variable Declarations
    int lv_tempDialogFrame;

    // Variable Initialization
    lv_tempDialogFrame = c_invalidDialogControlId;

    // Implementation
    gf_UIDialogCreation(35, 170, -300, 295, c_anchorBottom);
    gv_ammoCounterDialog[lp_player] = DialogLastCreated();
    DialogControlCreateFromTemplate(gv_ammoCounterDialog[lp_player], c_triggerControlTypePanel, "AmmoUI/AmmoCounter");
    lv_tempDialogFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "AmmoCountImage");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/DD35AB49"), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "AmmoCountLabel");
    gv_ammoCounterDialogItem[lp_player][0] = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "MagazineCountImage");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/2BAB2E60"), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "MagazineCountLabel");
    gv_ammoCounterDialogItem[lp_player][1] = DialogControlLastCreated();
    DialogSetVisible(gv_ammoCounterDialog[lp_player], PlayerGroupSingle(lp_player), true);
    gf_UpdateAmmoDialog(lp_player);
    return true;
}

trigger auto_gf_CustomNameChange_Trigger = null;
int auto_gf_CustomNameChange_lp_selectingPlayer;

void gf_CustomNameChange (int lp_selectingPlayer) {
    auto_gf_CustomNameChange_lp_selectingPlayer = lp_selectingPlayer;

    if (auto_gf_CustomNameChange_Trigger == null) {
        auto_gf_CustomNameChange_Trigger = TriggerCreate("auto_gf_CustomNameChange_TriggerFunc");
    }

    TriggerExecute(auto_gf_CustomNameChange_Trigger, false, false);
}

bool auto_gf_CustomNameChange_TriggerFunc (bool testConds, bool runActions) {
    int lp_selectingPlayer = auto_gf_CustomNameChange_lp_selectingPlayer;

    int auto1DFE35DF_ae;
    int auto1DFE35DF_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto1DFE35DF_ae = UserDataInstanceCount("CustomNames");
    auto1DFE35DF_ai = 1;
    lv_player = 1;
    for ( ; ( (auto1DFE35DF_ai >= 0 && lv_player <= auto1DFE35DF_ae) || (auto1DFE35DF_ai <= 0 && lv_player >= auto1DFE35DF_ae) ) ; lv_player += auto1DFE35DF_ai ) {
        if (((PlayerHandle(lp_selectingPlayer) == UserDataGetString("CustomNames", UserDataInstance("CustomNames", lv_player), "Player ID NA", 1)) || (PlayerHandle(lp_selectingPlayer) == UserDataGetString("CustomNames", UserDataInstance("CustomNames", lv_player), "Player ID EU", 1)) || (PlayerHandle(lp_selectingPlayer) == UserDataGetString("CustomNames", UserDataInstance("CustomNames", lv_player), "Player ID SEA", 1))) && (UserDataGetUnit("CustomNames", UserDataInstance("CustomNames", lv_player), "Class", 1) == UserDataGetUnit("Classes", gv_playerClass[lp_selectingPlayer], "Class Unit", 1))) {
            CatalogReferenceSet("Behavior,CustomName,Modification.UnitNameOverride", lp_selectingPlayer, UserDataGetString("CustomNames", UserDataInstance("CustomNames", lv_player), "Name", 1));
            UnitBehaviorAddPlayer(gv_marineHero[lp_selectingPlayer], "CustomName", lp_selectingPlayer, 1);
            return true;
        }

    }
    return true;
}

int gf_GetRandomRange (int lp_player) {
    // Implementation
    if ((((((gv_playerXP[lp_player] >= 80000) && (gv_playerRating[lp_player] >= 1500)) || ((gv_playerXP[lp_player] >= 10000) && (gv_playerRating[lp_player] >= 1700))) && (gv_playerKarma[lp_player] >= 1500)) || (gv_storyline == 4))) {
        return 14;
    }
    else if (((gv_playerXP[lp_player] >= 80000) || ((gv_playerXP[lp_player] >= 10000) && (gv_playerRating[lp_player] >= 1600))) && (gv_playerKarma[lp_player] >= 1300)) {
        return 7;
    }
    else if ((gv_playerXP[lp_player] >= 5000) && (gv_playerKarma[lp_player] >= 1300)) {
        return 6;
    }
    else if ((gv_playerXP[lp_player] >= 500) && (gv_playerKarma[lp_player] >= 1300)) {
        return 5;
    }
    else if ((gv_playerXP[lp_player] >= 100) && (gv_playerKarma[lp_player] >= 1300)) {
        return 4;
    }
    return 3;
}

void gf_EquipmentDialogCreation (int lp_player) {
    // Variable Declarations
    int lv_instance;

    // Variable Initialization
    lv_instance = UserDataGetInt("Classes", gv_playerClass[lp_player], "Slot", 1);

    // Implementation
    DialogControlCreateFromTemplate(gv_equipment, c_triggerControlTypeButton, "MarineEquipment/MarineEquipment/MarineEquipmentButton");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("Classes", gv_playerClass[lp_player], "Class Image", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/4713242D"), PlayerGroupAll());
    gv_equipmentButton[lp_player] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(lp_player), true);
}

void gf_StartingBonuses (int lp_playerIndex) {
    // Variable Declarations
    int lv_classPoints;

    // Variable Initialization

    // Implementation
    lv_classPoints = gf_GetClassCP(lp_playerIndex, UnitGetType(gv_marineHero[lp_playerIndex]));
    if ((lv_classPoints >= 10)) {
        SoundPlay(SoundLink(UserDataGetSound("Classes", gv_playerClass[lp_playerIndex], "Class CP Sound", 1), c_soundIndexAny), PlayerGroupActive(), 100.0, 0.0);
        UnitSetPropertyFixed(gv_marineHero[lp_playerIndex], c_unitPropLevel, 2.0);
        UnitSetPropertyFixed(gv_marineHero[lp_playerIndex], c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_marineHero[lp_playerIndex], c_unitPropShieldsMax, c_unitPropNormal) + 10.0));
    }
    else if ((lv_classPoints >= 5)) {
        UnitSetPropertyFixed(gv_marineHero[lp_playerIndex], c_unitPropShieldsMax, (UnitGetPropertyFixed(gv_marineHero[lp_playerIndex], c_unitPropShieldsMax, c_unitPropNormal) + 10.0));
    }
    if ((lv_classPoints >= 20)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "ShieldBonus", gv_marineHero[lp_playerIndex], 1);
    }

    if ((lv_classPoints >= 40)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "SightBonus", gv_marineHero[lp_playerIndex], 1);
    }

    if ((gv_playerRating[lp_playerIndex] >= 2300)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "RatingSpeedBonus7", gv_marineHero[lp_playerIndex], 1);
    }
    else if ((gv_playerRating[lp_playerIndex] >= 2100)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "RatingSpeedBonus6", gv_marineHero[lp_playerIndex], 1);
    }
    else if ((gv_playerRating[lp_playerIndex] >= 1900)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "RatingSpeedBonus5", gv_marineHero[lp_playerIndex], 1);
    }
    else if ((gv_playerRating[lp_playerIndex] >= 1800)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "RatingSpeedBonus4", gv_marineHero[lp_playerIndex], 1);
    }
    else if ((gv_playerRating[lp_playerIndex] >= 1700)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "RatingSpeedBonus3", gv_marineHero[lp_playerIndex], 1);
    }
    else if ((gv_playerRating[lp_playerIndex] >= 1600)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "RatingSpeedBonus2", gv_marineHero[lp_playerIndex], 1);
    }
    if ((gv_medalOfHonor[lp_playerIndex] >= 150)) {
        UnitBehaviorAdd(gv_marineHero[lp_playerIndex], "RatingSpeedBonus2", gv_marineHero[lp_playerIndex], 1);
    }

}

trigger auto_gf_ClassLimitCheck_Trigger = null;

void gf_ClassLimitCheck () {
    if (auto_gf_ClassLimitCheck_Trigger == null) {
        auto_gf_ClassLimitCheck_Trigger = TriggerCreate("auto_gf_ClassLimitCheck_TriggerFunc");
    }

    TriggerExecute(auto_gf_ClassLimitCheck_Trigger, false, false);
}

bool auto_gf_ClassLimitCheck_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_classCycle;

    // Variable Initialization
    lv_classCycle = 3;

    // Implementation
    while ((lv_classCycle < 14)) {
        if ((gv_classCount[lv_classCycle] > 2) && (gv_noNewbie == true) && (gv_classLimitBroken == false)) {
            gv_classLimitBroken = true;
            gv_classLimitMultiplier = 0.6;
            SoundPlay(SoundLink("TUIWarning", -1), PlayerGroupAll(), 125.0, 0.0);
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/0D23902A"));
            lv_classCycle += 15;
        }

        lv_classCycle += 1;
    }
    return true;
}

int gf_GetClassCP (int lp_player, string lp_class) {
    string auto1E180296_val;

    // Implementation
    auto1E180296_val = lp_class;
    if (auto1E180296_val == "Rifleman") {
        return gv_playerCP[lp_player].lv_rifleman;
    }
    else if (auto1E180296_val == "Medic2") {
        return gv_playerCP[lp_player].lv_medic;
    }
    else if (auto1E180296_val == "TychusChaingun") {
        return gv_playerCP[lp_player].lv_assaultFlamerTech;
    }
    else if (auto1E180296_val == "Spectre") {
        return gv_playerCP[lp_player].lv_recon;
    }
    else if (auto1E180296_val == "Marksman") {
        return gv_playerCP[lp_player].lv_marksman;
    }
    else if (auto1E180296_val == "DominionKillTeam") {
        return gv_playerCP[lp_player].lv_demoFOChem;
    }
    else if (auto1E180296_val == "Engineer") {
        return gv_playerCP[lp_player].lv_engiePF;
    }
    else if (auto1E180296_val == "Commando") {
        return gv_playerCP[lp_player].lv_commandoPO;
    }
    else if (auto1E180296_val == "Flamethrower3") {
        return gv_playerCP[lp_player].lv_assaultFlamerTech;
    }
    else if (auto1E180296_val == "ForwardObserver") {
        return gv_playerCP[lp_player].lv_demoFOChem;
    }
    else if (auto1E180296_val == "Technician") {
        return gv_playerCP[lp_player].lv_assaultFlamerTech;
    }
    else if (auto1E180296_val == "ChemicalExpert") {
        return gv_playerCP[lp_player].lv_demoFOChem;
    }
    else if (auto1E180296_val == "Pathfinder") {
        return gv_playerCP[lp_player].lv_engiePF;
    }
    else if (auto1E180296_val == "PsiOps") {
        return gv_playerCP[lp_player].lv_commandoPO;
    }
    else {
        return 0;
    }
}

int gf_GetClassColor (string lp_class) {
    string autoBC1BF5F0_val;

    // Implementation
    autoBC1BF5F0_val = lp_class;
    if (autoBC1BF5F0_val == "Rifleman") {
        return 10;
    }
    else if (autoBC1BF5F0_val == "Medic2") {
        return 3;
    }
    else if (autoBC1BF5F0_val == "TychusChaingun") {
        return 2;
    }
    else if (autoBC1BF5F0_val == "Spectre") {
        return 4;
    }
    else if (autoBC1BF5F0_val == "Marksman") {
        return 5;
    }
    else if (autoBC1BF5F0_val == "DominionKillTeam") {
        return 12;
    }
    else if (autoBC1BF5F0_val == "Engineer") {
        return 11;
    }
    else if (autoBC1BF5F0_val == "Commando") {
        return 1;
    }
    else if (autoBC1BF5F0_val == "Flamethrower3") {
        return 6;
    }
    else if (autoBC1BF5F0_val == "ForwardObserver") {
        return 7;
    }
    else if (autoBC1BF5F0_val == "Technician") {
        return 9;
    }
    else if (autoBC1BF5F0_val == "ChemicalExpert") {
        return 13;
    }
    else if (autoBC1BF5F0_val == "Pathfinder") {
        return 14;
    }
    else if (autoBC1BF5F0_val == "PsiOps") {
        return 8;
    }
    else {
        return 0;
    }
}

void gf_HideAllDialogsForPlayer (int lp_player) {
    playergroup auto8B09B2D9_g;
    int auto8B09B2D9_p;

    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    auto8B09B2D9_g = gv_marineSquad; 
    auto8B09B2D9_p = 1;
    for ( ; auto8B09B2D9_p <= PlayerGroupCount(auto8B09B2D9_g) ; auto8B09B2D9_p += BoolToInt(lv_index == PlayerGroupPlayer(auto8B09B2D9_g, auto8B09B2D9_p)) ) {
        lv_index = PlayerGroupPlayer(auto8B09B2D9_g, auto8B09B2D9_p);
        DialogSetVisible(gv_playerMedalsDialog[lv_index], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_statsPlayerStatsDialog[lv_index], PlayerGroupSingle(lp_player), false);
        DialogSetVisible(gv_talentTree[lv_index], PlayerGroupSingle(lp_player), false);
    }
}

void gf_ShowHideMarineDialog (bool lp_showHideOption, int lp_dialogOwner, int lp_playertoHideFrom) {
    // Implementation
    DialogSetVisible(gv_equipment, PlayerGroupSingle(lp_playertoHideFrom), lp_showHideOption);
    DialogSetVisible(gv_ammoCounterDialog[lp_dialogOwner], PlayerGroupSingle(lp_playertoHideFrom), lp_showHideOption);
    if ((UserDataGetUnit("Classes", gv_playerClass[lp_dialogOwner], "Class Unit", 1) == "ForwardObserver") && (gv_talentLevel[1][lp_dialogOwner] > 0)) {
        DialogSetVisible(gv_shellDialog[lp_dialogOwner], PlayerGroupSingle(lp_playertoHideFrom), lp_showHideOption);
    }

}

int gf_GetPreviousNextPlayer (int lp_currentPlayer, bool lp_isNext) {
    // Variable Declarations
    int lv_validPlayer;

    // Variable Initialization
    lv_validPlayer = lp_currentPlayer;

    // Implementation
    if ((lp_isNext == true)) {
        lv_validPlayer += 1;
        while ((PlayerStatus(lv_validPlayer) != c_playerStatusActive)) {
            if (lv_validPlayer >= gv_numberofPlayers) {
                lv_validPlayer = 1;
            }
            else {
                lv_validPlayer = lv_validPlayer + 1;
            }
        }
    }
    else {
        lv_validPlayer -= 1;
        while ((PlayerStatus(lv_validPlayer) != c_playerStatusActive)) {
            if (lv_validPlayer <= 1) {
                lv_validPlayer = gv_numberofPlayers;
            }
            else {
                lv_validPlayer = lv_validPlayer - 1;
            }
        }
    }
    return lv_validPlayer;
}

void gf_SetupPlayerDetailsUI (int lp_player, int lp_playerDetailsDialogFrame, text lp_dialogTitle, int lp_highlightDialogFrame, int lp_dialogControlCategory) {
    // Implementation
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeLabel, "Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), lp_dialogTitle, PlayerGroupAll());
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeButton, "MedalsButton");
    gv_dialogButtons[lp_dialogControlCategory][1][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeButton, "StatsButton");
    gv_dialogButtons[lp_dialogControlCategory][2][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "ObjectiveDisplay", PlayerGroupAll());
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeButton, "TalentsButton");
    gv_dialogButtons[lp_dialogControlCategory][3][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeButton, "NavLeftArrowButton");
    gv_dialogButtons[lp_dialogControlCategory][4][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeButton, "NavRightArrowButton");
    gv_dialogButtons[lp_dialogControlCategory][5][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeImage, "PlayerRankIcon");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Icon", 1), PlayerGroupAll());
    gv_playerNameRankIcon[lp_player] = DialogControlLastCreated();
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeLabel, "PlayerName");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_player]), "Title Brief", 1) + PlayerName(lp_player)), PlayerGroupAll());
    gv_playerNameLabel[lp_player] = DialogControlLastCreated();
    DialogControlHookup(lp_playerDetailsDialogFrame, c_triggerControlTypeButton, "CloseButton");
    gv_dialogButtons[lp_dialogControlCategory][6][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(lp_highlightDialogFrame, "Assets\\Textures\\ui_research_frame_tooltip_zerg.dds", PlayerGroupAll());
}

bool gf_TournamentWinner (string lp_playerHandle) {
    // Implementation
    IntLoopBegin(1, UserDataFieldValueCount("TournamentWinners", "Player Handle"));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lp_playerHandle == UserDataGetString("TournamentWinners", "Tournament Winners", "Player Handle", IntLoopCurrent()))) {
            return true;
        }

    }
    IntLoopEnd();
    return false;
}

bool gf_Staff (string lp_playerHandle) {
    // Implementation
    IntLoopBegin(1, UserDataFieldValueCount("Staff", "Player Handle"));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lp_playerHandle == UserDataGetString("Staff", "Staff", "Player Handle", IntLoopCurrent()))) {
            return true;
        }

    }
    IntLoopEnd();
    return false;
}

trigger auto_gf_TeamStatusInitializePlayerPortrait_Trigger = null;
int auto_gf_TeamStatusInitializePlayerPortrait_lp_triggeringPlayer;

void gf_TeamStatusInitializePlayerPortrait (int lp_triggeringPlayer) {
    auto_gf_TeamStatusInitializePlayerPortrait_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_TeamStatusInitializePlayerPortrait_Trigger == null) {
        auto_gf_TeamStatusInitializePlayerPortrait_Trigger = TriggerCreate("auto_gf_TeamStatusInitializePlayerPortrait_TriggerFunc");
    }

    TriggerExecute(auto_gf_TeamStatusInitializePlayerPortrait_Trigger, false, false);
}

bool auto_gf_TeamStatusInitializePlayerPortrait_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_TeamStatusInitializePlayerPortrait_lp_triggeringPlayer;

    // Implementation
    if ((gv_playerBanned[lp_triggeringPlayer] == false)) {
        if ((gv_talentLevel[10][lp_triggeringPlayer] >= 1)) {
            libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lp_triggeringPlayer], UserDataGetImagePath("Classes", gv_playerClass[lp_triggeringPlayer], "Portraits", 3), PlayerGroupAll());
        }
        else if ((gv_talentLevel[5][lp_triggeringPlayer] >= 1)) {
            libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lp_triggeringPlayer], UserDataGetImagePath("Classes", gv_playerClass[lp_triggeringPlayer], "Portraits", 2), PlayerGroupAll());
        }
        else if (true) {
            libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lp_triggeringPlayer], UserDataGetImagePath("Classes", gv_playerClass[lp_triggeringPlayer], "Portraits", 1), PlayerGroupAll());
        }
    }

    return true;
}

trigger auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger = null;
int auto_gf_TeamStatusUnderAttackPortraitFlash_lp_playerNo;

void gf_TeamStatusUnderAttackPortraitFlash (int lp_playerNo) {
    auto_gf_TeamStatusUnderAttackPortraitFlash_lp_playerNo = lp_playerNo;

    if (auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger == null) {
        auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger = TriggerCreate("auto_gf_TeamStatusUnderAttackPortraitFlash_TriggerFunc");
    }

    TriggerExecute(auto_gf_TeamStatusUnderAttackPortraitFlash_Trigger, false, false);
}

bool auto_gf_TeamStatusUnderAttackPortraitFlash_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_TeamStatusUnderAttackPortraitFlash_lp_playerNo;

    int auto336E6B0E_n;
    int auto336E6B0E_i;

    // Implementation
    gv_underAttack[lp_playerNo] = true;
    auto336E6B0E_n = 3;
    for (auto336E6B0E_i = 1; auto336E6B0E_i <= auto336E6B0E_n; auto336E6B0E_i += 1) {
        if ((UnitIsAlive(gv_marineHero[lp_playerNo]) == true) && (UnitGetPropertyFixed(gv_marineHero[lp_playerNo], c_unitPropShieldsPercent, c_unitPropCurrent) > 10.0)) {
            libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitButton[lp_playerNo], Color(28*100/255,167*100/255,234*100/255), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitButton[lp_playerNo], Color(100.00, 0.00, 0.00), PlayerGroupAll());
        }
        Wait(0.35, c_timeGame);
        libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitButton[lp_playerNo], Color(100,100,100), PlayerGroupAll());
        Wait(0.2, c_timeGame);
    }
    gv_underAttack[lp_playerNo] = false;
    return true;
}

trigger auto_gf_UIUpdatePortraitTooltip_Trigger = null;
int auto_gf_UIUpdatePortraitTooltip_lp_triggeringPlayer;

void gf_UIUpdatePortraitTooltip (int lp_triggeringPlayer) {
    auto_gf_UIUpdatePortraitTooltip_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdatePortraitTooltip_Trigger == null) {
        auto_gf_UIUpdatePortraitTooltip_Trigger = TriggerCreate("auto_gf_UIUpdatePortraitTooltip_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdatePortraitTooltip_Trigger, false, false);
}

bool auto_gf_UIUpdatePortraitTooltip_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdatePortraitTooltip_lp_triggeringPlayer;

    // Variable Declarations
    text lv_temp;
    int lv_ratingInt;
    text lv_ratingText;
    int lv_karmaInt;
    text lv_karmaText;
    int lv_xPInt;
    text lv_xPText;
    int lv_creditInt;
    text lv_creditText;

    // Variable Initialization
    lv_ratingInt = (gv_playerRating[lp_triggeringPlayer] - gv_startingRating[lp_triggeringPlayer]);
    lv_karmaInt = (gv_playerKarma[lp_triggeringPlayer] - gv_startingKarma[lp_triggeringPlayer]);
    lv_xPInt = (gv_playerXP[lp_triggeringPlayer] - gv_startingXP[lp_triggeringPlayer]);
    lv_creditInt = (gv_playerCredits[lp_triggeringPlayer] - gv_startingCredits[lp_triggeringPlayer]);

    // Implementation
    if ((lv_ratingInt > 0)) {
        lv_ratingText = (StringExternal("Param/Value/648748AC") + IntToText(lv_ratingInt));
    }
    else {
        lv_ratingText = IntToText(lv_ratingInt);
    }
    if ((lv_karmaInt > 0)) {
        lv_karmaText = (StringExternal("Param/Value/B5DC7FB9") + IntToText(lv_karmaInt));
    }
    else {
        lv_karmaText = IntToText(lv_karmaInt);
    }
    if ((lv_xPInt > 0)) {
        lv_xPText = (StringExternal("Param/Value/50865FA9") + IntToText(lv_xPInt));
    }
    else {
        lv_xPText = IntToText(lv_xPInt);
    }
    if ((lv_creditInt > 0)) {
        lv_creditText = (StringExternal("Param/Value/E44F499A") + IntToText(lv_creditInt));
    }
    else {
        lv_creditText = IntToText(lv_creditInt);
    }
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = StringExternal("Param/Value/6A470478");
    TextExpressionSetToken("Param/Expression/4EEAFF4E", "A", UnitTypeGetName(UnitGetType(gv_marineHero[lp_triggeringPlayer])));
    lv_temp = TextExpressionAssemble("Param/Expression/4EEAFF4E");
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + lv_temp);
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/75D0FAFD"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerRating[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/BCE6D27B") + (lv_ratingText + StringExternal("Param/Value/9636C697"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/6734436C"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerKarma[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/F96F7B86") + (lv_karmaText + StringExternal("Param/Value/86182C3C"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/7E5D1603"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerXP[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/6064B540") + (lv_xPText + StringExternal("Param/Value/2B8E1854"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/64F415B8"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerCredits[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/A7EAAC9B") + (lv_creditText + StringExternal("Param/Value/A89F0CC4"))));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/54228DBB"));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText(gv_playerGamesPlayed[lp_triggeringPlayer]));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/497C825E"));
    if ((gv_playerGamesPlayed[lp_triggeringPlayer] <= 0)) {
        gv_playerGamesPlayed[lp_triggeringPlayer] = 1;
    }

    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + IntToText((gv_playerXP[lp_triggeringPlayer] / gv_playerGamesPlayed[lp_triggeringPlayer])));
    gv_teamStatusPortraitTooltip[lp_triggeringPlayer] = (gv_teamStatusPortraitTooltip[lp_triggeringPlayer] + (StringExternal("Param/Value/666A04DF") + StringToText(PlayerHandle(lp_triggeringPlayer))));
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusPortraitButton[lp_triggeringPlayer], gv_teamStatusPortraitTooltip[lp_triggeringPlayer], PlayerGroupAll());
    return true;
}

trigger auto_gf_UIUpdateLifeTooltip_Trigger = null;
int auto_gf_UIUpdateLifeTooltip_lp_triggeringPlayer;

void gf_UIUpdateLifeTooltip (int lp_triggeringPlayer) {
    auto_gf_UIUpdateLifeTooltip_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateLifeTooltip_Trigger == null) {
        auto_gf_UIUpdateLifeTooltip_Trigger = TriggerCreate("auto_gf_UIUpdateLifeTooltip_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateLifeTooltip_Trigger, false, false);
}

bool auto_gf_UIUpdateLifeTooltip_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateLifeTooltip_lp_triggeringPlayer;

    // Implementation
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = StringExternal("Param/Value/C1D141D3");
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + IntToText(PlayerScoreValueGetAsInt(lp_triggeringPlayer, "UnitsKilledCount")));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/371C5830"));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + FixedToText(gv_hitsTaken[lp_triggeringPlayer], 0));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/9D8902A7"));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + FixedToText(gv_playerDamageTaken[lp_triggeringPlayer], 0));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + StringExternal("Param/Value/77C36B7E"));
    gv_teamStatusLifeTooltip[lp_triggeringPlayer] = (gv_teamStatusLifeTooltip[lp_triggeringPlayer] + IntToText(gv_marineMags[lp_triggeringPlayer]));
    libNtve_gf_SetDialogItemTooltip(gv_teamStatusLifeBarLabel[lp_triggeringPlayer], gv_teamStatusLifeTooltip[lp_triggeringPlayer], PlayerGroupAll());
    return true;
}

trigger auto_gf_UIUpdateXP_Trigger = null;
int auto_gf_UIUpdateXP_lp_triggeringPlayer;

void gf_UIUpdateXP (int lp_triggeringPlayer) {
    auto_gf_UIUpdateXP_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateXP_Trigger == null) {
        auto_gf_UIUpdateXP_Trigger = TriggerCreate("auto_gf_UIUpdateXP_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateXP_Trigger, false, false);
}

bool auto_gf_UIUpdateXP_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateXP_lp_triggeringPlayer;

    // Variable Declarations
    text lv_xPText;

    // Variable Initialization

    // Implementation
    lv_xPText = (StringExternal("Param/Value/174CE2FA") + IntToText(gv_playerXP[lp_triggeringPlayer]));
    libNtve_gf_SetDialogItemText(gv_teamStatusXP[lp_triggeringPlayer], lv_xPText, PlayerGroupAll());
    if ((gv_statsPlayerNextXP[lp_triggeringPlayer] != c_invalidDialogControlId)) {
        libNtve_gf_SetDialogItemText(gv_statsPlayerNextXP[lp_triggeringPlayer], (IntToText(gv_playerXP[lp_triggeringPlayer]) + (gv_forwardSlash + IntToText(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lp_triggeringPlayer] + 1)), "XP Required", 1)))), PlayerGroupAll());
    }

    if ((gv_statsPlayerNextLevelProgressBar[lp_triggeringPlayer] != c_invalidDialogControlId)) {
        libNtve_gf_SetDialogItemCurrentValue(gv_statsPlayerNextLevelProgressBar[lp_triggeringPlayer], IntToFixed(gv_playerXP[lp_triggeringPlayer]), PlayerGroupAll());
    }

    return true;
}

trigger auto_gf_UIUpdateDebuffBar_Trigger = null;
int auto_gf_UIUpdateDebuffBar_lp_triggeringPlayer;

void gf_UIUpdateDebuffBar (int lp_triggeringPlayer) {
    auto_gf_UIUpdateDebuffBar_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UIUpdateDebuffBar_Trigger == null) {
        auto_gf_UIUpdateDebuffBar_Trigger = TriggerCreate("auto_gf_UIUpdateDebuffBar_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIUpdateDebuffBar_Trigger, false, false);
}

bool auto_gf_UIUpdateDebuffBar_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UIUpdateDebuffBar_lp_triggeringPlayer;

    // Variable Declarations
    unit lv_marineHero;
    int lv_i;

    // Variable Initialization
    lv_marineHero = gv_marineHero[lp_triggeringPlayer];

    // Implementation
    IntLoopBegin(1, UserDataInstanceCount("Ailments"));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitHasBehavior(lv_marineHero, UserDataGetGameLink("Ailments", UserDataInstance("Ailments", IntLoopCurrent()), "Ailment", 1)) == true)) {
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBackground[lv_i][lp_triggeringPlayer], "Assets\\Textures\\ui_research_frame_tooltip_protoss.dds", PlayerGroupAll());
            libNtve_gf_SetDialogItemColor(gv_teamStatusDebuffsBackground[lv_i][lp_triggeringPlayer], UserDataGetColor("Ailments", UserDataInstance("Ailments", IntLoopCurrent()), "Background Color", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], UserDataGetImagePath("Ailments", UserDataInstance("Ailments", IntLoopCurrent()), "Icon", 1), PlayerGroupAll());
            libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffs[lv_i][lp_triggeringPlayer], StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, UserDataGetGameLink("Ailments", UserDataInstance("Ailments", IntLoopCurrent()), "Ailment", 1), "Tooltip", c_playerAny)), PlayerGroupAll());
            lv_i += 1;
        }

    }
    IntLoopEnd();
    IntLoopBegin(lv_i, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[IntLoopCurrent()][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBackground[IntLoopCurrent()][lp_triggeringPlayer], "Assets\\Textures\\black.dds", PlayerGroupAll());
        TextExpressionSetToken("Param/Expression/D329FBDC", "A", null);
        libNtve_gf_SetDialogItemTooltip(gv_teamStatusDebuffs[IntLoopCurrent()][lp_triggeringPlayer], TextExpressionAssemble("Param/Expression/D329FBDC"), PlayerGroupAll());
    }
    IntLoopEnd();
    return true;
}

void gf_UISetPlayerRankNameIconXP (int lp_triggeringPlayer) {
    // Implementation
    if ((gv_playerDoctor[lp_triggeringPlayer] == true)) {
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lp_triggeringPlayer], "Assets\\Textures\\btn-ability-terran-heal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_triggeringPlayer], "Assets\\Textures\\btn-ability-terran-heal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_triggeringPlayer], StringExternal("Param/Value/35FA14D2"), PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lp_triggeringPlayer], UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_triggeringPlayer]), "Icon", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_triggeringPlayer], UserDataGetImagePath("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_triggeringPlayer]), "Icon", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_triggeringPlayer], UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lp_triggeringPlayer]), "Title Full", 1), PlayerGroupAll());
    }
    gf_UIUpdateXP(lp_triggeringPlayer);
    if ((gf_BOInsigniaBought(lp_triggeringPlayer) == true)) {
        gf_UpgradeBOInsigniaRank(lp_triggeringPlayer);
        libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lp_triggeringPlayer], "NOTD Rank Icons\\Black Ops Insignia.dds", PlayerGroupAll());
    }

}

trigger auto_gf_UISetDoctorTitle_Trigger = null;
int auto_gf_UISetDoctorTitle_lp_triggeringPlayer;

void gf_UISetDoctorTitle (int lp_triggeringPlayer) {
    auto_gf_UISetDoctorTitle_lp_triggeringPlayer = lp_triggeringPlayer;

    if (auto_gf_UISetDoctorTitle_Trigger == null) {
        auto_gf_UISetDoctorTitle_Trigger = TriggerCreate("auto_gf_UISetDoctorTitle_TriggerFunc");
    }

    TriggerExecute(auto_gf_UISetDoctorTitle_Trigger, false, false);
}

bool auto_gf_UISetDoctorTitle_TriggerFunc (bool testConds, bool runActions) {
    int lp_triggeringPlayer = auto_gf_UISetDoctorTitle_lp_triggeringPlayer;

    // Implementation
    DialogControlSetAnimationState(gv_teamStatusPlayerPanel[lp_triggeringPlayer], PlayerGroupAll(), "Rank", "Doctor");
    if ((gf_BOInsigniaBought(lp_triggeringPlayer) == true)) {
        gf_UpgradeBOInsigniaRank(lp_triggeringPlayer);
    }
    else {
        libNtve_gf_SetDialogItemImage(gv_teamStatusRankIcon[lp_triggeringPlayer], "Assets\\Textures\\btn-ability-terran-heal.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(gv_teamStatusRankIcon[lp_triggeringPlayer], StringExternal("Param/Value/25EB75DE"), PlayerGroupAll());
    }
    return true;
}

trigger auto_gf_UIInitializeStartingCareerStats_Trigger = null;
int auto_gf_UIInitializeStartingCareerStats_lp_player;

void gf_UIInitializeStartingCareerStats (int lp_player) {
    auto_gf_UIInitializeStartingCareerStats_lp_player = lp_player;

    if (auto_gf_UIInitializeStartingCareerStats_Trigger == null) {
        auto_gf_UIInitializeStartingCareerStats_Trigger = TriggerCreate("auto_gf_UIInitializeStartingCareerStats_TriggerFunc");
    }

    TriggerExecute(auto_gf_UIInitializeStartingCareerStats_Trigger, false, false);
}

bool auto_gf_UIInitializeStartingCareerStats_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_UIInitializeStartingCareerStats_lp_player;

    // Implementation
    gv_startingKarma[lp_player] = gv_playerKarma[lp_player];
    gv_startingXP[lp_player] = gv_playerXP[lp_player];
    gv_startingRating[lp_player] = gv_playerRating[lp_player];
    gv_startingCredits[lp_player] = gv_playerCredits[lp_player];
    return true;
}

trigger auto_gf_PlayerMedalsSetMedalItems_Trigger = null;
int auto_gf_PlayerMedalsSetMedalItems_lp_player;

void gf_PlayerMedalsSetMedalItems (int lp_player) {
    auto_gf_PlayerMedalsSetMedalItems_lp_player = lp_player;

    if (auto_gf_PlayerMedalsSetMedalItems_Trigger == null) {
        auto_gf_PlayerMedalsSetMedalItems_Trigger = TriggerCreate("auto_gf_PlayerMedalsSetMedalItems_TriggerFunc");
    }

    TriggerExecute(auto_gf_PlayerMedalsSetMedalItems_Trigger, false, false);
}

bool auto_gf_PlayerMedalsSetMedalItems_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_PlayerMedalsSetMedalItems_lp_player;

    // Variable Declarations
    int lv_maxWidth;
    int lv_maxHeight;
    int[11] lv_playerMedalLevels;
    int[11] lv_playerMedalPercentage;
    int lv_combatActionRibbonLevel;
    int lv_lifesavingMedalLevel;
    int lv_bronzeStarLevel;
    int lv_silverStarLevel;
    int lv_legionOfMeritLevel;
    int lv_distinguishedServiceMedalLevel;
    int lv_navyCrossLevel;
    int lv_expeditionaryMedalLevel;
    int lv_superiorServiceMedalLevel;
    int lv_medalOfHonorLevel;
    int lv_combatActionRibbonPercentage;
    int lv_lifesavingMedalPercentage;
    int lv_bronzeStarPercentage;
    int lv_silverStarPercentage;
    int lv_legionOfMeritPercentage;
    int lv_distinguishedServiceMedalPercentage;
    int lv_navyCrossPercentage;
    int lv_expeditionayMedalPercentage;
    int lv_superiorServiceMedalPercentage;
    int lv_medalOfHonorPercentage;

    // Variable Initialization
    lv_maxWidth = 150;
    lv_maxHeight = 20;
    lv_combatActionRibbonLevel = (gv_combatActionRibbon[lp_player] / 50);
    lv_lifesavingMedalLevel = (gv_lifeSavingMedal[lp_player] / 10);
    lv_bronzeStarLevel = (gv_bronzeStar[lp_player] / 10);
    lv_silverStarLevel = (gv_silverStar[lp_player] / 10);
    lv_legionOfMeritLevel = (gv_legionOfMerit[lp_player] / 10);
    lv_distinguishedServiceMedalLevel = (gv_distinguishedServiceMedal[lp_player] / 10);
    lv_navyCrossLevel = (gv_navyCross[lp_player] / 10);
    lv_expeditionaryMedalLevel = (gv_expeditionaryMedal[lp_player] / 10);
    lv_superiorServiceMedalLevel = (gv_superiorServiceMedal[lp_player] / 10);
    lv_medalOfHonorLevel = (gv_medalOfHonor[lp_player] / 50);
    lv_combatActionRibbonPercentage = (ModI(gv_combatActionRibbon[lp_player], 50) * 2);
    lv_lifesavingMedalPercentage = (ModI(gv_lifeSavingMedal[lp_player], 10) * 10);
    lv_bronzeStarPercentage = (ModI(gv_bronzeStar[lp_player], 10) * 10);
    lv_silverStarPercentage = (ModI(gv_silverStar[lp_player], 10) * 10);
    lv_legionOfMeritPercentage = (ModI(gv_legionOfMerit[lp_player], 10) * 10);
    lv_distinguishedServiceMedalPercentage = (ModI(gv_distinguishedServiceMedal[lp_player], 10) * 10);
    lv_navyCrossPercentage = (ModI(gv_navyCross[lp_player], 10) * 10);
    lv_expeditionayMedalPercentage = (ModI(gv_expeditionaryMedal[lp_player], 10) * 10);
    lv_superiorServiceMedalPercentage = (ModI(gv_superiorServiceMedal[lp_player], 10) * 10);
    lv_medalOfHonorPercentage = (ModI(gv_medalOfHonor[lp_player], 50) * 2);

    // Implementation
    lv_playerMedalLevels[1] = lv_combatActionRibbonLevel;
    lv_playerMedalLevels[2] = lv_lifesavingMedalLevel;
    lv_playerMedalLevels[3] = lv_bronzeStarLevel;
    lv_playerMedalLevels[4] = lv_silverStarLevel;
    lv_playerMedalLevels[5] = lv_legionOfMeritLevel;
    lv_playerMedalLevels[6] = lv_distinguishedServiceMedalLevel;
    lv_playerMedalLevels[7] = lv_navyCrossLevel;
    lv_playerMedalLevels[8] = lv_expeditionaryMedalLevel;
    lv_playerMedalLevels[9] = lv_superiorServiceMedalLevel;
    lv_playerMedalLevels[10] = lv_medalOfHonorLevel;
    lv_playerMedalPercentage[1] = lv_combatActionRibbonPercentage;
    lv_playerMedalPercentage[2] = lv_lifesavingMedalPercentage;
    lv_playerMedalPercentage[3] = lv_bronzeStarPercentage;
    lv_playerMedalPercentage[4] = lv_silverStarPercentage;
    lv_playerMedalPercentage[5] = lv_legionOfMeritPercentage;
    lv_playerMedalPercentage[6] = lv_distinguishedServiceMedalPercentage;
    lv_playerMedalPercentage[7] = lv_navyCrossPercentage;
    lv_playerMedalPercentage[8] = lv_expeditionayMedalPercentage;
    lv_playerMedalPercentage[9] = lv_superiorServiceMedalPercentage;
    lv_playerMedalPercentage[10] = lv_medalOfHonorPercentage;
    IntLoopBegin(gv_indexBaseValue, gv_numberofMedals);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lv_playerMedalLevels[IntLoopCurrent()] > 0)) {
            libNtve_gf_SetDialogItemColor(gv_playerMedalsImage[IntLoopCurrent()][lp_player], Color(100,100,100), PlayerGroupAll());
            libNtve_gf_SetDialogItemBlendMode(gv_playerMedalsImage[IntLoopCurrent()][lp_player], c_triggerBlendModeNormal, PlayerGroupAll());
            if ((lv_playerMedalLevels[IntLoopCurrent()] >= 6)) {
                libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[IntLoopCurrent()][lp_player], UserDataGetImagePath("MedalLevels", UserDataInstance("MedalLevels", 6), "Medal Image", 1), PlayerGroupAll());
            }
            else {
                libNtve_gf_SetDialogItemImage(gv_playerMedalsImage[IntLoopCurrent()][lp_player], UserDataGetImagePath("MedalLevels", UserDataInstance("MedalLevels", lv_playerMedalLevels[IntLoopCurrent()]), "Medal Image", 1), PlayerGroupAll());
            }
        }

        libNtve_gf_SetDialogItemTooltip(gv_playerMedalsImage[IntLoopCurrent()][lp_player], UserDataGetText("Medals", UserDataInstance("Medals", IntLoopCurrent()), "Requirement Tooltip", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalName[IntLoopCurrent()][lp_player], UserDataGetText("Medals", UserDataInstance("Medals", IntLoopCurrent()), "Display Name", 1), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalLevel[IntLoopCurrent()][lp_player], IntToText(lv_playerMedalLevels[IntLoopCurrent()]), PlayerGroupAll());
        if ((lv_playerMedalLevels[IntLoopCurrent()] >= 10)) {
            libNtve_gf_SetDialogItemColor(gv_playerMedalsMedalProgressBar[IntLoopCurrent()][lp_player], Color(100.00, 100.00, 0.00), PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemColor(gv_playerMedalsMedalProgressBar[IntLoopCurrent()][lp_player], Color(0.00, 100.00, 0.00), PlayerGroupAll());
        }
        DialogControlSetSize(gv_playerMedalsMedalProgressBar[IntLoopCurrent()][lp_player], PlayerGroupAll(), ((lv_playerMedalPercentage[IntLoopCurrent()] * lv_maxWidth) / 100), lv_maxHeight);
        libNtve_gf_SetDialogItemText(gv_playerMedalsMedalProgressText[IntLoopCurrent()][lp_player], (IntToText(lv_playerMedalPercentage[IntLoopCurrent()]) + StringExternal("Param/Value/B85CDB8C")), PlayerGroupAll());
    }
    IntLoopEnd();
    libNtve_gf_SetDialogItemColor(gv_playerMedalsMedalProgressBar[10][lp_player], Color(100.00, 84.31, 0.00), PlayerGroupAll());
    return true;
}

trigger auto_gf_StatsModSplashRadius_Trigger = null;
int auto_gf_StatsModSplashRadius_lp_modLevel;
int auto_gf_StatsModSplashRadius_lp_modOwner;

void gf_StatsModSplashRadius (int lp_modLevel, int lp_modOwner) {
    auto_gf_StatsModSplashRadius_lp_modLevel = lp_modLevel;
    auto_gf_StatsModSplashRadius_lp_modOwner = lp_modOwner;

    if (auto_gf_StatsModSplashRadius_Trigger == null) {
        auto_gf_StatsModSplashRadius_Trigger = TriggerCreate("auto_gf_StatsModSplashRadius_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsModSplashRadius_Trigger, false, false);
}

bool auto_gf_StatsModSplashRadius_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_StatsModSplashRadius_lp_modLevel;
    int lp_modOwner = auto_gf_StatsModSplashRadius_lp_modOwner;

    int init_i;

    int autoE081CE6C_ae;
    int autoE081CE6C_ai;
    int autoF3FBB897_ae;
    int autoF3FBB897_ai;

    // Variable Declarations
    fixed lv_splashRadius;
    string[4] lv_dataDamageName3;
    string[4] lv_dataDamageName2;
    string[3] lv_dataDamageName1;
    string[7] lv_dataDamageNameSearch;
    fixed lv_splashPercentagePerLevel;
    string lv_dataString;
    int lv_iLocal;
    text lv_test;
    int lv_player;

    // Variable Initialization
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_dataDamageName3[init_i] = "";
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_dataDamageName2[init_i] = "";
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_dataDamageName1[init_i] = "";
    }
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv_dataDamageNameSearch[init_i] = "";
    }
    lv_splashPercentagePerLevel = 0.05;
    lv_dataString = "";
    lv_player = lp_modOwner;

    // Implementation
    lv_dataDamageName3[0] = ("GuassRifle");
    lv_dataDamageName3[1] = ("XM814HeavyMachineGun");
    lv_dataDamageName3[2] = ("Shotgun");
    lv_dataDamageName2[0] = "MP9A2SubMachineGun";
    lv_dataDamageName2[1] = "M5PulseRifle";
    lv_dataDamageName1[0] = "LaserRifleDamage";
    lv_dataDamageName1[1] = "UA420AssaultRifle";
    lv_dataDamageNameSearch[0] = "InfernalFlameThrowerE";
    lv_dataDamageNameSearch[1] = "InfernalFlameThrowerLevel22";
    lv_dataDamageNameSearch[2] = "InfernalFlameThrowerLevel32";
    lv_dataDamageNameSearch[3] = "CrowbarSearchDamage";
    lv_dataDamageNameSearch[4] = "P45GaussPistolDamageSearch";
    IntLoopBegin(0, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        autoE081CE6C_ae = 2;
        autoE081CE6C_ai = 1;
        lv_iLocal = 0;
        for ( ; ( (autoE081CE6C_ai >= 0 && lv_iLocal <= autoE081CE6C_ae) || (autoE081CE6C_ai <= 0 && lv_iLocal >= autoE081CE6C_ae) ) ; lv_iLocal += autoE081CE6C_ai ) {
            lv_dataString = ("AreaArray[" + (IntToString(lv_iLocal) + "].Radius[0]"));
            lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName3[IntLoopCurrent()], lv_dataString, 0));
            lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
            CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName3[IntLoopCurrent()], lv_dataString, lv_player, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
        }
    }
    IntLoopEnd();
    IntLoopBegin(0, 1);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        autoF3FBB897_ae = 1;
        autoF3FBB897_ai = 1;
        lv_iLocal = 0;
        for ( ; ( (autoF3FBB897_ai >= 0 && lv_iLocal <= autoF3FBB897_ae) || (autoF3FBB897_ai <= 0 && lv_iLocal >= autoF3FBB897_ae) ) ; lv_iLocal += autoF3FBB897_ai ) {
            lv_dataString = ("AreaArray[" + (IntToString(lv_iLocal) + "].Radius[0]"));
            lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName2[IntLoopCurrent()], lv_dataString, 0));
            lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
            CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName2[IntLoopCurrent()], lv_dataString, lv_player, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
        }
    }
    IntLoopEnd();
    IntLoopBegin(0, 1);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_dataString = "AreaArray[0].Radius[0]";
        lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName1[IntLoopCurrent()], lv_dataString, 0));
        lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageName1[IntLoopCurrent()], lv_dataString, lv_player, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
    }
    IntLoopEnd();
    IntLoopBegin(0, 4);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageNameSearch[IntLoopCurrent()], "AreaArray[0].Radius[0]", 0));
        lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogEffect, lv_dataDamageNameSearch[IntLoopCurrent()], "AreaArray[0].Radius[0]", lv_player, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
    }
    IntLoopEnd();
    lv_splashRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "StingerMK3Damage", "AreaArray[" + IntToString(0) + "].Radius", 0));
    lv_splashRadius *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_splashPercentagePerLevel));
    CatalogFieldValueSet(c_gameCatalogEffect, "StingerMK3Damage", "AreaArray[" + IntToString(0) + "].Radius", lv_player, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "StingerMK3DamageAllies", "AreaArray[" + IntToString(0) + "].Radius", lv_player, FixedToString(lv_splashRadius, c_fixedPrecisionAny));
    return true;
}

trigger auto_gf_StatsModWeightPoint_Trigger = null;
int auto_gf_StatsModWeightPoint_lp_modLevel;
int auto_gf_StatsModWeightPoint_lp_modOwner;

void gf_StatsModWeightPoint (int lp_modLevel, int lp_modOwner) {
    auto_gf_StatsModWeightPoint_lp_modLevel = lp_modLevel;
    auto_gf_StatsModWeightPoint_lp_modOwner = lp_modOwner;

    if (auto_gf_StatsModWeightPoint_Trigger == null) {
        auto_gf_StatsModWeightPoint_Trigger = TriggerCreate("auto_gf_StatsModWeightPoint_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsModWeightPoint_Trigger, false, false);
}

bool auto_gf_StatsModWeightPoint_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_StatsModWeightPoint_lp_modLevel;
    int lp_modOwner = auto_gf_StatsModWeightPoint_lp_modOwner;

    // Variable Declarations
    fixed lv_weightPercentagePerLevel;

    // Variable Initialization
    lv_weightPercentagePerLevel = 0.075;

    // Implementation
    gv_baseMarineWeightPointMultiplier[lp_modOwner] = (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_weightPercentagePerLevel));
    return true;
}

trigger auto_gf_StatsModAttackSpeed_Trigger = null;
int auto_gf_StatsModAttackSpeed_lp_modLevel;
int auto_gf_StatsModAttackSpeed_lp_modOwner;

void gf_StatsModAttackSpeed (int lp_modLevel, int lp_modOwner) {
    auto_gf_StatsModAttackSpeed_lp_modLevel = lp_modLevel;
    auto_gf_StatsModAttackSpeed_lp_modOwner = lp_modOwner;

    if (auto_gf_StatsModAttackSpeed_Trigger == null) {
        auto_gf_StatsModAttackSpeed_Trigger = TriggerCreate("auto_gf_StatsModAttackSpeed_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsModAttackSpeed_Trigger, false, false);
}

bool auto_gf_StatsModAttackSpeed_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_StatsModAttackSpeed_lp_modLevel;
    int lp_modOwner = auto_gf_StatsModAttackSpeed_lp_modOwner;

    // Variable Declarations
    int lv_player;
    fixed lv_period;
    string[13] lv_dataWeaponName;
    const fixed lv_speedPercentagePerLevel = 0.05;

    // Variable Initialization
    lv_player = lp_modOwner;

    // Implementation
    lv_dataWeaponName[0] = "P38ScytheGuassPistol";
    lv_dataWeaponName[1] = "GuassRifle";
    lv_dataWeaponName[2] = "Chaingun";
    lv_dataWeaponName[3] = "SniperRifle";
    lv_dataWeaponName[4] = "Shotgun";
    lv_dataWeaponName[5] = "LaserRifle";
    lv_dataWeaponName[6] = "BarrettM112";
    lv_dataWeaponName[7] = "MP9A2SubMachineGun";
    lv_dataWeaponName[8] = "M5PulseRifle";
    lv_dataWeaponName[9] = "UA420AssaultRifle";
    lv_dataWeaponName[10] = "StingerMK3";
    lv_dataWeaponName[11] = "Flamethrower";
    lv_dataWeaponName[12] = "Crowbar";
    IntLoopBegin(0, 12);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_period = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_dataWeaponName[IntLoopCurrent()], "Period", 0));
        lv_period *= (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_speedPercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogWeapon, lv_dataWeaponName[IntLoopCurrent()], "Period", lv_player, FixedToString(lv_period, c_fixedPrecisionAny));
    }
    IntLoopEnd();
    return true;
}

trigger auto_gf_StatsModSwitchTime_Trigger = null;
int auto_gf_StatsModSwitchTime_lp_modLevel;
int auto_gf_StatsModSwitchTime_lp_modOwner;

void gf_StatsModSwitchTime (int lp_modLevel, int lp_modOwner) {
    auto_gf_StatsModSwitchTime_lp_modLevel = lp_modLevel;
    auto_gf_StatsModSwitchTime_lp_modOwner = lp_modOwner;

    if (auto_gf_StatsModSwitchTime_Trigger == null) {
        auto_gf_StatsModSwitchTime_Trigger = TriggerCreate("auto_gf_StatsModSwitchTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsModSwitchTime_Trigger, false, false);
}

bool auto_gf_StatsModSwitchTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_StatsModSwitchTime_lp_modLevel;
    int lp_modOwner = auto_gf_StatsModSwitchTime_lp_modOwner;

    // Variable Declarations
    fixed lv_switchPercentagePerLevel;

    // Variable Initialization
    lv_switchPercentagePerLevel = 0.05;

    // Implementation
    gv_baseMarineSwitchingMultiplier[lp_modOwner] = (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_switchPercentagePerLevel));
    return true;
}

trigger auto_gf_StatsModReloadTime_Trigger = null;
int auto_gf_StatsModReloadTime_lp_modLevel;
int auto_gf_StatsModReloadTime_lp_modOwner;

void gf_StatsModReloadTime (int lp_modLevel, int lp_modOwner) {
    auto_gf_StatsModReloadTime_lp_modLevel = lp_modLevel;
    auto_gf_StatsModReloadTime_lp_modOwner = lp_modOwner;

    if (auto_gf_StatsModReloadTime_Trigger == null) {
        auto_gf_StatsModReloadTime_Trigger = TriggerCreate("auto_gf_StatsModReloadTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsModReloadTime_Trigger, false, false);
}

bool auto_gf_StatsModReloadTime_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_StatsModReloadTime_lp_modLevel;
    int lp_modOwner = auto_gf_StatsModReloadTime_lp_modOwner;

    // Variable Declarations
    fixed lv_reloadPercentagePerLevel;

    // Variable Initialization
    lv_reloadPercentagePerLevel = 0.05;

    // Implementation
    gv_baseMarineReloadMultiplier[lp_modOwner] = (1.0 + ((5.0 - IntToFixed(lp_modLevel)) * lv_reloadPercentagePerLevel));
    return true;
}

trigger auto_gf_StatsModDamage_Trigger = null;
int auto_gf_StatsModDamage_lp_modLevel;
int auto_gf_StatsModDamage_lp_modOwner;

void gf_StatsModDamage (int lp_modLevel, int lp_modOwner) {
    auto_gf_StatsModDamage_lp_modLevel = lp_modLevel;
    auto_gf_StatsModDamage_lp_modOwner = lp_modOwner;

    if (auto_gf_StatsModDamage_Trigger == null) {
        auto_gf_StatsModDamage_Trigger = TriggerCreate("auto_gf_StatsModDamage_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsModDamage_Trigger, false, false);
}

bool auto_gf_StatsModDamage_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_StatsModDamage_lp_modLevel;
    int lp_modOwner = auto_gf_StatsModDamage_lp_modOwner;

    int init_i;

    int autoADBAFCF5_ae;
    int autoADBAFCF5_ai;

    // Variable Declarations
    string[16] lv_dataDamageName;
    int lv_effectiveModLevel;
    fixed lv_damage;
    int lv_iLocal;
    string lv_attributeString;

    // Variable Initialization
    for (init_i = 0; init_i <= 15; init_i += 1) {
        lv_dataDamageName[init_i] = "";
    }
    lv_effectiveModLevel = (lp_modLevel - 5);
    lv_attributeString = "";

    // Implementation
    lv_dataDamageName[0] = ("P38ScytheGuassPistol");
    lv_dataDamageName[1] = ("GuassRifle");
    lv_dataDamageName[2] = ("XM814HeavyMachineGun");
    lv_dataDamageName[3] = ("C10CanisterRifle");
    lv_dataDamageName[4] = ("Shotgun");
    lv_dataDamageName[5] = ("LaserRifleDamage");
    lv_dataDamageName[6] = ("BarrettM112");
    lv_dataDamageName[7] = ("MP9A2SubMachineGun");
    lv_dataDamageName[8] = "M5PulseRifle";
    lv_dataDamageName[9] = "UA420AssaultRifle";
    lv_dataDamageName[10] = "StingerMK3DamageAllies";
    lv_dataDamageName[11] = "StingerMK3Damage";
    lv_dataDamageName[12] = "Crowbar";
    lv_dataDamageName[13] = "InfernalFlameThrower";
    lv_dataDamageName[14] = "L3GrenadeExplosion";
    lv_dataDamageName[15] = "L3GrenadeExplosionDummy";
    IntLoopBegin(0, 15);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CatalogFieldValueModify(c_gameCatalogEffect, lv_dataDamageName[IntLoopCurrent()], "Amount", lp_modOwner, CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName[IntLoopCurrent()], "Amount", 0), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogEffect, lv_dataDamageName[IntLoopCurrent()], "Amount", lp_modOwner, FixedToString(gf_CalculateModBonusDamage(lv_effectiveModLevel, lv_damage), 2), c_upgradeOperationMultiply);
        autoADBAFCF5_ae = 9;
        autoADBAFCF5_ai = 1;
        lv_iLocal = 0;
        for ( ; ( (autoADBAFCF5_ai >= 0 && lv_iLocal <= autoADBAFCF5_ae) || (autoADBAFCF5_ai <= 0 && lv_iLocal >= autoADBAFCF5_ae) ) ; lv_iLocal += autoADBAFCF5_ai ) {
            CatalogFieldValueModify(c_gameCatalogEffect, lv_dataDamageName[IntLoopCurrent()], "AttributeBonus[" + IntToString(lv_iLocal) + "]", lp_modOwner, CatalogFieldValueGet(c_gameCatalogEffect, lv_dataDamageName[IntLoopCurrent()], "AttributeBonus[" + IntToString(lv_iLocal) + "]", 0), c_upgradeOperationSet);
            CatalogFieldValueModify(c_gameCatalogEffect, lv_dataDamageName[IntLoopCurrent()], "AttributeBonus[" + IntToString(lv_iLocal) + "]", lp_modOwner, FixedToString(gf_CalculateModBonusDamage(lv_effectiveModLevel, lv_damage), 2), c_upgradeOperationMultiply);
        }
    }
    IntLoopEnd();
    lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "InfernalFlameThrower", "Amount", 0));
    if ((UnitGetType(gv_marineHero[lp_modOwner]) == "Flamethrower3")) {
        lv_damage *= ((gv_talentLevel[1][lp_modOwner] / 10.0) + 1.0);
    }

    lv_damage *= gf_CalculateModBonusDamage(lv_effectiveModLevel, lv_damage);
    CatalogFieldValueSet(c_gameCatalogEffect, "InfernalFlameThrower", "Amount", lp_modOwner, FixedToString(lv_damage, 2));
    lv_damage = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", 0));
    if ((UnitGetType(gv_marineHero[lp_modOwner]) == "Pathfinder")) {
        lv_damage += ((gv_talentLevel[3][lp_modOwner] * 6) + (gv_talentLevel[3][lp_modOwner] * 6));
    }

    lv_damage *= gf_CalculateModBonusDamage(lv_effectiveModLevel, lv_damage);
    CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_modOwner, FixedToString(lv_damage, 2));
    return true;
}

fixed gf_CalculateModBonusDamage (int lp_damageModLevel, fixed lp_damage) {
    // Variable Declarations
    fixed lv_damageIncrement;
    fixed lv_damageBonusPercentage;

    // Variable Initialization
    lv_damageBonusPercentage = 5.0;

    // Implementation
    lv_damageIncrement = (1.0 + ((lp_damageModLevel * lv_damageBonusPercentage) / 100.0));
    return lv_damageIncrement;
}

trigger auto_gf_StatsModRange_Trigger = null;
int auto_gf_StatsModRange_lp_modLevel;
int auto_gf_StatsModRange_lp_modOwner;

void gf_StatsModRange (int lp_modLevel, int lp_modOwner) {
    auto_gf_StatsModRange_lp_modLevel = lp_modLevel;
    auto_gf_StatsModRange_lp_modOwner = lp_modOwner;

    if (auto_gf_StatsModRange_Trigger == null) {
        auto_gf_StatsModRange_Trigger = TriggerCreate("auto_gf_StatsModRange_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsModRange_Trigger, false, false);
}

bool auto_gf_StatsModRange_TriggerFunc (bool testConds, bool runActions) {
    int lp_modLevel = auto_gf_StatsModRange_lp_modLevel;
    int lp_modOwner = auto_gf_StatsModRange_lp_modOwner;

    int auto4030AA11_val;

    // Variable Declarations
    int lv_player;
    fixed lv_range;
    string[12] lv_dataWeaponName;
    fixed lv_rangePercentagePerLevel;

    // Variable Initialization
    lv_player = lp_modOwner;
    lv_rangePercentagePerLevel = 0.05;

    // Implementation
    lv_dataWeaponName[0] = "P38ScytheGuassPistol";
    lv_dataWeaponName[1] = "GuassRifle";
    lv_dataWeaponName[2] = "Chaingun";
    lv_dataWeaponName[3] = "SniperRifle";
    lv_dataWeaponName[4] = "Shotgun";
    lv_dataWeaponName[5] = "LaserRifle";
    lv_dataWeaponName[6] = "BarrettM112";
    lv_dataWeaponName[7] = "MP9A2SubMachineGun";
    lv_dataWeaponName[8] = "M5PulseRifle";
    lv_dataWeaponName[9] = "UA420AssaultRifle";
    lv_dataWeaponName[10] = "StingerMK3";
    lv_dataWeaponName[11] = "Flamethrower";
    IntLoopBegin(0, 11);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, lv_dataWeaponName[IntLoopCurrent()], "Range", 0));
        lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
        CatalogFieldValueSet(c_gameCatalogWeapon, lv_dataWeaponName[IntLoopCurrent()], "Range", lv_player, FixedToString(lv_range, c_fixedPrecisionAny));
    }
    IntLoopEnd();
    if ((UnitIsAlive(gv_marineHero[lp_modOwner]) == true) && (UnitGetType(gv_marineHero[lp_modOwner]) == "Flamethrower3")) {
        auto4030AA11_val = gv_talentLevel[1][lp_modOwner];
        if (auto4030AA11_val == 1) {
            lv_range = 5.65;

        }
        else if (auto4030AA11_val == 2) {
            lv_range = 6.65;

        }
        else if (auto4030AA11_val == 3) {
            lv_range = 7.65;

        }
        else {
            lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "Flamethrower", "Range", 0));

        }
    }
    else {
        lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "Flamethrower", "Range", 0));
    }
    lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
    CatalogFieldValueSet(c_gameCatalogWeapon, "Flamethrower", "Range", lv_player, FixedToString(lv_range, c_fixedPrecisionAny));
    if ((UnitIsAlive(gv_marineHero[lp_modOwner]) == true) && (UnitGetType(gv_marineHero[lp_modOwner]) == "Pathfinder")) {
        if ((gv_talentLevel[3][lp_modOwner] == 0) && (gv_talentLevel[5][lp_modOwner] == 0)) {
            lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", 0));
        }
        else if ((((gv_talentLevel[3][lp_modOwner] == 1) && (gv_talentLevel[5][lp_modOwner] == 0)) || ((gv_talentLevel[3][lp_modOwner] == 0) && (gv_talentLevel[5][lp_modOwner] == 1)))) {
            lv_range = 9.0;
        }
        else if ((((gv_talentLevel[3][lp_modOwner] == 2) && (gv_talentLevel[5][lp_modOwner] == 0)) || ((gv_talentLevel[3][lp_modOwner] == 1) && (gv_talentLevel[5][lp_modOwner] == 1)))) {
            lv_range = 12.0;
        }
        else if ((gv_talentLevel[3][lp_modOwner] == 2) && (gv_talentLevel[5][lp_modOwner] == 1)) {
            lv_range = 15.0;
        }
    }
    else {
        lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", 0));
    }
    lv_range *= (1.0 + ((IntToFixed(lp_modLevel) - 5.0) * lv_rangePercentagePerLevel));
    CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lv_player, FixedToString(lv_range, c_fixedPrecisionAny));
    return true;
}

void gf_StatsLoadPlayerWeaponModPoints (int lp_player) {
    // Variable Declarations
    int lv_temp;

    // Variable Initialization

    // Implementation
    gv_playerWeaponsMod1[lp_player] = gv_playerBankData[9][lp_player];
    lv_temp = (gv_playerWeaponsMod1[lp_player] / 100000);
    gv_playerWeaponsMod1[lp_player] -= (lv_temp * 100000);
    gv_statsModProperties[1][lp_player] = (gv_playerWeaponsMod1[lp_player] / 10000);
    gv_playerWeaponsMod1[lp_player] -= (gv_statsModProperties[1][lp_player] * 10000);
    gv_statsModProperties[2][lp_player] = (gv_playerWeaponsMod1[lp_player] / 1000);
    gv_playerWeaponsMod1[lp_player] -= (gv_statsModProperties[2][lp_player] * 1000);
    gv_statsModProperties[3][lp_player] = (gv_playerWeaponsMod1[lp_player] / 100);
    gv_playerWeaponsMod1[lp_player] -= (gv_statsModProperties[3][lp_player] * 100);
    gv_statsModProperties[4][lp_player] = (gv_playerWeaponsMod1[lp_player] / 10);
    gv_playerWeaponsMod1[lp_player] -= (gv_statsModProperties[4][lp_player] * 10);
    gv_statsModProperties[5][lp_player] = (gv_playerWeaponsMod1[lp_player] / 1);
    gv_playerWeaponsMod1[lp_player] -= (gv_statsModProperties[5][lp_player] * 1);
    gv_playerWeaponsMod2[lp_player] = gv_playerBankData[10][lp_player];
    lv_temp = (gv_playerWeaponsMod2[lp_player] / 100);
    gv_playerWeaponsMod2[lp_player] -= (lv_temp * 100);
    gv_statsModProperties[7][lp_player] = (gv_playerWeaponsMod2[lp_player] / 10);
    gv_playerWeaponsMod2[lp_player] -= (gv_statsModProperties[7][lp_player] * 10);
    gv_statsModProperties[6][lp_player] = (gv_playerWeaponsMod2[lp_player] / 1);
    gv_playerWeaponsMod1[lp_player] = gv_playerBankData[9][lp_player];
    gv_playerWeaponsMod2[lp_player] = gv_playerBankData[10][lp_player];
    IntLoopBegin(1, gv_numberofWeaponMods);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gf_StatsInitializeWeaponMods(IntLoopCurrent(), lp_player);
    }
    IntLoopEnd();
}

void gf_StatsStorePlayerWeaponModPoints (int lp_playerNo) {
    // Implementation
    gv_playerWeaponsMod1[lp_playerNo] = 0;
    gv_playerWeaponsMod2[lp_playerNo] = (ModI(gv_playerWeaponsMod2[lp_playerNo], 10000) - ModI(gv_playerWeaponsMod2[lp_playerNo], 100));
    IntLoopBegin(1, gv_numberofWeaponMods);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_statsModProperties[IntLoopCurrent()][lp_playerNo] > 9)) {
            gv_statsModProperties[IntLoopCurrent()][lp_playerNo] = 9;
        }
        else if ((gv_statsModProperties[IntLoopCurrent()][lp_playerNo] < 1)) {
            gv_statsModProperties[IntLoopCurrent()][lp_playerNo] = 1;
        }
    }
    IntLoopEnd();
    gv_playerWeaponsMod1[lp_playerNo] += (10000 * gv_statsModProperties[1][lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (1000 * gv_statsModProperties[2][lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (100 * gv_statsModProperties[3][lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (10 * gv_statsModProperties[4][lp_playerNo]);
    gv_playerWeaponsMod1[lp_playerNo] += (1 * gv_statsModProperties[5][lp_playerNo]);
    gv_playerWeaponsMod2[lp_playerNo] += (10 * gv_statsModProperties[7][lp_playerNo]);
    gv_playerWeaponsMod2[lp_playerNo] += (1 * gv_statsModProperties[6][lp_playerNo]);
    gv_playerWeaponsMod2[lp_playerNo] += 10000;
}

void gf_StatsModPointRecalculate (int lp_playerNo) {
    // Variable Declarations
    int[gv_numberofWeaponMods + 1] lv_wModPoints;
    int lv_iLocal;

    // Variable Initialization

    // Implementation
    gv_modTotalPointsPositive[lp_playerNo] = 0;
    gv_modTotalPointsNegative[lp_playerNo] = 0;
    IntLoopBegin(1, gv_numberofWeaponMods);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_iLocal = (gv_statsModProperties[IntLoopCurrent()][lp_playerNo] - 5);
        if ((lv_iLocal > 0)) {
            gv_modTotalPointsPositive[lp_playerNo] += lv_iLocal;
        }
        else if ((lv_iLocal < 0)) {
            gv_modTotalPointsNegative[lp_playerNo] -= lv_iLocal;
        }
    }
    IntLoopEnd();
    gv_wModTotalPointsLeft[lp_playerNo] = (gv_modTotalPointsNegative[lp_playerNo] - gv_modTotalPointsPositive[lp_playerNo]);
}

int gf_StatsGetMaxModPoints (int lp_playerNo) {
    // Variable Declarations
    int lv_modPoints;

    // Variable Initialization
    lv_modPoints = (ModI(gv_playerWeaponsMod2[lp_playerNo], 10000) / 100);

    // Implementation
    return lv_modPoints;
}

trigger auto_gf_StatsInitializeWeaponMods_Trigger = null;
int auto_gf_StatsInitializeWeaponMods_lp_modIndex;
int auto_gf_StatsInitializeWeaponMods_lp_playerNo;

void gf_StatsInitializeWeaponMods (int lp_modIndex, int lp_playerNo) {
    auto_gf_StatsInitializeWeaponMods_lp_modIndex = lp_modIndex;
    auto_gf_StatsInitializeWeaponMods_lp_playerNo = lp_playerNo;

    if (auto_gf_StatsInitializeWeaponMods_Trigger == null) {
        auto_gf_StatsInitializeWeaponMods_Trigger = TriggerCreate("auto_gf_StatsInitializeWeaponMods_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsInitializeWeaponMods_Trigger, false, false);
}

bool auto_gf_StatsInitializeWeaponMods_TriggerFunc (bool testConds, bool runActions) {
    int lp_modIndex = auto_gf_StatsInitializeWeaponMods_lp_modIndex;
    int lp_playerNo = auto_gf_StatsInitializeWeaponMods_lp_playerNo;

    int auto5BF6B05B_val;

    // Implementation
    auto5BF6B05B_val = lp_modIndex;
    if (auto5BF6B05B_val == 1) {
        gf_StatsModRange(gv_statsModProperties[1][lp_playerNo], lp_playerNo);
    }
    else if (auto5BF6B05B_val == 2) {
        gf_StatsModDamage(gv_statsModProperties[2][lp_playerNo], lp_playerNo);
    }
    else if (auto5BF6B05B_val == 3) {
        gf_StatsModReloadTime(gv_statsModProperties[3][lp_playerNo], lp_playerNo);
    }
    else if (auto5BF6B05B_val == 4) {
        gf_StatsModSwitchTime(gv_statsModProperties[4][lp_playerNo], lp_playerNo);
    }
    else if (auto5BF6B05B_val == 5) {
        gf_StatsModAttackSpeed(gv_statsModProperties[5][lp_playerNo], lp_playerNo);
    }
    else if (auto5BF6B05B_val == 6) {
        gf_StatsModWeightPoint(gv_statsModProperties[6][lp_playerNo], lp_playerNo);
    }
    else if (auto5BF6B05B_val == 7) {
        gf_StatsModSplashRadius(gv_statsModProperties[7][lp_playerNo], lp_playerNo);
    }
    else {
    }
    return true;
}

trigger auto_gf_StatsUpdateWeaponsModText_Trigger = null;
int auto_gf_StatsUpdateWeaponsModText_lp_modSlot;
int auto_gf_StatsUpdateWeaponsModText_lp_playerNo;

void gf_StatsUpdateWeaponsModText (int lp_modSlot, int lp_playerNo) {
    auto_gf_StatsUpdateWeaponsModText_lp_modSlot = lp_modSlot;
    auto_gf_StatsUpdateWeaponsModText_lp_playerNo = lp_playerNo;

    if (auto_gf_StatsUpdateWeaponsModText_Trigger == null) {
        auto_gf_StatsUpdateWeaponsModText_Trigger = TriggerCreate("auto_gf_StatsUpdateWeaponsModText_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsUpdateWeaponsModText_Trigger, false, false);
}

bool auto_gf_StatsUpdateWeaponsModText_TriggerFunc (bool testConds, bool runActions) {
    int lp_modSlot = auto_gf_StatsUpdateWeaponsModText_lp_modSlot;
    int lp_playerNo = auto_gf_StatsUpdateWeaponsModText_lp_playerNo;

    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsLabels[lp_modSlot][lp_playerNo], IntToText((gv_statsModProperties[lp_modSlot][lp_playerNo] - 5)), PlayerGroupAll());
    if ((((gv_statsModProperties[lp_modSlot][lp_playerNo] >= 2) && (gv_statsModProperties[lp_modSlot][lp_playerNo] <= 8)))) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[lp_modSlot][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[lp_modSlot][lp_playerNo], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_wModPlayerIncreButton[lp_modSlot][lp_playerNo], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_wModPlayerDecreButton[lp_modSlot][lp_playerNo], PlayerGroupAll(), true);
    }
    else if ((gv_statsModProperties[lp_modSlot][lp_playerNo] == 9)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerIncreImage[lp_modSlot][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_wModPlayerIncreButton[lp_modSlot][lp_playerNo], PlayerGroupAll(), false);
    }
    else if ((gv_statsModProperties[lp_modSlot][lp_playerNo] == 1)) {
        libNtve_gf_SetDialogItemImage(gv_wModPlayerDecreImage[lp_modSlot][lp_playerNo], "Assets\\Textures\\black.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_wModPlayerDecreButton[lp_modSlot][lp_playerNo], PlayerGroupAll(), false);
    }
    return true;
}

void gf_StatsUpdateAllWeaponsModText (int lp_playerNo) {
    // Implementation
    gf_StatsUpdateWeaponsModText(1, lp_playerNo);
    gf_StatsUpdateWeaponsModText(2, lp_playerNo);
    gf_StatsUpdateWeaponsModText(3, lp_playerNo);
    gf_StatsUpdateWeaponsModText(4, lp_playerNo);
    gf_StatsUpdateWeaponsModText(5, lp_playerNo);
    gf_StatsUpdateWeaponsModText(6, lp_playerNo);
    gf_StatsUpdateWeaponsModText(7, lp_playerNo);
    gf_ModUpdateUnlockedModPointsText(lp_playerNo);
    gf_StatsUpdateAvailableWModPointsText(lp_playerNo);
}

void gf_ModUpdateUnlockedModPointsText (int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsWeaponModPointsUnlockedLabel[lp_player], (StringExternal("Param/Value/8C8B3E3E") + IntToText(gf_StatsGetMaxModPoints(lp_player))), PlayerGroupAll());
}

void gf_StatsUpdateAvailableWModPointsText (int lp_playerNo) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_wModWeaponPointsAvailableLabel[lp_playerNo], (StringExternal("Param/Value/970215F7") + IntToText(gv_wModTotalPointsLeft[lp_playerNo])), PlayerGroupAll());
}

void gf_StatsUpdateAvailableStatsText (int lp_triggeringPlayer) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatAvailableLabel[lp_triggeringPlayer], (StringExternal("Param/Value/6ECF4D5C") + IntToText(gv_statsTotalStats[lp_triggeringPlayer])), PlayerGroupAll());
}

int gf_GetMedalStats (int lp_player) {
    // Variable Declarations
    int lv_totalStats;

    // Variable Initialization

    // Implementation
    if ((gv_playerBankData[11][lp_player] >= 150)) {
        lv_totalStats += 1;
    }

    if ((gv_playerBankData[20][lp_player] >= 150)) {
        lv_totalStats += 1;
    }

    IntLoopBegin(12, 19);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerBankData[IntLoopCurrent()][lp_player] >= 30)) {
            lv_totalStats += 1;
        }

    }
    IntLoopEnd();
    return lv_totalStats;
}

int gf_GetCurrentAllocatedStats (int lp_player) {
    // Implementation
    return (gv_statsStrength1[lp_player] + gv_statsEndurance2[lp_player] + gv_statsAgility3[lp_player] + gv_statsPerception4[lp_player] + gv_statsIntelligence5[lp_player]);
}

void gf_StatsUpdateAllStatsText (int lp_playerNo) {
    // Implementation
    gf_StatsUpdateStatText(gv_statsStrength1[lp_playerNo], 1, lp_playerNo);
    gf_StatsUpdateStatText(gv_statsEndurance2[lp_playerNo], 2, lp_playerNo);
    gf_StatsUpdateStatText(gv_statsAgility3[lp_playerNo], 3, lp_playerNo);
    gf_StatsUpdateStatText(gv_statsPerception4[lp_playerNo], 4, lp_playerNo);
    gf_StatsUpdateStatText(gv_statsIntelligence5[lp_playerNo], 5, lp_playerNo);
    gf_StatsUpdateAvailableStatsText(lp_playerNo);
    libNtve_gf_SetDialogItemText(gv_statsPlayerLivesLeft[lp_playerNo], IntToText(gv_playerLives[lp_playerNo]), PlayerGroupAll());
}

void gf_StatsStorePlayerStats (int lp_triggeringPlayer) {
    // Implementation
    gv_playerStats[lp_triggeringPlayer] = 100000;
    gv_statsStrength1[lp_triggeringPlayer] = libNtve_gf_ArithmeticIntClamp(gv_statsStrength1[lp_triggeringPlayer], 0, 9);
    gv_statsEndurance2[lp_triggeringPlayer] = libNtve_gf_ArithmeticIntClamp(gv_statsEndurance2[lp_triggeringPlayer], 0, 9);
    gv_statsAgility3[lp_triggeringPlayer] = libNtve_gf_ArithmeticIntClamp(gv_statsAgility3[lp_triggeringPlayer], 0, 9);
    gv_statsPerception4[lp_triggeringPlayer] = libNtve_gf_ArithmeticIntClamp(gv_statsPerception4[lp_triggeringPlayer], 0, 9);
    gv_statsIntelligence5[lp_triggeringPlayer] = libNtve_gf_ArithmeticIntClamp(gv_statsIntelligence5[lp_triggeringPlayer], 0, 9);
    gv_playerStats[lp_triggeringPlayer] += (10000 * gv_statsStrength1[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (1000 * gv_statsEndurance2[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (100 * gv_statsAgility3[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (10 * gv_statsPerception4[lp_triggeringPlayer]);
    gv_playerStats[lp_triggeringPlayer] += (1 * gv_statsIntelligence5[lp_triggeringPlayer]);
}

void gf_StatsLoadPlayerStats (int lp_player) {
    // Variable Declarations
    int lv_temp;

    // Variable Initialization

    // Implementation
    gv_playerStats[lp_player] = gv_playerBankData[6][lp_player];
    lv_temp = (gv_playerStats[lp_player] / 100000);
    gv_playerStats[lp_player] -= (lv_temp * 100000);
    gv_statsStrength1[lp_player] = (gv_playerStats[lp_player] / 10000);
    gv_playerStats[lp_player] -= (gv_statsStrength1[lp_player] * 10000);
    gv_statsEndurance2[lp_player] = (gv_playerStats[lp_player] / 1000);
    gv_playerStats[lp_player] -= (gv_statsEndurance2[lp_player] * 1000);
    gv_statsAgility3[lp_player] = (gv_playerStats[lp_player] / 100);
    gv_playerStats[lp_player] -= (gv_statsAgility3[lp_player] * 100);
    gv_statsPerception4[lp_player] = (gv_playerStats[lp_player] / 10);
    gv_playerStats[lp_player] -= (gv_statsPerception4[lp_player] * 10);
    gv_statsIntelligence5[lp_player] = (gv_playerStats[lp_player] / 1);
    gv_playerStats[lp_player] -= (gv_statsIntelligence5[lp_player] * 1);
    libNtve_gf_SetUpgradeLevelForPlayer(lp_player, "PerceptionCriticalStrike", gv_statsPerception4[lp_player]);
}

void gf_StatsUpdateHeroImage (int lp_triggeringPlayer) {
    // Implementation
    libNtve_gf_SetDialogItemImage(gv_statsPlayerHeroImage[lp_triggeringPlayer], UserDataGetImagePath("Classes", gv_playerClass[lp_triggeringPlayer], "Class Image", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_statsPlayerStatsStatsHeroImage[lp_triggeringPlayer], UserDataGetImagePath("Classes", gv_playerClass[lp_triggeringPlayer], "Class Image", 1), PlayerGroupAll());
}

void gf_StatsSetBehaviors (int lp_triggeringPlayer) {
    // Implementation
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "StrengthStat", lp_triggeringPlayer, gv_statsStrength1[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "EnduranceStat", lp_triggeringPlayer, gv_statsEndurance2[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "AgilityStat", lp_triggeringPlayer, gv_statsAgility3[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "PerceptionStat", lp_triggeringPlayer, gv_statsPerception4[lp_triggeringPlayer]);
    UnitBehaviorAddPlayer(gv_marineHero[lp_triggeringPlayer], "IntelligenceStat", lp_triggeringPlayer, gv_statsIntelligence5[lp_triggeringPlayer]);
    UnitSetPropertyFixed(gv_marineHero[lp_triggeringPlayer], c_unitPropLifePercent, 100.0);
}

bool gf_StatsStatsChecking (int lp_playerNo) {
    // Variable Declarations
    int lv_stats;
    int lv_totalStats;
    int lv_i;
    int lv_rank;

    // Variable Initialization
    lv_stats = gv_playerBankData[6][lp_playerNo];
    lv_rank = 1;

    // Implementation
    lv_i = (lv_stats / 100000);
    IntLoopBegin(1, 6);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_stats = ModI(lv_stats, (lv_i * PowI(10.0, (7 - IntLoopCurrent()))));
        lv_i = (lv_stats / PowI(10.0, (6 - IntLoopCurrent())));
        lv_totalStats += lv_i;
    }
    IntLoopEnd();
    while ((lv_rank < 17) && (gv_playerXP[lp_playerNo] >= UserDataGetInt("Ranks", UserDataInstance("Ranks", (lv_rank + 1)), "XP Required", 1))) {
        lv_rank += 1;
    }
    if ((lv_totalStats <= ((lv_rank * 2) + gf_GetMedalStats(lp_playerNo)))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_StatsUpdateStatText (int lp_stat, int lp_statSlot, int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_statsPlayerStatLabel[lp_statSlot][lp_player], IntToText(lp_stat), PlayerGroupAll());
    if (((lp_stat >= 1) && (lp_stat <= 8))) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[lp_statSlot][lp_player], "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[lp_statSlot][lp_player], "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_statsPlayerIncreButton[lp_statSlot][lp_player], PlayerGroupAll(), true);
        DialogControlSetEnabled(gv_statsPlayerDecreButton[lp_statSlot][lp_player], PlayerGroupAll(), true);
    }
    else if ((lp_stat == 9)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerIncreImage[lp_statSlot][lp_player], "Assets\\Textures\\black.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_statsPlayerIncreButton[lp_statSlot][lp_player], PlayerGroupAll(), false);
    }
    else if ((lp_stat == 0)) {
        libNtve_gf_SetDialogItemImage(gv_statsPlayerDecreImage[lp_statSlot][lp_player], "Assets\\Textures\\black.dds", PlayerGroupAll());
        DialogControlSetEnabled(gv_statsPlayerDecreButton[lp_statSlot][lp_player], PlayerGroupAll(), false);
    }
}

trigger auto_gf_StatsAddStat_Trigger = null;
int auto_gf_StatsAddStat_lp_playerNo;
int auto_gf_StatsAddStat_lp_statSlot;
string auto_gf_StatsAddStat_lp_statBehavior;

void gf_StatsAddStat (int lp_playerNo, int lp_statSlot, string lp_statBehavior) {
    auto_gf_StatsAddStat_lp_playerNo = lp_playerNo;
    auto_gf_StatsAddStat_lp_statSlot = lp_statSlot;
    auto_gf_StatsAddStat_lp_statBehavior = lp_statBehavior;

    if (auto_gf_StatsAddStat_Trigger == null) {
        auto_gf_StatsAddStat_Trigger = TriggerCreate("auto_gf_StatsAddStat_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsAddStat_Trigger, false, false);
}

bool auto_gf_StatsAddStat_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_StatsAddStat_lp_playerNo;
    int lp_statSlot = auto_gf_StatsAddStat_lp_statSlot;
    string lp_statBehavior = auto_gf_StatsAddStat_lp_statBehavior;

    int auto2F1E48BB_val;

    // Implementation
    auto2F1E48BB_val = lp_statSlot;
    if (auto2F1E48BB_val == 1) {
        gv_statsStrength1[lp_playerNo] += 1;

    }
    else if (auto2F1E48BB_val == 2) {
        gv_statsEndurance2[lp_playerNo] += 1;

    }
    else if (auto2F1E48BB_val == 3) {
        gv_statsAgility3[lp_playerNo] += 1;

    }
    else if (auto2F1E48BB_val == 4) {
        gv_statsPerception4[lp_playerNo] += 1;

    }
    else if (auto2F1E48BB_val == 5) {
        gv_statsIntelligence5[lp_playerNo] += 1;

    }
    else {
    }
    UnitBehaviorAddPlayer(gv_marineHero[lp_playerNo], lp_statBehavior, lp_playerNo, 1);
    if ((lp_statBehavior == "EnduranceStat")) {
        gf_EquipmentUpdateMarineWeight(lp_playerNo);
    }

    if ((lp_statBehavior == "PerceptionStat")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_playerNo, "PerceptionCriticalStrike", gv_statsPerception4[lp_playerNo]);
    }

    return true;
}

trigger auto_gf_StatsRemoveStat_Trigger = null;
int auto_gf_StatsRemoveStat_lp_playerNo;
int auto_gf_StatsRemoveStat_lp_statSlot;
string auto_gf_StatsRemoveStat_lp_statBehavior;

void gf_StatsRemoveStat (int lp_playerNo, int lp_statSlot, string lp_statBehavior) {
    auto_gf_StatsRemoveStat_lp_playerNo = lp_playerNo;
    auto_gf_StatsRemoveStat_lp_statSlot = lp_statSlot;
    auto_gf_StatsRemoveStat_lp_statBehavior = lp_statBehavior;

    if (auto_gf_StatsRemoveStat_Trigger == null) {
        auto_gf_StatsRemoveStat_Trigger = TriggerCreate("auto_gf_StatsRemoveStat_TriggerFunc");
    }

    TriggerExecute(auto_gf_StatsRemoveStat_Trigger, false, false);
}

bool auto_gf_StatsRemoveStat_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerNo = auto_gf_StatsRemoveStat_lp_playerNo;
    int lp_statSlot = auto_gf_StatsRemoveStat_lp_statSlot;
    string lp_statBehavior = auto_gf_StatsRemoveStat_lp_statBehavior;

    int autoD9185929_val;

    // Implementation
    autoD9185929_val = lp_statSlot;
    if (autoD9185929_val == 1) {
        gv_statsStrength1[lp_playerNo] -= 1;

    }
    else if (autoD9185929_val == 2) {
        gv_statsEndurance2[lp_playerNo] -= 1;

    }
    else if (autoD9185929_val == 3) {
        gv_statsAgility3[lp_playerNo] -= 1;

    }
    else if (autoD9185929_val == 4) {
        gv_statsPerception4[lp_playerNo] -= 1;

    }
    else if (autoD9185929_val == 5) {
        gv_statsIntelligence5[lp_playerNo] -= 1;

    }
    else {
    }
    UnitBehaviorRemovePlayer(gv_marineHero[lp_playerNo], lp_statBehavior, lp_playerNo, 1);
    if ((lp_statBehavior == "EnduranceStat")) {
        gf_EquipmentUpdateMarineWeight(lp_playerNo);
    }

    if ((lp_statBehavior == "PerceptionStat")) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_playerNo, "PerceptionCriticalStrike", gv_statsPerception4[lp_playerNo]);
    }

    return true;
}

void gf_CreateStatModPanels (int lp_player, int lp_statIndex, int lp_xOffset, int lp_yOffset) {
    // Variable Declarations
    int lv_tempDialogFrame;

    // Variable Initialization
    lv_tempDialogFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_statsPlayerStatsPanel[lp_player], c_triggerControlTypePanel, "PlayerDetails/StatsButtonContainer");
    lv_tempDialogFrame = DialogControlLastCreated();
    DialogControlSetPosition(lv_tempDialogFrame, PlayerGroupAll(), c_anchorTopLeft, lp_xOffset, lp_yOffset);
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "StatDecreaseImage");
    gv_statsPlayerDecreImage[lp_statIndex][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "StatDecreaseButton");
    gv_statsPlayerDecreButton[lp_statIndex][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_statsPlayerDecreButton[lp_statIndex][lp_player], (StringExternal("Param/Value/26E60809") + UserDataGetText("StatData", UserDataInstance("StatData", lp_statIndex), "Name", 1)), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "StatImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("StatData", UserDataInstance("StatData", lp_statIndex), "Icon Image", 1), PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), UserDataGetText("StatData", UserDataInstance("StatData", lp_statIndex), "Tooltip", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "StatAmountLabel");
    gv_statsPlayerStatLabel[lp_statIndex][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "StatIncreaseImage");
    gv_statsPlayerIncreImage[lp_statIndex][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "StatIncreaseButton");
    gv_statsPlayerIncreButton[lp_statIndex][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_statsPlayerIncreButton[lp_statIndex][lp_player], (StringExternal("Param/Value/95849F48") + UserDataGetText("StatData", UserDataInstance("StatData", lp_statIndex), "Name", 1)), PlayerGroupAll());
}

void gf_CreateWeaponModPanels (int lp_player, int lp_statIndex, int lp_xOffset, int lp_yOffset) {
    // Variable Declarations
    int lv_tempDialogFrame;

    // Variable Initialization
    lv_tempDialogFrame = c_invalidDialogControlId;

    // Implementation
    DialogControlCreateInPanelFromTemplate(gv_statsWeaponModPanel[lp_player], c_triggerControlTypePanel, "PlayerDetails/ModsButtonContainer");
    lv_tempDialogFrame = DialogControlLastCreated();
    DialogControlSetPosition(lv_tempDialogFrame, PlayerGroupAll(), c_anchorTopLeft, lp_xOffset, lp_yOffset);
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "ModDecreaseImage");
    gv_wModPlayerDecreImage[lp_statIndex][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "ModDecreaseButton");
    gv_wModPlayerDecreButton[lp_statIndex][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_wModPlayerDecreButton[lp_statIndex][lp_player], (StringExternal("Param/Value/3DB46265") + UserDataGetText("WeaponModData", UserDataInstance("WeaponModData", lp_statIndex), "Arrow Tooltip", 1)), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "ModImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("WeaponModData", UserDataInstance("WeaponModData", lp_statIndex), "Icon Image", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "ModLevelLabel");
    gv_wModWeaponPointsLabels[lp_statIndex][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "ModIncreaseImage");
    gv_wModPlayerIncreImage[lp_statIndex][lp_player] = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "ModIncreaseButton");
    gv_wModPlayerIncreButton[lp_statIndex][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_wModPlayerIncreButton[lp_statIndex][lp_player], (StringExternal("Param/Value/7DF35ACF") + UserDataGetText("WeaponModData", UserDataInstance("WeaponModData", lp_statIndex), "Arrow Tooltip", 1)), PlayerGroupAll());
}

bool gf_AttackerbehindTarget (unit lp_attacker, unit lp_target, fixed lp_rearAngle) {
    // Variable Declarations
    fixed lv_angleofAttackedUnit;
    fixed lv_angleofAttackingUnit;
    fixed lv_correctedAngleofAttackingUnit;

    // Variable Initialization
    lv_angleofAttackedUnit = UnitGetFacing(lp_target);
    lv_angleofAttackingUnit = AngleBetweenPoints(UnitGetPosition(lp_target), UnitGetPosition(lp_attacker));

    // Implementation
    if ((lv_angleofAttackedUnit < 0.0)) {
        lv_angleofAttackedUnit += 360.0;
    }
    if ((lv_angleofAttackingUnit < 0.0)) {
        lv_angleofAttackingUnit += 360.0;
    }
    lv_correctedAngleofAttackingUnit = (lv_angleofAttackingUnit - lv_angleofAttackedUnit);
    if ((lv_correctedAngleofAttackingUnit < 0.0)) {
        lv_correctedAngleofAttackingUnit += 360.0;
    }
    if ((lv_correctedAngleofAttackingUnit >= (180  - (lv_correctedAngleofAttackingUnit/2))) && (lv_correctedAngleofAttackingUnit <= (180  + (lv_correctedAngleofAttackingUnit/2)))) {
        return true;
    }
    else {
        return false;
    }
}

void gf_RestoreLeaverControl () {
    playergroup auto11CA03DA_g;
    int auto11CA03DA_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto11CA03DA_g = gv_activePlayers; 
    auto11CA03DA_p = 1;
    for ( ; auto11CA03DA_p <= PlayerGroupCount(auto11CA03DA_g) ; auto11CA03DA_p += BoolToInt(lv_playerIndex == PlayerGroupPlayer(auto11CA03DA_g, auto11CA03DA_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto11CA03DA_g, auto11CA03DA_p);
        PlayerGroupLoopBegin(gv_leavers);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((gv_playerKarma[lv_playerIndex] >= 1525)) {
                libNtve_gf_SetAlliance(lv_playerIndex, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
            }
            else {
                libNtve_gf_SetAlliance(lv_playerIndex, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVision);
            }
        }
        PlayerGroupLoopEnd();
    }
}

void gf_SetCombatKnifeDamage (int lp_triggeringPlayer) {
    // Variable Declarations
    fixed lv_combatKnifeDamage;

    // Variable Initialization
    lv_combatKnifeDamage = 15.0;

    // Implementation
    lv_combatKnifeDamage += ((IntToFixed(gv_playerRank[lp_triggeringPlayer]) - 1.0) * 0.5);
    CatalogFieldValueSet(c_gameCatalogEffect, "CombatKnifeDamage", "Amount", lp_triggeringPlayer, FixedToString(lv_combatKnifeDamage, c_fixedPrecisionAny));
}

fixed gf_WeaponsProfReloadTimeFactor (int lp_triggPlayer) {
    // Variable Declarations
    fixed lv_abilityLevel;

    // Variable Initialization
    lv_abilityLevel = IntToFixed(gv_talentLevel[3][lp_triggPlayer]);

    // Implementation
    if (((lv_abilityLevel > 0.0) && (UnitGetType(gv_marineHero[lp_triggPlayer]) == "Rifleman"))) {
        return (gv_baseMarineReloadMultiplier[lp_triggPlayer] - ((lv_abilityLevel * 0.175) * gv_baseMarineReloadMultiplier[lp_triggPlayer]));
    }
    else {
        return gv_baseMarineReloadMultiplier[lp_triggPlayer];
    }
}

trigger auto_gf_ForwardObserverLaunchSound_Trigger = null;
int auto_gf_ForwardObserverLaunchSound_lp_forwardObserverOwner;
point auto_gf_ForwardObserverLaunchSound_lp_point;
int auto_gf_ForwardObserverLaunchSound_lp_shellMode;

void gf_ForwardObserverLaunchSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode) {
    auto_gf_ForwardObserverLaunchSound_lp_forwardObserverOwner = lp_forwardObserverOwner;
    auto_gf_ForwardObserverLaunchSound_lp_point = lp_point;
    auto_gf_ForwardObserverLaunchSound_lp_shellMode = lp_shellMode;

    if (auto_gf_ForwardObserverLaunchSound_Trigger == null) {
        auto_gf_ForwardObserverLaunchSound_Trigger = TriggerCreate("auto_gf_ForwardObserverLaunchSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_ForwardObserverLaunchSound_Trigger, false, false);
}

bool auto_gf_ForwardObserverLaunchSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_forwardObserverOwner = auto_gf_ForwardObserverLaunchSound_lp_forwardObserverOwner;
    point lp_point = auto_gf_ForwardObserverLaunchSound_lp_point;
    int lp_shellMode = auto_gf_ForwardObserverLaunchSound_lp_shellMode;

    // Variable Declarations
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;

    // Variable Initialization

    // Implementation
    if ((lp_shellMode == 1)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 2)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 3)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    Wait(0.5, c_timeGame);
    IntLoopBegin(1, lv_shellLimit);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitCreateEffectPoint(gv_marineHero[lp_forwardObserverOwner], "ForwardObserverLaunch", lp_point);
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    IntLoopEnd();
    return true;
}

trigger auto_gf_ForwardObserverShellFlightSound_Trigger = null;
int auto_gf_ForwardObserverShellFlightSound_lp_forwardObserverOwner;
point auto_gf_ForwardObserverShellFlightSound_lp_point;
int auto_gf_ForwardObserverShellFlightSound_lp_shellMode;

void gf_ForwardObserverShellFlightSound (int lp_forwardObserverOwner, point lp_point, int lp_shellMode) {
    auto_gf_ForwardObserverShellFlightSound_lp_forwardObserverOwner = lp_forwardObserverOwner;
    auto_gf_ForwardObserverShellFlightSound_lp_point = lp_point;
    auto_gf_ForwardObserverShellFlightSound_lp_shellMode = lp_shellMode;

    if (auto_gf_ForwardObserverShellFlightSound_Trigger == null) {
        auto_gf_ForwardObserverShellFlightSound_Trigger = TriggerCreate("auto_gf_ForwardObserverShellFlightSound_TriggerFunc");
    }

    TriggerExecute(auto_gf_ForwardObserverShellFlightSound_Trigger, false, false);
}

bool auto_gf_ForwardObserverShellFlightSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_forwardObserverOwner = auto_gf_ForwardObserverShellFlightSound_lp_forwardObserverOwner;
    point lp_point = auto_gf_ForwardObserverShellFlightSound_lp_point;
    int lp_shellMode = auto_gf_ForwardObserverShellFlightSound_lp_shellMode;

    // Variable Declarations
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;
    fixed lv_startTime;

    // Variable Initialization
    lv_startTime = (gv_barrageTime[lp_forwardObserverOwner] - 4.5);

    // Implementation
    if ((lp_shellMode == 1)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 2)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    else if ((lp_shellMode == 3)) {
        lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lp_forwardObserverOwner);
    }
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    if ((lv_startTime < 0.0)) {
        lv_startTime = 0.0;
    }

    Wait(lv_startTime, c_timeGame);
    IntLoopBegin(1, lv_shellLimit);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitCreateEffectPoint(gv_marineHero[lp_forwardObserverOwner], "ForwardObserverShellFlight", lp_point);
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    IntLoopEnd();
    return true;
}

void gf_ForwardObserverCreateShellDialog (int lp_forwardObserverOwner) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = lp_forwardObserverOwner;

    // Implementation
    DialogCreate(190, 250, c_anchorBottom, 734, -17, false);
    DialogSetImage(DialogLastCreated(), "Assets\\Textures\\black.dds");
    gv_shellDialog[lp_forwardObserverOwner] = DialogLastCreated();
    libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, 28, 28, StringExternal("Param/Value/C32F4DC4"), "Assets\\Textures\\btn-techupgrade-terran-extramines.dds", c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
    libNtve_gf_CreateDialogItemLabel(gv_shellDialog[lp_forwardObserverOwner], 200, 50, c_anchorTopLeft, 70, 33, IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountStart", lv_player)), Color(100,100,100), false, 2.0);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Kicker_Zerg", PlayerGroupSingle(lv_player));
    gv_shellCounter[0][lp_forwardObserverOwner] = DialogControlLastCreated();
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Subtract Offsets", 1), UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Subtract Offsets", 2), StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_left.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Subtract Offsets", 1), UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Subtract Offsets", 2), StringExternal("Param/Value/0BC8506B"), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 100.0);
        gv_shellDecre[IntLoopCurrent()][lp_forwardObserverOwner] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Image Offsets", 1), UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Image Offsets", 2), UserDataGetText("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Image Tooltip", 1), UserDataGetImagePath("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Image", 1), c_triggerImageTypeNormal, false, Color(100,100,100), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemImage(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Add Offsets", 1), UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Add Offsets", 2), StringToText(""), "Assets\\Textures\\ui_research_frame_available_arrow_right.dds", c_triggerImageTypeNormal, false, Color(50.20, 100.00, 100.00), c_triggerBlendModeNormal);
        libNtve_gf_CreateDialogItemButton(gv_shellDialog[lp_forwardObserverOwner], 30, 30, c_anchorTopLeft, UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Add Offsets", 1), UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Add Offsets", 2), StringExternal("Param/Value/546EB49A"), StringToText(""), "");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupSingle(lv_player), 0.0, 100.0);
        gv_shellIncre[IntLoopCurrent()][lp_forwardObserverOwner] = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_shellDialog[lp_forwardObserverOwner], 200, 50, c_anchorTopLeft, UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Label Offsets", 1), UserDataGetInt("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Label Offsets", 2), IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, UserDataGetGameLink("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", IntLoopCurrent()), "Ability", 1), "Cost[" + IntToString(0) + "].Charge.CountUse", lv_player)), Color(100,100,100), false, 2.0);
        libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Kicker_Zerg", PlayerGroupSingle(lv_player));
        gv_shellCounter[IntLoopCurrent()][lp_forwardObserverOwner] = DialogControlLastCreated();
    }
    IntLoopEnd();
    DialogSetVisible(gv_shellDialog[lv_player], PlayerGroupAll(), false);
    DialogSetVisible(gv_shellDialog[lp_forwardObserverOwner], PlayerGroupSingle(lv_player), true);
}

void gf_ArtilleryCamaraShake (point lp_impactPoint) {
    // Implementation
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lp_impactPoint) <= 3.0)) {
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.8, 2.0, 100.0, 1.2);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lp_impactPoint) <= 5.0)) {
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.4, 2.0, 100.0, 1.0);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lp_impactPoint) <= 7.0)) {
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.15, 2.0, 100.0, 0.75);
        }
    }
    UnitGroupLoopEnd();
}

void gf_ArtilleryStart (int lp_artillaryType, color lp_pingColor, point lp_targetPoint, unit lp_forwardObserver, int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(gv_shellCounter[0][lp_player], IntToText(FixedToInt(UnitAbilityChargeInfo(lp_forwardObserver, AbilityCommand("FireMission", 0), c_unitAbilChargeCountLeft))), PlayerGroupSingle(lp_player));
    gf_ForwardObserverLaunchSound(lp_player, lp_targetPoint, lp_artillaryType);
    gf_ForwardObserverShellFlightSound(lp_player, lp_targetPoint, lp_artillaryType);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", lp_targetPoint, lp_pingColor, gv_barrageTime[lp_player], 270.0);
    Wait(gv_barrageTime[lp_player], c_timeGame);
    VisRevealArea(lp_player, RegionCircle(lp_targetPoint, 7.0), 3.5, true);
}

void gf_LevelUpTalentRifleman (int lp_itemNo, unit lp_triggUnit, int lp_trigPlayer) {
    int auto0708C518_val;

    // Implementation
    auto0708C518_val = lp_itemNo;
    if (auto0708C518_val == 1) {
        TechTreeUpgradeAddLevel(lp_trigPlayer, "CriticalStrikeSkill", 1);

    }
    else if (auto0708C518_val == 2) {
        TechTreeUpgradeAddLevel(lp_trigPlayer, "FireUp", 1);

    }
    else if (auto0708C518_val == 3) {
        TechTreeUpgradeAddLevel(lp_trigPlayer, "WeaponProficiency", 1);

    }
    else if (auto0708C518_val == 7) {
        TechTreeUpgradeAddLevel(lp_trigPlayer, "CripplingFire", 1);

    }
    else {
    }
}

void gf_LevelUpTalentMedic (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 8)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "EnergyCapacitors", 1);
    }

}

void gf_LevelUpTalentAssault (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 2)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "CriticalStrikeSkill", 1);
    }

}

void gf_LevelUpTalentMarksman (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TriggerEnable(gt_Concentration, true);
        }

    }

    if ((lp_itemNo == 4)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TriggerEnable(gt_Anticipation, true);
        }
        else {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "AnticipationLevel2", 1);
        }
    }

    if ((lp_itemNo == 5)) {
        UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnMarksman", 2)), c_orderQueueAddToFront);
    }

    if ((lp_itemNo == 7)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "CriticalStrikeSkill", 1);
    }

}

void gf_LevelUpTalentRecon (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "SurveillanceFlare", 1);
    }

    if ((lp_itemNo == 2)) {
        TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("MassDesignate", 0), true);
    }

    if ((lp_itemNo == 5)) {
        TriggerEnable(gt_ReaperMK13Created, true);
    }

    if ((lp_itemNo == 7)) {
        UnitBehaviorAddPlayer(lp_triggUnit, "Backstab", lp_triggPlayer, 1);
    }

    if ((lp_itemNo == 8)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "StealthMatrix", 1);
        }

        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "StealthMatrixLevel1", 1);
        }

    }

    if ((lp_itemNo == 9)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "FlashFlare", 1);
        }

        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "FlashFlareUpgrade", 1);
        }

    }

}

void gf_LevelUpTalentDemolitions (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnDemolitions", 10)), c_orderQueueAddToFront);
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "VultureSpiderMinesDamage", "Amount", lp_triggPlayer, "60");
            PlayerCreateEffectUnit(lp_triggPlayer, "ReplenishMines14", gv_marineHero[lp_triggPlayer]);
        }

        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "VultureSpiderMinesDamage", "Amount", lp_triggPlayer, "80");
            PlayerCreateEffectUnit(lp_triggPlayer, "ReplenishMines14", gv_marineHero[lp_triggPlayer]);
        }

    }

    if ((lp_itemNo == 5)) {
        TriggerEnable(gt_ArmageddonBombLimit3, true);
    }

    if ((lp_itemNo == 8)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "LookLevel2", 1);
        }

    }

    if ((lp_itemNo == 9)) {
        TriggerEnable(gt_Sadist, true);
    }

}

void gf_LevelUpTalentEngineer (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "ProbeLimit", 1);
    }

    if ((lp_itemNo == 2)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "PlasmaDischargeLevel2", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "PlasmaDischargeLevel3", 1);
        }
    }

    if ((lp_itemNo == 5)) {
        TriggerEnable(gt_FieldNexusShareVision, true);
        TriggerEnable(gt_FieldNexusRevokeSharedVision, true);
    }

    if ((lp_itemNo == 6)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel1", 0), false);
            TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel2", 0), false);
            TriggerEnable(gt_X1Guardian, true);
        }

        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel1", 0), true);
        }

        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("X1UpgradeLevel2", 0), true);
        }

    }

    if ((lp_itemNo == 9)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TriggerEnable(gt_Synergy, true);
        }

    }

}

void gf_LevelUpTalentCommando (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 6)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "BringThemDownLevel1", 1);
        }

        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "BringThemDownLevel1", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "BringThemDownLevel2", 1);
        }

        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "BringThemDownLevel2", 0);
            libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "BringThemDownLevel3", 1);
        }

    }

    if ((lp_itemNo == 8)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "GravityGrenade", 1);
        }

    }

}

void gf_LevelUpTalentPsiOps (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "ForcePushLevel2", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "ForcePushLevel3", 1);
        }
    }

    if ((lp_itemNo == 3)) {
        TriggerEnable(gt_RavagingPhantom, true);
    }

    if ((lp_itemNo == 7)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnPsiOps", 10)), c_orderQueueAddToFront);
            TriggerEnable(gt_MindLinkShareVision, true);
            TriggerEnable(gt_MindLinkShareDamage, true);
            TriggerEnable(gt_CancelMindLink, true);
        }

        UnitGroupLoopBegin(gv_mindLinkedGroup[lp_triggPlayer]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel1", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel2", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel3", 1);
            if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "MindLinkLevel1", UnitGroupLoopCurrent(), 1);
            }
            else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "MindLinkLevel2", UnitGroupLoopCurrent(), 1);
            }
            else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "MindLinkLevel3", UnitGroupLoopCurrent(), 1);
            }
        }
        UnitGroupLoopEnd();
    }

    if ((lp_itemNo == 10)) {
        UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnPsiOps", 9)), c_orderQueueAddToFront);
        TriggerEnable(gt_Inception, true);
    }

}

void gf_LevelUpTalentTechnician (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            UnitBehaviorRemovePlayer(lp_triggUnit, "FloodlightsLevel1", lp_triggPlayer, 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            UnitBehaviorRemovePlayer(lp_triggUnit, "FloodlightsLevel2", lp_triggPlayer, 1);
        }
    }

    if ((lp_itemNo == 5)) {
        TriggerEnable(gt_HammeroftheGodsCamShake, true);
        TriggerEnable(gt_AMRounds, true);
    }

}

void gf_LevelUpTalentForwardObserver (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            gf_ForwardObserverCreateShellDialog(lp_triggPlayer);
            TriggerEnable(gt_ModifyShellLimit, true);
        }

    }

    if ((lp_itemNo == 2)) {
        gv_barrageTime[lp_triggPlayer] = (gv_barrageTime[lp_triggPlayer] - 1.5);
    }

    if ((lp_itemNo == 4)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            CatalogFieldValueSet(c_gameCatalogEffect, "Damage", "Amount", lp_triggPlayer, FixedToString(150.0, c_fixedPrecisionAny));
        }

    }

    if ((lp_itemNo == 7)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "MobileInfantryImprovedEquipment", 1);
    }

    if ((lp_itemNo == 8)) {
        TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("FlamethrowerGear", 0), true);
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("SlowRoast", 0), true);
        }

    }

    if ((lp_itemNo == 9)) {
        TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("MarksmanGear", 0), true);
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeAbilityAllow(lp_triggPlayer, AbilityCommand("VeteransFocus", 0), true);
        }

    }

    if ((lp_itemNo == 10)) {
        TriggerEnable(gt_GunshipSupport, true);
    }

}

void gf_LevelUpTalentFlamethrower (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "Helium3IgniterLevel1", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "Helium3IgniterLevel2", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "HighCapacityBarrels", 1);
        }
        gf_StatsModDamage(gv_statsModProperties[2][lp_triggPlayer], lp_triggPlayer);
        gf_StatsModRange(gv_statsModProperties[1][lp_triggPlayer], lp_triggPlayer);
    }

    if ((lp_itemNo == 8)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "RighteousnessLevel2", 1);
        }

    }

    if ((lp_itemNo == 9)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "ShatterLevel2", 1);
        }

    }

}

void gf_LevelUpTalentPathfinder (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 1)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel1", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel2", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 3)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel3", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 4)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel4", 1);
        }
    }

    if ((lp_itemNo == 3)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "HandgunProficiency", 1);
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1) && (gv_talentLevel[5][lp_triggPlayer] == 0)) {
            CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(9.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(46.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
        }
        else if ((((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2) && (gv_talentLevel[5][lp_triggPlayer] == 0)) || ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1) && (gv_talentLevel[5][lp_triggPlayer] == 1)))) {
            CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(12.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(52.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2) && (gv_talentLevel[5][lp_triggPlayer] == 1)) {
            CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(15.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(58.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
        }
        gf_StatsModDamage(gv_statsModProperties[2][lp_triggPlayer], lp_triggPlayer);
        gf_StatsModRange(gv_statsModProperties[1][lp_triggPlayer], lp_triggPlayer);
    }

    if ((lp_itemNo == 5)) {
        UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnPathfinder", 0)), c_orderQueueAddToFront);
        if ((gv_talentLevel[1][lp_triggPlayer] == 1)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel2", 1);
        }
        else if ((gv_talentLevel[1][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel3", 1);
        }
        else if ((gv_talentLevel[1][lp_triggPlayer] == 3)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "TrickShotLevel4", 1);
        }
        gv_talentLevel[1][lp_triggPlayer] += 1;
        UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnPathfinder", 1)), c_orderQueueAddToFront);
        UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnPathfinder", 2)), c_orderQueueAddToFront);
        UnitIssueOrder(lp_triggUnit, Order(AbilityCommand("LearnPathfinder", 3)), c_orderQueueAddToFront);
        TechTreeUpgradeAddLevel(lp_triggPlayer, "HandgunProficiency", 1);
        if ((gv_talentLevel[3][lp_triggPlayer] == 0)) {
            CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(9.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(46.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(23.0, c_fixedPrecisionAny));
        }
        else if ((gv_talentLevel[3][lp_triggPlayer] == 1)) {
            CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(12.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(52.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(26.0, c_fixedPrecisionAny));
        }
        else if ((gv_talentLevel[3][lp_triggPlayer] == 2)) {
            CatalogFieldValueSet(c_gameCatalogWeapon, "P38ScytheGuassPistol", "Range", lp_triggPlayer, FixedToString(15.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P38ScytheGuassPistol", "Amount", lp_triggPlayer, FixedToString(58.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFirstBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolSecondBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolThirdBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
            CatalogFieldValueSet(c_gameCatalogEffect, "P45GaussPistolFourthBounce", "Amount", lp_triggPlayer, FixedToString(29.0, c_fixedPrecisionAny));
        }
        gf_StatsModDamage(gv_statsModProperties[2][lp_triggPlayer], lp_triggPlayer);
        gf_StatsModRange(gv_statsModProperties[1][lp_triggPlayer], lp_triggPlayer);
    }

    if ((lp_itemNo == 6)) {
        UnitBehaviorAdd(lp_triggUnit, "AssaultJumpShieldArmor", lp_triggUnit, 1);
    }

    if ((lp_itemNo == 8)) {
        if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 1)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "AssaultJumpLevel1", 1);
        }
        else if ((gv_talentLevel[lp_itemNo][lp_triggPlayer] == 2)) {
            TechTreeUpgradeAddLevel(lp_triggPlayer, "AssaultJumpLevel2", 1);
        }
    }

    if ((lp_itemNo == 9)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_triggPlayer, "ImprovedCoolantLinesLevel1", gv_talentLevel[lp_itemNo][lp_triggPlayer]);
    }

}

void gf_LevelUpTalentChemExpert (int lp_itemNo, unit lp_triggUnit, int lp_triggPlayer) {
    // Implementation
    if ((lp_itemNo == 4)) {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "ChemicalSynthesis", 1);
    }

}

void gf_UpdateTalentText (int lp_itemNo, int lp_triggPlayer, int lp_itemLevel) {
    // Implementation
    TextExpressionSetToken("Param/Expression/ABAE731B", "A", IntToText(lp_itemLevel));
    TextExpressionSetToken("Param/Expression/ABAE731B", "B", IntToText(gv_talentMax[lp_itemNo]));
    libNtve_gf_SetDialogItemText(gv_talentTrees[lp_triggPlayer].lv_talentButtons[lp_itemNo].lv_talentText, TextExpressionAssemble("Param/Expression/ABAE731B"), gv_marineSquad);
}

bool gf_TalentSelectionOption (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    int lv_tempInt;

    // Variable Initialization

    // Implementation
    if (((((lp_itemNo >= 1) && (lp_itemNo <= 2)) || ((lp_itemNo >= 6) && (lp_itemNo <= 7))) && ((gv_talentLevel[lp_itemNo][lp_triggPlayer] >= 0) && (gv_talentLevel[lp_itemNo][lp_triggPlayer] <= 2)))) {
        return true;
    }
    else {
        if (((lp_itemNo >= 1) && (lp_itemNo <= 5))) {
            return gf_TalentSelectionLeftTree(lp_itemNo, lp_triggPlayer, (gv_talentLevel[1][lp_triggPlayer] + gv_talentLevel[2][lp_triggPlayer]));
        }
        else {
            return gf_TalentSelectionRightTree(lp_itemNo, lp_triggPlayer, (gv_talentLevel[6][lp_triggPlayer] + gv_talentLevel[7][lp_triggPlayer]));
        }
    }
}

bool gf_TalentSelectionLeftTree (int lp_itemNo, int lp_triggPlayer, int lp_tier1Total) {
    // Variable Declarations
    int lv_tempInt;

    // Variable Initialization
    lv_tempInt = lp_tier1Total;

    // Implementation
    if ((lv_tempInt >= 4) && ((lp_itemNo >= 3) && (lp_itemNo <= 4)) && ((gv_talentLevel[lp_itemNo][lp_triggPlayer] >= 0) && (gv_talentLevel[lp_itemNo][lp_triggPlayer] <= 1))) {
        return true;
    }

    lv_tempInt += (gv_talentLevel[3][lp_triggPlayer] + gv_talentLevel[4][lp_triggPlayer]);
    if ((lp_itemNo == 5) && (lv_tempInt >= 8) && (gv_talentLevel[5][lp_triggPlayer] == 0)) {
        return true;
    }

    return false;
}

bool gf_TalentSelectionRightTree (int lp_itemNo, int lp_triggPlayer, int lp_tier1Total) {
    // Variable Declarations
    int lv_tempInt;

    // Variable Initialization
    lv_tempInt = lp_tier1Total;

    // Implementation
    if ((lv_tempInt >= 4) && ((lp_itemNo >= 8) && (lp_itemNo <= 9)) && ((gv_talentLevel[lp_itemNo][lp_triggPlayer] >= 0) && (gv_talentLevel[lp_itemNo][lp_triggPlayer] <= 1))) {
        return true;
    }

    lv_tempInt += (gv_talentLevel[8][lp_triggPlayer] + gv_talentLevel[9][lp_triggPlayer]);
    if ((lp_itemNo == 10) && (lv_tempInt >= 8) && (gv_talentLevel[10][lp_triggPlayer] == 0)) {
        return true;
    }

    return false;
}

void gf_UpdateTalentImage (int lp_itemNo, int lp_triggPlayer) {
    // Variable Declarations
    bool lv_talentsAvailable;
    int lv_currentTalent;
    int lv_dialogItem;
    int lv_dialogBorderInitial;
    int lv_dialogBorderFinal;

    // Variable Initialization
    lv_talentsAvailable = (gv_talentsAvailable[lp_triggPlayer] > 0);
    lv_currentTalent = gv_talentLevel[lp_itemNo][lp_triggPlayer];
    lv_dialogItem = gv_talentTreeImages[lp_itemNo][lp_triggPlayer];
    lv_dialogBorderInitial = gv_talentTrees[lp_triggPlayer].lv_talentButtons[lp_itemNo].lv_borderIntital;
    lv_dialogBorderFinal = gv_talentTrees[lp_triggPlayer].lv_talentButtons[lp_itemNo].lv_borderFinal;

    // Implementation
    if ((lv_currentTalent == gv_talentMax[lp_itemNo])) {
        libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(100,100,100), gv_marineSquad);
        DialogControlSetVisible(lv_dialogBorderInitial, PlayerGroupAll(), false);
        DialogControlSetVisible(lv_dialogBorderFinal, PlayerGroupAll(), true);
    }
    else {
        if (((lv_talentsAvailable == true) && (gf_TalentSelectionOption(lp_itemNo, lp_triggPlayer) == true))) {
            libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(67.45, 67.45, 67.45), gv_marineSquad);
        }
        else {
            if ((lv_currentTalent == 0)) {
                libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(33.33, 33.33, 100.00), gv_marineSquad);
            }
            else {
                libNtve_gf_SetDialogItemColor(lv_dialogItem, Color(66.67, 66.67, 100.00), gv_marineSquad);
            }
        }
    }
}

void gf_UpdateAllTalentImages (int lp_triggPlayer) {
    // Implementation
    IntLoopBegin(gv_indexBaseValue, gv_numberofTalents);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gf_UpdateTalentImage(IntLoopCurrent(), lp_triggPlayer);
    }
    IntLoopEnd();
}

void gf_UpdateTalentAbility (int lp_itemNo, int lp_triggPlayer) {
    string auto4E346E50_val;

    // Variable Declarations
    string lv_classOfPlayer;
    unit lv_triggUnit;

    // Variable Initialization
    lv_classOfPlayer = UnitGetType(gv_marineHero[lp_triggPlayer]);
    lv_triggUnit = gv_marineHero[lp_triggPlayer];

    // Implementation
    UnitIssueOrder(lv_triggUnit, Order(AbilityCommand("GenericMarineLearn", (lp_itemNo - 1))), c_orderQueueAddToFront);
    auto4E346E50_val = lv_classOfPlayer;
    if (auto4E346E50_val == "Rifleman") {
        TechTreeUpgradeAddLevel(lp_triggPlayer, "RiflemanGrenades", 1);
        gf_LevelUpTalentRifleman(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Medic2") {
        gf_LevelUpTalentMedic(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "TychusChaingun") {
        gf_LevelUpTalentAssault(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Spectre") {
        gf_LevelUpTalentRecon(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Marksman") {
        gf_LevelUpTalentMarksman(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "DominionKillTeam") {
        gf_LevelUpTalentDemolitions(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Engineer") {
        gf_LevelUpTalentEngineer(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Commando") {
        gf_LevelUpTalentCommando(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Flamethrower3") {
        gf_LevelUpTalentFlamethrower(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "ForwardObserver") {
        gf_LevelUpTalentForwardObserver(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Technician") {
        gf_LevelUpTalentTechnician(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "ChemicalExpert") {
        gf_LevelUpTalentChemExpert(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "Pathfinder") {
        gf_LevelUpTalentPathfinder(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else if (auto4E346E50_val == "PsiOps") {
        gf_LevelUpTalentPsiOps(lp_itemNo, lv_triggUnit, lp_triggPlayer);

    }
    else {
    }
}

void gf_UpdateTalentSystem (int lp_itemNo, int lp_triggPlayer) {
    // Implementation
    if ((gf_TalentSelectionOption(lp_itemNo, lp_triggPlayer) == true)) {
        gv_talentsAvailable[lp_triggPlayer] -= 1;
        gv_talentLevel[lp_itemNo][lp_triggPlayer] += 1;
        gf_UpdateTalentAbility(lp_itemNo, lp_triggPlayer);
        gf_UpdateTalentText(lp_itemNo, lp_triggPlayer, gv_talentLevel[lp_itemNo][lp_triggPlayer]);
        if (((lp_itemNo == 5) || (lp_itemNo == 10)) && (gv_playerBanned[lp_triggPlayer] == false)) {
            gf_TeamStatusInitializePlayerPortrait(lp_triggPlayer);
        }

        gf_UpdateAllTalentImages(lp_triggPlayer);
        libNtve_gf_SetDialogItemText(gv_talentsAvailableDialog[lp_triggPlayer], (StringExternal("Param/Value/8A9EFD0F") + IntToText(gv_talentsAvailable[lp_triggPlayer])), gv_marineSquad);
    }

}

trigger auto_gf_TalentTreeCreation_Trigger = null;
int auto_gf_TalentTreeCreation_lp_player;

void gf_TalentTreeCreation (int lp_player) {
    auto_gf_TalentTreeCreation_lp_player = lp_player;

    if (auto_gf_TalentTreeCreation_Trigger == null) {
        auto_gf_TalentTreeCreation_Trigger = TriggerCreate("auto_gf_TalentTreeCreation_TriggerFunc");
    }

    TriggerExecute(auto_gf_TalentTreeCreation_Trigger, false, false);
}

bool auto_gf_TalentTreeCreation_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_TalentTreeCreation_lp_player;

    // Variable Declarations
    int lv_tempDialogItem;
    int lv_tempDialogFrame;
    int lv_tempDialogSubFrame;

    // Variable Initialization
    lv_tempDialogItem = c_invalidDialogControlId;
    lv_tempDialogFrame = c_invalidDialogControlId;
    lv_tempDialogSubFrame = c_invalidDialogControlId;

    // Implementation
    gf_UIDialogCreation(610, 690, 270, 150, c_anchorTopRight);
    gv_talentTree[lp_player] = DialogLastCreated();
    DialogControlCreateFromTemplate(gv_talentTree[lp_player], c_triggerControlTypePanel, "PlayerDetails/DetailsUI");
    lv_tempDialogFrame = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "TalentsBorder");
    lv_tempDialogSubFrame = DialogControlLastCreated();
    gf_SetupPlayerDetailsUI(lp_player, lv_tempDialogFrame, gv_labelTalentsButton, lv_tempDialogSubFrame, 3);
    DialogControlCreateFromTemplate(gv_talentTree[lp_player], c_triggerControlTypePanel, "TalentTree/TalentTreeTemplate");
    lv_tempDialogItem = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogItem, c_triggerControlTypeLabel, "TalentsAvailable");
    gv_talentsAvailableDialog[lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(gv_talentsAvailableDialog[lp_player], (StringExternal("Param/Value/060BE9EA") + IntToText(gv_talentsAvailable[lp_player])), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogItem, c_triggerControlTypeLabel, "TalentTree1Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("TalentTrees", gv_playerClass[lp_player], "Headers", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogItem, c_triggerControlTypeLabel, "TalentTree2Title");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("TalentTrees", gv_playerClass[lp_player], "Headers", 2), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogItem, c_triggerControlTypeLabel, "Tier1Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/27580023"), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogItem, c_triggerControlTypeLabel, "Tier2Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/46D423B5"), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogItem, c_triggerControlTypeLabel, "Tier3Label");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/635417A9"), PlayerGroupAll());
    IntLoopBegin(gv_indexBaseValue, gv_numberofTalents);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gf_TalentButton(lv_tempDialogItem, lp_player, IntLoopCurrent());
    }
    IntLoopEnd();
    gf_UpdateTalentImage(1, lp_player);
    gf_UpdateTalentImage(2, lp_player);
    gf_UpdateTalentImage(6, lp_player);
    gf_UpdateTalentImage(7, lp_player);
    if ((TriggerIsEnabled(gt_TalentSelection) == false)) {
        TriggerEnable(gt_TalentSelection, true);
    }

    return true;
}

void gf_TalentButton (int lp_panel, int lp_player, int lp_talentNumber) {
    // Variable Declarations
    int lv_tempPanel;

    // Variable Initialization
    lv_tempPanel = c_invalidDialogControlId;

    // Implementation
    DialogControlHookup(lp_panel, c_triggerControlTypePanel, "Talent" + IntToString(lp_talentNumber));
    lv_tempPanel = DialogControlLastCreated();
    DialogControlHookup(lv_tempPanel, c_triggerControlTypeButton, "Button");
    gv_talentTrees[lp_player].lv_talentButtons[lp_talentNumber].lv_button = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), UserDataGetText("TalentTrees", gv_playerClass[lp_player], "Talent Tootips", lp_talentNumber), PlayerGroupAll());
    DialogControlHookup(lv_tempPanel, c_triggerControlTypeImage, "TalentImageIntial");
    gv_talentTrees[lp_player].lv_talentButtons[lp_talentNumber].lv_borderIntital = DialogControlLastCreated();
    DialogControlHookup(lv_tempPanel, c_triggerControlTypeImage, "TalentImageFinal");
    gv_talentTrees[lp_player].lv_talentButtons[lp_talentNumber].lv_borderFinal = DialogControlLastCreated();
    DialogControlHookup(lv_tempPanel, c_triggerControlTypeImage, "TalentImage");
    gv_talentTreeImages[lp_talentNumber][lp_player] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), UserDataGetImagePath("TalentTrees", gv_playerClass[lp_player], "Talent Image", lp_talentNumber), PlayerGroupAll());
    DialogControlHookup(lv_tempPanel, c_triggerControlTypeLabel, "TalentLevelLabel");
    gv_talentTrees[lp_player].lv_talentButtons[lp_talentNumber].lv_talentText = DialogControlLastCreated();
}

//--------------------------------------------------------------------------------------------------
// Trigger: Class Select Override
//--------------------------------------------------------------------------------------------------
bool gt_ClassSelectOverride_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((PlayerHandle(EventPlayer()) == "1-S2-1-417524") || (PlayerHandle(EventPlayer()) == "1-S2-1-431521") || (PlayerHandle(EventPlayer()) == "1-S2-1-1143628") || (PlayerHandle(EventPlayer()) == "1-S2-1-3388720")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_classSelection = StringToInt(EventChatMessage(false));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassSelectOverride_Init () {
    gt_ClassSelectOverride = TriggerCreate("gt_ClassSelectOverride_Func");
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "1", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "2", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "3", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "4", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "5", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "6", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "7", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "8", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "9", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "10", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "11", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "12", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "13", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "14", true);
    TriggerAddEventChatMessage(gt_ClassSelectOverride, c_playerAny, "15", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dahlia
//--------------------------------------------------------------------------------------------------
bool gt_Dahlia_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_alivePlayers == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_talentsAvailable[1] = 35;
    gv_playerRating[1] += 30;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Dahlia_Init () {
    gt_Dahlia = TriggerCreate("gt_Dahlia_Func");
    TriggerEnable(gt_Dahlia, false);
    TriggerAddEventChatMessage(gt_Dahlia, 1, "-dahlia", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Path to Military Base
//--------------------------------------------------------------------------------------------------
bool gt_ShowPathtoMilitaryBase_Func (bool testConds, bool runActions) {
    int auto59DF204F_ae;
    int auto59DF204F_ai;

    // Variable Declarations
    playergroup lv_newbies;
    int lv_localLoop;

    // Variable Initialization
    lv_newbies = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerXP[PlayerGroupLoopCurrent()] < 500)) {
            PlayerGroupAdd(lv_newbies, PlayerGroupLoopCurrent());
        }

    }
    PlayerGroupLoopEnd();
    while ((ObjectiveGetState(gv_primaryObjective) == c_objectiveStateActive)) {
        auto59DF204F_ae = 18;
        auto59DF204F_ai = 1;
        lv_localLoop = 1;
        for ( ; ( (auto59DF204F_ai >= 0 && lv_localLoop <= auto59DF204F_ae) || (auto59DF204F_ai <= 0 && lv_localLoop >= auto59DF204F_ae) ) ; lv_localLoop += auto59DF204F_ai ) {
            PingCreate(lv_newbies, "PingArrow", gv_pathtoMilitaryBase[lv_localLoop], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 2.0);
            PingSetScale(PingLastCreated(), 0.5);
            Wait(0.1, c_timeReal);
        }
        Wait(10.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowPathtoMilitaryBase_Init () {
    gt_ShowPathtoMilitaryBase = TriggerCreate("gt_ShowPathtoMilitaryBase_Func");
    TriggerEnable(gt_ShowPathtoMilitaryBase, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NOTD Initialize
//--------------------------------------------------------------------------------------------------
bool gt_NOTDInitialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    libNtve_gf_HideGameUI(false, PlayerGroupActive());
    GameSetSpeedValue(c_gameSpeedFaster);
    GameSetSpeedLocked(true);
    Wait(0.1, c_timeGame);
    if ((GameIsTestMap(false) == true)) {
        GameCheatAllow(c_gameCheatAny, true);
    }
    else {
        GameCheatAllow(c_gameCheatAny, false);
    }
    AICampaignStart(9);
    AICampaignStart(13);
    AICampaignStart(14);
    AISetDifficulty(14, c_diffLimitAPM, false);
    AISetDifficulty(13, c_diffLimitAPM, false);
    PlayerSetState(9, c_playerStateShowScore, false);
    PlayerSetState(13, c_playerStateShowScore, false);
    PlayerSetState(14, c_playerStateShowScore, false);
    PlayerSetState(9, c_playerStateDisplayGameResult, false);
    PlayerSetState(13, c_playerStateDisplayGameResult, false);
    PlayerSetState(14, c_playerStateDisplayGameResult, false);
    UISetResourceTradingAllowed(c_resourceTypeTerrazine, false);
    UISetResourceTradingAllowed(c_resourceTypeCustom, false);
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    TriggerExecute(gt_Environment, true, false);
    TimerStart(gv_gameTime, 10800.0, false, c_timeReal);
    TriggerExecute(gt_PlayerIntialize, true, true);
    TriggerEnable(gt_NightmareMode, true);
    DialogCreate(66, 66, c_anchorBottom, -450, 230, true);
    gv_equipment = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
    TriggerSendEvent(gv_dialogIntialization);
    if ((RandomInt(0, 5) == 1)) {
        SoundPlay(SoundLink("MarSaraIdlesAdjutantAdjutant00004", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    PlayerGroupLoopBegin(gv_activePlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((StringContains(PlayerHandle(PlayerGroupLoopCurrent()), IntToString(64312), c_stringAnywhere, c_stringCase) == true)) {
            GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
        }

    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerXP[PlayerGroupLoopCurrent()] < 500)) {
            gv_noNewbie = false;
            break;
        }

    }
    PlayerGroupLoopEnd();
    TriggerExecute(gt_StorylineDialogCreation, true, false);
    if ((gv_noNewbie == true) && (RandomInt(0, 2) == 1)) {
        TriggerEnable(gt_OM2aOgilvyFound, false);
        TriggerEnable(gt_OM2bIvanFound, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NOTDInitialize_Init () {
    gt_NOTDInitialize = TriggerCreate("gt_NOTDInitialize_Func");
    TriggerAddEventTimeElapsed(gt_NOTDInitialize, 0.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Intialize
//--------------------------------------------------------------------------------------------------
bool gt_PlayerIntialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "selectuncontrolable", "1");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "simplecommandcard", "0");
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "showalerts", "1");
        PlayerGroupAdd(gv_marineSquad, PlayerGroupLoopCurrent());
        gv_totalPlayers += 1;
        CameraLockInput(PlayerGroupLoopCurrent(), true);
    }
    PlayerGroupLoopEnd();
    gf_PlayerAlliances();
    gv_alivePlayers = gv_totalPlayers;
    Wait(1.0, c_timeReal);
    gv_activePlayers = PlayerGroupCopy(gv_marineSquad);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_MemoryLoad(PlayerGroupLoopCurrent());
        gf_StatsLoadPlayerStats(PlayerGroupLoopCurrent());
        gf_UIInitializeStartingCareerStats(PlayerGroupLoopCurrent());
        gf_StatsLoadPlayerWeaponModPoints(PlayerGroupLoopCurrent());
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, gv_playerXP[PlayerGroupLoopCurrent()]);
        if ((StringContains(PlayerHandle(PlayerGroupLoopCurrent()), IntToString(643123), c_stringAnywhere, c_stringCase) == true)) {
            GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, true, true);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerIntialize_Init () {
    gt_PlayerIntialize = TriggerCreate("gt_PlayerIntialize_Func");
    TriggerEnable(gt_PlayerIntialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Environment
//--------------------------------------------------------------------------------------------------
bool gt_Environment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ogilvysHideoutRoll;

    // Variable Initialization
    lv_ogilvysHideoutRoll = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_talentMax[1] = 3;
    gv_talentMax[2] = 3;
    gv_talentMax[3] = 2;
    gv_talentMax[4] = 2;
    gv_talentMax[5] = 1;
    gv_talentMax[6] = 3;
    gv_talentMax[7] = 3;
    gv_talentMax[8] = 2;
    gv_talentMax[9] = 2;
    gv_talentMax[10] = 1;
    TriggerEnable(gt_ECW2ScrapyardAmbush, true);
    TriggerEnable(gt_OM5RamirezsTaunts, true);
    TriggerEnable(gt_ECW4AirlockRoadAmbush, true);
    gv_domeSpawn[1] = gt_W10DomeA;
    gv_domeSpawn[2] = gt_W11DomeB;
    gv_domeSpawn[3] = gt_W12DomeC;
    SoundtrackDefault(PlayerGroupAll(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryCombat, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryME, false);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, false);
    UISetBattleNetButtonOffset(PlayerGroupAll(), 9, 220);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2933)), c_animNameDefault, "Stand Work", c_animFlagPlayForever, c_animTimeDefault);
    gf_LocationIntialization();
    libNtve_gf_ShowHideUnit(UnitFromId(590), false);
    libNtve_gf_MakeUnitInvulnerable(gv_sensorTower[0], true);
    libNtve_gf_MakeUnitInvulnerable(gv_sensorTower[1], true);
    UnitSetTeamColorIndex(gv_sensorTower[0], 0);
    UnitSetTeamColorIndex(gv_sensorTower[1], 0);
    libNtve_gf_MakeUnitInvulnerable(gv_tartarusCocoon, true);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(590), true);
    libNtve_gf_PauseUnit(UnitFromId(590), true);
    UnitSetState(gv_tartarusCocoon, c_unitStateStatusBar, false);
    UnitGroupLoopBegin(UnitGroupFromId(6));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((RandomInt(0, 1) == 1) || (UnitGroupCount(UnitGroupFromId(6), c_unitCountAlive) < 7))) {
            UnitGroupAdd(gv_complianceNexusGroup, UnitGroupLoopCurrent());
        }
        else {
            UnitRemove(UnitGroupLoopCurrent());
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(124), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if (((lv_ogilvysHideoutRoll == 1) || ((gv_storyline == 1) && (gv_noNewbie == false)))) {
        gv_ogilvysHideout = RegionFromId(179);
    }
    else if ((lv_ogilvysHideoutRoll == 2)) {
        gv_ogilvysHideout = RegionFromId(180);
    }
    else if ((lv_ogilvysHideoutRoll == 3)) {
        gv_ogilvysHideout = RegionFromId(181);
    }
    gv_drBergmann = UnitFromId(136);
    libNtve_gf_MakeUnitInvulnerable(gv_drBergmann, true);
    gv_drTanaka = UnitFromId(2625);
    libNtve_gf_MakeUnitInvulnerable(gv_drTanaka, true);
    gv_drGunjan = UnitFromId(2635);
    libNtve_gf_MakeUnitInvulnerable(gv_drGunjan, true);
    HelpPanelEnableTechTreeButton(PlayerGroupAll(), false);
    HelpPanelEnableTechGlossaryButton(PlayerGroupAll(), false);
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, true);
    }
    UnitGroupLoopEnd();
    Wait(10.0, c_timeReal);
    Wait(80.0, c_timeReal);
    IntLoopBegin(gv_indexBaseValue, gv_infestorsAlive);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitCreate(1, "InfestorBurrowed2", 0, 14, RegionRandomPoint(RegionPlayableMap()), libNtve_gf_RandomAngle());
        gv_infestor[IntLoopCurrent()] = UnitLastCreated();
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowInfestor", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitLastCreated()), 50.0))), c_orderQueueReplace);
        Wait(0.3, c_timeGame);
    }
    IntLoopEnd();
    TriggerEnable(gt_InfestorKilled, true);
    if ((gv_noNewbie == true) && (gv_squadRating >= 1600)) {
        TriggerEnable(gt_InfestorAI, true);
    }

    Wait(240.0, c_timeReal);
    TriggerEnable(gt_ClassCreation, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Environment_Init () {
    gt_Environment = TriggerCreate("gt_Environment_Func");
    TriggerEnable(gt_Environment, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Register Marine Events
//--------------------------------------------------------------------------------------------------
bool gt_RegisterMarineEvents_Func (bool testConds, bool runActions) {
    unitgroup auto8A030D0C_g;
    int auto8A030D0C_u;

    // Variable Declarations
    unit lv_marine;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto8A030D0C_g = gv_marines;
    auto8A030D0C_u = 1;
    for ( ; auto8A030D0C_u <= UnitGroupCount(auto8A030D0C_g, c_unitCountAll) ; auto8A030D0C_u += BoolToInt(lv_marine == UnitGroupUnit(auto8A030D0C_g, auto8A030D0C_u)) ) {
        lv_marine = UnitGroupUnit(auto8A030D0C_g, auto8A030D0C_u);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RegisterMarineEvents_Init () {
    gt_RegisterMarineEvents = TriggerCreate("gt_RegisterMarineEvents_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storyline Dialog Creation
//--------------------------------------------------------------------------------------------------
bool gt_StorylineDialogCreation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tempDialogFrame;

    // Variable Initialization
    lv_tempDialogFrame = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_storyIntializationTriggers[1] = gt_ECInitialize;
    gv_storyIntializationTriggers[2] = gt_ACInitialize;
    gv_storyIntializationTriggers[3] = gt_STInitialize;
    gv_storyIntializationTriggers[4] = gt_SurvivalInit;
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerXP[PlayerGroupLoopCurrent()] < 3000)) {
            gv_storylineUnlocked[3] = false;
        }
        if ((gv_playerXP[PlayerGroupLoopCurrent()] < 1000)) {
            gv_storylineUnlocked[2] = false;
            gv_storylineUnlocked[4] = false;
            break;
        }
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(gv_activePlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (((StringContains(PlayerHandle(PlayerGroupLoopCurrent()), IntToString(64312), c_stringAnywhere, c_stringCase) == true))) {
            GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, true, true);
        }

    }
    PlayerGroupLoopEnd();
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    gf_UIDialogCreation(1235, 1225, 0, 0, c_anchorCenter);
    gv_storylineDialog = DialogLastCreated();
    DialogControlCreateFromTemplate(gv_storylineDialog, c_triggerControlTypePanel, "StorylineSelection/StorylineSelectionUI");
    lv_tempDialogFrame = DialogControlLastCreated();
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "StorylineSelectionLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/59BA14F5"), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "EasyCompanyButton");
    gv_storylineSelection[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_storylineSelection[1], UserDataGetText("Storyline", "Easy Company", "Story Tooltip", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "EasyCompanyTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Easy Company", "Story Name", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "EasyCompanySubtitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Easy Company", "Story Subtitle", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "AlphaCompanyButton");
    gv_storylineSelection[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_storylineSelection[2], UserDataGetText("Storyline", "Alpha Company", "Story Tooltip", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "AlphaCompanyTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Alpha Company", "Story Name", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "AlphaCompanySubtitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Alpha Company", "Story Subtitle", 1), PlayerGroupAll());
    if ((gv_storylineUnlocked[2] == false)) {
        DialogControlSetEnabled(gv_storylineSelection[2], PlayerGroupAll(), false);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "AlphaCompanyUnlock");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Alpha Company", "Story Unlock Text", 1), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "ApolloSecurityButton");
    gv_storylineSelection[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_storylineSelection[3], UserDataGetText("Storyline", "Apollo Security Team", "Story Tooltip", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "ApolloSecurityTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Apollo Security Team", "Story Name", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "ApolloSecuritySubtitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Apollo Security Team", "Story Subtitle", 1), PlayerGroupAll());
    if ((gv_storylineUnlocked[3] == false)) {
        DialogControlSetEnabled(gv_storylineSelection[3], PlayerGroupAll(), false);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "ApolloSecurityUnlock");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Apollo Security Team", "Story Unlock Text", 1), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    if ((gv_storylineUnlocked[4] == true)) {
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "SurvivalButton");
        gv_storylineSelection[4] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_storylineSelection[4], UserDataGetText("Storyline", "Survival", "Story Tooltip", 1), PlayerGroupAll());
        DialogControlSetVisible(gv_storylineSelection[4], PlayerGroupAll(), true);
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "SurvivalTitle");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), UserDataGetText("Storyline", "Survival", "Story Name", 1), PlayerGroupAll());
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    }

    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "NormalModeButton");
    gv_modeSelection[1] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_modeSelection[1], UserDataGetText("Mode", "Normal", "Mode Name", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "NightmareModeButton");
    gv_modeSelection[2] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_modeSelection[2], UserDataGetText("Mode", "Nightmare", "Mode Name", 1), PlayerGroupAll());
    DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "HellModeButton");
    gv_modeSelection[3] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemTooltip(gv_modeSelection[3], UserDataGetText("Mode", "Hell", "Mode Name", 1), PlayerGroupAll());
    if ((gv_noNewbie == true)) {
        DialogControlSetEnabled(gv_modeSelection[2], PlayerGroupAll(), true);
    }

    DialogSetVisible(gv_storylineDialog, PlayerGroupAll(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorylineDialogCreation_Init () {
    gt_StorylineDialogCreation = TriggerCreate("gt_StorylineDialogCreation_Func");
    TriggerEnable(gt_StorylineDialogCreation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Storyline Selection
//--------------------------------------------------------------------------------------------------
bool gt_StorylineSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_usedDialogControl;
    int lv_index;

    // Variable Initialization
    lv_usedDialogControl = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialogControl == gv_storylineSelection[1]) || (lv_usedDialogControl == gv_storylineSelection[2]) || (lv_usedDialogControl == gv_storylineSelection[3]) || (lv_usedDialogControl == gv_storylineSelection[4])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while ((lv_usedDialogControl != gv_storylineSelection[lv_index])) {
        lv_index += 1;
    }
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lv_usedDialogControl != gv_storylineSelection[IntLoopCurrent()])) {
            DialogControlFadeTransparency(gv_storylineSelection[IntLoopCurrent()], PlayerGroupAll(), 0.5, 80.0);
        }

    }
    IntLoopEnd();
    TriggerEnable(gt_FinaliseStorylineandMode, false);
    gv_storyline = lv_index;
    Wait(1.0, c_timeGame);
    DialogDestroy(gv_storylineDialog);
    gv_defaultLighting = UserDataGetGameLink("Storyline", UserDataInstance("Storyline", gv_storyline), "Default Lighting", 1);
    GameSetLighting(gv_defaultLighting, 3.9);
    TriggerExecute(gv_storyIntializationTriggers[gv_storyline], true, false);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerModifyPropertyInt(PlayerGroupLoopCurrent(), c_playerPropVespene, c_playerPropOperSetTo, gv_storyline);
    }
    PlayerGroupLoopEnd();
    if ((gv_storyline != 4)) {
        gf_ClassSelectionUI();
    }
    else {
        gf_SurvivalClassSelectionUI();
    }
    gf_SetDifficulty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StorylineSelection_Init () {
    gt_StorylineSelection = TriggerCreate("gt_StorylineSelection_Func");
    TriggerAddEventDialogControl(gt_StorylineSelection, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_StorylineSelection, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mode Selection
//--------------------------------------------------------------------------------------------------
bool gt_ModeSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_usedDialogControl;
    int lv_index;

    // Variable Initialization
    lv_usedDialogControl = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialogControl == gv_modeSelection[1]) || (lv_usedDialogControl == gv_modeSelection[2]) || (lv_usedDialogControl == gv_modeSelection[3])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_usedDialogControl == gv_modeSelection[1]) && (gv_mode != 1)) {
        gv_mode = 1;
        libNtve_gf_SetDialogItemImage(gv_modeSelection[1], "Difficulty Buttons\\NOTDNormal3.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_modeSelection[2], "Difficulty Buttons\\NOTDNightmare2.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_modeSelection[3], "Difficulty Buttons\\NOTDHell2.dds", PlayerGroupAll());
    }
    else if ((lv_usedDialogControl == gv_modeSelection[2]) && (gv_mode != 2)) {
        gv_mode = 2;
        libNtve_gf_SetDialogItemImage(gv_modeSelection[1], "Difficulty Buttons\\NOTDNormal2.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_modeSelection[2], "Difficulty Buttons\\NOTDNightmare3.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_modeSelection[3], "Difficulty Buttons\\NOTDHell2.dds", PlayerGroupAll());
    }
    else if ((lv_usedDialogControl == gv_modeSelection[3]) && (gv_mode != 3)) {
        gv_mode = 3;
        libNtve_gf_SetDialogItemImage(gv_modeSelection[1], "Difficulty Buttons\\NOTDNormal2.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_modeSelection[2], "Difficulty Buttons\\NOTDNightmare2.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_modeSelection[3], "Difficulty Buttons\\NOTDHell3.dds", PlayerGroupAll());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModeSelection_Init () {
    gt_ModeSelection = TriggerCreate("gt_ModeSelection_Func");
    TriggerAddEventDialogControl(gt_ModeSelection, 1, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_ModeSelection, 2, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Finalise Storyline and Mode
//--------------------------------------------------------------------------------------------------
bool gt_FinaliseStorylineandMode_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_StorylineSelection, false);
    gv_storyline = 1;
    gv_mode = 1;
    libNtve_gf_SetDialogItemImage(gv_modeSelection[1], "Difficulty Buttons\\NOTDNormal3.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_modeSelection[2], "Difficulty Buttons\\NOTDNightmare2.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(gv_modeSelection[3], "Difficulty Buttons\\NOTDHell2.dds", PlayerGroupAll());
    IntLoopBegin(2, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        DialogControlFadeTransparency(gv_storylineSelection[IntLoopCurrent()], PlayerGroupAll(), 0.5, 80.0);
    }
    IntLoopEnd();
    Wait(1.0, c_timeGame);
    DialogDestroy(gv_storylineDialog);
    gv_defaultLighting = UserDataGetGameLink("Storyline", UserDataInstance("Storyline", gv_storyline), "Default Lighting", 1);
    GameSetLighting(gv_defaultLighting, 3.9);
    TriggerExecute(gv_storyIntializationTriggers[gv_storyline], true, false);
    gf_ClassSelectionUI();
    gf_SetDifficulty();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FinaliseStorylineandMode_Init () {
    gt_FinaliseStorylineandMode = TriggerCreate("gt_FinaliseStorylineandMode_Func");
    TriggerAddEventTimeElapsed(gt_FinaliseStorylineandMode, 30.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manual Save
//--------------------------------------------------------------------------------------------------
bool gt_ManualSave_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerNo;

    // Variable Initialization
    lv_playerNo = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_wave >= 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_playerXP[lv_playerNo] - gv_startingXP[lv_playerNo]) <= 350) && (gv_playerBanned[lv_playerNo] == false)) {
        UIDisplayMessage(PlayerGroupSingle(lv_playerNo), c_messageAreaDebug, (StringExternal("Param/Value/3CA19E89") + (PlayerName(lv_playerNo) + StringExternal("Param/Value/556EE5F6"))));
        SoundPlay(SoundLink("UI_ScoreScreenMissionSummary", -1), PlayerGroupSingle(lv_playerNo), 225.0, 0.0);
        gf_Save(lv_playerNo, gv_bankSize);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ManualSave_Init () {
    gt_ManualSave = TriggerCreate("gt_ManualSave_Func");
    TriggerEnable(gt_ManualSave, false);
    TriggerAddEventChatMessage(gt_ManualSave, c_playerAny, "-save", true);
    TriggerAddEventChatMessage(gt_ManualSave, c_playerAny, "-s", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto Save
//--------------------------------------------------------------------------------------------------
bool gt_AutoSave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (((gv_playerXP[PlayerGroupLoopCurrent()] - gv_startingXP[PlayerGroupLoopCurrent()]) <= 350) && (gv_playerBanned[PlayerGroupLoopCurrent()] == false)) {
            gf_Save(PlayerGroupLoopCurrent(), gv_bankSize);
            Wait(0.5, c_timeReal);
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AutoSave_Init () {
    gt_AutoSave = TriggerCreate("gt_AutoSave_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Init - Load Player
//--------------------------------------------------------------------------------------------------
bool gt_MapInitLoadPlayer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(GameAttributePlayersForTeam(1));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_LoadPlayerBankFile(PlayerGroupLoopCurrent(), gv_bankSize);
        Wait(0.01, c_timeGame);
        gf_LoadPlayerBackupBankFile(PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MapInitLoadPlayer_Init () {
    gt_MapInitLoadPlayer = TriggerCreate("gt_MapInitLoadPlayer_Func");
    TriggerAddEventMapInit(gt_MapInitLoadPlayer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vote Kick
//--------------------------------------------------------------------------------------------------
bool gt_VoteKick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_votingPlayer;
    int lv_voteKickTarget;
    unit lv_bob;
    int lv_unitTransfer;

    // Variable Initialization
    lv_votingPlayer = EventPlayer();
    lv_unitTransfer = 1;

    // Conditions
    if (testConds) {
        if (!((gv_voteKickNomination[lv_votingPlayer] == false))) {
            return false;
        }

        if (!((gv_playerBanned[lv_votingPlayer] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventChatMessage(true) == "-votekick")) {
        lv_voteKickTarget = StringToInt(StringSub(EventChatMessage(false), 11, 11));
    }
    else {
        lv_voteKickTarget = StringToInt(StringSub(EventChatMessage(false), 5, 5));
    }
    if ((gv_playerXP[lv_votingPlayer] < 2000)) {
        UIDisplayMessage(PlayerGroupSingle(lv_votingPlayer), c_messageAreaSubtitle, StringExternal("Param/Value/94E85E61"));
    }
    else {
        if ((((lv_voteKickTarget >= 1) && (lv_voteKickTarget <= 8)) == true) && (lv_votingPlayer != lv_voteKickTarget) && (gv_kicked[lv_voteKickTarget] == false)) {
            gv_voteKickNomination[lv_votingPlayer] = true;
            gv_voteKickDanger[lv_voteKickTarget] += 1;
            if ((gv_voteKickDanger[lv_voteKickTarget] == 1)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((((StringExternal("Param/Value/F2F0980F") + PlayerName(lv_voteKickTarget)) + StringExternal("Param/Value/41199A23")) + PlayerName(lv_votingPlayer)) + StringExternal("Param/Value/3E1C1E17")));
                SoundPlay(SoundLink("UI_BnetCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if ((gv_voteKickDanger[lv_voteKickTarget] == 2)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((((StringExternal("Param/Value/E4DFE6B3") + PlayerName(lv_voteKickTarget)) + StringExternal("Param/Value/9480FDAF")) + PlayerName(lv_votingPlayer)) + StringExternal("Param/Value/2399241B")));
                SoundPlay(SoundLink("UI_BnetCountdown", -1), PlayerGroupAll(), 100.0, 0.0);
            }
            else if ((gv_voteKickDanger[lv_voteKickTarget] == 3)) {
                gv_kicked[lv_voteKickTarget] = true;
                gv_playerKarma[lv_voteKickTarget] -= 2;
                IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    gv_voteKickNomination[IntLoopCurrent()] = false;
                }
                IntLoopEnd();
                SoundPlay(SoundLink("FullMoonAcknowledgment", -1), PlayerGroupAll(), 100.0, 0.0);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/A1DB0E9F") + PlayerName(lv_voteKickTarget)) + StringExternal("Param/Value/23DC8EDE")));
                TriggerExecute(gt_AutoSave, true, false);
                libNtve_gf_UnitCreateFacingPoint(1, "Bob", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_marineHero[lv_voteKickTarget]), 5.0)), UnitGetPosition(gv_marineHero[lv_voteKickTarget]));
                lv_bob = UnitLastCreated();
                UnitWeaponAdd(lv_bob, "InfestedTalons", null);
                libNtve_gf_ChangeUnitDamage(lv_bob, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
                libNtve_gf_ChangeUnitDamage(lv_bob, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
                UnitBehaviorAdd(lv_bob, "Rampage", lv_bob, 2);
                UnitIssueOrder(lv_bob, OrderTargetingUnit(AbilityCommand("attack", 0), gv_marineHero[lv_voteKickTarget]), c_orderQueueReplace);
                while ((lv_voteKickTarget != lv_unitTransfer)) {
                    lv_unitTransfer += 1;
                }
                UnitGroupLoopBegin(UnitGroup(null, lv_voteKickTarget, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitSetOwner(UnitGroupLoopCurrent(), lv_unitTransfer, false);
                }
                UnitGroupLoopEnd();
                CameraLockInput(lv_voteKickTarget, true);
                libNtve_gf_HideGameUI(false, PlayerGroupSingle(lv_voteKickTarget));
                GameOver(lv_voteKickTarget, c_gameOverDefeat, false, true);
                UnitKill(gv_marineHero[lv_voteKickTarget]);
                Wait(2.0, c_timeReal);
                UnitKill(lv_bob);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VoteKick_Init () {
    gt_VoteKick = TriggerCreate("gt_VoteKick_Func");
    TriggerAddEventChatMessage(gt_VoteKick, c_playerAny, "-votekick", false);
    TriggerAddEventChatMessage(gt_VoteKick, c_playerAny, "-vk", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear
//--------------------------------------------------------------------------------------------------
bool gt_Clear_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupSingle(EventPlayer()), c_messageAreaAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Clear_Init () {
    gt_Clear = TriggerCreate("gt_Clear_Func");
    TriggerAddEventChatMessage(gt_Clear, c_playerAny, "-clear", true);
    TriggerAddEventChatMessage(gt_Clear, c_playerAny, "-c", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Squad Stats Check
//--------------------------------------------------------------------------------------------------
bool gt_SquadStatsCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_DisplaySquadInformation();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SquadStatsCheck_Init () {
    gt_SquadStatsCheck = TriggerCreate("gt_SquadStatsCheck_Func");
    TriggerAddEventChatMessage(gt_SquadStatsCheck, c_playerAny, "-squad", true);
    TriggerAddEventChatMessage(gt_SquadStatsCheck, c_playerAny, "-sq", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Civilians Check
//--------------------------------------------------------------------------------------------------
bool gt_CiviliansCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/BCE70FC0") + IntToText(gv_legionOfMeritCivsRescued)) + StringExternal("Param/Value/C6017D1E")));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CiviliansCheck_Init () {
    gt_CiviliansCheck = TriggerCreate("gt_CiviliansCheck_Func");
    TriggerAddEventChatMessage(gt_CiviliansCheck, c_playerAny, "-civs", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Location
//--------------------------------------------------------------------------------------------------
bool gt_TeamLocation_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_player;
    int[9] lv_playerOverheadText;
    unit lv_radarToon;
    bool lv_visibilityGenerated;

    // Variable Initialization
    lv_player = EventPlayer();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lv_playerOverheadText[init_i] = c_textTagNone;
    }
    lv_radarToon = gv_marineHero[lv_player];

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_marineHero[lv_player]) == false) && (UnitIsAlive(gv_playerPet[lv_player]) == true)) {
        lv_radarToon = gv_playerPet[lv_player];
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) && ((DistanceBetweenPoints(UnitGetPosition(lv_radarToon), UnitGetPosition(gv_marineHero[IntLoopCurrent()])) <= 30.0) || (gv_noNewbie == false))) {
            lv_visibilityGenerated = true;
            libNtve_gf_CreatePingFacingAngle(PlayerGroupActive(), gv_localModelPing[IntLoopCurrent()], UnitGetPosition(gv_marineHero[IntLoopCurrent()]), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0, 270.0);
            if ((UnitGetPropertyFixed(gv_marineHero[IntLoopCurrent()], c_unitPropLifePercent, c_unitPropCurrent) <= 50.0)) {
                PingSetColor(PingLastCreated(), Color(100.00, 0.00, 0.00));
            }

            PingSetUnit(PingLastCreated(), gv_marineHero[IntLoopCurrent()]);
            TextTagCreate((StringExternal("Param/Value/75B4E619") + ((UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[IntLoopCurrent()]), "Title Brief", 1) + PlayerName(IntLoopCurrent())) + StringExternal("Param/Value/472EBABF"))), 24, UnitGetPosition(gv_marineHero[IntLoopCurrent()]), 2.3, true, true, PlayerGroupActive());
            lv_playerOverheadText[IntLoopCurrent()] = TextTagLastCreated();
            TextTagAttachToUnit(lv_playerOverheadText[IntLoopCurrent()], gv_marineHero[IntLoopCurrent()], 2.3);
        }

    }
    IntLoopEnd();
    if ((lv_visibilityGenerated == true)) {
        Wait(3.0, c_timeReal);
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            TextTagDestroy(lv_playerOverheadText[IntLoopCurrent()]);
        }
        IntLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamLocation_Init () {
    gt_TeamLocation = TriggerCreate("gt_TeamLocation_Func");
    TriggerAddEventUnitAbility(gt_TeamLocation, null, AbilityCommand("TeamLocation", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Class Points Check
//--------------------------------------------------------------------------------------------------
bool gt_ClassPointsCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cPPlayer;
    int lv_playerIndex;
    int lv_player;

    // Variable Initialization
    lv_cPPlayer = StringToInt(StringSub(EventChatMessage(false), (StringFind(EventChatMessage(false), "-cp", c_stringCase) + 4), (StringFind(EventChatMessage(false), "-cp", c_stringCase) + 4)));
    lv_playerIndex = lv_cPPlayer;
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((lv_cPPlayer >= 1) && (lv_cPPlayer <= 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/73EE1705") + (PlayerName(lv_cPPlayer) + StringExternal("Param/Value/24CA23FD"))));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/C5477355") + IntToText(gv_playerCP[lv_playerIndex].lv_rifleman)));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/9EF2DD88") + IntToText(gv_playerCP[lv_playerIndex].lv_medic)));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/0C10B1B5") + IntToText(gv_playerCP[lv_playerIndex].lv_assaultFlamerTech)));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/F66465BA") + IntToText(gv_playerCP[lv_playerIndex].lv_recon)));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/CC0DFB19") + IntToText(gv_playerCP[lv_playerIndex].lv_marksman)));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/C0F5E603") + IntToText(gv_playerCP[lv_playerIndex].lv_demoFOChem)));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/38912845") + IntToText(gv_playerCP[lv_playerIndex].lv_engiePF)));
    UIDisplayMessage(PlayerGroupSingle(lv_player), c_messageAreaDebug, (StringExternal("Param/Value/F11D8AEC") + IntToText(gv_playerCP[lv_playerIndex].lv_commandoPO)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassPointsCheck_Init () {
    gt_ClassPointsCheck = TriggerCreate("gt_ClassPointsCheck_Func");
    TriggerAddEventChatMessage(gt_ClassPointsCheck, c_playerAny, "-cp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wins Check
//--------------------------------------------------------------------------------------------------
bool gt_WinsCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_winsPlayer;
    int lv_playerIndex;

    // Variable Initialization
    lv_winsPlayer = StringToInt(StringSub(EventChatMessage(false), 4, 4));
    lv_playerIndex = lv_winsPlayer;

    // Conditions
    if (testConds) {
        if (!(((lv_winsPlayer >= 1) && (lv_winsPlayer <= 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/0EB0EFBD") + (PlayerName(lv_winsPlayer) + StringExternal("Param/Value/CEF00F43"))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/159F8057") + (IntToText(gv_eCWinNormal[lv_playerIndex]) + (StringExternal("Param/Value/41CCC9EC") + (IntToText(gv_eCWinNM[lv_playerIndex]) + (StringExternal("Param/Value/5026006B") + (IntToText(gv_eCSpeed[lv_playerIndex]) + (StringExternal("Param/Value/92E41DAB") + (IntToText(gv_eCNMSpeed[lv_playerIndex]) + StringExternal("Param/Value/F0B80E2D"))))))))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/0BFEF73E") + (IntToText(gv_aCWinNormal[lv_playerIndex]) + (StringExternal("Param/Value/0D90E221") + (IntToText(gv_aCWinNM[lv_playerIndex]) + (StringExternal("Param/Value/541F9CD8") + (IntToText(gv_aCSpeed[lv_playerIndex]) + (StringExternal("Param/Value/E6C7544B") + (IntToText(gv_aCNMSpeed[lv_playerIndex]) + StringExternal("Param/Value/50700109"))))))))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/7E413997") + (IntToText(gv_sTWinNormal[lv_playerIndex]) + (StringExternal("Param/Value/42465C0C") + (IntToText(gv_sTWinNM[lv_playerIndex]) + (StringExternal("Param/Value/4C486936") + (IntToText(gv_sTSpeed[lv_playerIndex]) + (StringExternal("Param/Value/C17E81A3") + (IntToText(gv_sTNMSpeed[lv_playerIndex]) + StringExternal("Param/Value/F124FE3F"))))))))));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/4DC830E5") + (IntToText(gv_survivalWin[lv_playerIndex]) + (StringExternal("Param/Value/E298D78F") + (IntToText(gv_survivalWinNM[lv_playerIndex]) + StringExternal("Param/Value/33E4DF99"))))));
    Wait(3.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WinsCheck_Init () {
    gt_WinsCheck = TriggerCreate("gt_WinsCheck_Func");
    TriggerAddEventChatMessage(gt_WinsCheck, c_playerAny, "-w", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Check
//--------------------------------------------------------------------------------------------------
bool gt_AmmoCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/490BB556"));
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            if ((gv_marineMags[IntLoopCurrent()] <= 10)) {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((((StringExternal("Param/Value/6A4ECC86") + PlayerName(IntLoopCurrent())) + StringExternal("Param/Value/8CADF358")) + IntToText(gv_marineMags[IntLoopCurrent()])) + (StringExternal("Param/Value/B0C550E8") + (IntToText(gv_magazinesUsed[IntLoopCurrent()]) + StringExternal("Param/Value/18EC269C")))));
            }
            else {
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((((StringExternal("Param/Value/6F6A8D06") + PlayerName(IntLoopCurrent())) + StringExternal("Param/Value/7D0EC0E3")) + IntToText(gv_marineMags[IntLoopCurrent()])) + (StringExternal("Param/Value/8569CB3E") + (IntToText(gv_magazinesUsed[IntLoopCurrent()]) + StringExternal("Param/Value/DE9C0537")))));
            }
        }

    }
    IntLoopEnd();
    Wait(7.0, c_timeReal);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoCheck_Init () {
    gt_AmmoCheck = TriggerCreate("gt_AmmoCheck_Func");
    TriggerAddEventChatMessage(gt_AmmoCheck, c_playerAny, "-ammo", true);
    TriggerAddEventChatMessage(gt_AmmoCheck, c_playerAny, "-a", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Navy Cross
//--------------------------------------------------------------------------------------------------
bool gt_NavyCross_Func (bool testConds, bool runActions) {
    unitgroup autoACC841C2_g;
    int autoACC841C2_u;

    // Variable Declarations
    unit lv_marine;
    unit lv_inventoryItem;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_noNewbie == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_navyCrossFailed == false) && (gv_totalPlayers >= 3)) {
        TriggerEnable(gt_NavyCrossCheck, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/AA0161B7"));
        SoundPlay(SoundLink("TUISecret", -1), PlayerGroupAll(), 100.0, 0.0);
        gv_navyCrossMode = true;
        autoACC841C2_g = gv_marines;
        autoACC841C2_u = 1;
        for ( ; autoACC841C2_u <= UnitGroupCount(autoACC841C2_g, c_unitCountAll) ; autoACC841C2_u += BoolToInt(lv_marine == UnitGroupUnit(autoACC841C2_g, autoACC841C2_u)) ) {
            lv_marine = UnitGroupUnit(autoACC841C2_g, autoACC841C2_u);
            UnitGroupLoopBegin(UnitInventoryGroup(lv_marine));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitGetType(UnitGroupLoopCurrent()) == "Medpack") || (UnitGetType(UnitGroupLoopCurrent()) == "Bandage"))) {
                    UnitInventoryRemove(UnitGroupLoopCurrent());
                }

            }
            UnitGroupLoopEnd();
        }
        UnitGroupLoopBegin(UnitGroup("Medpack", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("Bandage", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/78E290D7"));
        SoundPlay(SoundLink("Alert_UniObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NavyCross_Init () {
    gt_NavyCross = TriggerCreate("gt_NavyCross_Func");
    TriggerAddEventChatMessage(gt_NavyCross, 1, "-navycross", true);
    TriggerAddEventChatMessage(gt_NavyCross, 1, "-nc", true);
    TriggerAddEventChatMessage(gt_NavyCross, 2, "-navycross", true);
    TriggerAddEventChatMessage(gt_NavyCross, 2, "-nc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightmare Mode
//--------------------------------------------------------------------------------------------------
bool gt_NightmareMode_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_noNewbie == true))) {
            return false;
        }

        if (!((gv_nightmare == false))) {
            return false;
        }

        if (!((gv_mode != 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_InfestorAI, true);
    gv_mode = 2;
    gv_nightmare = true;
    gv_difficulty = UserDataGetText("Mode", "Nightmare", "Mode Name", 1);
    gv_nightmare = true;
    gv_difficulty = UserDataGetText("Mode", "Nightmare", "Mode Name", 1);
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/MissionTimePanel/BackgroundImage");
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_commandcard_redframe_normal.dds", PlayerGroupAll());
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetDifficulty(PlayerGroupLoopCurrent(), 3);
    }
    PlayerGroupLoopEnd();
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 75.0, 0.0);
    if ((gv_totalPlayers == 8) && (gv_squadRating >= 2300)) {
        gv_spawnFactor += 1;
    }

    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((gv_infoPanelHeroRank + gv_difficulty) + gv_endStyling));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightmareMode_Init () {
    gt_NightmareMode = TriggerCreate("gt_NightmareMode_Func");
    TriggerEnable(gt_NightmareMode, false);
    TriggerAddEventChatMessage(gt_NightmareMode, 1, "-nightmare", true);
    TriggerAddEventChatMessage(gt_NightmareMode, 1, "-nm", true);
    TriggerAddEventChatMessage(gt_NightmareMode, 2, "-nightmare", true);
    TriggerAddEventChatMessage(gt_NightmareMode, 2, "-nm", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectator Mode - Type
//--------------------------------------------------------------------------------------------------
bool gt_SpectatorModeType_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_enteredString;
    int lv_spectatedPlayer;
    int lv_player;

    // Variable Initialization
    lv_enteredString = EventChatMessage(false);
    lv_spectatedPlayer = StringToInt(StringSub(lv_enteredString, 11, 11));
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((lv_spectatedPlayer >= 1) && (lv_spectatedPlayer <= 8)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(gv_marineHero[lv_player]) == true) || (UnitIsAlive(gv_playerPet[lv_player]) == true))) {
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaSubtitle, StringExternal("Param/Value/BDA42EE5"));
    }
    else {
        if (((UnitIsAlive(gv_marineHero[lv_spectatedPlayer]) == true) || (UnitIsAlive(gv_playerPet[lv_spectatedPlayer]) == true))) {
            Wait(1.1, c_timeReal);
            IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                DialogSetVisible(gv_spectatedDialog[IntLoopCurrent()], PlayerGroupSingle(lv_player), false);
            }
            IntLoopEnd();
            gf_Spectate(lv_player, lv_spectatedPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectatorModeType_Init () {
    gt_SpectatorModeType = TriggerCreate("gt_SpectatorModeType_Func");
    TriggerEnable(gt_SpectatorModeType, false);
    TriggerAddEventChatMessage(gt_SpectatorModeType, c_playerAny, "-spectate", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectator Mode - Click
//--------------------------------------------------------------------------------------------------
bool gt_SpectatorModeClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_usedDialogItem;
    int lv_spectatedPlayer;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_usedDialogItem = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((gv_spectatorModeOn[lv_player] == true))) {
            return false;
        }

        if (!(((lv_usedDialogItem == gv_teamStatusPortraitButton[1]) || (lv_usedDialogItem == gv_teamStatusPortraitButton[2]) || (lv_usedDialogItem == gv_teamStatusPortraitButton[3]) || (lv_usedDialogItem == gv_teamStatusPortraitButton[4]) || (lv_usedDialogItem == gv_teamStatusPortraitButton[5]) || (lv_usedDialogItem == gv_teamStatusPortraitButton[6]) || (lv_usedDialogItem == gv_teamStatusPortraitButton[7]) || (lv_usedDialogItem == gv_teamStatusPortraitButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_playerMarinePetDead[lv_player] == false)) {
    }
    else {
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((lv_usedDialogItem == gv_teamStatusPortraitButton[IntLoopCurrent()])) {
                lv_spectatedPlayer = IntLoopCurrent();
                break;
            }

        }
        IntLoopEnd();
        if (((UnitIsAlive(gv_marineHero[lv_spectatedPlayer]) == true) || (UnitIsAlive(gv_playerPet[lv_spectatedPlayer]) == true))) {
            Wait(1.1, c_timeReal);
            IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                DialogSetVisible(gv_spectatedDialog[IntLoopCurrent()], PlayerGroupSingle(lv_player), false);
            }
            IntLoopEnd();
            gf_Spectate(lv_player, lv_spectatedPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectatorModeClick_Init () {
    gt_SpectatorModeClick = TriggerCreate("gt_SpectatorModeClick_Func");
    TriggerEnable(gt_SpectatorModeClick, false);
    TriggerAddEventDialogControl(gt_SpectatorModeClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spectator Mode Off
//--------------------------------------------------------------------------------------------------
bool gt_SpectatorModeOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_gunshipActive[lv_player] == true) || (gv_cinematicMode == true) || (UnitIsAlive(gv_marineHero[lv_player]) == true) || (UnitIsAlive(gv_playerPet[lv_player]) == true))) {
    }
    else {
        gv_spectatorModeOn[lv_player] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SpectatorModeOff_Init () {
    gt_SpectatorModeOff = TriggerCreate("gt_SpectatorModeOff_Func");
    TriggerEnable(gt_SpectatorModeOff, false);
    TriggerAddEventChatMessage(gt_SpectatorModeOff, c_playerAny, "-spectateoff", true);
    TriggerAddEventChatMessage(gt_SpectatorModeOff, c_playerAny, "-spoff", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Manual Reload
//--------------------------------------------------------------------------------------------------
bool gt_ManualReload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reloadingUnit;
    int lv_reloadingPlayer;
    string lv_attackingWeapon;

    // Variable Initialization
    lv_reloadingUnit = EventUnit();
    lv_reloadingPlayer = UnitGetOwner(EventUnit());
    lv_attackingWeapon = UnitWeaponGet(lv_reloadingUnit, 1);

    // Conditions
    if (testConds) {
        if (!((gv_reloading[lv_reloadingPlayer] == false))) {
            return false;
        }

        if (!((gv_marineMags[lv_reloadingPlayer] > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((gv_marineRounds[lv_reloadingPlayer] >= 0) && (gv_marineRounds[lv_reloadingPlayer] <= 2)) == true)) {
        gv_smartReloadCount[lv_reloadingPlayer] += 1;
        if ((gv_smartReloadCount[lv_reloadingPlayer] == 15)) {
            gv_playerRating[lv_reloadingPlayer] += 1;
        }

        gf_ReloadMagazine(lv_reloadingPlayer, lv_reloadingUnit, ge_ReloadType_Perfect, lv_attackingWeapon);
    }
    else {
        gf_ReloadMagazine(lv_reloadingPlayer, lv_reloadingUnit, ge_ReloadType_Manual, lv_attackingWeapon);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ManualReload_Init () {
    gt_ManualReload = TriggerCreate("gt_ManualReload_Func");
    TriggerAddEventUnitAbility(gt_ManualReload, null, AbilityCommand("Reload", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Usage
//--------------------------------------------------------------------------------------------------
bool gt_AmmoUsage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_firingUnit;
    string lv_attackingWeapon;
    int lv_attackingPlayer;

    // Variable Initialization
    lv_firingUnit = EventUnit();
    lv_attackingWeapon = EventUnitGetWeapon();
    lv_attackingPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((lv_attackingWeapon != "Crowbar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_attackingWeapon == "Shotgun")) {
        gv_marineRounds[lv_attackingPlayer] = MaxI((gv_marineRounds[lv_attackingPlayer] - 2), 0);
    }
    else if ((lv_attackingWeapon == "BarrettM112")) {
        gv_marineRounds[lv_attackingPlayer] = MaxI((gv_marineRounds[lv_attackingPlayer] - 3), 0);
    }
    else if ((lv_attackingWeapon == "StingerMK3")) {
        gv_marineRounds[lv_attackingPlayer] = MaxI((gv_marineRounds[lv_attackingPlayer] - 10), 0);
    }
    else if (true) {
        gv_marineRounds[lv_attackingPlayer] = MaxI((gv_marineRounds[lv_attackingPlayer] - 1), 0);
    }
    gf_AmmoUsage(lv_attackingPlayer, lv_firingUnit, ge_ReloadType_Automatic, lv_attackingWeapon);
    if ((lv_attackingWeapon == "StingerMK3") && (gv_marineRounds[lv_attackingPlayer] < 10)) {
        UnitBehaviorAddPlayer(lv_firingUnit, "InsufficientAmmo", lv_attackingPlayer, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoUsage_Init () {
    gt_AmmoUsage = TriggerCreate("gt_AmmoUsage_Func");
    TriggerAddEventUnitStartedAttack2(gt_AmmoUsage, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ammo Usage L3
//--------------------------------------------------------------------------------------------------
bool gt_AmmoUsageL3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_firingUnit;
    string lv_attackingWeapon;
    int lv_attackingPlayer;
    int lv_ammoUsage;

    // Variable Initialization
    lv_firingUnit = EventUnit();
    lv_attackingWeapon = UnitWeaponGet(lv_firingUnit, 1);
    lv_attackingPlayer = EventPlayer();
    lv_ammoUsage = 5;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_marineRounds[lv_attackingPlayer] = MaxI((gv_marineRounds[lv_attackingPlayer] - lv_ammoUsage), 0);
    gf_AmmoUsage(lv_attackingPlayer, lv_firingUnit, ge_ReloadType_Automatic, lv_attackingWeapon);
    if ((lv_attackingWeapon == "L3GrenadeLauncher") && (gv_marineRounds[lv_attackingPlayer] < lv_ammoUsage)) {
        UnitBehaviorAddPlayer(lv_firingUnit, "InsufficientAmmo", lv_attackingPlayer, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AmmoUsageL3_Init () {
    gt_AmmoUsageL3 = TriggerCreate("gt_AmmoUsageL3_Func");
    TriggerAddEventUnitAbility(gt_AmmoUsageL3, null, AbilityCommand("L3LaunchGrenade", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Receives Damage
//--------------------------------------------------------------------------------------------------
bool gt_ReceivesDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marine;
    unit lv_attacker;
    int lv_player;
    int lv_playerIndex;
    fixed lv_damageReceived;

    // Variable Initialization
    lv_marine = EventUnit();
    lv_attacker = EventUnitDamageSourceUnit();
    lv_player = EventPlayer();
    lv_playerIndex = lv_player;
    lv_damageReceived = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((lv_damageReceived > 1.0))) {
            return false;
        }

        if (!((PlayerGroupHasPlayer(gv_activePlayers, lv_player) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_underAttack[lv_player] == false)) {
        gf_TeamStatusUnderAttackPortraitFlash(lv_playerIndex);
    }

    if ((lv_damageReceived > 50.0)) {
        CameraShakeStart(lv_player, c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 1.0, 100.0, 0.3);
    }

    if ((UnitGetPropertyFixed(lv_marine, c_unitPropShields, c_unitPropCurrent) <= 1.0)) {
        if ((EventUnitDamageEffect() != "MindLinkDamage") && (PlayerGroupHasPlayer(gv_marineSquad, EventUnitDamageSourcePlayer()) == false) && (EventUnitDamageEffect() != "LongboltMissileU") && (gv_gameOver == false)) {
            gv_hitsTaken[lv_playerIndex] += 1.0;
            gv_playerDamageTaken[lv_playerIndex] += EventUnitDamageAmount();
        }

        if ((gv_distinguishedServiceMedalFailed == false) && (UnitGroupHasUnit(gv_marines, lv_marine) == true) && ((UnitGetType(lv_attacker) == "Baneling") || (UnitGetType(lv_attacker) == "Beastling"))) {
            gv_distinguishedServiceMedalFailed = true;
            if ((gv_noNewbie == true)) {
                UnitFlashSelection(lv_marine, 5.0);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/567C561B"));
            }

        }

        if ((UnitIsAlive(lv_marine) == true) && (EventUnitDamageEffect() != "FaithSelfDamage") && (EventUnitDamageEffect() != "WarbotBDamage") && (UnitGroupHasUnit(gv_marines, lv_attacker) == false) && (EventUnitDamageEffect() != "NapalmBarrageDamage")) {
            if ((RandomInt(0, 90) == 1) && (UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) && ((gv_playerXP[lv_playerIndex] >= 1000) || (gv_nightmare == true)) && (lv_damageReceived > 10.0) && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (gf_AilmentResistanceCheck(lv_marine) == false)) {
                UnitBehaviorAdd(lv_marine, "ShortCircuit", lv_attacker, 1);
                gf_TipLocalNOTD(5000, lv_player, StringExternal("Param/Value/AD923496"));
            }
            else if ((((UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 80.0) && (RandomInt(0, 100) == 1)) || ((UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0) && (RandomInt(0, 10) == 1))) && (gv_playerXP[lv_playerIndex] >= 100) && (lv_damageReceived > 5.0) && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (gf_AilmentResistanceCheck(lv_marine) == false)) {
                UnitBehaviorAdd(lv_marine, "Cripple", lv_attacker, 1);
                gf_TipLocalNOTD(2500, lv_player, StringExternal("Param/Value/9E09463D"));
            }
            else if ((((UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) && (RandomInt(0, 90) == 1)) || ((UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 40.0) && (RandomInt(0, 10) == 1)) || ((UnitGetType(lv_attacker) == "Ultralisk") && (RandomInt(0, 2) == 1)) || ((UnitGetType(lv_attacker) == "BlackOps") && (gv_nightmare == true) && (UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0) && (RandomInt(0, 2) == 1))) && (gv_playerXP[lv_playerIndex] >= 100) && (lv_damageReceived > 5.0) && (gf_AilmentResistanceCheck(lv_marine) == false)) {
                UnitBehaviorAdd(lv_marine, "OpenWound", lv_attacker, 1);
                gf_TipLocalNOTD(1000, lv_player, StringExternal("Param/Value/795CA19E"));
            }
            else if (((RandomInt(0, 50) == 1) || (UnitGetType(lv_attacker) == "Parasite") || (UnitGetType(lv_attacker) == "Slither") || (((UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0) || (gv_nightmare == true)) && (RandomInt(0, 10) == 1))) && (EventUnitDamageEffect() != "BlackOpsSniperRifle") && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (EventUnitDamageEffect() != "L3GrenadeExplosionAlly") && (EventUnitDamageEffect() != "L3GrenadeExplosion") && (EventUnitDamageEffect() != "L3GrenadeExplosionDummy") && (UnitGetType(lv_marine) != "ChemicalExpert") && (gf_AilmentResistanceCheck(lv_marine) == false)) {
                UnitBehaviorAdd(lv_marine, "Venom", lv_attacker, 1);
            }
            else if ((((RandomInt(0, 65) == 1) && (gv_nightmare == true)) || ((RandomInt(0, 125) == 1) && (gv_nightmare == false))) && (UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 90.0) && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (gf_AilmentResistanceCheck(lv_marine) == false)) {
                UnitBehaviorAdd(lv_marine, "Blind", lv_attacker, 1);
                gf_TipLocalNOTD(5000, lv_player, StringExternal("Param/Value/D60C7F98"));
            }
            else if ((RandomInt(0, 125) == 1) && (UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 75.0) && (lv_damageReceived > 5.0) && ((gv_nightmare == true) || (gv_squadRating >= 1800)) && (EventUnitDamageEffect() != "BlackDogDamageAllies") && (EventUnitDamageEffect() != "DiamondbackBeam") && (EventUnitDamageEffect() != "X1EvisceratorBeamLevel2") && (EventUnitDamageEffect() != "X1EvisceratorBeamLevel3") && (gf_AilmentResistanceCheck(lv_marine) == false)) {
                UnitBehaviorAdd(lv_marine, "Madness", lv_attacker, 1);
            }
        }

    }

    if ((UnitGetPropertyFixed(lv_marine, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0) && (UnitGetPropertyFixed(lv_marine, c_unitPropShields, c_unitPropCurrent) <= 3.0) && (UnitIsAlive(lv_marine) == true) && (gv_playerLives[lv_playerIndex] > 0) && (gv_playerRecovery[lv_playerIndex] == false) && (EventUnitDamageEffect() != "FaithSelfDamage")) {
        gf_BadlyInjured(lv_marine);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReceivesDamage_Init () {
    gt_ReceivesDamage = TriggerCreate("gt_ReceivesDamage_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: L3 Kills
//--------------------------------------------------------------------------------------------------
bool gt_L3Kills_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(gv_marineHero[EventUnitDamageSourcePlayer()], c_unitPropKills, (libNtve_gf_UnitGetPropertyKills(gv_marineHero[EventUnitDamageSourcePlayer()], c_unitPropCurrent) + 1));
    UnitSetPropertyFixed(gv_marineHero[EventUnitDamageSourcePlayer()], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[EventUnitDamageSourcePlayer()], c_unitPropXP, c_unitPropCurrent) + StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(EventUnit())), "KillXP", 14))));
    UnitCreateEffectUnit(EventUnit(), "SharedExperienceSet", gv_marineHero[EventUnitDamageSourcePlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_L3Kills_Init () {
    gt_L3Kills = TriggerCreate("gt_L3Kills_Func");
    TriggerAddEventUnitDamaged(gt_L3Kills, null, c_unitDamageTypeAny, c_unitDamageFatal, "L3GrenadeExplosion");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Kill
//--------------------------------------------------------------------------------------------------
bool gt_TeamKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    unit lv_murderer;
    actor lv_localActorA;
    int lv_pNumber;

    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_murderer = libNtve_gf_KillingUnit();
    lv_pNumber = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerGroupHasPlayer(gv_marineSquad, libNtve_gf_KillingPlayer()) == true))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "VultureSpiderMinesDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "PolarityShiftDamageNegative"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "PolarityShiftDamagePositive"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "NapalmBarrageDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playerRating[libNtve_gf_KillingPlayer()] -= 5;
    gv_playerKarma[libNtve_gf_KillingPlayer()] -= 5;
    gv_playerIsBad[libNtve_gf_KillingPlayer()] = true;
    gv_victimOfTK[lv_pNumber] = true;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/C432DD06") + (PlayerName(lv_pNumber) + UserDataGetText("TeamKillTexts", "Death Texts", "Death Text", RandomInt(1, 5)))) + (PlayerName(libNtve_gf_KillingPlayer()) + StringExternal("Param/Value/BB54D75D"))));
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 100.0, 0.0);
    libNtve_gf_AttachModelToUnit(libNtve_gf_KillingUnit(), "BriefingUnitSelectRedSmall", "Ref_Center");
    lv_localActorA = libNtve_gf_ActorLastCreated();
    if ((gv_playerIsBad[lv_pNumber] == false)) {
        UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaSubtitle, StringExternal("Param/Value/A2F1CD75"));
        gv_tKedPlayer = lv_pNumber;
        gv_griefingPlayer = libNtve_gf_KillingPlayer();
        TriggerEnable(gt_KarmaBite, true);
    }

    Wait(20.0, c_timeReal);
    libNtve_gf_KillModel(lv_localActorA);
    TriggerEnable(gt_KarmaBite, false);
    TriggerExecute(gt_AutoSave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamKill_Init () {
    gt_TeamKill = TriggerCreate("gt_TeamKill_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Karma Bite
//--------------------------------------------------------------------------------------------------
bool gt_KarmaBite_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() == gv_tKedPlayer))) {
            return false;
        }

        if (!((gv_playerBanned[EventPlayer()] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerKarma[gv_griefingPlayer] = (gv_playerKarma[gv_griefingPlayer] - 25);
    gv_playerXP[gv_griefingPlayer] = (gv_playerXP[gv_griefingPlayer] - 100);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, (PlayerName(gv_griefingPlayer) + StringExternal("Param/Value/548D875C")));
    TriggerExecute(gt_AutoSave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KarmaBite_Init () {
    gt_KarmaBite = TriggerCreate("gt_KarmaBite_Func");
    TriggerEnable(gt_KarmaBite, false);
    TriggerAddEventChatMessage(gt_KarmaBite, c_playerAny, "-karmabite", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Up
//--------------------------------------------------------------------------------------------------
bool gt_LevelUp_Func (bool testConds, bool runActions) {
    int autoF9524932_n;
    int autoF9524932_i;

    // Variable Declarations
    unit lv_levelingUnit;
    int lv_ownerofLevelingUnit;

    // Variable Initialization
    lv_levelingUnit = EventUnit();
    lv_ownerofLevelingUnit = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_levelingUnit, "Basic_Hero") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_wave < 7)) {
        gf_TipLocalNOTD(500, lv_ownerofLevelingUnit, StringExternal("Param/Value/4A8E52F6"));
    }

    gv_talentsAvailable[lv_ownerofLevelingUnit] += 1;
    libNtve_gf_SetDialogItemText(gv_talentsAvailableDialog[lv_ownerofLevelingUnit], (StringExternal("Param/Value/82DEF515") + IntToText(gv_talentsAvailable[lv_ownerofLevelingUnit])), PlayerGroupActive());
    gf_UpdateAllTalentImages(lv_ownerofLevelingUnit);
    TechTreeUpgradeAddLevel(lv_ownerofLevelingUnit, "CriticalStrikeKnife", 1);
    UISetButtonHighlighted(PlayerGroupSingle(lv_ownerofLevelingUnit), AbilityCommand("Talents", 0), true);
    autoF9524932_n = 2;
    for (autoF9524932_i = 1; autoF9524932_i <= autoF9524932_n; autoF9524932_i += 1) {
        libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitButton[lv_ownerofLevelingUnit], Color(150*100/255,150*100/255,30*100/255), PlayerGroupAll());
        Wait(0.3, c_timeReal);
        libNtve_gf_SetDialogItemColor(gv_teamStatusPortraitButton[lv_ownerofLevelingUnit], Color(100,100,100), PlayerGroupAll());
        Wait(0.3, c_timeReal);
    }
    Wait(2.0, c_timeReal);
    UISetButtonHighlighted(PlayerGroupSingle(lv_ownerofLevelingUnit), AbilityCommand("Talents", 0), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LevelUp_Init () {
    gt_LevelUp = TriggerCreate("gt_LevelUp_Func");
    TriggerAddEventUnitGainLevel(gt_LevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pet Level Up
//--------------------------------------------------------------------------------------------------
bool gt_PetLevelUp_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_levelingUnit;
    int lv_ownerofLevelingUnit;

    // Variable Initialization
    lv_levelingUnit = EventUnit();
    lv_ownerofLevelingUnit = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_levelingUnit, "PetVeterancy") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_levelingUnit) != "ReaperMK13"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) < 7.0) || ((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) >= 7.0) && (UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) < 12.0)) || ((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) == 12.0)))) {
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, UserDataGetText("PredatorLevelUpText", "Predator", "Level Up Texts", (FixedToInt(UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent)) - 1)));
    }

    if ((UnitGetPropertyFixed(lv_levelingUnit, c_unitPropLevel, c_unitPropCurrent) == 10.0)) {
        gv_playerXP[lv_ownerofLevelingUnit] += 5;
        gv_playerRating[lv_ownerofLevelingUnit] += 1;
        gv_playerKarma[lv_ownerofLevelingUnit] += 1;
        UIDisplayMessage(PlayerGroupSingle(lv_ownerofLevelingUnit), c_messageAreaDebug, StringExternal("Param/Value/AA6FF1CB"));
        gf_Save(lv_ownerofLevelingUnit, gv_bankSize);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PetLevelUp_Init () {
    gt_PetLevelUp = TriggerCreate("gt_PetLevelUp_Func");
    TriggerEnable(gt_PetLevelUp, false);
    TriggerAddEventUnitGainLevel(gt_PetLevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Predator Dies
//--------------------------------------------------------------------------------------------------
bool gt_PredatorDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pNumber;

    // Variable Initialization
    lv_pNumber = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_pets, EventUnit());
    libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lv_pNumber], "Assets\\Textures\\terranportraittransition_static.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(gv_teamStatusPortraitButton[lv_pNumber], c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlSetAnimationState(gv_teamStatusPlayerPanel[lv_pNumber], PlayerGroupAll(), "MarineDeath", "PetDied");
    gv_playerMarinePetDead[lv_pNumber] = true;
    if ((PlayerStatus(lv_pNumber) == c_playerStatusLeft)) {
        DialogControlSetAnimationState(gv_teamStatusPlayerPanel[lv_pNumber], PlayerGroupAll(), "MarineDeath", "Leaver");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PredatorDies_Init () {
    gt_PredatorDies = TriggerCreate("gt_PredatorDies_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Helium-3 Acquired (Credits)
//--------------------------------------------------------------------------------------------------
bool gt_Helium3AcquiredCredits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_creditAllocation;
    int lv_creditPool;
    int lv_creditsEarned;
    int lv_index;
    fixed lv_multiplier;

    // Variable Initialization
    lv_creditPool = (5 * gv_totalPlayers);

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("UI_TerranNewUnitAcquired", -1), PlayerGroupAll(), 150.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/4F9763A6"));
    lv_creditAllocation = (lv_creditPool / PlayerGroupCount(gv_marineSquad));
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_index = PlayerGroupLoopCurrent();
        if ((gv_playerXP[lv_index] >= 120000)) {
            lv_multiplier = 2.2;
        }
        else if ((gv_playerXP[PlayerGroupLoopCurrent()] >= 80000)) {
            lv_multiplier = 1.9;
        }
        else if ((gv_playerXP[PlayerGroupLoopCurrent()] >= 40000)) {
            lv_multiplier = 1.6;
        }
        else if ((gv_playerXP[PlayerGroupLoopCurrent()] >= 10000)) {
            lv_multiplier = 1.3;
        }
        else if ((gv_playerXP[PlayerGroupLoopCurrent()] >= 5000)) {
            lv_multiplier = 1.0;
        }
        else if (true) {
            lv_multiplier = 0.5;
        }
        lv_creditsEarned = FixedToInt((IntToFixed(lv_creditAllocation) * lv_multiplier));
        gv_playerCredits[lv_index] += lv_creditsEarned;
        gv_playerLifeTimeCreditsAcquired[lv_index] += lv_creditsEarned;
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashLabel[lv_index], IntToText(gv_playerCredits[lv_index]), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashAcquiredLabel[lv_index], IntToText(gv_playerLifeTimeCreditsAcquired[lv_index]), PlayerGroupAll());
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Helium3AcquiredCredits_Init () {
    gt_Helium3AcquiredCredits = TriggerCreate("gt_Helium3AcquiredCredits_Func");
    TriggerAddEventPlayerEffectUsed(gt_Helium3AcquiredCredits, 0, "Helium3AcquiredSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dead Marine
//--------------------------------------------------------------------------------------------------
bool gt_DeadMarine_Func (bool testConds, bool runActions) {
    int auto15B9C099_n;
    int auto15B9C099_i;

    // Variable Declarations
    int lv_pNumber;
    unit lv_deadMarine;
    region lv_deathArea;

    // Variable Initialization
    lv_pNumber = EventPlayer();
    lv_deadMarine = EventUnit();
    lv_deathArea = RegionCircle(UnitGetPosition(lv_deadMarine), 2.2);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_marines, lv_deadMarine);
    UnitGroupLoopBegin(gv_kittens[lv_pNumber]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libNtve_gf_SetDialogItemImage(gv_teamStatusPortraitButton[lv_pNumber], "Assets\\Textures\\terranportraittransition_static.dds", PlayerGroupAll());
    libNtve_gf_SetDialogItemBlendMode(gv_teamStatusPortraitButton[lv_pNumber], c_triggerBlendModeAdd, PlayerGroupAll());
    DialogControlSetAnimationState(gv_teamStatusPlayerPanel[lv_pNumber], PlayerGroupAll(), "MarineDeath", "MarineDied");
    IntLoopBegin(0, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffsBackground[IntLoopCurrent()][lv_pNumber], "Assets\\Textures\\black.dds", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(gv_teamStatusDebuffs[IntLoopCurrent()][lv_pNumber], "Assets\\Textures\\black.dds", PlayerGroupAll());
    }
    IntLoopEnd();
    gf_DeathDisplay(EventUnitDamageEffect(), lv_pNumber, libNtve_gf_KillingUnit());
    auto15B9C099_n = (gv_marineMags[lv_pNumber] / 3);
    for (auto15B9C099_i = 1; auto15B9C099_i <= auto15B9C099_n; auto15B9C099_i += 1) {
        UnitCreate(1, "Magazine", 0, 0, RegionGetCenter(lv_deathArea), libNtve_gf_RandomAngle());
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_deathArea, UnitFilter((1 << c_targetFilterItem), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(lv_deathArea), true);
    }
    UnitGroupLoopEnd();
    if ((gv_playerRandom[lv_pNumber] == true)) {
        gv_playerKarma[lv_pNumber] += 5;
    }
    else {
        gv_playerKarma[lv_pNumber] += 1;
    }
    gv_hitsTaken[lv_pNumber] += 1;
    gf_DeathRating(lv_deadMarine, lv_pNumber);
    gf_Save(lv_pNumber, gv_bankSize);
    gf_UIUpdatePortraitTooltip(lv_pNumber);
    gf_DeathDialogDestruction(lv_pNumber);
    UIDisplayMessage(PlayerGroupSingle(lv_pNumber), c_messageAreaDebug, (StringExternal("Param/Value/C21BD67D") + (PlayerName(lv_pNumber) + StringExternal("Param/Value/DFDC255E"))));
    if ((gv_playerXP[lv_pNumber] < 500)) {
        UIDisplayMessage(PlayerGroupSingle(UnitGetOwner(EventUnit())), c_messageAreaSubtitle, UserDataGetText("NewbieDeathTips", "Standard Death Tips", "Tips", RandomInt(1, 5)));
    }

    if ((gv_alivePlayers == 0)) {
        gv_gameOver = true;
        return true;
    }

    if ((TriggerGetExecCount(TriggerGetCurrent()) == 0)) {
        TriggerEnable(gt_SpectatorModeOff, true);
        TriggerEnable(gt_SpectatorModeType, true);
        TriggerEnable(gt_SpectatorModeClick, true);
    }

    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    UnitGroupLoopBegin(AIGetAllEscorts(lv_deadMarine));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AIAttackWaveUseUnit(9, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(9, 0, false);
    gf_RemoveBoughtItems(lv_pNumber);
    gf_DeathCamera(lv_deathArea, lv_deadMarine, lv_pNumber);
    gv_fPS[lv_pNumber] = false;
    gf_CreatePredator(lv_pNumber, RegionRandomPoint(lv_deathArea));
    if ((gv_alivePlayers == 2)) {
        SoundPlay(SoundLink("TValerian02ADominionMarine600039", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    if ((gv_totalPlayers > 6) && ((gv_totalPlayers - gv_alivePlayers) == 5) && (gv_spawnFactor > 1)) {
        gv_spawnFactor -= 1;
    }
    else if ((gv_totalPlayers > 6) && ((gv_totalPlayers - gv_alivePlayers) == 3) && (gv_spawnFactor > 1)) {
        gv_spawnFactor -= 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DeadMarine_Init () {
    gt_DeadMarine = TriggerCreate("gt_DeadMarine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Psi Ops Death
//--------------------------------------------------------------------------------------------------
bool gt_PsiOpsDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_restoreVision;
    playergroup lv_deadPlayerMindlinkGroup;

    // Variable Initialization
    lv_restoreVision = true;
    lv_deadPlayerMindlinkGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "PsiOps"))) {
            return false;
        }

        if (!((gv_talentLevel[7][EventPlayer()] > 0))) {
            return false;
        }

        if (!((UnitGroupCount(gv_marines, c_unitCountAlive) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_mindLinkedGroup[EventPlayer()]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel1", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel2", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel3", 1);
        PlayerGroupAdd(lv_deadPlayerMindlinkGroup, UnitGetOwner(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    if ((gv_fieldNexusAlive == false)) {
        libNtve_gf_SetPlayerGroupAlliance(lv_deadPlayerMindlinkGroup, libNtve_ge_AllianceSetting_Ally);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PsiOpsDeath_Init () {
    gt_PsiOpsDeath = TriggerCreate("gt_PsiOpsDeath_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Immortal Revive
//--------------------------------------------------------------------------------------------------
bool gt_ImmortalRevive_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Immortal2"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == 14))) {
            return false;
        }

        if (!((RandomInt(0, 2) != 1))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "PrecisionShotLevel1Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "PrecisionShotLevel2Damage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OSOKLevel1BaseDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OSOKLevel1BarrettDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OSOKLevel2BaseDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OSOKLevel2BarrettDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OSOKLevel3BaseDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OSOKLevel3BarrettDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "OSOKLevel3NonHeroicKill"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "BURNDamageLevel1"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "BURNDamageLevel2"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "ShatterDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "BarrettM112"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "InfernoDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "NapalmBarrageDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(RandomFixed(1.5, 5.0), c_timeReal);
    if ((gv_cinematicMode == false)) {
        UnitRevive(EventUnit());
        UnitSetPropertyFixed(EventUnit(), c_unitPropLifePercent, 100.0);
        UnitGroupAdd(gv_zombieWave, EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ImmortalRevive_Init () {
    gt_ImmortalRevive = TriggerCreate("gt_ImmortalRevive_Func");
    TriggerAddEventUnitDamaged(gt_ImmortalRevive, null, c_unitDamageTypeAny, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zombie Death Effects
//--------------------------------------------------------------------------------------------------
bool gt_ZombieDeathEffects_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    point lv_localPointA;

    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_localPointA = UnitGetPosition(lv_deadUnit);

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_deadUnit) == "Devourer") || (UnitGetType(lv_deadUnit) == "ZombieLevel1") || (UnitGetType(lv_deadUnit) == "ZombieLevel2") || (UnitGetType(lv_deadUnit) == "Seeker") || (UnitGetType(lv_deadUnit) == "Hulk") || (UnitGetType(lv_deadUnit) == "InfestorTerran") || (UnitGetType(lv_deadUnit) == "Ultralisk") || (UnitGetType(lv_deadUnit) == "Infestor2") || (UnitGetType(lv_deadUnit) == "Titan")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_deadUnit) == "Devourer")) {
        Wait(RandomFixed(0.5, 1.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(0.1, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }

    }
    if ((((UnitGetType(lv_deadUnit) == "ZombieLevel1") || (UnitGetType(lv_deadUnit) == "ZombieLevel2") || (UnitGetType(lv_deadUnit) == "Seeker") || (UnitGetType(lv_deadUnit) == "Hulk") || (UnitGetType(lv_deadUnit) == "InfestorTerran")) && (RandomInt(0, 2) == 1))) {
        Wait(RandomFixed(1.5, 3.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Zergling", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }

    }
    if (((gv_squadRating >= 1800) || (gv_nightmare == true)) && ((UnitGetType(lv_deadUnit) == "Ultralisk") || (UnitGetType(lv_deadUnit) == "Infestor2"))) {
        Wait(RandomFixed(1.2, 3.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
            libNtve_gf_UnitCreateFacingPoint(3, "Parasite", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        }

    }
    if (((gv_squadRating >= 1800) || (gv_nightmare == true)) && (UnitGetType(lv_deadUnit) == "Titan")) {
        Wait(RandomFixed(1.5, 4.0), c_timeReal);
        if ((gv_cinematicMode == false)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreepLarge", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(0.1, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(2, "Immortal2", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZombieDeathEffects_Init () {
    gt_ZombieDeathEffects = TriggerCreate("gt_ZombieDeathEffects_Func");
    TriggerAddEventUnitDied(gt_ZombieDeathEffects, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Killed
//--------------------------------------------------------------------------------------------------
bool gt_InfestorKilled_Func (bool testConds, bool runActions) {
    int auto0B0DA9E5_n;
    int auto0B0DA9E5_i;

    // Variable Declarations
    point lv_localPointA;

    // Variable Initialization
    lv_localPointA = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Infestor2") || (UnitGetType(EventUnit()) == "InfestorBurrowed2")))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "PhantomSuicide") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_infestorLock) {
        Wait(1.0, c_timeGame);
    }
    gv_infestorLock = true;
    gv_infestorsAlive -= 1;
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
    libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreepLarge", 0, 14, lv_localPointA, RegionRandomPoint(RegionPlayableMap()));
    if ((gv_nightmare == true)) {
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    }

    if ((gv_nightmare == true)) {
        auto0B0DA9E5_n = gv_spawnFactor;
        for (auto0B0DA9E5_i = 1; auto0B0DA9E5_i <= auto0B0DA9E5_n; auto0B0DA9E5_i += 1) {
            UnitCreate(1, "Parasite", 0, 14, lv_localPointA, libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            UnitBehaviorAdd(UnitLastCreated(), "Rampage", UnitLastCreated(), 1);
            Wait(0.1, c_timeGame);
        }
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            UnitSetPropertyFixed(gv_marineHero[IntLoopCurrent()], c_unitPropXP, (UnitGetPropertyFixed(gv_marineHero[IntLoopCurrent()], c_unitPropXP, c_unitPropCurrent) + 75.0));
            Wait(0.3, c_timeGame);
        }
        else if ((UnitIsAlive(gv_playerPet[IntLoopCurrent()]) == true)) {
            UnitSetPropertyFixed(gv_playerPet[IntLoopCurrent()], c_unitPropXP, (UnitGetPropertyFixed(gv_playerPet[IntLoopCurrent()], c_unitPropXP, c_unitPropCurrent) + 75.0));
            Wait(0.3, c_timeGame);
        }
    }
    IntLoopEnd();
    SoundPlay(SoundLink("Dialogue_TransmissionStart", -1), PlayerGroupActive(), 100.0, 0.0);
    ObjectiveSetName(gv_infestorObjective, (StringExternal("Param/Value/B54DE278") + (IntToText((5 - gv_infestorsAlive)) + StringExternal("Param/Value/7616303C"))));
    if ((gv_infestorsAlive == 4)) {
        ObjectiveCreate(StringExternal("Param/Value/7029D8C6"), StringExternal("Param/Value/BEC11F18"), c_objectiveStateActive, false);
        gv_infestorObjective = ObjectiveLastCreated();
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E12BC6D4"));
        gf_TipNOTD(500, StringExternal("Param/Value/80F76E70"));
    }
    else if ((gv_infestorsAlive == 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_InfestorAI, false);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C53AFF68"));
        ObjectiveSetState(gv_infestorObjective, c_objectiveStateCompleted);
        if ((gv_noNewbie == true)) {
            gf_AwardPlayerXPNOTD(2);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/062A9941"));
        }
        else {
            gf_AwardPlayerXPNOTD(1);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/3F3D628D"));
        }
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) && (gv_playerRating[IntLoopCurrent()] < 1800)) {
                gv_playerRating[IntLoopCurrent()] += 1;
            }

        }
        IntLoopEnd();
        Wait(9.0, c_timeReal);
        ObjectiveDestroy(gv_infestorObjective);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    else if ((gv_infestorsAlive > 1)) {
        TextExpressionSetToken("Param/Expression/FC24AE7C", "A", IntToText(gv_infestorsAlive));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, TextExpressionAssemble("Param/Expression/FC24AE7C"));
    }
    else if (true) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/98CC211C"));
    }
    gv_infestorLock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorKilled_Init () {
    gt_InfestorKilled = TriggerCreate("gt_InfestorKilled_Func");
    TriggerEnable(gt_InfestorKilled, false);
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[1]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[2]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[3]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[4]"));
    TriggerAddEventUnitDied(gt_InfestorKilled, UnitRefFromVariable("gv_infestor[5]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor Ambient Spawns
//--------------------------------------------------------------------------------------------------
bool gt_InfestorAmbientSpawns_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_infestorsAlive > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    IntLoopBegin(gv_indexBaseValue, 5);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_infestor[IntLoopCurrent()]) == true) && (gv_totalPlayers > 2) && (gv_cinematicMode == false) && (UnitGetOwner(gv_infestor[IntLoopCurrent()]) == 14)) {
            AIAttackWaveSetTargetUnitGroup(14, gv_marines);
            gf_WaveSpawnAtRegion(libNtve_gf_DifficultyValueUnitType("ZombieLevel12", "ZombieLevel22", "ZombieLevel22", "ZombieLevel22"), RegionPlayableMap(), libNtve_gf_DifficultyValueInt(1, 1, 1, 1));
            AIAttackWaveSend(14, libNtve_gf_DifficultyValueInt(6, 4, 2, 0), true);
            UnitIssueOrder(gv_infestor[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
        }

    }
    IntLoopEnd();
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorAmbientSpawns_Init () {
    gt_InfestorAmbientSpawns = TriggerCreate("gt_InfestorAmbientSpawns_Func");
    TriggerEnable(gt_InfestorAmbientSpawns, false);
    TriggerAddEventTimePeriodic(gt_InfestorAmbientSpawns, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Infestor AI
//--------------------------------------------------------------------------------------------------
bool gt_InfestorAI_Func (bool testConds, bool runActions) {
    int auto153AFD8A_n;
    int auto153AFD8A_i;

    // Variable Declarations
    region lv_infestorArea;
    unit lv_aggroedInfestor;
    int lv_infestorOwner;
    unitgroup lv_banelingEggs;

    // Variable Initialization
    lv_aggroedInfestor = EventUnit();
    lv_infestorOwner = UnitGetOwner(EventUnit());
    lv_banelingEggs = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "Infestor2") || (UnitGetType(EventUnit()) == "InfestorBurrowed2")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((RandomInt(0, 5) == 1) && (gv_infestorAggroMode == false)) {
        gv_infestorAggroMode = true;
        Wait(3.0, c_timeReal);
        UnitSetTeamColorIndex(lv_aggroedInfestor, 6);
        if (((gv_squadRating >= 1700) || (gv_nightmare == true))) {
            Wait(7.0, c_timeReal);
        }
        else {
            Wait(9.0, c_timeReal);
        }
        UnitSetTeamColorIndex(lv_aggroedInfestor, 5);
        if (((gv_squadRating >= 1700) || (gv_nightmare == true))) {
            Wait(7.0, c_timeReal);
        }
        else {
            Wait(9.0, c_timeReal);
        }
        if ((UnitIsAlive(lv_aggroedInfestor) == true) && (gv_cinematicMode == false)) {
            lv_infestorArea = RegionCircle(UnitGetPosition(lv_aggroedInfestor), 3.0);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_aggroedInfestor), c_animNameDefault, "Spell", c_animFlagNonLooping, c_animTimeDefault);
            auto153AFD8A_n = gv_spawnFactor;
            for (auto153AFD8A_i = 1; auto153AFD8A_i <= auto153AFD8A_n; auto153AFD8A_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, "Egg", 0, lv_infestorOwner, RegionRandomPoint(lv_infestorArea), RegionRandomPoint(lv_infestorArea));
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                UnitGroupAdd(lv_banelingEggs, UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
                Wait(0.1, c_timeGame);
            }
            Wait(5.0, c_timeReal);
            UnitGroupLoopBegin(lv_banelingEggs);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitIsAlive(UnitGroupLoopCurrent()) == true) && (gv_cinematicMode == false)) {
                    if (((lv_infestorOwner == 13) || (lv_infestorOwner == 14))) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, lv_infestorOwner, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_infestorArea));
                    }
                    else if (((gv_squadRating >= 1700) || (gv_nightmare == true)) && ((lv_infestorOwner == 13) || (lv_infestorOwner == 14)) && (RandomInt(0, 2) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, lv_infestorOwner, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_infestorArea));
                    }
                    else if (true) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Sheep2", 0, 0, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_infestorArea));
                    }
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
                    UnitKill(UnitGroupLoopCurrent());
                    Wait(0.1, c_timeGame);
                }

            }
            UnitGroupLoopEnd();
            UnitSetTeamColorIndex(lv_aggroedInfestor, 1);
        }
        else {
            UnitSetTeamColorIndex(lv_aggroedInfestor, 1);
        }
        gv_infestorAggroMode = false;
    }
    else if ((RandomInt(0, 5) == 1) && ((UnitGetPropertyFixed(lv_aggroedInfestor, c_unitPropLifePercent, c_unitPropCurrent) <= 30.0) || ((gv_nightmare == true) && (UnitGetPropertyFixed(lv_aggroedInfestor, c_unitPropLifePercent, c_unitPropCurrent) <= 55.0)))) {
        UnitIssueOrder(lv_aggroedInfestor, Order(AbilityCommand("BurrowInfestor", 0)), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        UnitIssueOrder(lv_aggroedInfestor, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
        Wait(RandomFixed(5.0, 20.0), c_timeReal);
        UnitIssueOrder(lv_aggroedInfestor, Order(AbilityCommand("UnburrowInfestor", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_InfestorAI_Init () {
    gt_InfestorAI = TriggerCreate("gt_InfestorAI_Func");
    TriggerEnable(gt_InfestorAI, false);
    TriggerAddEventUnitAttacked2(gt_InfestorAI, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clear Immortal Enemies
//--------------------------------------------------------------------------------------------------
bool gt_ClearImmortalEnemies_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) <= 2.0)) {
            UnitKill(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup(null, 13, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) <= 2.0)) {
            UnitKill(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClearImmortalEnemies_Init () {
    gt_ClearImmortalEnemies = TriggerCreate("gt_ClearImmortalEnemies_Func");
    TriggerAddEventTimePeriodic(gt_ClearImmortalEnemies, 15.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Victory Bonus
//--------------------------------------------------------------------------------------------------
bool gt_VictoryBonus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_nMSpeed;
    bool lv_speed;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_totalPlayers > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    if ((((gv_noNewbie == true) && (gv_gameVictoryTime <= 3600.0)) || ((gv_noNewbie == false) && (gv_gameVictoryTime <= 3240.0)))) {
        if ((gv_nightmare == true)) {
            lv_nMSpeed = true;
        }
        else {
            lv_speed = true;
        }
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) || (gv_cPAwardException[IntLoopCurrent()] == true))) {
            gv_playerXP[IntLoopCurrent()] += (gv_playerXP[IntLoopCurrent()] / 10000);
            if ((gv_playerRating[IntLoopCurrent()] > 1500)) {
                gv_playerXP[IntLoopCurrent()] += ((gv_playerRating[IntLoopCurrent()] - 1500) / 100);
            }

            gf_WinUpdate(IntLoopCurrent(), lv_nMSpeed, lv_speed);
        }

    }
    IntLoopEnd();
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_VictoryBonusXP();
    if (((UnitIsAlive(gv_ogilvy) == true) || (UnitIsAlive(gv_ivan) == true))) {
        gf_AwardPlayerXPNOTD(3);
    }

    Wait(1.75, c_timeReal);
    gf_MedalofHonorAward(10);
    gf_BronzeStarAward(3);
    gf_CombatActionAward(1);
    gf_LifeSavingAward(2);
    gf_SilverStarAward(4);
    if ((gv_legionOfMeritCivsRescued >= 50)) {
        gf_LegionOfMeritAward(5);
    }

    if ((gv_distinguishedServiceMedalFailed == false)) {
        gf_DSMAward(6);
    }

    if ((gv_navyCrossFailed == false) && (gv_totalPlayers >= 3)) {
        gf_NavyCrossAward(7);
    }

    if (gf_ExpedCheck()) {
        gf_ExpeditionaryAward(8);
    }

    if ((gv_survivalMode == false)) {
        TriggerExecute(gt_ClassPointsUpdateVictoryOnly, true, false);
    }

    if (((lv_nMSpeed == true) || (lv_speed == true))) {
        gf_SpeedBonusXP();
        SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupActive(), 100.0, 0.0);
    }

    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VictoryBonus_Init () {
    gt_VictoryBonus = TriggerCreate("gt_VictoryBonus_Func");
    TriggerEnable(gt_VictoryBonus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Class Points Update (Victory Only)
//--------------------------------------------------------------------------------------------------
bool gt_ClassPointsUpdateVictoryOnly_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_playerClass;
    int lv_cPAwarded;

    // Variable Initialization
    lv_cPAwarded = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nightmare == true) && (gv_gameVictoryTime <= 3600.0)) {
        lv_cPAwarded = 2;
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if (((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) || (gv_cPAwardException[IntLoopCurrent()] == true))) {
            lv_playerClass = UnitGetType(gv_marineHero[IntLoopCurrent()]);
            TextExpressionSetToken("Param/Expression/444E0DF8", "A", UserDataGetText("Classes", gv_playerClass[IntLoopCurrent()], "Class CP Name", 1));
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, (StringExternal("Param/Value/7391DB71") + (IntToText(lv_cPAwarded) + TextExpressionAssemble("Param/Expression/444E0DF8"))));
            if ((lv_playerClass == "Rifleman")) {
                gv_playerCP[IntLoopCurrent()].lv_rifleman += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_rifleman > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_rifleman -= 1;
            }
            if ((lv_playerClass == "Medic2")) {
                gv_playerCP[IntLoopCurrent()].lv_medic += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_medic > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_medic -= 1;
            }
            if (((lv_playerClass == "TychusChaingun") || (lv_playerClass == "Flamethrower3") || (lv_playerClass == "Technician"))) {
                gv_playerCP[IntLoopCurrent()].lv_assaultFlamerTech += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_assaultFlamerTech > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_assaultFlamerTech -= 1;
            }
            if ((lv_playerClass == "Spectre")) {
                gv_playerCP[IntLoopCurrent()].lv_recon += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_recon > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_recon -= 1;
            }
            if ((lv_playerClass == "Marksman")) {
                gv_playerCP[IntLoopCurrent()].lv_marksman += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_marksman > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_marksman -= 1;
            }
            if (((lv_playerClass == "DominionKillTeam") || (lv_playerClass == "ForwardObserver") || (lv_playerClass == "ChemicalExpert"))) {
                gv_playerCP[IntLoopCurrent()].lv_demoFOChem += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_demoFOChem > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_demoFOChem -= 1;
            }
            if (((lv_playerClass == "Engineer") || (lv_playerClass == "Pathfinder"))) {
                gv_playerCP[IntLoopCurrent()].lv_engiePF += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_engiePF > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_engiePF -= 1;
            }
            if (((lv_playerClass == "Commando") || (lv_playerClass == "PsiOps"))) {
                gv_playerCP[IntLoopCurrent()].lv_commandoPO += lv_cPAwarded;
            }
            else if ((gf_CPDecayFactor() == true) && (gv_playerCP[IntLoopCurrent()].lv_commandoPO > 0)) {
                gv_playerCP[IntLoopCurrent()].lv_commandoPO -= 1;
            }
        }

    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassPointsUpdateVictoryOnly_Init () {
    gt_ClassPointsUpdateVictoryOnly = TriggerCreate("gt_ClassPointsUpdateVictoryOnly_Func");
    TriggerEnable(gt_ClassPointsUpdateVictoryOnly, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Return to Earth
//--------------------------------------------------------------------------------------------------
bool gt_ReturntoEarth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerNo;

    // Variable Initialization
    lv_playerNo = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((gv_victoryButton1 == EventDialogControl()) || (gv_victoryButton2 == EventDialogControl()) || (gv_scrollEndGameUIButtons[0] == EventDialogControl()) || (gv_scrollEndGameUIButtons[1] == EventDialogControl())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_victoryButton1 == EventDialogControl()) || (gv_victoryButton2 == EventDialogControl())) && (gv_playerExitButton[lv_playerNo] == false)) {
        gv_playerExitButton[lv_playerNo] = true;
        DialogSetVisible(gv_endGameDialog1, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_endGameDialog2, PlayerGroupSingle(EventPlayer()), false);
        gf_Save(lv_playerNo, gv_bankSize);
        if ((gv_victory == true)) {
            SoundPlay(SoundLink("UI_ScoreScreenMissionTime", -1), PlayerGroupSingle(lv_playerNo), 100.0, 0.0);
            Wait(2.0, c_timeReal);
            GameOver(EventPlayer(), c_gameOverVictory, false, true);
        }
        else {
            SoundPlay(SoundLink("UI_ScreenWipe", -1), PlayerGroupSingle(lv_playerNo), 100.0, 0.0);
            Wait(2.0, c_timeReal);
            GameOver(EventPlayer(), c_gameOverDefeat, false, true);
        }
    }
    else if ((gv_scrollEndGameUIButtons[0] == EventDialogControl())) {
        DialogSetVisible(gv_endGameDialog1, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_endGameDialog2, PlayerGroupSingle(EventPlayer()), true);
    }
    else if ((gv_scrollEndGameUIButtons[1] == EventDialogControl())) {
        DialogSetVisible(gv_endGameDialog2, PlayerGroupSingle(EventPlayer()), false);
        DialogSetVisible(gv_endGameDialog1, PlayerGroupSingle(EventPlayer()), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReturntoEarth_Init () {
    gt_ReturntoEarth = TriggerCreate("gt_ReturntoEarth_Func");
    TriggerEnable(gt_ReturntoEarth, false);
    TriggerAddEventDialogControl(gt_ReturntoEarth, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Check
//--------------------------------------------------------------------------------------------------
bool gt_GameOverCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ReceivesDamage, false);
    TriggerEnable(gt_DeadMarine, false);
    TriggerStop(gt_PeriodicTeamUIUpdate);
    TriggerEnable(gt_PeriodicTeamUIUpdate, false);
    ObjectiveDestroyAll(PlayerGroupAll());
    if ((gv_storyline != 3)) {
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
        UnitGroupLoopEnd();
    }

    if ((TimerGetElapsed(gv_gameTime) > 7200.0)) {
        gf_AwardRatingNOTD(-7);
    }
    else if ((TimerGetElapsed(gv_gameTime) > 5400.0)) {
        gf_AwardRatingNOTD(-3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GameOverCheck_Init () {
    gt_GameOverCheck = TriggerCreate("gt_GameOverCheck_Func");
    TriggerEnable(gt_GameOverCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NOTD Credits Roll
//--------------------------------------------------------------------------------------------------
bool gt_NOTDCreditsRoll_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitPauseAll(true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    IntLoopBegin(1, 9);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_ShowHideBossBar(false, IntLoopCurrent());
    }
    IntLoopEnd();
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "NOTDCredits", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(3.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/1F9EE955"), StringExternal("Param/Value/EC412052"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(5.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIClearMessages(PlayerGroupAll(), c_messageAreaObjective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/8BD93954"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/63D10F1E"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/41AFE9EF"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/78BDA520"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/972D5DD3"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/4F1C3E90"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/DD54E7F3"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/333C00A9"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/95D96637"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/8DF57A55"));
    Wait(3.9, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/5395DC74"));
    Wait(30.0, c_timeReal);
    if ((gv_victory == true)) {
        PlayerGroupLoopBegin(gv_marineSquad);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            GameOver(PlayerGroupLoopCurrent(), c_gameOverVictory, false, true);
        }
        PlayerGroupLoopEnd();
        GameOver(9, c_gameOverVictory, false, true);
        GameOver(13, c_gameOverDefeat, false, true);
        GameOver(14, c_gameOverDefeat, false, true);
    }
    else {
        PlayerGroupLoopBegin(gv_marineSquad);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, false, true);
        }
        PlayerGroupLoopEnd();
        GameOver(9, c_gameOverDefeat, false, true);
        GameOver(13, c_gameOverVictory, false, true);
        GameOver(14, c_gameOverVictory, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NOTDCreditsRoll_Init () {
    gt_NOTDCreditsRoll = TriggerCreate("gt_NOTDCreditsRoll_Func");
    TriggerEnable(gt_NOTDCreditsRoll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrels
//--------------------------------------------------------------------------------------------------
bool gt_Barrels_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ExplodingBarrelLarge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnit(), libNtve_gf_KillingPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Barrels_Init () {
    gt_Barrels = TriggerCreate("gt_Barrels_Func");
    TriggerAddEventUnitDied(gt_Barrels, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Barrel Kills
//--------------------------------------------------------------------------------------------------
bool gt_BarrelKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "ExplodingBarrelLarge"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(libNtve_gf_KillingPlayer(), "UnitsKilledCount", (PlayerScoreValueGetAsInt(libNtve_gf_KillingPlayer(), "UnitsKilledCount") + 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BarrelKills_Init () {
    gt_BarrelKills = TriggerCreate("gt_BarrelKills_Func");
    TriggerAddEventUnitDied(gt_BarrelKills, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate - Enter Airlock Main Gate Outer
//--------------------------------------------------------------------------------------------------
bool gt_GateEnterAirlockMainGateOuter_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(2622), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GateEnterAirlockMainGateOuter_Init () {
    gt_GateEnterAirlockMainGateOuter = TriggerCreate("gt_GateEnterAirlockMainGateOuter_Func");
    TriggerEnable(gt_GateEnterAirlockMainGateOuter, false);
    TriggerAddEventUnitRegion(gt_GateEnterAirlockMainGateOuter, null, RegionFromId(47), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate - Enter Airlock Main Gate Inner
//--------------------------------------------------------------------------------------------------
bool gt_GateEnterAirlockMainGateInner_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(287), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GateEnterAirlockMainGateInner_Init () {
    gt_GateEnterAirlockMainGateInner = TriggerCreate("gt_GateEnterAirlockMainGateInner_Func");
    TriggerEnable(gt_GateEnterAirlockMainGateInner, false);
    TriggerAddEventUnitRegion(gt_GateEnterAirlockMainGateInner, null, RegionFromId(2), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Navy Cross Check
//--------------------------------------------------------------------------------------------------
bool gt_NavyCrossCheck_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitInventoryItem()) == "Medpack") || (UnitGetType(EventUnitInventoryItem()) == "Bandage")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_navyCrossFailed = true;
    if ((gv_noNewbie == true)) {
        UnitFlashSelection(EventUnit(), 5.0);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/4B50586A"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NavyCrossCheck_Init () {
    gt_NavyCrossCheck = TriggerCreate("gt_NavyCrossCheck_Func");
    TriggerAddEventUnitInventoryChange(gt_NavyCrossCheck, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nightmare Bonus
//--------------------------------------------------------------------------------------------------
bool gt_NightmareBonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_nightmare == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AwardPlayerXPNOTD(10);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/EF4B1F62"));
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupActive(), 100.0, 0.0);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(PlayerGroupLoopCurrent()) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            if ((gv_playerRating[IntLoopCurrent()] >= 1800)) {
                gv_playerRating[IntLoopCurrent()] += 1;
            }
            else if ((gv_playerRating[IntLoopCurrent()] >= 1700)) {
                gv_playerRating[IntLoopCurrent()] += 2;
            }
            else if ((gv_playerRating[IntLoopCurrent()] >= 1600)) {
                gv_playerRating[IntLoopCurrent()] += 2;
            }
            else if (true) {
                gv_playerRating[IntLoopCurrent()] += 3;
            }
            if ((gv_playerXP[IntLoopCurrent()] <= 2000)) {
                gv_playerKarma[IntLoopCurrent()] += 2;
            }

        }

    }
    IntLoopEnd();
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NightmareBonus_Init () {
    gt_NightmareBonus = TriggerCreate("gt_NightmareBonus_Func");
    TriggerEnable(gt_NightmareBonus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter End Medic Rating Bonus
//--------------------------------------------------------------------------------------------------
bool gt_ChapterEndMedicRatingBonus_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_totalPlayers == gv_alivePlayers))) {
            return false;
        }

        if (!((gv_alivePlayers >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitGetType(gv_marineHero[IntLoopCurrent()]) == "Medic2") && (gv_playerRating[IntLoopCurrent()] < 2200)) {
            gv_playerRating[IntLoopCurrent()] += 1;
        }

    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ChapterEndMedicRatingBonus_Init () {
    gt_ChapterEndMedicRatingBonus = TriggerCreate("gt_ChapterEndMedicRatingBonus_Func");
    TriggerEnable(gt_ChapterEndMedicRatingBonus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vet Pug Game Bonus
//--------------------------------------------------------------------------------------------------
bool gt_VetPugGameBonus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_playerKarma[IntLoopCurrent()] >= FixedToInt((IntToFixed(gv_squadRating) * 1.1)))) {
            gv_playerXP[IntLoopCurrent()] += 1;
            gv_playerKarma[IntLoopCurrent()] += 1;
        }

    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_VetPugGameBonus_Init () {
    gt_VetPugGameBonus = TriggerCreate("gt_VetPugGameBonus_Func");
    TriggerEnable(gt_VetPugGameBonus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Check
//--------------------------------------------------------------------------------------------------
bool gt_AFKCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_index = PlayerGroupLoopCurrent();
        if ((libNtve_gf_UnitGetPropertyKills(gv_marineHero[lv_index], c_unitPropCurrent) < 12) && (UnitIsAlive(gv_marineHero[lv_index]) == true) && (gv_storyline != 3) && (gv_wave >= 2)) {
            UnitRemove(gv_marineHero[lv_index]);
            gv_playerKarma[lv_index] -= 15;
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (PlayerName(PlayerGroupLoopCurrent()) + StringExternal("Param/Value/4DD907D3")));
            gf_Save(PlayerGroupLoopCurrent(), gv_bankSize);
            GameOver(PlayerGroupLoopCurrent(), c_gameOverDefeat, false, false);
        }

    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("PipedreamsEmporium", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AFKCheck_Init () {
    gt_AFKCheck = TriggerCreate("gt_AFKCheck_Func");
    TriggerEnable(gt_AFKCheck, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetAnimationState(gv_teamStatusPlayerPanel[EventPlayer()], PlayerGroupAll(), "Player", "Leaver");
    if ((UnitIsAlive(gv_marineHero[EventPlayer()]) == true)) {
        gf_RemoveBoughtItems(EventPlayer());
    }

    PlayerGroupRemove(gv_activePlayers, EventPlayer());
    PlayerGroupAdd(gv_leavers, EventPlayer());
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) != c_playerStatusUnused)) {
            PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropCustom, c_playerPropOperSetTo, gv_playerXP[IntLoopCurrent()]);
            PlayerModifyPropertyInt(IntLoopCurrent(), c_playerPropTerrazine, c_playerPropOperSetTo, gv_playerCredits[IntLoopCurrent()]);
        }

    }
    IntLoopEnd();
    gf_RestoreLeaverControl();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerLeavesGame_Init () {
    gt_PlayerLeavesGame = TriggerCreate("gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Quits Game
//--------------------------------------------------------------------------------------------------
bool gt_PlayerQuitsGame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_victory == true)) {
        GameOver(EventPlayer(), c_gameOverVictory, false, true);
    }
    else {
        GameOver(EventPlayer(), c_gameOverDefeat, false, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PlayerQuitsGame_Init () {
    gt_PlayerQuitsGame = TriggerCreate("gt_PlayerQuitsGame_Func");
    TriggerAddEventGameMenuItemSelected(gt_PlayerQuitsGame, c_playerAny, c_gameMenuDialogQuitButton);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mine Shaft
//--------------------------------------------------------------------------------------------------
bool gt_MineShaft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_terminal1Present;
    bool lv_terminal2Present;
    int lv_mineShaftBossRoll;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(156), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(156), 0), c_unitCountAlive), 1.0);
        lv_terminal1Present = true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(157), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(157), 0), c_unitCountAlive), 1.0);
        lv_terminal2Present = true;
    }

    if (((GameIsTestMap(false) == true) || ((lv_terminal1Present == true) && (lv_terminal2Present == true)))) {
        TriggerEnable(TriggerGetCurrent(), false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/530F5DED"));
        gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/B6564F15"));
        Wait(3.5, c_timeReal);
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(156), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(157), "DecalProtoss");
        gf_TipNOTD(1000, StringExternal("Param/Value/FC9DE0D9"));
        Wait(1.0, c_timeReal);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/36A521CC"));
        SoundPlay(SoundLink("StoneZealot_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/C7E4B053"));
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.15, 1.0, 100.0, 5.5);
        }
        IntLoopEnd();
        Wait(0.5, c_timeReal);
        if ((gv_noNewbie == true)) {
            gf_MineBossSeth();
        }
        else {
            gf_MineBossZeusLeto();
        }
    }
    else {
        if ((gv_mineShaftReached == false)) {
            gv_mineShaftReached = true;
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/AFF5BDD4"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineShaft_Init () {
    gt_MineShaft = TriggerCreate("gt_MineShaft_Func");
    TriggerAddEventUnitRegion(gt_MineShaft, null, RegionFromId(156), true);
    TriggerAddEventUnitRegion(gt_MineShaft, null, RegionFromId(156), false);
    TriggerAddEventUnitRegion(gt_MineShaft, null, RegionFromId(157), true);
    TriggerAddEventUnitRegion(gt_MineShaft, null, RegionFromId(157), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seth Reinforcements
//--------------------------------------------------------------------------------------------------
bool gt_SethReinforcements_Func (bool testConds, bool runActions) {
    int autoBA69838F_n;
    int autoBA69838F_i;

    // Variable Declarations
    point lv_reinforcementDropPoint;
    unit lv_dropPod;
    int lv_sCVCount;

    // Variable Initialization
    lv_reinforcementDropPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_zeus), 7.0));
    lv_sCVCount = 1;

    // Conditions
    if (testConds) {
        if (!((RandomInt(0, 5) == 1))) {
            return false;
        }

        if (!((UnitIsAlive(gv_zeus) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nightmare == true)) {
        lv_sCVCount += 1;
    }

    UnitCreate(1, "TerranDropPod", 0, 0, lv_reinforcementDropPoint, RandomFixed(0.0, 360.0));
    lv_dropPod = UnitLastCreated();
    Wait(2.0, c_timeReal);
    autoBA69838F_n = lv_sCVCount;
    for (autoBA69838F_i = 1; autoBA69838F_i <= autoBA69838F_n; autoBA69838F_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "SCV", 0, 13, lv_reinforcementDropPoint, UnitGetPosition(gv_boss));
        UnitWeaponRemove(UnitLastCreated(), "FusionCutter");
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_zeus)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    UnitKill(lv_dropPod);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SethReinforcements_Init () {
    gt_SethReinforcements = TriggerCreate("gt_SethReinforcements_Func");
    TriggerEnable(gt_SethReinforcements, false);
    TriggerAddEventTimePeriodic(gt_SethReinforcements, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeus & Leto AI
//--------------------------------------------------------------------------------------------------
bool gt_ZeusLetoAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/E9ABE14F"));
    SoundPlay(SoundLink("CastanarUltraliskShackled_Stand01", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeusLetoAI_Init () {
    gt_ZeusLetoAI = TriggerCreate("gt_ZeusLetoAI_Func");
    TriggerEnable(gt_ZeusLetoAI, false);
    TriggerAddEventUnitBehaviorChange(gt_ZeusLetoAI, null, "Rampage", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeus & Leto Respawn
//--------------------------------------------------------------------------------------------------
bool gt_ZeusLetoRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingUnit;
    point lv_dyingSpot;
    string lv_deadUnitType;

    // Variable Initialization
    lv_dyingUnit = EventUnit();
    lv_dyingSpot = UnitGetPosition(EventUnit());
    lv_deadUnitType = UnitGetType(lv_dyingUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(4.0, c_timeReal);
    if ((lv_deadUnitType == "Zeus") && (UnitIsAlive(gv_leto) == true) && (gv_zeusLetoRespawnCount < gv_zeusLetoLives)) {
        UnitCreate(1, "Zeus", 0, 14, lv_dyingSpot, libNtve_gf_RandomAngle());
        gv_zeus = UnitLastCreated();
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitGroupAdd(gv_mineShaftMobs, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "SpawningSickness", UnitLastCreated(), 1);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
        SoundPlay(SoundLink("Ultralisk_Burrow", -1), PlayerGroupAll(), 200.0, 0.0);
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_dyingSpot) < 9.0)) {
                CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
            }

        }
        UnitGroupLoopEnd();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/76F1B733"));
        gf_TipNOTD(10000, StringExternal("Param/Value/7F7D63B3"));
        gv_zeusLetoRespawnCount += 1;
        TriggerEnable(TriggerGetCurrent(), true);
    }
    else if ((lv_deadUnitType == "Leto") && (UnitIsAlive(gv_zeus) == true) && (gv_zeusLetoRespawnCount < gv_zeusLetoLives)) {
        UnitCreate(1, "Leto", 0, 14, lv_dyingSpot, libNtve_gf_RandomAngle());
        gv_leto = UnitLastCreated();
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitGroupAdd(gv_mineShaftMobs, UnitLastCreated());
        UnitBehaviorAdd(UnitLastCreated(), "SpawningSickness", UnitLastCreated(), 1);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
        SoundPlay(SoundLink("Ultralisk_Burrow", -1), PlayerGroupAll(), 200.0, 0.0);
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), lv_dyingSpot) < 9.0)) {
                CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
            }

        }
        UnitGroupLoopEnd();
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/670FA8CE"));
        gf_TipNOTD(10000, StringExternal("Param/Value/8A3E12C6"));
        gv_zeusLetoRespawnCount += 1;
        TriggerEnable(TriggerGetCurrent(), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeusLetoRespawn_Init () {
    gt_ZeusLetoRespawn = TriggerCreate("gt_ZeusLetoRespawn_Func");
    TriggerEnable(gt_ZeusLetoRespawn, false);
    TriggerAddEventUnitDied(gt_ZeusLetoRespawn, UnitRefFromVariable("gv_zeus"));
    TriggerAddEventUnitDied(gt_ZeusLetoRespawn, UnitRefFromVariable("gv_leto"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Zeus & Leto Hardened Carapace
//--------------------------------------------------------------------------------------------------
bool gt_ZeusLetoHardenedCarapace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    fixed lv_damage;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_damage = EventUnitDamageAbsorbed();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() != "PenetratingDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_AttackerbehindTarget(lv_attackingUnit, lv_attackedUnit, 120.0)) {
        UnitDamage(lv_attackingUnit, "PenetratingDamage", lv_attackedUnit, (lv_damage * 0.95));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ZeusLetoHardenedCarapace_Init () {
    gt_ZeusLetoHardenedCarapace = TriggerCreate("gt_ZeusLetoHardenedCarapace_Func");
    TriggerEnable(gt_ZeusLetoHardenedCarapace, false);
    TriggerAddEventUnitDamaged(gt_ZeusLetoHardenedCarapace, UnitRefFromVariable("gv_zeus"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_ZeusLetoHardenedCarapace, UnitRefFromVariable("gv_leto"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mine Boss Kill
//--------------------------------------------------------------------------------------------------
bool gt_MineBossKill_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_mineShaftMobs, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(gv_mineShaftMobs, EventUnit());
    if ((UnitGroupCount(gv_mineShaftMobs, c_unitCountAlive) <= 0)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_ZeusLetoHardenedCarapace, false);
        TriggerEnable(gt_ZeusLetoAI, false);
        TriggerEnable(gt_ZeusLetoRespawn, false);
        gf_AwardPlayerXPNOTD(2);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/D3964E51"));
        gf_AwardRatingNOTD(1);
        gf_AwardMarineXPNOTD(50.0);
        Wait(3.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MineBossKill_Init () {
    gt_MineBossKill = TriggerCreate("gt_MineBossKill_Func");
    TriggerEnable(gt_MineBossKill, false);
    TriggerAddEventUnitDied(gt_MineBossKill, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM1 - Enter Comm Tower
//--------------------------------------------------------------------------------------------------
bool gt_OM1EnterCommTower_Func (bool testConds, bool runActions) {
    int autoD83EBFB7_n;
    int autoD83EBFB7_i;
    int auto7C4D7163_n;
    int auto7C4D7163_i;
    int autoE3374E1A_n;
    int autoE3374E1A_i;
    int auto38C311EA_n;
    int auto38C311EA_i;
    int auto67C1BE5D_n;
    int auto67C1BE5D_i;
    int auto4FCE3618_n;
    int auto4FCE3618_i;

    // Variable Declarations
    region lv_commSpawn;

    // Variable Initialization
    lv_commSpawn = RegionCircle(RegionGetCenter(RegionFromId(126)), 20.0);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_oMPerformanceTimer = 0;
    gv_oMCount = 0;
    gf_RadioNOTD(PlayerName(UnitGetOwner(EventUnit())), StringExternal("Param/Value/B6A4B582"));
    Wait(3.0, c_timeReal);
    libNtve_gf_DisplayBossBar(7, "Assets\\Textures\\btn-building-terran-surveillancestation.dds", StringExternal("Param/Value/1EE2C403"), 200, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(7, 0, true);
    libNtve_gf_SetBossBarRace(7, libNtve_ge_BossBarRace_Protoss, true);
    TriggerEnable(gt_OM1DownloadCycle, true);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/5B297F90"));
    Wait(RandomFixed(1.0, 15.0), c_timeReal);
    autoD83EBFB7_n = 5;
    for (autoD83EBFB7_i = 1; autoD83EBFB7_i <= autoD83EBFB7_n; autoD83EBFB7_i += 1) {
        auto7C4D7163_n = gv_spawnFactor;
        for (auto7C4D7163_i = 1; auto7C4D7163_i <= auto7C4D7163_n; auto7C4D7163_i += 1) {
            UnitCreate(1, "ZombieLevel22", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((gv_nightmare == true)) {
                UnitBehaviorAdd(UnitLastCreated(), "Rampage", UnitLastCreated(), 1);
            }

            Wait(0.25, c_timeReal);
        }
        Wait(RandomFixed(3.0, 5.0), c_timeReal);
    }
    autoE3374E1A_n = 7;
    for (autoE3374E1A_i = 1; autoE3374E1A_i <= autoE3374E1A_n; autoE3374E1A_i += 1) {
        auto38C311EA_n = (gv_spawnFactor * 2);
        for (auto38C311EA_i = 1; auto38C311EA_i <= auto38C311EA_n; auto38C311EA_i += 1) {
            if ((gv_nightmare == true) && (RandomInt(0, 4) == 1)) {
                gf_SmartSpawnNOTD("InfestorTerran2", 20.0);
            }
            else if ((gv_nightmare == true) && (RandomInt(0, 12) == 1)) {
                UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            }
            else if ((gv_noNewbie == true) && (RandomInt(0, 8) == 1)) {
                UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
            }
            else if ((RandomInt(0, 8) == 1)) {
                UnitCreate(1, "RoachBurrowed", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            }
            else if (true) {
                UnitCreate(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                if ((gv_nightmare == true)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Rampage", UnitLastCreated(), 1);
                }

            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.22, c_timeReal);
        }
        Wait(RandomFixed(1.0, 2.0), c_timeReal);
    }
    auto67C1BE5D_n = 10;
    for (auto67C1BE5D_i = 1; auto67C1BE5D_i <= auto67C1BE5D_n; auto67C1BE5D_i += 1) {
        auto4FCE3618_n = gv_spawnFactor;
        for (auto4FCE3618_i = 1; auto4FCE3618_i <= auto4FCE3618_n; auto4FCE3618_i += 1) {
            if ((gv_nightmare == true) && (RandomInt(0, 4) == 1)) {
                gf_SmartSpawnNOTD("InfestorTerran2", 20.0);
            }
            else if ((gv_nightmare == true) && (RandomInt(0, 12) == 1)) {
                UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            }
            else if ((gv_noNewbie == true) && (RandomInt(0, 8) == 1)) {
                UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
            }
            else if ((RandomInt(0, 8) == 1)) {
                UnitCreate(1, "RoachBurrowed", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            }
            else if (true) {
                UnitCreate(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(lv_commSpawn), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                if ((gv_noNewbie == true)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Rampage", UnitLastCreated(), 1);
                }

            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.35, c_timeReal);
            if ((RandomInt(0, 6) == 1)) {
                gf_SmartSpawnNOTD("UltraliskBurrowed", 17.0);
            }

        }
        Wait(RandomFixed(0.5, 1.0), c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM1EnterCommTower_Init () {
    gt_OM1EnterCommTower = TriggerCreate("gt_OM1EnterCommTower_Func");
    TriggerEnable(gt_OM1EnterCommTower, false);
    TriggerAddEventUnitRegion(gt_OM1EnterCommTower, null, RegionFromId(126), true);
    TriggerAddEventUnitRegion(gt_OM1EnterCommTower, null, RegionFromId(126), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM1 - Download Cycle
//--------------------------------------------------------------------------------------------------
bool gt_OM1DownloadCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;
    bool lv_uploadCheck;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_oMPerformanceTimer > 450)) {
        TriggerEnable(gt_OM1DownloadCycle, false);
        ObjectiveSetState(gv_commTowerObjective, c_objectiveStateFailed);
        gf_AwardRatingNOTD(-3);
        libNtve_gf_ShowHideBossBar(false, 7);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/D79ABDAA"));
        Wait(5.0, c_timeReal);
        gv_oMPerformanceTimer = 0;
        gv_oMCount = 0;
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
        ObjectiveDestroy(gv_commTowerObjective);

    }
    else {
        gv_oMPerformanceTimer += 1;
    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(126), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(126), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((lv_uploadCheck == true)) {
        if ((gv_oMCount == 194)) {
            if ((RandomInt(0, 1) == 1)) {
                SoundPlay(SoundLink("TValerian01BriefingKerrigan00010", -1), PlayerGroupActive(), 100.0, 0.0);
            }
            else {
                SoundPlay(SoundLink("TScene13Hanson009", -1), PlayerGroupActive(), 100.0, 0.0);
            }
        }
        else if ((gv_oMCount == 162)) {
            SoundPlay(SoundLink("TVMovieStatic", -1), PlayerGroupActive(), 80.0, 0.0);
        }
        else if ((gv_oMCount == 110)) {
            if ((RandomInt(0, 3) != 1)) {
                SoundPlay(SoundLink("TValerian02AWarfield00010", -1), PlayerGroupActive(), 80.0, 0.0);
            }
            else {
                SoundPlay(SoundLink("TScene12Mengsk011", -1), PlayerGroupActive(), 80.0, 0.0);
            }
        }
        else if ((gv_oMCount == 37)) {
            SoundPlay(SoundLink("TVMovieStatic", -1), PlayerGroupActive(), 80.0, 0.0);
        }
        else if ((gv_oMCount == 3)) {
            SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 80.0, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/F87A2562"));
        }
    }

    gv_oMCount += lv_dataPoints;
    if ((gv_oMCount > 200)) {
        gv_oMCount = 200;
    }
    else if ((gv_oMCount < 0)) {
        gv_oMCount = 0;
    }
    libNtve_gf_SetBossBarCurrentValue(7, gv_oMCount, true);
    if ((gv_oMCount >= 200)) {
        TriggerExecute(gt_OM1DownloadComplete, true, false);
        TriggerEnable(gt_OM1DownloadCycle, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM1DownloadCycle_Init () {
    gt_OM1DownloadCycle = TriggerCreate("gt_OM1DownloadCycle_Func");
    TriggerEnable(gt_OM1DownloadCycle, false);
    TriggerAddEventTimePeriodic(gt_OM1DownloadCycle, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM1 - Download Complete
//--------------------------------------------------------------------------------------------------
bool gt_OM1DownloadComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_OM1DownloadCycle, false);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(135), "DecalProtoss");
    if ((gv_oMPerformanceTimer > 300)) {
        ObjectiveSetState(gv_commTowerObjective, c_objectiveStateFailed);
        gf_AwardRatingNOTD(-2);
    }
    else {
        ObjectiveSetState(gv_commTowerObjective, c_objectiveStateCompleted);
        Wait(1.0, c_timeReal);
        gf_AwardPlayerXPNOTD(2);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/E19DF915"));
        if ((gv_oMPerformanceTimer <= 200)) {
            Wait(3.5, c_timeReal);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/A39FDECC"));
            gf_UnifiedAwards(3, 0.0, 0, 0, 1);
        }

    }
    Wait(5.0, c_timeReal);
    gv_oMPerformanceTimer = 0;
    gv_oMCount = 0;
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), UserDataGetText("CommunicationTowerCompletionMessages", "Completion", "Message", RandomInt(1, 3)));
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    libNtve_gf_ShowHideBossBar(false, 7);
    ObjectiveDestroy(gv_commTowerObjective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM1DownloadComplete_Init () {
    gt_OM1DownloadComplete = TriggerCreate("gt_OM1DownloadComplete_Func");
    TriggerEnable(gt_OM1DownloadComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM2a - Ogilvy Found
//--------------------------------------------------------------------------------------------------
bool gt_OM2aOgilvyFound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rescueBuddy;
    int lv_localTextTag;
    int lv_ogilvyIntroRoll;

    // Variable Initialization
    lv_rescueBuddy = EventUnit();
    lv_localTextTag = c_textTagNone;
    lv_ogilvyIntroRoll = RandomInt(1, 3);

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_ogilvysHideout))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(179), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(180), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(181), "DecalProtoss");
    UnitFlashSelection(EventUnit(), 1.0);
    Wait(1.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 1.5, 100.0, 0.0);
    UnitCreate(1, "Ogilvy", 0, 9, RegionRandomPoint(gv_ogilvysHideout), 270.0);
    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    AIAttackWaveUseUnit(9, UnitLastCreated());
    AIAttackWaveSend(9, 0, false);
    gv_ogilvy = UnitLastCreated();
    if ((gv_noNewbie == false)) {
        UnitWeaponRemove(gv_ogilvy, "Shotgun");
    }
    else {
        SoundPlayAtPoint(SoundLink("ShotgunPump", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 1.5, 50.0, 0.0);
    }
    Wait(2.0, c_timeGame);
    SoundPlay(SoundLink(UserDataGetSound("OgiIntros", UserDataInstance("OgiIntros", lv_ogilvyIntroRoll), "Voice", 1), c_soundIndexAny), PlayerGroupAll(), 100.0, 0.0);
    gf_RadioNOTD(gv_characterOgilvy, UserDataGetText("OgiIntros", UserDataInstance("OgiIntros", lv_ogilvyIntroRoll), "Speech", 1));
    while ((UnitIsAlive(gv_ogilvy) == true)) {
        Wait(6.0, c_timeReal);
        if ((RandomInt(0, 12) == 1)) {
            gf_MarineSpeechNOTD(gv_ogilvy, UserDataGetText("OgilvyComments", "Ogilvy Comments", "Comments", RandomInt(1, UserDataFieldValueCount("OgilvyComments", "Comments"))));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM2aOgilvyFound_Init () {
    gt_OM2aOgilvyFound = TriggerCreate("gt_OM2aOgilvyFound_Func");
    TriggerAddEventUnitRegion(gt_OM2aOgilvyFound, null, RegionFromId(179), true);
    TriggerAddEventUnitRegion(gt_OM2aOgilvyFound, null, RegionFromId(180), true);
    TriggerAddEventUnitRegion(gt_OM2aOgilvyFound, null, RegionFromId(181), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM2b - Ivan Found
//--------------------------------------------------------------------------------------------------
bool gt_OM2bIvanFound_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rescueBuddy;
    int lv_localTextTag;
    int lv_ivanChatterRoll;

    // Variable Initialization
    lv_rescueBuddy = EventUnit();
    lv_localTextTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_ogilvysHideout))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(179), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(180), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(181), "DecalProtoss");
    UnitFlashSelection(EventUnit(), 1.0);
    Wait(1.0, c_timeGame);
    SoundPlayAtPoint(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), UnitGetPosition(EventUnit()), 1.5, 100.0, 0.0);
    UnitCreate(1, "IvanPlushenko", 0, 9, RegionRandomPoint(gv_ogilvysHideout), libNtve_gf_RandomAngle());
    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    AIAttackWaveUseUnit(9, UnitLastCreated());
    AIAttackWaveSend(9, 0, false);
    gv_ivan = UnitLastCreated();
    Wait(2.0, c_timeGame);
    gf_RadioNOTD(gv_characterIvan, StringExternal("Param/Value/9F67405F"));
    while ((UnitIsAlive(gv_ivan) == true)) {
        Wait(6.0, c_timeReal);
        if ((RandomInt(0, 10) == 1)) {
            gf_MarineSpeechNOTD(gv_ivan, UserDataGetText("OgilvyComments", "Ivan Comments", "Comments", RandomInt(1, UserDataFieldValueCount("OgilvyComments", "Comments"))));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM2bIvanFound_Init () {
    gt_OM2bIvanFound = TriggerCreate("gt_OM2bIvanFound_Func");
    TriggerEnable(gt_OM2bIvanFound, false);
    TriggerAddEventUnitRegion(gt_OM2bIvanFound, null, RegionFromId(179), true);
    TriggerAddEventUnitRegion(gt_OM2bIvanFound, null, RegionFromId(180), true);
    TriggerAddEventUnitRegion(gt_OM2bIvanFound, null, RegionFromId(181), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM3 - Armory Turrets
//--------------------------------------------------------------------------------------------------
bool gt_OM3ArmoryTurrets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_engyPresent;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitGroupCount(UnitGroup("Engineer", c_playerAny, RegionFromId(186), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("ForwardObserver", c_playerAny, RegionFromId(186), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("DominionKillTeam", c_playerAny, RegionFromId(186), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Technician", c_playerAny, RegionFromId(186), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(186), 0), c_unitCountAlive), 1.0);
        lv_engyPresent += 1;
    }

    if (((UnitGroupCount(UnitGroup("Engineer", c_playerAny, RegionFromId(187), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("ForwardObserver", c_playerAny, RegionFromId(187), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("DominionKillTeam", c_playerAny, RegionFromId(187), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1) || (UnitGroupCount(UnitGroup("Technician", c_playerAny, RegionFromId(187), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 1))) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(187), 0), c_unitCountAlive), 1.0);
        lv_engyPresent += 1;
    }

    if ((lv_engyPresent >= 2)) {
        TriggerEnable(TriggerGetCurrent(), false);
        SoundPlay(SoundLink("THorner03DominionMarine100029", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(3.0, c_timeGame);
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(186), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(187), "DecalProtoss");
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/CE007033"));
        SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitGroupLoopBegin(UnitGroup("SentryGunUnderground", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), 9, false);
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(UnitGroup("SentryGun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetOwner(UnitGroupLoopCurrent(), 9, false);
        }
        UnitGroupLoopEnd();
    }
    else if ((lv_engyPresent < 2) && (RandomInt(0, 2) == 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/4C162120"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM3ArmoryTurrets_Init () {
    gt_OM3ArmoryTurrets = TriggerCreate("gt_OM3ArmoryTurrets_Func");
    TriggerAddEventUnitRegion(gt_OM3ArmoryTurrets, null, RegionFromId(186), true);
    TriggerAddEventUnitRegion(gt_OM3ArmoryTurrets, null, RegionFromId(187), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM4 - Scrapyard Salvage Init
//--------------------------------------------------------------------------------------------------
bool gt_OM4ScrapyardSalvageInit_Func (bool testConds, bool runActions) {
    int auto8E5D9675_n;
    int auto8E5D9675_i;
    int auto74E16195_n;
    int auto74E16195_i;
    int auto38DA8E45_n;
    int auto38DA8E45_i;
    int auto5048CD39_n;
    int auto5048CD39_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/B9C7B047"));
    Wait(5.0, c_timeGame);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/4C6356CF"));
    Wait(5.0, c_timeGame);
    ObjectiveCreate(StringExternal("Param/Value/A8D3B993"), StringExternal("Param/Value/98B4BF33"), c_objectiveStateActive, false);
    gv_scrapyardObjective = ObjectiveLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(29)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 45.0, 270.0);
    libNtve_gf_CreateModelAtPoint("PoisonGas", RegionGetCenter(RegionFromId(188)));
    gv_oMChemicalLeak = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("PoisonGas", RegionGetCenter(RegionFromId(189)));
    gv_oMChemicalLeak = libNtve_gf_ActorLastCreated();
    libNtve_gf_CreateModelAtPoint("PoisonGas", RegionGetCenter(RegionFromId(190)));
    gv_oMChemicalLeak = libNtve_gf_ActorLastCreated();
    if ((gv_noNewbie == false)) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(188)));
        gv_oMChemicalLeakIndicators[1] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(189)));
        gv_oMChemicalLeakIndicators[2] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(190)));
        gv_oMChemicalLeakIndicators[3] = libNtve_gf_ActorLastCreated();
    }

    while (!(((libNtve_gf_UnitInRegion(gv_marineHero[1], RegionFromId(189)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[2], RegionFromId(189)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[3], RegionFromId(189)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[4], RegionFromId(189)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[5], RegionFromId(189)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[6], RegionFromId(189)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[7], RegionFromId(189)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[8], RegionFromId(189)) == true)) && ((libNtve_gf_UnitInRegion(gv_marineHero[1], RegionFromId(190)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[2], RegionFromId(190)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[3], RegionFromId(190)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[4], RegionFromId(190)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[5], RegionFromId(190)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[6], RegionFromId(190)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[7], RegionFromId(190)) == true) || (libNtve_gf_UnitInRegion(gv_marineHero[8], RegionFromId(190)) == true)) && (DistanceBetweenPoints(libNtve_gf_CenterOfUnitGroup(gv_marines), RegionGetCenter(RegionFromId(29))) < 10.0) && (gv_alivePlayers > 1) && (gv_gameOver == false))) {
        Wait(2.0, c_timeReal);
    }
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/4928D541"));
    gv_oMCount2 = 0;
    gv_scrapyardSpawn[1] = RegionFromId(191);
    gv_scrapyardSpawn[2] = RegionFromId(29);
    gv_scrapyardSpawn[3] = RegionFromId(64);
    gv_scrapyardSpawn[4] = RegionFromId(83);
    gv_scrapyardSpawn[5] = RegionFromId(154);
    gv_scrapyardSpawn[6] = RegionFromId(77);
    gv_scrapyardSpawn[7] = RegionFromId(44);
    libNtve_gf_DisplayBossBar(8, "Assets\\Textures\\btn-tips-lab.dds", StringExternal("Param/Value/AF36E079"), 500, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(8, 0, true);
    libNtve_gf_SetBossBarRace(8, libNtve_ge_BossBarRace_Terran, true);
    TriggerEnable(gt_OM4ScrapyardSalvageCycle, true);
    Wait(7.0, c_timeGame);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/31C1EC9E"));
    auto8E5D9675_n = 60;
    for (auto8E5D9675_i = 1; auto8E5D9675_i <= auto8E5D9675_n; auto8E5D9675_i += 1) {
        Wait(RandomFixed(1.0, 17.0), c_timeReal);
        if ((gv_oMScrapyardComplete == false) && (gv_gameOver == false)) {
            if ((RandomInt(0, 3) == 1)) {
                auto74E16195_n = gv_spawnFactor;
                for (auto74E16195_i = 1; auto74E16195_i <= auto74E16195_n; auto74E16195_i += 1) {
                    UnitCreate(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(gv_scrapyardSpawn[RandomInt(1, 7)]), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    if ((gv_noNewbie == true)) {
                        UnitBehaviorAdd(UnitLastCreated(), "Rampage", UnitLastCreated(), 1);
                    }

                    Wait(0.1, c_timeGame);
                }
            }
            else if ((RandomInt(0, 3) == 1) && (gv_nightmare == true)) {
                auto38DA8E45_n = gv_spawnFactor;
                for (auto38DA8E45_i = 1; auto38DA8E45_i <= auto38DA8E45_n; auto38DA8E45_i += 1) {
                    UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(gv_scrapyardSpawn[RandomInt(1, 7)]), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    Wait(0.1, c_timeGame);
                }
            }
            else if (true) {
                auto5048CD39_n = gv_spawnFactor;
                for (auto5048CD39_i = 1; auto5048CD39_i <= auto5048CD39_n; auto5048CD39_i += 1) {
                    UnitCreate(1, "RoachBurrowed", 0, 14, RegionRandomPoint(gv_scrapyardSpawn[RandomInt(1, 7)]), libNtve_gf_RandomAngle());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    Wait(0.1, c_timeGame);
                }
            }
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM4ScrapyardSalvageInit_Init () {
    gt_OM4ScrapyardSalvageInit = TriggerCreate("gt_OM4ScrapyardSalvageInit_Func");
    TriggerEnable(gt_OM4ScrapyardSalvageInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM4 - Scrapyard Salvage Cycle
//--------------------------------------------------------------------------------------------------
bool gt_OM4ScrapyardSalvageCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;
    bool lv_uploadCheck;
    bool lv_messageA;
    bool lv_messageB;
    bool lv_messageC;
    bool lv_messageD;
    bool lv_messageE;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_oMPerformanceTimer += 1;
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(188), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(188), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(189), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(189), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(190), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(190), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((lv_uploadCheck == true)) {
        if ((gv_oMCount2 == 430)) {
            gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/2536E700"));
        }
        else if ((gv_oMCount2 == 235)) {
            gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/2466CEB3"));
        }
        else if ((gv_oMCount2 == 179)) {
            SoundPlay(SoundLink("THanson02Raynor00021", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else if ((gv_oMCount2 == 37)) {
            gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/0E448BB6"));
        }
        else if ((gv_oMCount2 == 3)) {
            SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 80.0, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/A8527790"));
        }
    }

    gv_oMCount2 += lv_dataPoints;
    if ((gv_oMCount2 > 500)) {
        gv_oMCount2 = 500;
    }
    else if ((gv_oMCount2 < 0)) {
        gv_oMCount2 = 0;
    }
    libNtve_gf_SetBossBarCurrentValue(8, gv_oMCount2, true);
    if ((gv_oMCount2 >= 500)) {
        gv_oMScrapyardComplete = true;
        TriggerEnable(gt_OM4ScrapyardSalvageCycle, false);
        TriggerExecute(gt_OM4ChemicalSealComplete, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM4ScrapyardSalvageCycle_Init () {
    gt_OM4ScrapyardSalvageCycle = TriggerCreate("gt_OM4ScrapyardSalvageCycle_Func");
    TriggerEnable(gt_OM4ScrapyardSalvageCycle, false);
    TriggerAddEventTimePeriodic(gt_OM4ScrapyardSalvageCycle, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM4 - Chemical Seal Complete
//--------------------------------------------------------------------------------------------------
bool gt_OM4ChemicalSealComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    IntLoopBegin(1, 3);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_KillModel(gv_oMChemicalLeak);
        libNtve_gf_KillModel(gv_oMChemicalLeakIndicators[IntLoopCurrent()]);
    }
    IntLoopEnd();
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(188), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(189), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(190), "DecalProtoss");
    ObjectiveSetState(gv_scrapyardObjective, c_objectiveStateCompleted);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/D326942E"));
    Wait(2.0, c_timeReal);
    libNtve_gf_CreateUnitsAtPoint2(1, "Helium3Canister", 0, 0, RegionGetCenter(RegionFromId(29)));
    gf_CreateItemLocalNOTD("Magazine", 8, RegionFromId(77));
    SoundPlay(SoundLink("UI_Achievement", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_nightmare == true)) {
        gf_AwardCreditsNOTD(90);
        gf_AwardPlayerXPNOTD(12);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/D4608DF2"));
    }
    else {
        gf_AwardCreditsNOTD(30);
        gf_AwardPlayerXPNOTD(8);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/F66082A6"));
    }
    if ((gv_oMPerformanceTimer <= 610)) {
        Wait(3.0, c_timeReal);
        gf_AwardPlayerXPNOTD(5);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/60AE9014"));
        gf_AwardRatingNOTD(2);
        gf_AwardCreditsNOTD(20);
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DF554EA2"));
    }

    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    ObjectiveDestroy(gv_scrapyardObjective);
    libNtve_gf_ShowHideBossBar(false, 8);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/77A56ECC"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM4ChemicalSealComplete_Init () {
    gt_OM4ChemicalSealComplete = TriggerCreate("gt_OM4ChemicalSealComplete_Func");
    TriggerEnable(gt_OM4ChemicalSealComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM5 - Ramirez Killed
//--------------------------------------------------------------------------------------------------
bool gt_OM5RamirezKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_playerKarma[libNtve_gf_KillingPlayer()] -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM5RamirezKilled_Init () {
    gt_OM5RamirezKilled = TriggerCreate("gt_OM5RamirezKilled_Func");
    TriggerAddEventUnitDied(gt_OM5RamirezKilled, UnitRefFromUnit(UnitFromId(824)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM5 - Ramirez's Taunts
//--------------------------------------------------------------------------------------------------
bool gt_OM5RamirezsTaunts_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitFromId(824)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MarineSpeechNOTD(UnitFromId(824), UserDataGetText("RamirezTaunts", "Taunts", "Intro Taunts", RandomInt(1, 5)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM5RamirezsTaunts_Init () {
    gt_OM5RamirezsTaunts = TriggerCreate("gt_OM5RamirezsTaunts_Func");
    TriggerEnable(gt_OM5RamirezsTaunts, false);
    TriggerAddEventUnitRegion(gt_OM5RamirezsTaunts, null, RegionFromId(197), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM6 - Comm Tower Transmission
//--------------------------------------------------------------------------------------------------
bool gt_OM6CommTowerTransmission_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/C1545F14"));
    SoundPlay(SoundLink("TVMovieStatic", -1), PlayerGroupActive(), 80.0, 0.0);
    Wait(5.0, c_timeGame);
    gf_RadioNOTD(gv_characterUnknownVoice1, StringExternal("Param/Value/18AC0827"));
    Wait(4.5, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice2, StringExternal("Param/Value/EE4F1DB0"));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice1, StringExternal("Param/Value/FB1CA73B"));
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice2, StringExternal("Param/Value/4990863D"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice1, StringExternal("Param/Value/1BE7E05D"));
    Wait(5.0, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/B9BE8668"));
    SoundPlay(SoundLink("TVMovieStatic", -1), PlayerGroupActive(), 80.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM6CommTowerTransmission_Init () {
    gt_OM6CommTowerTransmission = TriggerCreate("gt_OM6CommTowerTransmission_Func");
    TriggerAddEventUnitRegion(gt_OM6CommTowerTransmission, null, RegionFromId(126), true);
    TriggerAddEventUnitRegion(gt_OM6CommTowerTransmission, null, RegionFromId(126), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM7 - Charlie (Sec Team)
//--------------------------------------------------------------------------------------------------
bool gt_OM7CharlieSecTeam_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 25.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_ChangeUnitDamage(gv_charlie, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    gf_MarineSpeechNOTD(gv_charlie, StringExternal("Param/Value/85A69CBB"));
    Wait(2.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_charlie, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/2EAD96BB"), StringExternal("Param/Value/B4CE42F1"), 3.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_charlie, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/BF6B226E"), StringExternal("Param/Value/90B04124"), 3.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_charlie, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5C74CA8C"), StringExternal("Param/Value/C9002102"), 3.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    gf_AwardMarineXPNOTD(300.0);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitFlashSelection(UnitGroupLoopCurrent(), 1.5);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM7CharlieSecTeam_Init () {
    gt_OM7CharlieSecTeam = TriggerCreate("gt_OM7CharlieSecTeam_Func");
    TriggerEnable(gt_OM7CharlieSecTeam, false);
    TriggerAddEventUnitAttacked2(gt_OM7CharlieSecTeam, UnitRefFromVariable("gv_charlie"), null);
    TriggerAddEventUnitDamaged(gt_OM7CharlieSecTeam, UnitRefFromVariable("gv_charlie"), c_unitDamageTypeAny, c_unitDamageNonFatal, "CombatKnifeDamage");
    TriggerAddEventUnitDamaged(gt_OM7CharlieSecTeam, UnitRefFromVariable("gv_charlie"), c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM8 - Enter Bridge Terminal
//--------------------------------------------------------------------------------------------------
bool gt_OM8EnterBridgeTerminal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blackwatchOperator;
    unit lv_crazyman;

    // Variable Initialization
    lv_crazyman = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("TRaynor01Arcturus00007", -1), PlayerGroupActive(), 200.0, 0.0);
    }
    else if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("TRaynor01Arcturus00013", -1), PlayerGroupActive(), 200.0, 0.0);
    }
    else if (true) {
        SoundPlay(SoundLink("TRaynor01Arcturus00022", -1), PlayerGroupActive(), 200.0, 0.0);
    }
    UnitFlashSelection(EventUnit(), 1.5);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(207), "DecalProtoss");
    Wait(10.0, c_timeReal);
    CameraShakeStart(EventPlayer(), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 0.5);
    SoundPlay(SoundLink("Egg_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_noNewbie == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2F911E26"));
        UnitCreate(1, "BrainBug2", 0, 13, RegionRandomPoint(RegionFromId(217)), libNtve_gf_RandomAngle());
        gv_bBQ = UnitLastCreated();
        TriggerEnable(gt_OM8BBQDead, true);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBrainBug", 0)), c_orderQueueReplace);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        if ((gv_nightmare == true)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "Rampage", 14, 1);
        }

        UnitBehaviorAddPlayer(UnitLastCreated(), "Frenzy35", 14, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 2);
        UnitIssueOrder(gv_bBQ, OrderTargetingUnit(AbilityCommand("attack", 0), lv_crazyman), c_orderQueueReplace);
        Wait(3.0, c_timeReal);
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/4B3AA85B"));
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/1E217737"));
        UnitCreate(1, "BrainBug2", 0, 13, RegionRandomPoint(RegionFromId(217)), libNtve_gf_RandomAngle());
        gv_bBQ = UnitLastCreated();
        UnitSetPropertyFixed(gv_bBQ, c_unitPropLifeRegen, 0.0);
        UnitSetPropertyFixed(gv_bBQ, c_unitPropMovementSpeed, 2.0);
        TriggerEnable(gt_OM8BBQDead, true);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBrainBug", 0)), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM8EnterBridgeTerminal_Init () {
    gt_OM8EnterBridgeTerminal = TriggerCreate("gt_OM8EnterBridgeTerminal_Func");
    TriggerAddEventUnitRegion(gt_OM8EnterBridgeTerminal, null, RegionFromId(207), true);
    TriggerAddEventUnitRegion(gt_OM8EnterBridgeTerminal, null, RegionFromId(207), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM8 - BBQ Dead
//--------------------------------------------------------------------------------------------------
bool gt_OM8BBQDead_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AwardKarmaNOTD(1);
    if ((UnitGroupHasUnit(gv_marines, libNtve_gf_KillingUnit()) == true)) {
        gf_MarineSpeechNOTD(libNtve_gf_KillingUnit(), StringExternal("Param/Value/DDE2F324"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM8BBQDead_Init () {
    gt_OM8BBQDead = TriggerCreate("gt_OM8BBQDead_Func");
    TriggerEnable(gt_OM8BBQDead, false);
    TriggerAddEventUnitDied(gt_OM8BBQDead, UnitRefFromVariable("gv_bBQ"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM11 - Delta-2
//--------------------------------------------------------------------------------------------------
bool gt_OM11Delta2_Func (bool testConds, bool runActions) {
    int auto5FF2F29C_n;
    int auto5FF2F29C_i;
    int autoEE7024A0_n;
    int autoEE7024A0_i;
    int autoAF182A90_n;
    int autoAF182A90_i;

    // Variable Declarations
    bool lv_terminal1Present;
    bool lv_terminal2Present;
    unit lv_localUnitA;
    unit lv_localUnitB;
    int lv_localPlayerA;
    int lv_localPlayerB;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(229), 0), c_unitCountAlive) >= 1)) {
        lv_localUnitA = UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(229), 0), c_unitCountAlive);
        lv_localPlayerA = UnitGetOwner(lv_localUnitA);
        UnitFlashSelection(lv_localUnitA, 1.0);
        lv_terminal1Present = true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(230), 0), c_unitCountAlive) >= 1)) {
        lv_localUnitB = UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(230), 0), c_unitCountAlive);
        UnitFlashSelection(lv_localUnitB, 1.0);
        lv_terminal2Present = true;
    }

    if ((lv_terminal1Present == true) && (lv_terminal2Present == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(231), "DecalProtoss");
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/A731F8FB"));
        Wait(1.5, c_timeReal);
        SoundPlay(SoundLink("TRaynor01Raynor00037", -1), PlayerGroupAll(), 200.0, 0.0);
        gf_RadioNOTD(PlayerName(lv_localPlayerA), StringExternal("Param/Value/F2DBA6CF"));
        Wait(1.5, c_timeReal);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/933D376F"));
        auto5FF2F29C_n = gv_spawnFactor;
        for (auto5FF2F29C_i = 1; auto5FF2F29C_i <= auto5FF2F29C_n; auto5FF2F29C_i += 1) {
            UnitCreate(1, "Slasher2", 0, 14, RegionRandomPoint(RegionFromId(127)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSlasher", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(0.2, c_timeReal);
        }
        Wait(5.0, c_timeReal);
        autoEE7024A0_n = 3;
        for (autoEE7024A0_i = 1; autoEE7024A0_i <= autoEE7024A0_n; autoEE7024A0_i += 1) {
            UnitCreate(1, gv_civPool[RandomInt(0, 1)], c_unitCreateIgnorePlacement, lv_localPlayerA, RegionRandomPoint(RegionFromId(229)), libNtve_gf_RandomAngle());
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitGroupAdd(gv_colonists, UnitGroupLoopCurrent());
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "SpeedBuff35", UnitGroupLoopCurrent(), 1);
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
        }
        Wait(0.1, c_timeReal);
        autoAF182A90_n = 3;
        for (autoAF182A90_i = 1; autoAF182A90_i <= autoAF182A90_n; autoAF182A90_i += 1) {
            UnitCreate(1, gv_civPool[RandomInt(0, 1)], c_unitCreateIgnorePlacement, lv_localPlayerB, RegionRandomPoint(RegionFromId(230)), libNtve_gf_RandomAngle());
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitGroupAdd(gv_colonists, UnitGroupLoopCurrent());
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "SpeedBuff35", UnitGroupLoopCurrent(), 1);
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
            }
            UnitGroupLoopEnd();
        }
        SoundPlay(SoundLink("THanson03BCivilian400041", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM11Delta2_Init () {
    gt_OM11Delta2 = TriggerCreate("gt_OM11Delta2_Func");
    TriggerEnable(gt_OM11Delta2, false);
    TriggerAddEventUnitRegion(gt_OM11Delta2, null, RegionFromId(229), true);
    TriggerAddEventUnitRegion(gt_OM11Delta2, null, RegionFromId(229), false);
    TriggerAddEventUnitRegion(gt_OM11Delta2, null, RegionFromId(230), true);
    TriggerAddEventUnitRegion(gt_OM11Delta2, null, RegionFromId(230), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM12 - Enter Prisoner Holding Area
//--------------------------------------------------------------------------------------------------
bool gt_OM12EnterPrisonerHoldingArea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;

    // Variable Initialization
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeGame);
    UnitFlashSelection(lv_localUnitA, 1.5);
    gf_MarineSpeechNOTD(lv_localUnitA, UserDataGetText("PrisonerAreaSpeech", "Holding Area Speech", "Speech", gv_storyline));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM12EnterPrisonerHoldingArea_Init () {
    gt_OM12EnterPrisonerHoldingArea = TriggerCreate("gt_OM12EnterPrisonerHoldingArea_Func");
    TriggerAddEventUnitRegion(gt_OM12EnterPrisonerHoldingArea, null, RegionFromId(49), true);
    TriggerAddEventUnitRegion(gt_OM12EnterPrisonerHoldingArea, null, RegionFromId(49), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM12 - Prisoner 1 (John Anderton)
//--------------------------------------------------------------------------------------------------
bool gt_OM12Prisoner1JohnAnderton_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rescuer;

    // Variable Initialization
    lv_rescuer = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPoint(SoundLink("Raven_AutoTurretReleaseImpact", -1), PlayerGroupAll(), UnitGetPosition(lv_rescuer), 10.0, 100.0, 0.0);
    UnitFlashSelection(lv_rescuer, 1.5);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(50), "DecalProtoss");
    Wait(1.0, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "JohnAnderton", 0, 9, RegionGetCenter(RegionFromId(50)), UnitGetPosition(lv_rescuer));
    gv_john = UnitLastCreated();
    gf_MarineSpeechNOTD(gv_john, StringExternal("Param/Value/1318F7C5"));
    Wait(3.5, c_timeGame);
    gf_MarineSpeechNOTD(lv_rescuer, StringExternal("Param/Value/B596B021"));
    Wait(3.0, c_timeGame);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_john, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/1268688C"), StringExternal("Param/Value/E2F356E5"), 5.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeGame);
    gf_MarineSpeechNOTD(lv_rescuer, StringExternal("Param/Value/7D30020D"));
    Wait(6.0, c_timeGame);
    gf_MarineSpeechNOTD(gv_john, StringExternal("Param/Value/75E3312B"));
    Wait(1.0, c_timeGame);
    UnitCreate(1, "OccularImplants", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_john), 2.0)), libNtve_gf_RandomAngle());
    Wait(0.1, c_timeGame);
    UnitCreate(1, "OccularImplants", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_john), 2.0)), libNtve_gf_RandomAngle());
    while ((UnitIsAlive(gv_john) == true) && (UnitHasBehavior(gv_john, "ComplianceMatrix") == false)) {
        Wait(2.0, c_timeReal);
        if ((UnitIsAlive(lv_rescuer) == false)) {
            lv_rescuer = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
        }

        UnitIssueOrder(gv_john, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_rescuer), 2.5))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM12Prisoner1JohnAnderton_Init () {
    gt_OM12Prisoner1JohnAnderton = TriggerCreate("gt_OM12Prisoner1JohnAnderton_Func");
    TriggerEnable(gt_OM12Prisoner1JohnAnderton, false);
    TriggerAddEventUnitRegion(gt_OM12Prisoner1JohnAnderton, null, RegionFromId(50), true);
    TriggerAddEventUnitRegion(gt_OM12Prisoner1JohnAnderton, null, RegionFromId(50), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: OM12 - Prisoner 2 (Farica Augustin)
//--------------------------------------------------------------------------------------------------
bool gt_OM12Prisoner2FaricaAugustin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;

    // Variable Initialization
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlayAtPoint(SoundLink("Raven_AutoTurretReleaseImpact", -1), PlayerGroupAll(), UnitGetPosition(lv_localUnitA), 10.0, 100.0, 0.0);
    UnitFlashSelection(lv_localUnitA, 1.5);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(134), "DecalProtoss");
    Wait(1.0, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "FaricaAugustin", 0, 9, RegionGetCenter(RegionFromId(134)), UnitGetPosition(lv_localUnitA));
    gv_farica = UnitLastCreated();
    gf_MarineSpeechNOTD(gv_farica, StringExternal("Param/Value/1F87A3AE"));
    Wait(3.5, c_timeGame);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/4BE4FA98"));
    Wait(3.5, c_timeGame);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_farica, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/E4C92319"), StringExternal("Param/Value/9F8F350C"), 10.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeGame);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/F866572F"));
    Wait(5.0, c_timeGame);
    gf_MarineSpeechNOTD(gv_farica, StringExternal("Param/Value/1E60AEE9"));
    Wait(1.0, c_timeGame);
    UnitCreate(1, "AntiVenom", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_farica), 2.0)), libNtve_gf_RandomAngle());
    Wait(0.1, c_timeGame);
    UnitCreate(1, "AntiVenom", 0, 0, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_farica), 2.0)), libNtve_gf_RandomAngle());
    while ((UnitIsAlive(gv_farica) == true) && (UnitHasBehavior(gv_farica, "ComplianceMatrix") == false)) {
        Wait(2.0, c_timeReal);
        if ((UnitIsAlive(lv_localUnitA) == false)) {
            lv_localUnitA = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
        }

        UnitIssueOrder(gv_farica, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_localUnitA), 2.5))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OM12Prisoner2FaricaAugustin_Init () {
    gt_OM12Prisoner2FaricaAugustin = TriggerCreate("gt_OM12Prisoner2FaricaAugustin_Func");
    TriggerEnable(gt_OM12Prisoner2FaricaAugustin, false);
    TriggerAddEventUnitRegion(gt_OM12Prisoner2FaricaAugustin, null, RegionFromId(134), true);
    TriggerAddEventUnitRegion(gt_OM12Prisoner2FaricaAugustin, null, RegionFromId(134), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC Initialize
//--------------------------------------------------------------------------------------------------
bool gt_ECInitialize_Func (bool testConds, bool runActions) {
    int auto4EB69062_n;
    int auto4EB69062_i;
    int auto7630FAAF_n;
    int auto7630FAAF_i;
    int autoD2D6E049_n;
    int autoD2D6E049_i;
    int auto0208ACD1_n;
    int auto0208ACD1_i;
    int auto03D70C95_n;
    int auto03D70C95_i;

    // Variable Declarations
    unit lv_localUnitA;
    bool lv_warningCivSequence;
    unit lv_warningCiv;
    int lv_eCSpawnDirection;
    region[5] lv_eCSpawnSector;

    // Variable Initialization
    lv_eCSpawnDirection = RandomInt(0, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_eggVetSpawnAreas[0] = RegionFromId(174);
    gv_eggVetSpawnAreas[1] = RegionFromId(175);
    gv_eggVetSpawnAreas[2] = RegionFromId(176);
    lv_eCSpawnSector[0] = RegionFromId(238);
    lv_eCSpawnSector[1] = RegionFromId(44);
    lv_eCSpawnSector[2] = RegionFromId(128);
    lv_eCSpawnSector[3] = RegionFromId(237);
    TriggerEnable(gt_OptionalEnterLabChapter1DrBergmann, true);
    TriggerEnable(gt_ECOptionalCamMissionStart, true);
    TriggerEnable(gt_ECDelta1Transport, true);
    TriggerEnable(gt_ECW1EnterMine, true);
    gf_ZombieAIWorldEvents();
    gf_BlackMaskApplication();
    gf_ECEnvironmentalChanges();
    CameraSetBounds(gv_marineSquad, RegionFromId(113), true);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        TriggerDebugOutput(1, IntToText(PlayerGroupLoopCurrent()), true);
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(14), true, true);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(RegionGetCenter(RegionFromId(14)), 15.0), 60.0, true);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2457), 0.0, -1, 10, true);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(840), 7.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    if ((gv_noNewbie == true)) {
        UnitCreate(1, "P45GaussPistol", 0, 0, RegionRandomPoint(RegionFromId(14)), 270.0);
        UnitSetState(UnitFromId(178), c_unitStateSelectable, true);
    }

    Wait(9.0, c_timeReal);
    UnitCreate(1, "JohnAnderton", 0, 0, RegionRandomPoint(RegionFromId(180)), libNtve_gf_RandomAngle());
    gv_john = UnitLastCreated();
    UnitIssueOrder(gv_john, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(180)), 7.0))), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    UnitCreate(1, "FaricaAugustin", 0, 0, RegionRandomPoint(RegionFromId(103)), libNtve_gf_RandomAngle());
    gv_farica = UnitLastCreated();
    UnitIssueOrder(gv_farica, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionFromId(103))), c_orderQueueReplace);
    gf_TipNOTD(500, StringExternal("Param/Value/B325C06C"));
    Wait(9.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/10880E5C"));
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/E6C62A41"), StringExternal("Param/Value/B6028924"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/C0D70A82"));
    gf_CreateItemLocalNOTD("Magazine", 5, RegionFromId(14));
    if ((RandomInt(0, 10) == 1)) {
        lv_warningCivSequence = true;
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistFemale2", 0, 0, RegionRandomPoint(RegionFromId(44)), RegionRandomPoint(RegionFromId(1)));
        UnitBehaviorAdd(UnitLastCreated(), "Scared", UnitLastCreated(), 1);
        lv_warningCiv = UnitLastCreated();
        libNtve_gf_MakeUnitInvulnerable(lv_warningCiv, true);
        UnitIssueOrder(lv_warningCiv, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2399)), c_orderQueueReplace);
    }

    Wait(4.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/05BF5D82"));
    Wait(2.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    if ((lv_warningCivSequence == true)) {
        UnitSetOwner(lv_warningCiv, 9, false);
        UnitGroupAdd(gv_colonists, lv_warningCiv);
        if ((RandomInt(0, 1) == 1)) {
            SoundPlay(SoundLink("TRaynor01CivilianFemale500033", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            SoundPlay(SoundLink("TRaynor01CivilianFemale500035", -1), PlayerGroupAll(), 100.0, 0.0);
        }
    }

    Wait(1.5, c_timeReal);
    UnitGroupLoopBegin(UnitGroup("Magazine", c_playerAny, RegionFromId(14), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "LaserDesignatorLevel1", 0, 1);
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/78FBB322"));
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 80.0, 0.0);
    Wait(2.0, c_timeReal);
    libNtve_gf_MakeUnitInvulnerable(lv_warningCiv, false);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/C9E08783"), StringExternal("Param/Value/86F7A4EE"), 12.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(1.5, c_timeReal);
    if ((lv_warningCiv != null)) {
        gf_MarineSpeechNOTD(lv_warningCiv, StringExternal("Param/Value/8A179710"));
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDebug);
    Wait(4.5, c_timeReal);
    gf_TipNOTD(2000, StringExternal("Param/Value/D705BA5D"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/C9946C57"));
    Wait(3.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    UnitIssueOrder(UnitFromId(29), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_ECW1EnterMine, true);
    if ((RandomInt(0, 4) == 1)) {
        Wait(RandomFixed(4.0, 7.5), c_timeReal);
    }

    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    if ((RandomInt(0, 1) == 1)) {
        auto4EB69062_n = (gv_spawnFactor * 9);
        for (auto4EB69062_i = 1; auto4EB69062_i <= auto4EB69062_n; auto4EB69062_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(libNtve_gf_DifficultyValueInt(gv_spawnFactor, gv_spawnFactor, gv_spawnFactor, gv_spawnFactor), "ZerglingBurrowed", 0, 14, RegionRandomPoint(lv_eCSpawnSector[lv_eCSpawnDirection]), RegionRandomPoint(RegionFromId(45)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            AIAttackWaveUseGroup(14, UnitLastCreatedGroup());
            if ((gv_nightmare == true)) {
                AIAttackWaveAddWaypoint(14, PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_marines), 17.0, libNtve_gf_RandomAngle()), false);
            }

            Wait(RandomFixed(0.2, 1.1), c_timeGame);
            AIAttackWaveSend(14, 0, false);
        }
    }
    else if ((RandomInt(0, 1) == 1) && (gv_noNewbie == true)) {
        auto7630FAAF_n = (gv_spawnFactor * 3);
        for (auto7630FAAF_i = 1; auto7630FAAF_i <= auto7630FAAF_n; auto7630FAAF_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(lv_eCSpawnSector[lv_eCSpawnDirection]), RegionRandomPoint(RegionFromId(45)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            AIAttackWaveUseGroup(14, UnitLastCreatedGroup());
            AIAttackWaveSend(14, 0, false);
            AIAttackWaveSetTargetEscort(14, libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), 0);
            Wait(RandomFixed(0.1, 1.0), c_timeGame);
            libNtve_gf_UnitCreateFacingPoint(gv_spawnFactor, "ZerglingBurrowed", 0, 14, RegionRandomPoint(lv_eCSpawnSector[lv_eCSpawnDirection]), RegionRandomPoint(RegionFromId(45)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            AIAttackWaveUseGroup(14, UnitLastCreatedGroup());
            if ((gv_nightmare == true)) {
                AIAttackWaveAddWaypoint(14, PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_marines), 17.0, libNtve_gf_RandomAngle()), false);
            }

            AIAttackWaveSend(14, 0, false);
        }
    }
    else if (true) {
        autoD2D6E049_n = (gv_spawnFactor * 4);
        for (autoD2D6E049_i = 1; autoD2D6E049_i <= autoD2D6E049_n; autoD2D6E049_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(gv_spawnFactor, "ZombieLevel12", 0, 14, RegionRandomPoint(lv_eCSpawnSector[lv_eCSpawnDirection]), RegionRandomPoint(RegionFromId(45)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(RandomFixed(0.5, 1.5), c_timeGame);
            UnitGroupIssueOrder(gv_zombieWave, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), c_orderQueueReplace);
        }
    }
    Wait(1.5, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/14E935D9"));
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(1)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0);
    ObjectiveCreate(StringExternal("Param/Value/5B92DE4B"), StringExternal("Param/Value/A5C960A4"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TipAlertPanelClear(PlayerGroupAll());
    if ((gv_noNewbie == false)) {
        SoundPlay(SoundLink("TRaynor03Marine700004", -1), PlayerGroupActive(), 100.0, 0.0);
    }

    Wait(3.5, c_timeReal);
    lv_localUnitA = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lv_localUnitA, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, (StringExternal("Param/Value/B21AE36C") + PlayerName(UnitGetOwner(lv_localUnitA))), StringExternal("Param/Value/81403BCC"), 3.7, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((gv_playerXP[PlayerGroupLoopCurrent()] < 1000)) {
            HelpPanelAddTip(PlayerGroupSingle(PlayerGroupLoopCurrent()), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/C5E6DE57"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/96BE079C"), StringExternal("Param/Value/C9A2388C"), "NOTDPreviewImageJustin.dds");
        }

    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/8B5E5F28"), StringExternal("Param/Value/A6224D82"), 12.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    TipAlertPanelClear(PlayerGroupAll());
    gf_TipNOTD(500, StringExternal("Param/Value/D340B464"));
    Wait(1.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(2.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/80A4B9DE"));
    if ((gv_noNewbie == false)) {
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Sprint", 0), true);
    }

    TriggerEnable(gt_ManualSave, true);
    Wait(1.0, c_timeReal);
    gf_TipNOTD(500, StringExternal("Param/Value/75B54346"));
    auto0208ACD1_n = (gv_spawnFactor * 5);
    for (auto0208ACD1_i = 1; auto0208ACD1_i <= auto0208ACD1_n; auto0208ACD1_i += 1) {
        Wait(0.1, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(1)), RegionRandomPoint(RegionFromId(1)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionFromId(1))), c_orderQueueReplace);
    }
    Wait(0.1, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/169FB0FE"));
    auto03D70C95_n = 18;
    for (auto03D70C95_i = 1; auto03D70C95_i <= auto03D70C95_n; auto03D70C95_i += 1) {
        Wait(0.1, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, gv_civPool[RandomInt(0, 1)], 0, 9, RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(1)), 10.0)), RegionRandomPoint(RegionFromId(1)));
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(1)), 12.0))), c_orderQueueReplace);
        UnitGroupAdd(gv_episionCivilians, UnitLastCreated());
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        }
        else {
            UnitBehaviorAdd(UnitLastCreated(), "Scared", UnitLastCreated(), 1);
        }
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/BABD3C69"));
    Wait(0.1, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "PfcBrooks", 0, 9, RegionRandomPoint(RegionFromId(1)), RegionRandomPoint(RegionFromId(1)));
    UnitSetTeamColorIndex(UnitLastCreated(), 0);
    UnitGroupAdd(gv_episilonMinis, UnitLastCreated());
    Wait(0.1, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "CplIrvin", 0, 9, RegionRandomPoint(RegionFromId(1)), RegionRandomPoint(RegionFromId(1)));
    UnitSetTeamColorIndex(UnitLastCreated(), 0);
    UnitGroupAdd(gv_episilonMinis, UnitLastCreated());
    Wait(0.1, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "SgtStallans", 0, 9, RegionRandomPoint(RegionFromId(1)), RegionRandomPoint(RegionFromId(1)));
    UnitSetTeamColorIndex(UnitLastCreated(), 0);
    UnitGroupAdd(gv_episilonMinis, UnitLastCreated());
    gv_sgtStallans = UnitLastCreated();
    Wait(3.0, c_timeReal);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Sprint", 0), false);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(1)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0);
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(1)), 12.0);
    SoundPlay(SoundLink("THorner04CivilianFemale400053", -1), PlayerGroupActive(), 100.0, 0.0);
    if ((gv_squadRating >= 1750) && (gv_noNewbie == true)) {
        TriggerEnable(gt_STW3NorthWestCocoonSurprise, true);
    }

    Wait(4.0, c_timeReal);
    gv_wave = 1;
    Wait(6.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/7D1C3595"));
    if ((gv_noNewbie == false)) {
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("CombatKnife", 0), true);
    }

    Wait(4.0, c_timeReal);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("CombatKnife", 0), false);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/FF4D0407"));
    Wait(20.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/9C64BA34"));
    if ((gv_noNewbie == false)) {
        UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Talents", 0), true);
    }

    Wait(4.0, c_timeReal);
    UISetButtonHighlighted(PlayerGroupActive(), AbilityCommand("Talents", 0), false);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DCCA4B69"));
    Wait(55.0, c_timeReal);
    UnitAbilityEnable(UnitFromId(178), "move", true);
    UnitIssueOrder(UnitFromId(178), OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2377)), c_orderQueueReplace);
    libNtve_gf_MakeUnitUncommandable(UnitFromId(178), true);
    UnitSetState(UnitFromId(178), c_unitStateSelectable, false);
    UnitSetState(UnitFromId(2503), c_unitStateSelectable, false);
    Wait(3.0, c_timeReal);
    UnitRemove(UnitFromId(178));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECInitialize_Init () {
    gt_ECInitialize = TriggerCreate("gt_ECInitialize_Func");
    TriggerEnable(gt_ECInitialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECW1 - Enter Mine
//--------------------------------------------------------------------------------------------------
bool gt_ECW1EnterMine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_possibleEscorts;
    unit lv_escortUnit;

    // Variable Initialization
    lv_possibleEscorts = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ECW1EnterMine, false);
    gv_hitPar = 10;
    Wait(2.0, c_timeReal);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    PingCreate(PlayerGroupActive(), "PingWarning", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 5.0);
    Wait(3.9, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_episilonMinis, c_unitCountAlive), StringExternal("Param/Value/6189B259"));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/0650FCD8"));
    SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/08715614"));
    Wait(3.0, c_timeReal);
    if ((UnitGroupCount(gv_episionCivilians, c_unitCountAlive) > 0)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/AAD61ABF"));
    }
    else {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/BBBC11D8"));
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            gv_playerKarma[IntLoopCurrent()] -= 1;
            gv_playerRating[IntLoopCurrent()] -= 2;
        }
        IntLoopEnd();
    }
    Wait(2.5, c_timeReal);
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/42BB33F1"));
    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Marksman") && (UnitGetType(UnitGroupLoopCurrent()) != "Spectre")) {
            UnitGroupAdd(lv_possibleEscorts, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_episilonMinis);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        if ((UnitGroupCount(lv_possibleEscorts, c_unitCountAlive) > 0)) {
            lv_escortUnit = UnitGroupRandomUnit(lv_possibleEscorts, c_unitCountAlive);
        }
        else {
            lv_escortUnit = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
        }
        AIAttackWaveAddEscortUnit(9, UnitGroupLoopCurrent(), lv_escortUnit, RandomFixed(2.0, 3.0), libNtve_gf_RandomAngle());
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(9, 0, false);
    AISetGroupScriptControlled(gv_episionCivilians, false);
    AIAttackWaveUseGroup(9, gv_episionCivilians);
    AIAttackWaveSend(9, 0, false);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/05597CDB"));
    ObjectiveDestroy(gv_primaryObjective);
    Wait(3.9, c_timeReal);
    ObjectiveCreate(StringExternal("Param/Value/E5BA10F6"), StringExternal("Param/Value/28ED9C08"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(UnitGroup("PfcBrooks", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive), StringExternal("Param/Value/294C77B6"));
    gv_globalIntA = 0;
    Wait(2.0, c_timeReal);
    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-tips-missioncase.dds", StringExternal("Param/Value/AC9DAD4C"), 100, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(1, 0, true);
    libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Protoss, true);
    if ((gv_noNewbie == false)) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(18)));
        gv_hexModels[1] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(19)));
        gv_hexModels[2] = libNtve_gf_ActorLastCreated();
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(20)));
        gv_hexModels[3] = libNtve_gf_ActorLastCreated();
    }

    SoundPlay(SoundLink("DebriefsConfederateAdjutant00016", -1), PlayerGroupActive(), 100.0, 0.0);
    TriggerEnable(gt_W1DataTransferProcess, true);
    gf_EpsilonMineMobs();
    gf_TipNOTD(2000, StringExternal("Param/Value/FAE58401"));
    PlayerCreateEffectPoint(14, "MiningCampInfection", RegionGetCenter(RegionFromId(1)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECW1EnterMine_Init () {
    gt_ECW1EnterMine = TriggerCreate("gt_ECW1EnterMine_Func");
    TriggerEnable(gt_ECW1EnterMine, false);
    TriggerAddEventUnitRegion(gt_ECW1EnterMine, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W1 - Data Transfer Process
//--------------------------------------------------------------------------------------------------
bool gt_W1DataTransferProcess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_performanceTimer += 1;
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(18), 0), c_unitCountAlive) >= 1)) {
        gf_TerminalUpdate(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(18), 0), c_unitCountAlive), 0.5);
        lv_dataPoints += 1;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(19), 0), c_unitCountAlive) >= 1)) {
        gf_TerminalUpdate(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(19), 0), c_unitCountAlive), 0.5);
        lv_dataPoints += 1;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(20), 0), c_unitCountAlive) >= 1)) {
        gf_TerminalUpdate(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(20), 0), c_unitCountAlive), 0.5);
        lv_dataPoints += 1;
    }

    if ((lv_dataPoints > 0)) {
        if ((gv_globalIntA == 94)) {
            gf_LogEntryPlayback(5);
        }
        else if ((gv_globalIntA == 77)) {
            gf_LogEntryPlayback(4);
        }
        else if ((gv_globalIntA == 51)) {
            gf_LogEntryPlayback(3);
        }
        else if ((gv_globalIntA == 29)) {
            gf_LogEntryPlayback(2);
        }
        else if ((gv_globalIntA == 3)) {
            gf_LogEntryPlayback(1);
        }
    }

    gv_globalIntA = MinI((gv_globalIntA + lv_dataPoints), 100);
    libNtve_gf_SetBossBarCurrentValue(1, gv_globalIntA, true);
    if ((gv_globalIntA == 100)) {
        TriggerExecute(gt_W1DataTransferComplete, true, false);
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W1DataTransferProcess_Init () {
    gt_W1DataTransferProcess = TriggerCreate("gt_W1DataTransferProcess_Func");
    TriggerEnable(gt_W1DataTransferProcess, false);
    TriggerAddEventTimePeriodic(gt_W1DataTransferProcess, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W1 - Data Transfer Complete
//--------------------------------------------------------------------------------------------------
bool gt_W1DataTransferComplete_Func (bool testConds, bool runActions) {
    playergroup autoEE83792D_g;
    int autoEE83792D_p;

    // Variable Declarations
    int lv_marinePlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ECC1AmbientSpawns();
    if ((gv_noNewbie == false)) {
        libNtve_gf_KillModel(gv_hexModels[1]);
        libNtve_gf_KillModel(gv_hexModels[2]);
        libNtve_gf_KillModel(gv_hexModels[3]);
    }

    Wait(1.0, c_timeReal);
    libNtve_gf_RemoveDoodadsinRegion(RegionCircle(RegionGetCenter(RegionFromId(19)), 15.0), "DecalProtoss");
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/16E1B302"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardPlayerXPNOTD(1);
    gv_hitPar = 30;
    if ((gv_performanceTimer <= 36)) {
        Wait(2.0, c_timeReal);
        gf_AwardPlayerXPNOTD(1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/797FC265"));
        autoEE83792D_g = gv_marineSquad; 
        autoEE83792D_p = 1;
        for ( ; autoEE83792D_p <= PlayerGroupCount(autoEE83792D_g) ; autoEE83792D_p += BoolToInt(lv_marinePlayer == PlayerGroupPlayer(autoEE83792D_g, autoEE83792D_p)) ) {
            lv_marinePlayer = PlayerGroupPlayer(autoEE83792D_g, autoEE83792D_p);
            if ((UnitIsAlive(gv_marineHero[lv_marinePlayer]) == true) && (((gv_noNewbie == true) && (gv_playerRating[lv_marinePlayer] < 1625)) || ((gv_noNewbie == false) && (gv_playerRating[lv_marinePlayer] < 1550)))) {
                gv_playerRating[lv_marinePlayer] += 1;
            }

        }
    }

    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/0BFFA1DA"));
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    libNtve_gf_ShowHideBossBar(false, 1);
    if ((gv_noNewbie == false)) {
        CameraSetBounds(PlayerGroupActive(), RegionFromId(149), true);
    }
    else {
        CameraSetBounds(PlayerGroupActive(), RegionPlayableMap(), true);
    }
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/9BE1C351"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(3)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(3), true, false);
    }
    PlayerGroupLoopEnd();
    gf_FlareAreaRecruit(RegionGetCenter(RegionFromId(3)), 12.0);
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/8956F522"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/041ADC4A"), StringExternal("Param/Value/2FAEA4BE"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerExecute(gt_ShowPathtoMilitaryBase, true, false);
    HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/6DAAFA32"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/8B0A5814"), StringExternal("Param/Value/FD6E91D5"), "Assets\\Textures\\btn-techupgrade-terran-consumption.dds");
    TriggerEnable(gt_W2EnterMilitaryBase, true);
    Wait(8.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/B2A51839"));
    TipAlertPanelClear(PlayerGroupAll());
    TriggerExecute(gt_HuggerSpawns, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W1DataTransferComplete_Init () {
    gt_W1DataTransferComplete = TriggerCreate("gt_W1DataTransferComplete_Func");
    TriggerEnable(gt_W1DataTransferComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hugger Spawns
//--------------------------------------------------------------------------------------------------
bool gt_HuggerSpawns_Func (bool testConds, bool runActions) {
    int auto78545593_n;
    int auto78545593_i;
    int autoC6598787_n;
    int autoC6598787_i;

    // Conditions
    if (testConds) {
        if (!(((gv_noNewbie == true) || (gv_nightmare == true)))) {
            return false;
        }

        if (!((gv_alivePlayers > 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_nightmare == true) || (gv_squadRating >= 1800))) {
        autoC6598787_n = (gv_spawnFactor * 3);
        for (autoC6598787_i = 1; autoC6598787_i <= autoC6598787_n; autoC6598787_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Hugger2", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionRandomPoint(RegionPlayableMap()));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
            Wait(0.2, c_timeReal);
        }
    }
    else {
        auto78545593_n = (gv_spawnFactor * 2);
        for (auto78545593_i = 1; auto78545593_i <= auto78545593_n; auto78545593_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Hugger2", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionRandomPoint(RegionPlayableMap()));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(0.2, c_timeReal);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HuggerSpawns_Init () {
    gt_HuggerSpawns = TriggerCreate("gt_HuggerSpawns_Func");
    TriggerEnable(gt_HuggerSpawns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECW2 - Scrapyard Ambush
//--------------------------------------------------------------------------------------------------
bool gt_ECW2ScrapyardAmbush_Func (bool testConds, bool runActions) {
    int auto87E1149A_n;
    int auto87E1149A_i;
    int auto83A5E294_n;
    int auto83A5E294_i;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((RandomInt(0, 5) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/3D8ACC24"));
    gf_WaveSpawnAtRegion("UltraliskBurrowed", RegionFromId(29), 1);
    AIAttackWaveSend(14, 0, false);
    if ((gv_noNewbie == false)) {
        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
    }

    Wait(0.1, c_timeGame);
    auto87E1149A_n = (gv_spawnFactor * 3);
    for (auto87E1149A_i = 1; auto87E1149A_i <= auto87E1149A_n; auto87E1149A_i += 1) {
        gf_WaveSpawnAtRegion("ZerglingBurrowed", RegionFromId(29), 1);
        AIAttackWaveSend(14, 1, false);
    }
    SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    SoundPlay(SoundLink("Ultralisk_Pissed", -1), PlayerGroupActive(), 100.0, 0.0);
    if ((gv_totalPlayers > 5)) {
        auto83A5E294_n = (gv_spawnFactor * 3);
        for (auto83A5E294_i = 1; auto83A5E294_i <= auto83A5E294_n; auto83A5E294_i += 1) {
            gf_WaveSpawnAtRegion("ZerglingBurrowed", RegionFromId(29), 1);
            AIAttackWaveSend(14, 1, false);
        }
    }

    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/50F2D583"));
    Wait(4.0, c_timeReal);
    gf_TipNOTD(500, StringExternal("Param/Value/DFDF0D0F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECW2ScrapyardAmbush_Init () {
    gt_ECW2ScrapyardAmbush = TriggerCreate("gt_ECW2ScrapyardAmbush_Func");
    TriggerEnable(gt_ECW2ScrapyardAmbush, false);
    TriggerAddEventUnitRegion(gt_ECW2ScrapyardAmbush, null, RegionFromId(29), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W2 - Enter Military Base
//--------------------------------------------------------------------------------------------------
bool gt_W2EnterMilitaryBase_Func (bool testConds, bool runActions) {
    int auto34212058_n;
    int auto34212058_i;
    int auto45008A4B_n;
    int auto45008A4B_i;
    int auto6B2842DA_n;
    int auto6B2842DA_i;
    int auto9B1CE6BB_n;
    int auto9B1CE6BB_i;
    int auto87BA97D8_n;
    int auto87BA97D8_i;

    // Variable Declarations
    fixed lv_waveInterval;
    unit lv_localUnitA;
    fixed lv_randomBossTime;

    // Variable Initialization
    lv_waveInterval = 8.0;
    lv_localUnitA = EventUnit();
    lv_randomBossTime = RandomFixed(10.0, 30.0);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_W2EnterMilitaryBase, false);
    TriggerStop(gt_ShowPathtoMilitaryBase);
    Wait(3.0, c_timeReal);
    gv_hitPar = 20;
    gv_globalIntA = 0;
    gv_wave = 2;
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitRemove(UnitFromId(1857));
    UnitRemove(UnitFromId(2505));
    UnitRemove(UnitFromId(2502));
    UnitRemove(UnitFromId(2504));
    if ((gv_squadRating > 1750)) {
        lv_waveInterval = 5.0;
    }
    else if ((gv_squadRating > 1575)) {
        lv_waveInterval = 6.0;
    }
    else if ((gv_squadRating < 1495)) {
        lv_waveInterval = 11.0;
    }
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/5EDDC08C"));
    if ((gv_noNewbie == false)) {
        HelpPanelAddTip(PlayerGroupActive(), libNtve_gf_FormatTipTitle(StringExternal("Param/Value/608D552D"), libNtve_ge_TipType_NormalTip), StringExternal("Param/Value/91F0176F"), StringExternal("Param/Value/36E0AE82"), "Assets\\Textures\\btn-unit-terran-marineraynorhev.dds");
    }

    gf_TipNOTD(2000, StringExternal("Param/Value/70F0CE92"));
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/6B390343"));
    ObjectiveDestroy(gv_primaryObjective);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/400000D2"));
    SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/D52852B1"));
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/DBEAB2D3"));
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/8DA740FE"));
    gf_TipNOTD(5000, StringExternal("Param/Value/BE83CAAC"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/9AAF1748"));
    Wait(3.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/06C9BF47"));
    SoundPlay(SoundLink("SensorTower_MorphToTower", -1), PlayerGroupActive(), 80.0, 0.0);
    UnitBehaviorAdd(gv_sensorTower[0], "SensorTowerRadar", gv_sensorTower[0], 1);
    libNtve_gf_MakeUnitInvulnerable(gv_sensorTower[0], false);
    UnitSetTeamColorIndex(gv_sensorTower[0], 6);
    gf_TipNOTD(1000, StringExternal("Param/Value/7CDB0760"));
    Wait(0.5, c_timeReal);
    UnitBehaviorAdd(gv_sensorTower[1], "SensorTowerRadar", gv_sensorTower[1], 1);
    libNtve_gf_MakeUnitInvulnerable(gv_sensorTower[1], false);
    UnitSetTeamColorIndex(gv_sensorTower[1], 6);
    TipAlertPanelClear(PlayerGroupAll());
    ObjectiveCreate(StringExternal("Param/Value/CC5FA379"), StringExternal("Param/Value/8423EF3A"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(5.9, c_timeReal);
    SoundPlay(SoundLink("TValerian02AInfestedRefugee00021", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/A10A204E"));
    Wait(3.5, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/1A9B7959"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/FE8803E4"));
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_EndCreditsB1", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    auto34212058_n = 7;
    for (auto34212058_i = 1; auto34212058_i <= auto34212058_n; auto34212058_i += 1) {
        auto45008A4B_n = (gv_spawnFactor * 4);
        for (auto45008A4B_i = 1; auto45008A4B_i <= auto45008A4B_n; auto45008A4B_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel12", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeGame);
            if ((RandomInt(0, 10) == 1) && (gv_noNewbie == true) && (gv_alivePlayers > 2)) {
                libNtve_gf_UnitCreateFacingPoint(1, "HulkBurrowed", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }

        }
        UnitGroupIssueOrder(gv_zombieWave, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(lv_waveInterval, c_timeGame);
    }
    gf_AwardPlayerXPNOTD(1);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/8E89AAEF"));
    gv_globalIntA = 0;
    gv_performanceTimer = 0;
    Wait(2.0, c_timeReal);
    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\btn-upgrade-zerg-pathogenglands.dds", StringExternal("Param/Value/D8BB5BCF"), 100, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(1, 0, true);
    libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Protoss, true);
    ObjectiveCreate(StringExternal("Param/Value/5255D3B5"), StringExternal("Param/Value/66776210"), c_objectiveStateActive, false);
    gv_secondaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_W3SampleCollectionProcess, true);
    if ((gv_noNewbie == false)) {
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(25)));
        gv_hexModels[1] = libNtve_gf_ActorLastCreated();
        Wait(0.1, c_timeGame);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(26)));
        gv_hexModels[2] = libNtve_gf_ActorLastCreated();
        Wait(0.1, c_timeGame);
        libNtve_gf_CreateModelAtPoint("BriefingUnitSelect", RegionGetCenter(RegionFromId(27)));
        gv_hexModels[3] = libNtve_gf_ActorLastCreated();
    }

    Wait(3.5, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/8FA6A1E3"));
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 80.0, 0.0);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B174282F"));
    SoundPlay(SoundLink("TValerian01BriefingMarine00016", -1), PlayerGroupActive(), 100.0, 0.0);
    auto6B2842DA_n = (gv_spawnFactor * 5);
    for (auto6B2842DA_i = 1; auto6B2842DA_i <= auto6B2842DA_n; auto6B2842DA_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(RegionFromId(3)), RegionRandomPoint(RegionFromId(29)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(RandomFixed(0.1, 0.7), c_timeGame);
    }
    SoundPlay(SoundLink("TValerian01BriefingMarine00012", -1), PlayerGroupActive(), 100.0, 0.0);
    auto9B1CE6BB_n = (gv_spawnFactor * 2);
    for (auto9B1CE6BB_i = 1; auto9B1CE6BB_i <= auto9B1CE6BB_n; auto9B1CE6BB_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(2, "ZerglingBurrowed", 0, 14, RegionRandomPoint(RegionFromId(76)), RegionRandomPoint(RegionPlayableMap()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(RandomFixed(0.1, 0.7), c_timeGame);
    }
    if ((gv_noNewbie == true) && (gv_alivePlayers > 2)) {
        libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    }
    else {
        libNtve_gf_UnitCreateFacingPoint(gv_alivePlayers, "ZerglingBurrowed", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
    }
    UnitGroupIssueOrder(UnitGroup(null, 14, RegionFromId(3), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    gf_TipNOTD(500, StringExternal("Param/Value/F8D7F114"));
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/5D6CA469"));
    auto87BA97D8_n = 9;
    for (auto87BA97D8_i = 1; auto87BA97D8_i <= auto87BA97D8_n; auto87BA97D8_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel22", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.2, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(gv_totalPlayers, "ZerglingBurrowed", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.2, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel22", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        UnitGroupIssueOrder(gv_zombieWave, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(1.0, c_timeGame);
        if ((RandomInt(0, 3) == 1)) {
            if ((gv_alivePlayers > 4) && (gv_noNewbie == true)) {
                libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }

            libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        }

        if ((gv_noNewbie == true) && (RandomInt(0, 3) == 1) && (gv_alivePlayers > 2)) {
            libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(gv_militaryBaseSpawn[RandomInt(1, 4)]), RegionGetCenter(RegionFromId(3)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        }

        UnitGroupIssueOrder(gv_zombieWave, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(3))), c_orderQueueReplace);
        Wait(lv_waveInterval, c_timeReal);
    }
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/092A9E89"));
    Wait(1.5, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/FBA90460"), StringExternal("Param/Value/3EA0E930"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gv_wave = 3;
    TimerStart(gv_globalTimer, 60.0, false, c_timeReal);
    TimerWindowCreate(gv_globalTimer, StringExternal("Param/Value/F8F51936"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    gv_globalTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), true);
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/BFA9E16C"));
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/1D11F6E3"));
    Wait(lv_randomBossTime, c_timeReal);
    if ((ObjectiveGetState(gv_secondaryObjective) == c_objectiveStateActive)) {
        ObjectiveSetState(gv_secondaryObjective, c_objectiveStateFailed);
        libNtve_gf_ShowHideBossBar(false, 1);
        TriggerEnable(gt_W3SampleCollectionProcess, false);
    }

    if ((gv_noNewbie == true) && (gv_totalPlayers > 3) && (RandomInt(0, 1) == 1)) {
        TriggerExecute(gt_Boss1bSpawn, true, false);
    }
    else {
        TriggerExecute(gt_Boss1SpawnCinematic, true, false);
    }
    ObjectiveDestroy(gv_secondaryObjective);
    Wait((50.0 - lv_randomBossTime), c_timeReal);
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), false);
    TimerWindowDestroy(gv_globalTimerWindow);
    if ((gv_alivePlayers > 2)) {
        TriggerEnable(gt_Wave4EnterAirlockGate3P, true);
        TriggerExecute(gt_Wave4EnterAirlockGate3P, false, false);
    }
    else {
        TriggerEnable(gt_Wave4EnterAirlockGate2P, true);
    }
    TriggerEnable(gt_Wave4EnterAirlockNorthGate, true);
    TriggerEnable(gt_Wave4EnterAirlockBackupGate, true);
    TriggerEnable(gt_Wave5AirlockBattle, true);
    TriggerEnable(gt_ClassCreation, false);
    SoundPlay(SoundLink("AirlockGatesUnlocked", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/77C447C6"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(3.9, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/12EB818D"));
    MinimapPing(PlayerGroupActive(), RegionGetCenter(RegionFromId(48)), 45.0, Color(100.00, 100.00, 100.00));
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UIAlertPoint("Trigger", PlayerGroupLoopCurrent(), StringToText(""), null, RegionGetCenter(RegionFromId(43)));
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(43), true, false);
    }
    PlayerGroupLoopEnd();
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/7EBDCF5E"), StringExternal("Param/Value/E3BD112F"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(5.0, c_timeReal);
    gf_TipNOTD(10000, StringExternal("Param/Value/E7B331C2"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W2EnterMilitaryBase_Init () {
    gt_W2EnterMilitaryBase = TriggerCreate("gt_W2EnterMilitaryBase_Func");
    TriggerEnable(gt_W2EnterMilitaryBase, false);
    TriggerAddEventUnitRegion(gt_W2EnterMilitaryBase, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_W2EnterMilitaryBase, null, RegionFromId(3), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W3 - Sample Collection Process
//--------------------------------------------------------------------------------------------------
bool gt_W3SampleCollectionProcess_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_performanceTimer += 1;
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(25), 0), c_unitCountAlive) >= 1)) {
        gf_TerminalUpdate(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(25), 0), c_unitCountAlive), 2.0);
        lv_dataPoints += 1;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(26), 0), c_unitCountAlive) >= 1)) {
        gf_TerminalUpdate(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(26), 0), c_unitCountAlive), 2.0);
        lv_dataPoints += 1;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(27), 0), c_unitCountAlive) >= 1)) {
        gf_TerminalUpdate(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(27), 0), c_unitCountAlive), 2.0);
        lv_dataPoints += 1;
    }

    if ((gv_globalIntA == 50) && (lv_dataPoints > 0)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/956708A3"));
    }
    else {
        if ((gv_globalIntA == 80) && (lv_dataPoints > 0)) {
            gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0A8B68A5"));
        }

    }
    gv_globalIntA += lv_dataPoints;
    if ((gv_globalIntA > 100)) {
        gv_globalIntA = 100;
    }

    libNtve_gf_SetBossBarCurrentValue(1, gv_globalIntA, true);
    if ((gv_globalIntA >= 100)) {
        TriggerEnable(gt_W3SampleCollectionProcess, false);
        gf_TissueSampleComplete();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W3SampleCollectionProcess_Init () {
    gt_W3SampleCollectionProcess = TriggerCreate("gt_W3SampleCollectionProcess_Func");
    TriggerEnable(gt_W3SampleCollectionProcess, false);
    TriggerAddEventTimePeriodic(gt_W3SampleCollectionProcess, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC Optional - Cam Mission Start
//--------------------------------------------------------------------------------------------------
bool gt_ECOptionalCamMissionStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitFlashSelection(EventUnit(), 2.5);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/BB5E379E"));
    Wait(3.0, c_timeReal);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(36), "DecalProtoss");
    SoundPlay(SoundLink("THorner05SAdjutant00040", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/6354C52B"));
    Wait(3.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/A0B4CB54"));
    Wait(3.0, c_timeReal);
    TriggerEnable(gt_OptionalSecurityCamerasCollection, true);
    TriggerEnable(gt_OptionalSecurityCamerasMobs, true);
    ObjectiveCreate(StringExternal("Param/Value/E1B2888D"), StringExternal("Param/Value/E9E613DE"), c_objectiveStateActive, false);
    gv_secondary2Objective = ObjectiveLastCreated();
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionFromId(33), 90.0, false);
        VisRevealArea(IntLoopCurrent(), RegionFromId(34), 90.0, false);
        VisRevealArea(IntLoopCurrent(), RegionFromId(35), 90.0, false);
        VisRevealArea(IntLoopCurrent(), RegionFromId(30), 90.0, false);
        VisRevealArea(IntLoopCurrent(), RegionFromId(31), 90.0, false);
        VisRevealArea(IntLoopCurrent(), RegionFromId(32), 90.0, false);
        VisExploreArea(IntLoopCurrent(), RegionFromId(33), true, false);
        VisExploreArea(IntLoopCurrent(), RegionFromId(34), true, false);
        VisExploreArea(IntLoopCurrent(), RegionFromId(35), true, false);
        VisExploreArea(IntLoopCurrent(), RegionFromId(30), true, false);
        VisExploreArea(IntLoopCurrent(), RegionFromId(31), true, false);
        VisExploreArea(IntLoopCurrent(), RegionFromId(32), true, false);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECOptionalCamMissionStart_Init () {
    gt_ECOptionalCamMissionStart = TriggerCreate("gt_ECOptionalCamMissionStart_Func");
    TriggerEnable(gt_ECOptionalCamMissionStart, false);
    TriggerAddEventUnitRegion(gt_ECOptionalCamMissionStart, null, RegionFromId(36), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Optional - Security Cameras Collection
//--------------------------------------------------------------------------------------------------
bool gt_OptionalSecurityCamerasCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_localRegionA;
    unit lv_localUnit;

    // Variable Initialization
    lv_localRegionA = RegionCircle(UnitGetPosition(EventUnit()), 5.0);
    lv_localUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((libNtve_gf_UnitInRegion(EventUnit(), RegionFromId(139)) == false))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(14)) > 15.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_securityCam += 1;
    gv_camsUnlocked[gv_securityCam] = RegionGetCenter(EventUnitRegion());
    PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 10.0);
    RegionSetCenter(EventUnitRegion(), libNtve_gf_PointWithZOffset(PointFromId(14), 30.0));
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/8A44C126"));
    TextExpressionSetToken("Param/Expression/A91F7F6B", "A", StringExternal("Param/Value/575E2C34"));
    TextExpressionSetToken("Param/Expression/A91F7F6B", "B", IntToText(gv_securityCam));
    TextExpressionSetToken("Param/Expression/A91F7F6B", "C", StringExternal("Param/Value/B8A6D700"));
    ObjectiveSetName(gv_secondary2Objective, TextExpressionAssemble("Param/Expression/A91F7F6B"));
    if ((gv_securityCam == 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(lv_localUnit)), StringExternal("Param/Value/3D54245E"));
    }
    else if ((gv_securityCam == 4)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(lv_localUnit)), StringExternal("Param/Value/974EB017"));
    }
    else if ((gv_securityCam == 5)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_OptionalSecurityCamerasMobs, false);
        gf_RadioNOTD(PlayerName(UnitGetOwner(lv_localUnit)), StringExternal("Param/Value/4F6DA03D"));
        gf_UnifiedAwards(1, 0.0, 0, 0, 1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/2B56DCCE"));
        ObjectiveSetState(gv_secondary2Objective, c_objectiveStateCompleted);
        Wait(8.0, c_timeReal);
        gv_camsMissionSuccessful = true;
        if ((gv_generatorMissionSuccessful == true)) {
            gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/BC806C13"));
            PlayerGroupLoopBegin(gv_marineSquad);
            for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
                IntLoopBegin(1, 5);
                for ( ; !IntLoopDone() ; IntLoopStep() ) {
                    VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(gv_camsUnlocked[IntLoopCurrent()], 7.0), 0.0, false);
                }
                IntLoopEnd();
            }
            PlayerGroupLoopEnd();
        }
        else {
            gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/B663D3C1"));
        }
        Wait(3.0, c_timeReal);
        ObjectiveDestroy(gv_secondary2Objective);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionalSecurityCamerasCollection_Init () {
    gt_OptionalSecurityCamerasCollection = TriggerCreate("gt_OptionalSecurityCamerasCollection_Func");
    TriggerEnable(gt_OptionalSecurityCamerasCollection, false);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasCollection, null, RegionFromId(33), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasCollection, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasCollection, null, RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasCollection, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasCollection, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasCollection, null, RegionFromId(32), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Optional - Security Cameras Mobs
//--------------------------------------------------------------------------------------------------
bool gt_OptionalSecurityCamerasMobs_Func (bool testConds, bool runActions) {
    int auto9C282BCF_n;
    int auto9C282BCF_i;
    int auto419E0EBE_n;
    int auto419E0EBE_i;
    int auto58530259_n;
    int auto58530259_i;

    // Variable Declarations
    region lv_localRegionA;
    int lv_ghoulWave;

    // Variable Initialization
    lv_localRegionA = RegionCircle(UnitGetPosition(EventUnit()), 7.0);
    lv_ghoulWave = 6;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(EventUnit()), PointFromId(14)) > 15.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    RegionSetCenter(EventUnitRegion(), libNtve_gf_PointWithZOffset(PointFromId(14), 30.0));
    if ((gv_noNewbie == false)) {
        lv_ghoulWave = 3;
    }

    if ((RandomInt(0, 15) == 1) && (gv_noNewbie == true)) {
        auto9C282BCF_n = (gv_spawnFactor * 2);
        for (auto9C282BCF_i = 1; auto9C282BCF_i <= auto9C282BCF_n; auto9C282BCF_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "BanelingBurrowed", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(RandomFixed(0.1, 1.5), c_timeGame);
        }
    }
    else if ((RandomInt(0, 5) == 1)) {
        auto419E0EBE_n = gv_spawnFactor;
        for (auto419E0EBE_i = 1; auto419E0EBE_i <= auto419E0EBE_n; auto419E0EBE_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(RandomFixed(0.2, 1.8), c_timeGame);
        }
    }
    else if (true) {
        auto58530259_n = (gv_spawnFactor * lv_ghoulWave);
        for (auto58530259_i = 1; auto58530259_i <= auto58530259_n; auto58530259_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(RandomFixed(0.1, libNtve_gf_DifficultyValueFixed(0.7, 0.4, 0.2, 0.0)), c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionalSecurityCamerasMobs_Init () {
    gt_OptionalSecurityCamerasMobs = TriggerCreate("gt_OptionalSecurityCamerasMobs_Func");
    TriggerEnable(gt_OptionalSecurityCamerasMobs, false);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasMobs, null, RegionFromId(51), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasMobs, null, RegionFromId(56), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasMobs, null, RegionFromId(55), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasMobs, null, RegionFromId(52), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasMobs, null, RegionFromId(54), true);
    TriggerAddEventUnitRegion(gt_OptionalSecurityCamerasMobs, null, RegionFromId(53), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ECW4 - Airlock Road Ambush
//--------------------------------------------------------------------------------------------------
bool gt_ECW4AirlockRoadAmbush_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;

    // Variable Initialization
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((RandomInt(0, 5) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionFromId(13)), RegionRandomPoint(RegionFromId(13)));
    if ((gv_noNewbie == false)) {
        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
    }

    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    Wait(0.1, c_timeGame);
    libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionFromId(13)), RegionRandomPoint(RegionFromId(13)));
    if ((gv_noNewbie == false)) {
        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
    }

    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(1.5, c_timeReal);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/030213C9"));
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Ultralisk_Pissed", -1), PlayerGroupActive(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECW4AirlockRoadAmbush_Init () {
    gt_ECW4AirlockRoadAmbush = TriggerCreate("gt_ECW4AirlockRoadAmbush_Func");
    TriggerEnable(gt_ECW4AirlockRoadAmbush, false);
    TriggerAddEventUnitRegion(gt_ECW4AirlockRoadAmbush, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - Spawn (Cinematic)
//--------------------------------------------------------------------------------------------------
bool gt_Boss1SpawnCinematic_Func (bool testConds, bool runActions) {
    int auto04DAE927_n;
    int auto04DAE927_i;
    int autoC4DF984C_n;
    int autoC4DF984C_i;

    // Variable Declarations
    point lv_localPointA;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B1020279"));
    gf_TipNOTD(500, StringExternal("Param/Value/4FAC17AA"));
    gv_bossFight = true;
    gv_currentBoss = "Tartarus";
    Wait(5.0, c_timeReal);
    if ((gv_noNewbie == true)) {
        auto04DAE927_n = 3;
        for (auto04DAE927_i = 1; auto04DAE927_i <= auto04DAE927_n; auto04DAE927_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Hulk", 0, 14, RegionRandomPoint(RegionFromId(48)), RegionGetCenter(RegionFromId(3)));
            Wait(0.1, c_timeGame);
        }
    }

    Wait(3.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/4B7EE57A"));
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    gv_performanceTimer = 0;
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_EndCreditsG", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(0.2, c_timeReal);
    if (((gv_noNewbie == false) || (GameIsTestMap(false) == true))) {
        if ((gf_PreCinematicProcessing() == true)) {
        }

        SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, false);
        SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, false);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryVoice, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategorySpell, 100.0, 0.0);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryME, 100.0, 0.0);
        PlayerGroupLoopBegin(gv_marineSquad);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(PointFromId(852), 7.0), 15.0, false);
        }
        PlayerGroupLoopEnd();
        CinematicDataRun(1, PlayerGroupAll(), true);
    }

    Wait(1.5, c_timeReal);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.9, 2.0, 100.0, 1.0);
    }
    PlayerGroupLoopEnd();
    libNtve_gf_PauseUnit(gv_tartarusCocoon, false);
    libNtve_gf_MakeUnitInvulnerable(gv_tartarusCocoon, false);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_tartarusCocoon));
    if (((gv_noNewbie == false) || (GameIsTestMap(false) == true))) {
        PlayerGroupLoopBegin(gv_marineSquad);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2271), 2.0, -1, 10, true);
        }
        PlayerGroupLoopEnd();
    }

    Wait(0.3, c_timeReal);
    UnitKill(gv_tartarusCocoon);
    Wait(0.2, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, UserDataGetUnit("BossData", gv_currentBoss, "Boss Unit", 1), 0, 14, PointFromId(852), RegionGetCenter(RegionFromId(3)));
    gv_tartarus = UnitLastCreated();
    UnitSetState(gv_tartarus, c_unitStateStatusBar, false);
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    if ((gv_alivePlayers <= 4)) {
        UnitSetPropertyFixed(gv_tartarus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_tartarus, c_unitPropLifeMax, c_unitPropNormal) * 0.7));
        UnitSetPropertyFixed(gv_tartarus, c_unitPropLife, (UnitGetPropertyFixed(gv_tartarus, c_unitPropLife, c_unitPropNormal) * 0.7));
    }
    else {
        UnitBehaviorAdd(gv_tartarus, "Detector5", gv_tartarus, 1);
    }
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_tartarus, ge_Ping_Enabled);
    TriggerEnable(gt_Boss1TartarusKilled, true);
    TriggerEnable(gt_Boss1CarapaceHardens33, true);
    libNtve_gf_MakeUnitInvulnerable(gv_tartarus, true);
    libNtve_gf_PauseUnit(gv_tartarus, true);
    Wait(1.0, c_timeReal);
    libNtve_gf_PauseUnit(gv_tartarus, false);
    libNtve_gf_PauseUnit(UnitFromId(2622), false);
    UnitIssueOrder(gv_tartarus, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(2622)), c_orderQueueReplace);
    SoundPlay(SoundLink("Lurker_Pissed", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("PsiShockImpactSound", -1), PlayerGroupActive(), 100.0, 0.0);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 0.5);
    }
    PlayerGroupLoopEnd();
    autoC4DF984C_n = 3;
    for (autoC4DF984C_i = 1; autoC4DF984C_i <= autoC4DF984C_n; autoC4DF984C_i += 1) {
        PlayerCreateEffectPoint(14, "PsiBlastDamage", RegionRandomPoint(RegionFromId(47)));
        Wait(0.1, c_timeReal);
    }
    UnitIssueOrder(UnitFromId(2622), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    Wait(1.2, c_timeReal);
    SoundPlay(SoundLink("TScene06Tychus004", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(0.5, c_timeReal);
    UnitIssueOrder(gv_tartarus, OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(47))), c_orderQueueReplace);
    Wait(1.5, c_timeReal);
    if (((gv_noNewbie == false) || (GameIsTestMap(false) == true))) {
        if ((gf_PostCinematicProcessing() == true)) {
        }

    }

    libNtve_gf_MakeUnitInvulnerable(gv_tartarus, false);
    UnitSetState(gv_tartarus, c_unitStateStatusBar, true);
    TriggerEnable(gt_Boss1AI, true);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/2550D632"));
    Wait(7.0, c_timeReal);
    gf_TipNOTD(3000, StringExternal("Param/Value/C16ADD41"));
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/2F9BB167"));
    Wait(30.0, c_timeReal);
    if ((gv_squadRating >= 1550) && (UnitIsAlive(gv_tartarus) == true)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C6D3FF88"));
    }
    else if ((gv_squadRating < 1550) && (UnitIsAlive(gv_tartarus) == true)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C383CB31"));
    }
    Wait(10.0, c_timeReal);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1SpawnCinematic_Init () {
    gt_Boss1SpawnCinematic = TriggerCreate("gt_Boss1SpawnCinematic_Func");
    TriggerEnable(gt_Boss1SpawnCinematic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - AI
//--------------------------------------------------------------------------------------------------
bool gt_Boss1AI_Func (bool testConds, bool runActions) {
    int auto06851B3B_n;
    int auto06851B3B_i;
    int auto1FF49E32_n;
    int auto1FF49E32_i;

    // Variable Declarations
    region lv_localRegionA;

    // Variable Initialization
    lv_localRegionA = RegionCircle(UnitGetPosition(gv_tartarus), 2.0);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_performanceTimer += 1;
    if (((gv_nightmare == true) || ((gv_squadXP > 200) && (gv_noNewbie == true)))) {
        if ((RandomInt(0, 3) == 1) && ((gv_squadRating >= 1700) || (gv_nightmare == true))) {
            libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, libNtve_gf_DifficultyValueUnitType("Baneling", "Baneling", "Beastling", "Beastling"), 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
        }
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
    }

    Wait(1.0, c_timeGame);
    if ((gv_nightmare == true)) {
        libNtve_gf_UnitCreateFacingPoint(1, "Beastling", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
    }
    else {
        if ((RandomInt(0, 3) == 1)) {
            auto06851B3B_n = 5;
            for (auto06851B3B_i = 1; auto06851B3B_i <= auto06851B3B_n; auto06851B3B_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(0.1, c_timeGame);
            }
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
        }
    }
    if ((gv_noNewbie == false)) {
        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
    }

    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitLastCreated()));
    Wait(0.1, c_timeGame);
    if ((gv_squadRating > 1600) && (gv_alivePlayers > 3) && (gv_noNewbie == true)) {
        libNtve_gf_UnitCreateFacingPoint(1, "Stalker2", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
        if ((gv_noNewbie == false)) {
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
        }

        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    }

    if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 50)) {
        auto1FF49E32_n = gv_spawnFactor;
        for (auto1FF49E32_i = 1; auto1FF49E32_i <= auto1FF49E32_n; auto1FF49E32_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.01, c_timeGame);
        }
        if ((RandomInt(0, 3) == 1)) {
            libNtve_gf_UnitCreateFacingPoint((gv_spawnFactor * 1), "Zergling", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint((gv_spawnFactor * 1), "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(16)), RegionGetCenter(RegionFromId(1)));
        }
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1AI_Init () {
    gt_Boss1AI = TriggerCreate("gt_Boss1AI_Func");
    TriggerEnable(gt_Boss1AI, false);
    TriggerAddEventTimePeriodic(gt_Boss1AI, 10.1, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - Carapace Hardens @ 33%
//--------------------------------------------------------------------------------------------------
bool gt_Boss1CarapaceHardens33_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Boss1CarapaceHardens33, false);
    Wait(2.0, c_timeGame);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/283DECE1"));
    UnitSetTeamColorIndex(EventUnit(), 5);
    SoundPlay(SoundLink("Zerg_PreExplosionSmall", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_TipNOTD(1000, StringExternal("Param/Value/B1391452"));
    TriggerEnable(gt_Boss1HardCarapace, true);
    Wait(5.0, c_timeGame);
    if ((gv_noNewbie == false)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B2AA3F2C"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1CarapaceHardens33_Init () {
    gt_Boss1CarapaceHardens33 = TriggerCreate("gt_Boss1CarapaceHardens33_Func");
    TriggerAddEventUnitBehaviorChange(gt_Boss1CarapaceHardens33, UnitRefFromVariable("gv_tartarus"), "HardenedCaraspaceRecruit", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_Boss1CarapaceHardens33, UnitRefFromVariable("gv_tartarus"), "HardenedCaraspaceVetNightmare", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - Hard Carapace
//--------------------------------------------------------------------------------------------------
bool gt_Boss1HardCarapace_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    fixed lv_damage;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = gv_tartarus;
    lv_damage = EventUnitDamageAbsorbed();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() != "PenetratingDamage"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_tartarusCapture == true) && ((((EventUnitDamageEffect() == "C10CanisterRifle") || (EventUnitDamageEffect() == "BarrettM112") || (EventUnitDamageEffect() == "P38ScytheGuassPistol") || (EventUnitDamageEffect() == "Shotgun")) && (RandomInt(0, 10) == 1)) || (((UnitHasBehavior(lv_attackedUnit, "MindBlastStun") == true) || (UnitHasBehavior(lv_attackedUnit, "NanoShockLevel2") == true) || (UnitHasBehavior(lv_attackedUnit, "NanoShockLevel3") == true) || (UnitHasBehavior(lv_attackedUnit, "MonofilamentCartridgeLevel1Stun") == true) || (UnitHasBehavior(lv_attackedUnit, "MonofilamentCartridgeLevel2Stun") == true) || (UnitHasBehavior(lv_attackedUnit, "MonofilamentCartridgeLevel3Stun") == true) || (UnitHasBehavior(lv_attackedUnit, "ChargeStunLevel1") == true) || (UnitHasBehavior(lv_attackedUnit, "ChargeStunLevel2") == true) || (UnitHasBehavior(lv_attackedUnit, "ForcePushStunBoss") == true) || (UnitHasBehavior(lv_attackedUnit, "SpeedofThoughtStun") == true) || (UnitHasBehavior(lv_attackedUnit, "SonicTrapStunLevel1") == true) || (UnitHasBehavior(lv_attackedUnit, "SonicTrapStunLevel2") == true) || (UnitHasBehavior(lv_attackedUnit, "FaithStun") == true) || (UnitHasBehavior(lv_attackedUnit, "SapStun2") == true) || (UnitHasBehavior(lv_attackedUnit, "StunShotgun") == true) || (UnitHasBehavior(lv_attackedUnit, "ShockwaveBarrageStunLevel12") == true) || (UnitHasBehavior(lv_attackedUnit, "ShockwaveBarrageStunLevel22") == true)) && (RandomInt(0, 3) == 1)))) {
        gv_tartarusCapture = false;
        TriggerExecute(gt_Boss1OMIncapacitateSuccessful, true, false);
    }
    else if ((((UnitGetPropertyFixed(lv_attackedUnit, c_unitPropLifePercent, c_unitPropCurrent) >= 10) && (UnitGetPropertyFixed(lv_attackedUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 20)) == true) && (RandomInt(0, 20) == 1) && (gv_tartarusMission == false)) {
        gv_tartarusMission = true;
        TriggerExecute(gt_Boss1OMCaptureTartarus, true, false);
    }
    if (gf_AttackerbehindTarget(lv_attackingUnit, lv_attackedUnit, 120.0)) {
        if ((gv_noNewbie == true)) {
            UnitDamage(lv_attackingUnit, "PenetratingDamage", lv_attackedUnit, (lv_damage * 0.9));
        }
        else {
            UnitDamage(lv_attackingUnit, "PenetratingDamage", lv_attackedUnit, (lv_damage * 0.75));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1HardCarapace_Init () {
    gt_Boss1HardCarapace = TriggerCreate("gt_Boss1HardCarapace_Func");
    TriggerEnable(gt_Boss1HardCarapace, false);
    TriggerAddEventUnitDamaged(gt_Boss1HardCarapace, UnitRefFromVariable("gv_tartarus"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - OM Capture Tartarus
//--------------------------------------------------------------------------------------------------
bool gt_Boss1OMCaptureTartarus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/9B62CF1D"));
    gv_tartarusCapture = true;
    ObjectiveCreate(StringExternal("Param/Value/BF8BBBF4"), StringExternal("Param/Value/F2861A34"), c_objectiveStateActive, false);
    gv_tartarusCaptureObjective = ObjectiveLastCreated();
    Wait(4.0, c_timeReal);
    if ((gv_tartarusCapture == false)) {
        gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/331FE52D"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1OMCaptureTartarus_Init () {
    gt_Boss1OMCaptureTartarus = TriggerCreate("gt_Boss1OMCaptureTartarus_Func");
    TriggerEnable(gt_Boss1OMCaptureTartarus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - OM Incapacitate Successful
//--------------------------------------------------------------------------------------------------
bool gt_Boss1OMIncapacitateSuccessful_Func (bool testConds, bool runActions) {
    int auto948863B1_n;
    int auto948863B1_i;

    // Variable Declarations
    fixed lv_tartarusSize;

    // Variable Initialization
    lv_tartarusSize = 120.0;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Boss1AI, false);
    TriggerEnable(gt_Boss1bFightMobs, false);
    TriggerEnable(gt_Boss1TartarusKilled, false);
    TriggerEnable(gt_Boss1HardCarapace, false);
    libNtve_gf_ShowHideBossBar(false, 3);
    UnitSetOwner(gv_tartarus, 0, false);
    UnitIssueOrder(gv_tartarus, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(gv_tartarus, true);
    gf_BossAfterAction();
    SoundPlayOnUnit(SoundLink("LavaCritter_What", -1), PlayerGroupAll(), gv_boss, 15.0, 35.0, 0.0);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/9D2C0E2F"));
    gf_UnifiedAwards(3, 225.0, 0, 0, 1);
    ObjectiveSetState(gv_tartarusCaptureObjective, c_objectiveStateCompleted);
    auto948863B1_n = 10;
    for (auto948863B1_i = 1; auto948863B1_i <= auto948863B1_n; auto948863B1_i += 1) {
        lv_tartarusSize -= 2.5;
        UnitSetScale(gv_tartarus, lv_tartarusSize, lv_tartarusSize, lv_tartarusSize);
        Wait(0.3, c_timeReal);
    }
    UnitSetTeamColorIndex(gv_tartarus, 12);
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/918A8106"));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/A72367D5"));
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/16FE1446"));
    Wait(3.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    Wait(3.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, 9, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), UnitGetPosition(gv_boss));
    gv_dropship = UnitLastCreated();
    UnitIssueOrder(gv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(gv_tartarus)), c_orderQueueReplace);
    SoundPlayOnUnit(SoundLink("SpecialOpsDropship_FlyIn", -1), PlayerGroupAll(), gv_dropship, 15.0, 75.0, 0.0);
    UnitWaitUntilIdle(gv_dropship, true);
    Wait(1.5, c_timeReal);
    ObjectiveDestroy(gv_tartarusCaptureObjective);
    SoundPlayOnUnit(SoundLink("SpecialOpsDropship_Load", -1), PlayerGroupAll(), gv_boss, 15.0, 75.0, 0.0);
    PingDestroyAll();
    UnitRemove(gv_tartarus);
    gf_RadioNOTD(StringExternal("Param/Value/CC852C44"), StringExternal("Param/Value/736406F9"));
    Wait(1.5, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/5BD11E6A"));
    UnitIssueOrder(gv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)])), c_orderQueueReplace);
    SoundPlayOnUnit(SoundLink("SpecialOpsDropship_FlyOut", -1), PlayerGroupAll(), gv_dropship, 15.0, 75.0, 0.0);
    CameraSetBounds(PlayerGroupActive(), RegionPlayableMap(), true);
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/1F337022"));
    UnitRemove(gv_dropship);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1OMIncapacitateSuccessful_Init () {
    gt_Boss1OMIncapacitateSuccessful = TriggerCreate("gt_Boss1OMIncapacitateSuccessful_Func");
    TriggerEnable(gt_Boss1OMIncapacitateSuccessful, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - Tartarus Killed
//--------------------------------------------------------------------------------------------------
bool gt_Boss1TartarusKilled_Func (bool testConds, bool runActions) {
    int autoDDEA3A65_n;
    int autoDDEA3A65_i;
    int autoFAADC576_n;
    int autoFAADC576_i;

    // Variable Declarations
    region lv_bossDeathArea;
    point lv_broodlingSpawnPoint;

    // Variable Initialization
    lv_bossDeathArea = RegionCircle(UnitGetPosition(gv_tartarus), 2.5);

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Boss1AI, false);
    TriggerEnable(gt_Boss1TartarusKilled, false);
    TriggerEnable(gt_Boss1HardCarapace, false);
    TriggerEnable(gt_Boss1OMCaptureTartarus, false);
    TriggerEnable(gt_Boss1OMIncapacitateSuccessful, false);
    CameraSetBounds(PlayerGroupActive(), RegionPlayableMap(), true);
    ObjectiveDestroy(gv_tartarusCaptureObjective);
    autoDDEA3A65_n = (gv_spawnFactor * 3);
    for (autoDDEA3A65_i = 1; autoDDEA3A65_i <= autoDDEA3A65_n; autoDDEA3A65_i += 1) {
        Wait(0.25, c_timeGame);
        lv_broodlingSpawnPoint = RegionRandomPoint(lv_bossDeathArea);
        libNtve_gf_UnitCreateFacingPoint(1, "Blindling", 0, 14, lv_broodlingSpawnPoint, RegionRandomPoint(RegionPlayableMap()));
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_broodlingSpawnPoint);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        UnitSetTeamColorIndex(UnitLastCreated(), 12);
    }
    if ((gv_noNewbie == true)) {
        autoFAADC576_n = (gv_spawnFactor * 3);
        for (autoFAADC576_i = 1; autoFAADC576_i <= autoFAADC576_n; autoFAADC576_i += 1) {
            Wait(0.25, c_timeGame);
            lv_broodlingSpawnPoint = RegionRandomPoint(lv_bossDeathArea);
            libNtve_gf_UnitCreateFacingPoint(1, "Parasite", 0, 14, lv_broodlingSpawnPoint, RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            UnitSetTeamColorIndex(UnitLastCreated(), 12);
        }
    }

    gv_hitPar = 60;
    gf_BossAfterAction();
    gf_UnifiedAwards(2, libNtve_gf_DifficultyValueFixed(300.0, 200.0, 200.0, 200.0), libNtve_gf_DifficultyValueInt(15, 15, 30, 30), 0, 0);
    if ((gv_performanceTimer <= 9)) {
        gf_UnifiedAwards(1, 0.0, 0, 0, libNtve_gf_DifficultyValueInt(0, 1, 1, 0));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/ADEF0862"));
    }

    gf__1stBossAfterAction();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1TartarusKilled_Init () {
    gt_Boss1TartarusKilled = TriggerCreate("gt_Boss1TartarusKilled_Func");
    TriggerEnable(gt_Boss1TartarusKilled, false);
    TriggerAddEventUnitDied(gt_Boss1TartarusKilled, UnitRefFromVariable("gv_tartarus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1b - Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Boss1bSpawn_Func (bool testConds, bool runActions) {
    int autoFBA6CEDB_n;
    int autoFBA6CEDB_i;

    // Variable Declarations
    point lv_localPointA;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentBoss = "Eilethyia";
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/DBA28A6B"));
    libNtve_gf_MakeUnitInvulnerable(gv_tartarusCocoon, false);
    UnitKill(gv_tartarusCocoon);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/95F734B9"));
    UnitIssueOrder(UnitFromId(2622), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(47), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    Wait(3.3, c_timeReal);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    libNtve_gf_UnitCreateFacingPoint(1, "Eileithyia", 0, 14, RegionGetCenter(RegionFromId(48)), RegionGetCenter(RegionFromId(95)));
    gv_eilethyia = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_eilethyia, true);
    if ((gv_alivePlayers <= 3)) {
        UnitSetPropertyFixed(gv_eilethyia, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_eilethyia, c_unitPropLifeMax, c_unitPropNormal) * 0.7));
        UnitSetPropertyFixed(gv_boss, c_unitPropLife, (UnitGetPropertyFixed(gv_eilethyia, c_unitPropLife, c_unitPropNormal) * 0.7));
    }

    UnitSetTeamColorIndex(gv_eilethyia, 14);
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_eilethyia, ge_Ping_Enabled);
    gv_performanceTimer = 0;
    libNtve_gf_PauseUnit(gv_eilethyia, true);
    TriggerEnable(gt_Boss1EilethyiaKilled, true);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_EndCreditsG", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(0.5, c_timeReal);
    if ((gv_noNewbie == true)) {
        autoFBA6CEDB_n = 2;
        for (autoFBA6CEDB_i = 1; autoFBA6CEDB_i <= autoFBA6CEDB_n; autoFBA6CEDB_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "BrainBug2", 0, 14, RegionRandomPoint(RegionFromId(48)), RegionGetCenter(RegionFromId(95)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBrainBug", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(0.25, c_timeReal);
        }
    }
    else {
        Wait(0.5, c_timeReal);
    }
    lv_localPointA = UnitGetPosition(gv_eilethyia);
    CameraInfoSetTarget(CameraInfoFromId(1030), lv_localPointA);
    if ((gf_PreCinematicProcessing() == true)) {
    }

    UnitPauseAll(true);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lv_localPointA, 7.0), 11.0, false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1030), 0.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(1.5, c_timeReal);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/BD3E0FCC"));
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    UnitPauseAll(false);
    if ((gf_PostCinematicProcessing() == true)) {
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    UnitIssueOrder(gv_eilethyia, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(95))), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    UnitIssueOrder(gv_eilethyia, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(95))), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("THorner04Marine00019", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitIssueOrder(gv_eilethyia, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(95))), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(gv_eilethyia, false);
    TriggerEnable(gt_Boss1bFightMobs, true);
    TriggerEnable(gt_Boss1bRegenerationStarts, true);
    Wait(3.0, c_timeReal);
    UnitIssueOrder(gv_eilethyia, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(95))), c_orderQueueReplace);
    gf_TipNOTD(1000, StringExternal("Param/Value/65ED1170"));
    Wait(30.0, c_timeReal);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1bSpawn_Init () {
    gt_Boss1bSpawn = TriggerCreate("gt_Boss1bSpawn_Func");
    TriggerEnable(gt_Boss1bSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1b - Fight Mobs
//--------------------------------------------------------------------------------------------------
bool gt_Boss1bFightMobs_Func (bool testConds, bool runActions) {
    int autoF435852F_n;
    int autoF435852F_i;
    int autoCACCC53A_n;
    int autoCACCC53A_i;
    int autoC1ADFFE6_n;
    int autoC1ADFFE6_i;

    // Variable Declarations
    region lv_localRegionA;
    point lv_eliMovePoint;
    unitgroup lv_eggGroup;

    // Variable Initialization
    lv_localRegionA = RegionCircle(UnitGetPosition(gv_eilethyia), 3.0);
    lv_eliMovePoint = RegionRandomPoint(RegionFromId(95));
    lv_eggGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_eilethyia) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_survivalMode == true)) {
        lv_eliMovePoint = RegionRandomPoint(RegionCircle(UnitGroupCenterOfGroup(gv_marines), 18.0));
    }

    gv_performanceTimer += 1;
    UnitIssueOrder(gv_eilethyia, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    SoundPlay(SoundLink("Zerg_BuildingMorphStart", -1), PlayerGroupActive(), 100.0, 0.0);
    if ((RandomInt(0, 1) == 1)) {
        UnitSetTeamColorIndex(gv_eilethyia, 1);
        Wait(2.0, c_timeReal);
        autoC1ADFFE6_n = (gv_spawnFactor * 2);
        for (autoC1ADFFE6_i = 1; autoC1ADFFE6_i <= autoC1ADFFE6_n; autoC1ADFFE6_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Egg", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 60.0);
            UnitGroupAdd(lv_eggGroup, UnitLastCreated());
            Wait(0.1, c_timeGame);
        }
        libNtve_gf_UnitCreateFacingPoint(1, "ZombieCreep", 0, 14, RegionGetCenter(lv_localRegionA), RegionRandomPoint(RegionPlayableMap()));
        Wait(1.5, c_timeReal);
        UnitIssueOrder(gv_eilethyia, OrderTargetingPoint(AbilityCommand("move", 0), lv_eliMovePoint), c_orderQueueReplace);
        Wait(1.5, c_timeReal);
        UnitGroupLoopBegin(lv_eggGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((gv_nightmare == true) && (RandomInt(0, 4) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Hulk", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_localRegionA));
            }
            else if (true) {
                libNtve_gf_UnitCreateFacingPoint(1, "Seeker", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_localRegionA));
            }
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
            UnitKill(UnitGroupLoopCurrent());
            Wait(RandomFixed(0.2, 0.9), c_timeGame);
        }
        UnitGroupLoopEnd();
    }
    else {
        if ((RandomInt(0, 1) == 1)) {
            UnitSetTeamColorIndex(gv_eilethyia, 5);
            Wait(2.0, c_timeReal);
            autoCACCC53A_n = (gv_spawnFactor * 1);
            for (autoCACCC53A_i = 1; autoCACCC53A_i <= autoCACCC53A_n; autoCACCC53A_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, "Egg", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 90.0);
                UnitGroupAdd(lv_eggGroup, UnitLastCreated());
                Wait(0.1, c_timeGame);
            }
            Wait(1.5, c_timeReal);
            UnitIssueOrder(gv_eilethyia, OrderTargetingPoint(AbilityCommand("move", 0), lv_eliMovePoint), c_orderQueueReplace);
            Wait(1.5, c_timeReal);
            UnitGroupLoopBegin(lv_eggGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((gv_nightmare == true) && (RandomInt(0, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Wraith2", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_localRegionA));
                }
                else if (true) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_localRegionA));
                }
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
                UnitKill(UnitGroupLoopCurrent());
                Wait(RandomFixed(0.2, 0.9), c_timeGame);
            }
            UnitGroupLoopEnd();
        }
        else {
            UnitSetTeamColorIndex(gv_eilethyia, 3);
            Wait(2.0, c_timeReal);
            autoF435852F_n = (gv_spawnFactor * 2);
            for (autoF435852F_i = 1; autoF435852F_i <= autoF435852F_n; autoF435852F_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, "Egg", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 60.0);
                UnitGroupAdd(lv_eggGroup, UnitLastCreated());
                Wait(0.1, c_timeGame);
            }
            Wait(1.5, c_timeReal);
            UnitIssueOrder(gv_eilethyia, OrderTargetingPoint(AbilityCommand("move", 0), lv_eliMovePoint), c_orderQueueReplace);
            Wait(1.5, c_timeReal);
            UnitGroupLoopBegin(lv_eggGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((gv_nightmare == true) && (RandomInt(0, 6) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Beastling", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_localRegionA));
                }
                else if (true) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(lv_localRegionA));
                }
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
                UnitKill(UnitGroupLoopCurrent());
                Wait(RandomFixed(0.2, 0.9), c_timeGame);
            }
            UnitGroupLoopEnd();
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1bFightMobs_Init () {
    gt_Boss1bFightMobs = TriggerCreate("gt_Boss1bFightMobs_Func");
    TriggerEnable(gt_Boss1bFightMobs, false);
    TriggerAddEventTimePeriodic(gt_Boss1bFightMobs, 7.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1b - Regeneration Starts
//--------------------------------------------------------------------------------------------------
bool gt_Boss1bRegenerationStarts_Func (bool testConds, bool runActions) {
    int auto7E8B95D9_n;
    int auto7E8B95D9_i;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_eilethyia) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_TipNOTD(2000, StringExternal("Param/Value/C51A05C7"));
    if ((gv_nightmare == true)) {
        auto7E8B95D9_n = (gv_spawnFactor * 2);
        for (auto7E8B95D9_i = 1; auto7E8B95D9_i <= auto7E8B95D9_n; auto7E8B95D9_i += 1) {
            UnitCreate(2, "Parasite", 0, 14, UnitGetPosition(gv_boss), libNtve_gf_RandomAngle());
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
            Wait(0.15, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1bRegenerationStarts_Init () {
    gt_Boss1bRegenerationStarts = TriggerCreate("gt_Boss1bRegenerationStarts_Func");
    TriggerEnable(gt_Boss1bRegenerationStarts, false);
    TriggerAddEventPlayerEffectUsed(gt_Boss1bRegenerationStarts, 14, "RegeneratePersistant");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 1 - Eilethyia Killed
//--------------------------------------------------------------------------------------------------
bool gt_Boss1EilethyiaKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerStop(gt_Boss1bRegenerationStarts);
    TriggerEnable(gt_Boss1EilethyiaKilled, false);
    TriggerEnable(gt_Boss1bRegenerationStarts, false);
    TriggerEnable(gt_Boss1bFightMobs, false);
    CameraSetBounds(PlayerGroupActive(), RegionPlayableMap(), true);
    ObjectiveDestroy(gv_tartarusCaptureObjective);
    gv_hitPar = 60;
    gf_BossAfterAction();
    gf_UnifiedAwards(3, libNtve_gf_DifficultyValueFixed(300.0, 200.0, 200.0, 200.0), libNtve_gf_DifficultyValueInt(15, 15, 30, 30), 0, 0);
    if ((gv_performanceTimer <= 20)) {
        gf_UnifiedAwards(3, 0, 0, 0, libNtve_gf_DifficultyValueInt(0, 1, 1, 0));
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/A5E0FFE0"));
    }

    gf__1stBossAfterAction();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss1EilethyiaKilled_Init () {
    gt_Boss1EilethyiaKilled = TriggerCreate("gt_Boss1EilethyiaKilled_Func");
    TriggerEnable(gt_Boss1EilethyiaKilled, false);
    TriggerAddEventUnitDied(gt_Boss1EilethyiaKilled, UnitRefFromVariable("gv_eilethyia"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 - Enter Airlock Gate (2P)
//--------------------------------------------------------------------------------------------------
bool gt_Wave4EnterAirlockGate2P_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_wave = 4;
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(48), "DecalProtoss");
    UnitIssueOrder(UnitFromId(287), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4EnterAirlockGate2P_Init () {
    gt_Wave4EnterAirlockGate2P = TriggerCreate("gt_Wave4EnterAirlockGate2P_Func");
    TriggerEnable(gt_Wave4EnterAirlockGate2P, false);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockGate2P, null, RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockGate2P, null, RegionFromId(2), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 - Enter Airlock Gate (3P+)
//--------------------------------------------------------------------------------------------------
bool gt_Wave4EnterAirlockGate3P_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_terminal1Present;
    bool lv_terminal2Present;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(96), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(96), 0), c_unitCountAlive), 1.0);
        lv_terminal1Present = true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(97), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(97), 0), c_unitCountAlive), 1.0);
        lv_terminal2Present = true;
    }

    if ((lv_terminal1Present == true) && (lv_terminal2Present == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        gv_wave = 4;
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(48), "DecalProtoss");
        UnitIssueOrder(UnitFromId(287), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
        UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(2), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
    }
    else {
        if ((gv_warningTextBreak == false)) {
            gv_warningTextBreak = true;
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/759E2CE5"));
            Wait(7.0, c_timeReal);
            gv_warningTextBreak = false;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4EnterAirlockGate3P_Init () {
    gt_Wave4EnterAirlockGate3P = TriggerCreate("gt_Wave4EnterAirlockGate3P_Func");
    TriggerEnable(gt_Wave4EnterAirlockGate3P, false);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockGate3P, null, RegionFromId(96), true);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockGate3P, null, RegionFromId(96), false);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockGate3P, null, RegionFromId(97), true);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockGate3P, null, RegionFromId(97), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 - Enter Airlock Backup Gate
//--------------------------------------------------------------------------------------------------
bool gt_Wave4EnterAirlockBackupGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(229), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    while (!((gv_cinematicMode == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(229), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4EnterAirlockBackupGate_Init () {
    gt_Wave4EnterAirlockBackupGate = TriggerCreate("gt_Wave4EnterAirlockBackupGate_Func");
    TriggerEnable(gt_Wave4EnterAirlockBackupGate, false);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockBackupGate, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockBackupGate, null, RegionFromId(23), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 4 - Enter Airlock North Gate
//--------------------------------------------------------------------------------------------------
bool gt_Wave4EnterAirlockNorthGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(168), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeGame);
    while (!((gv_cinematicMode == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitIssueOrder(UnitFromId(168), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave4EnterAirlockNorthGate_Init () {
    gt_Wave4EnterAirlockNorthGate = TriggerCreate("gt_Wave4EnterAirlockNorthGate_Func");
    TriggerEnable(gt_Wave4EnterAirlockNorthGate, false);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockNorthGate, null, RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_Wave4EnterAirlockNorthGate, null, RegionFromId(38), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC - Delta-1 Transport
//--------------------------------------------------------------------------------------------------
bool gt_ECDelta1Transport_Func (bool testConds, bool runActions) {
    int auto0957BD16_n;
    int auto0957BD16_i;
    int auto5B923CAA_n;
    int auto5B923CAA_i;
    int auto8E62E4E2_n;
    int auto8E62E4E2_i;
    int auto7178BFAE_n;
    int auto7178BFAE_i;
    int auto86B0F7FA_n;
    int auto86B0F7FA_i;
    int auto43709453_n;
    int auto43709453_i;

    // Variable Declarations
    unit lv_localUnitA;
    int lv_infestedCivCount;
    bool lv_terminal1Present;
    bool lv_terminal2Present;
    point lv_civScatterPoint;

    // Variable Initialization
    lv_localUnitA = EventUnit();
    lv_infestedCivCount = (gv_spawnFactor * (gv_infestorsAlive + 1));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(39), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(39), 0), c_unitCountAlive), 1.0);
        lv_terminal1Present = true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(167), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(167), 0), c_unitCountAlive), 1.0);
        lv_terminal2Present = true;
    }

    if ((lv_terminal1Present == true) && (lv_terminal2Present == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(39), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(167), "DecalProtoss");
        gv_colonyShipRescue = true;
        PingCreate(PlayerGroupActive(), "PingWarning", UnitGetPosition(lv_localUnitA), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 2.0);
        gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/6D8042EE"));
        Wait(1.5, c_timeReal);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/979A6593"));
        SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 100.0, 0.0);
        Wait(3.0, c_timeReal);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/209EFACE"));
        Wait(3.0, c_timeReal);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/437EEE0A"));
        SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 100.0, 0.0);
        Wait(3.5, c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(1, "Priyanka", 0, 9, RegionRandomPoint(RegionFromId(39)), UnitGetPosition(lv_localUnitA));
        gv_priyanka = UnitLastCreated();
        UnitGroupAdd(gv_colonists, UnitLastCreated());
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_priyanka, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterPriyanka, StringExternal("Param/Value/499FD1F8"), 5.5, c_transmissionDurationAdd, false);
        SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
        ObjectiveCreate(StringExternal("Param/Value/790B2B1C"), StringExternal("Param/Value/45B6D98E"), c_objectiveStateActive, false);
        gv_secondaryObjective = ObjectiveLastCreated();
        if ((gv_truckRoute == 2)) {
            RegionSetCenter(RegionFromId(42), RegionGetCenter(RegionFromId(236)));
            gv_truckSelected = RegionFromId(236);
            gv_madMaxTruck = UnitFromId(1988);
        }

        Wait(3.5, c_timeReal);
        UnitIssueOrder(gv_priyanka, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_truckSelected)), c_orderQueueReplace);
        TriggerEnable(gt_ECEnterTruck, true);
        auto0957BD16_n = 30;
        for (auto0957BD16_i = 1; auto0957BD16_i <= auto0957BD16_n; auto0957BD16_i += 1) {
            Wait(RandomFixed(0.1, 0.5), c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, gv_civPool[RandomInt(0, 1)], 0, 9, RegionRandomPoint(RegionFromId(114)), UnitGetPosition(lv_localUnitA));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_truckSelected)), c_orderQueueReplace);
            UnitGroupAdd(gv_colonists, UnitLastCreated());
            if ((gv_noNewbie == false)) {
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 45.0);
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 45.0);
            }

        }
        SoundPlay(SoundLink("THanson01Civilian700005", -1), PlayerGroupActive(), 85.0, 0.0);
        auto5B923CAA_n = 8;
        for (auto5B923CAA_i = 1; auto5B923CAA_i <= auto5B923CAA_n; auto5B923CAA_i += 1) {
            Wait(RandomFixed(0.1, 0.5), c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, gv_civPool[RandomInt(0, 1)], 0, 9, RegionRandomPoint(RegionFromId(114)), UnitGetPosition(lv_localUnitA));
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_truckSelected)), c_orderQueueReplace);
            UnitGroupAdd(gv_colonists, UnitLastCreated());
        }
        UnitGroupLoopBegin(gv_episionCivilians);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(gv_colonists, UnitGroupLoopCurrent());
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_truckSelected)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
        gf_MarineSpeechNOTD(gv_priyanka, StringExternal("Param/Value/F80D8B6F"));
        Wait(3.0, c_timeReal);
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/B595B3C6"));
        gf_TipNOTD(5000, StringExternal("Param/Value/8920566F"));
        Wait(RandomFixed(1.0, 62.0), c_timeReal);
        if ((UnitGroupCount(gv_colonists, c_unitCountAlive) <= 0)) {
            TriggerEnable(gt_ECEnterTruck, false);
            ObjectiveSetState(gv_secondaryObjective, c_objectiveStateFailed);
            Wait(10.0, c_timeGame);
        }
        else {
            lv_localUnitA = UnitGroupRandomUnit(gv_colonists, c_unitCountAlive);
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_localUnitA));
            UnitCreate(1, "Hulk", 0, 14, UnitGetPosition(lv_localUnitA), libNtve_gf_RandomAngle());
            Wait(0.5, c_timeGame);
            auto8E62E4E2_n = (gv_spawnFactor * 1);
            for (auto8E62E4E2_i = 1; auto8E62E4E2_i <= auto8E62E4E2_n; auto8E62E4E2_i += 1) {
                if ((RandomInt(0, 2) == 1)) {
                    lv_localUnitA = UnitGroupRandomUnit(gv_colonists, c_unitCountAlive);
                    UnitKill(lv_localUnitA);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_localUnitA));
                    UnitCreate(1, "Hulk", 0, 14, UnitGetPosition(lv_localUnitA), libNtve_gf_RandomAngle());
                    if ((gv_noNewbie == false)) {
                        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
                    }

                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                }

                Wait(RandomFixed(0.1, 0.8), c_timeReal);
            }
            SoundPlay(SoundLink("Emitter_CrowdPanic", -1), PlayerGroupActive(), 70.0, 0.0);
            UnitGroupLoopBegin(gv_colonists);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                lv_civScatterPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 7.0));
                while ((CrossCliff(lv_civScatterPoint, UnitGetPosition(UnitGroupLoopCurrent())) == true)) {
                    lv_civScatterPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 7.0));
                }
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 1), lv_civScatterPoint), c_orderQueueReplace);
                if ((RandomInt(0, 1) == 1)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
                }
                else {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scared", UnitGroupLoopCurrent(), 1);
                }
                Wait(RandomFixed(0.0, 0.5), c_timeGame);
            }
            UnitGroupLoopEnd();
            auto7178BFAE_n = (gv_spawnFactor * 2);
            for (auto7178BFAE_i = 1; auto7178BFAE_i <= auto7178BFAE_n; auto7178BFAE_i += 1) {
                if ((RandomInt(0, 2) == 1)) {
                    lv_localUnitA = UnitGroupRandomUnit(gv_colonists, c_unitCountAlive);
                    UnitKill(lv_localUnitA);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_localUnitA));
                    UnitCreate(1, "Hulk", 0, 14, UnitGetPosition(lv_localUnitA), libNtve_gf_RandomAngle());
                    if ((gv_noNewbie == false)) {
                        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
                    }

                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                }

                Wait(RandomFixed(0.1, 0.8), c_timeReal);
            }
            SoundPlay(SoundLink("THanson01Marine200041", -1), PlayerGroupActive(), 100.0, 0.0);
            gf_TipNOTD(3000, StringExternal("Param/Value/52EDF8C1"));
            SoundPlay(SoundLink("Emitter_CrowdPanic", -1), PlayerGroupActive(), 58.0, 0.0);
            auto86B0F7FA_n = (gv_spawnFactor * 3);
            for (auto86B0F7FA_i = 1; auto86B0F7FA_i <= auto86B0F7FA_n; auto86B0F7FA_i += 1) {
                if ((RandomInt(0, 2) == 1)) {
                    lv_localUnitA = UnitGroupRandomUnit(gv_colonists, c_unitCountAlive);
                    UnitKill(lv_localUnitA);
                    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_localUnitA));
                    UnitCreate(1, "Hulk", 0, 14, UnitGetPosition(lv_localUnitA), 270.0);
                    if ((gv_noNewbie == false)) {
                        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
                    }

                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                }

                Wait(RandomFixed(0.1, 1.0), c_timeReal);
            }
            Wait(2.0, c_timeReal);
            UnitGroupLoopBegin(gv_colonists);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_truckSelected)), c_orderQueueReplace);
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "SpeedBuff35", 9, 1);
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "Scared", 1);
                Wait(RandomFixed(0.2, 1.2), c_timeReal);
            }
            UnitGroupLoopEnd();
            gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/93844B5C"));
            auto43709453_n = 20;
            for (auto43709453_i = 1; auto43709453_i <= auto43709453_n; auto43709453_i += 1) {
                Wait(5.0, c_timeReal);
                UnitGroupLoopBegin(gv_colonists);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_truckSelected)), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
            }
            if ((ObjectiveGetState(gv_secondaryObjective) != c_objectiveStateFailed) && (gv_colonistsRescued < 20)) {
                ObjectiveSetState(gv_secondaryObjective, c_objectiveStateFailed);
                Wait(10.0, c_timeGame);
            }

        }
        ObjectiveDestroy(gv_secondaryObjective);
    }
    else {
        if ((gv_warningTextBreak == false)) {
            gv_warningTextBreak = true;
            Wait(7.0, c_timeReal);
            gv_warningTextBreak = false;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECDelta1Transport_Init () {
    gt_ECDelta1Transport = TriggerCreate("gt_ECDelta1Transport_Func");
    TriggerEnable(gt_ECDelta1Transport, false);
    TriggerAddEventUnitRegion(gt_ECDelta1Transport, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_ECDelta1Transport, null, RegionFromId(39), false);
    TriggerAddEventUnitRegion(gt_ECDelta1Transport, null, RegionFromId(167), true);
    TriggerAddEventUnitRegion(gt_ECDelta1Transport, null, RegionFromId(167), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC - Enter Truck
//--------------------------------------------------------------------------------------------------
bool gt_ECEnterTruck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;

    // Variable Initialization
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "ColonistFemale2") || (UnitGetType(EventUnit()) == "Colonist2") || (UnitGetType(EventUnit()) == "Priyanka")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.7, c_timeReal);
    SoundPlayAtPoint(SoundLink("TransportTruckTransportLoadSound", -1), PlayerGroupAll(), UnitGetPosition(lv_localUnitA), 15.0, 85.0, 0.0);
    Wait(0.1, c_timeReal);
    UnitGroupRemove(gv_colonists, lv_localUnitA);
    UnitRemove(lv_localUnitA);
    gv_colonistsRescued += 1;
    gv_legionOfMeritCivsRescued += 1;
    if ((gv_colonistsRescued == 20)) {
        gv_colonyShipRescueSuccessful = true;
        ObjectiveSetState(gv_secondaryObjective, c_objectiveStateCompleted);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/12198CAD"));
        Wait(10.0, c_timeReal);
        TriggerExecute(gt_ECCivReward, true, false);
    }
    if (((gv_colonistsRescued + UnitGroupCount(gv_colonists, c_unitCountAlive)) < 20)) {
        ObjectiveSetState(gv_secondaryObjective, c_objectiveStateFailed);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECEnterTruck_Init () {
    gt_ECEnterTruck = TriggerCreate("gt_ECEnterTruck_Func");
    TriggerEnable(gt_ECEnterTruck, false);
    TriggerAddEventUnitRegion(gt_ECEnterTruck, null, RegionFromId(42), true);
    TriggerAddEventUnitRegion(gt_ECEnterTruck, null, RegionFromId(42), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC - Civ Reward
//--------------------------------------------------------------------------------------------------
bool gt_ECCivReward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;
    int lv_ratingReward;

    // Variable Initialization
    lv_localUnitA = EventUnit();
    lv_ratingReward = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ECEnterTruck, false);
    if ((gv_colonistsRescued >= 25)) {
        gf_AwardPlayerXPNOTD(3);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/A5F9B0D6"));
    }
    else {
        gf_AwardPlayerXPNOTD(2);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/C2BC1258"));
    }
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/66F7C730") + IntToText(gv_legionOfMeritCivsRescued)) + StringExternal("Param/Value/125DD36E")));
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == true) && (gv_playerRating[IntLoopCurrent()] < 1800)) {
            gv_playerRating[PlayerGroupLoopCurrent()] += lv_ratingReward;
        }

    }
    PlayerGroupLoopEnd();
    Wait(5.0, c_timeReal);
    UnitGroupLoopBegin(gv_colonists);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    Wait(10.0, c_timeReal);
    if ((gv_wave < 6)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0C2F5667"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECCivReward_Init () {
    gt_ECCivReward = TriggerCreate("gt_ECCivReward_Func");
    TriggerEnable(gt_ECCivReward, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC - Zombie Time
//--------------------------------------------------------------------------------------------------
bool gt_ECZombieTime_Func (bool testConds, bool runActions) {
    int autoB3708058_n;
    int autoB3708058_i;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(39), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(167), "DecalProtoss");
    ObjectiveSetState(gv_secondaryObjective, c_objectiveStateFailed);
    gv_colonyShipRescue = true;
    UnitFlashSelection(EventUnit(), 2.5);
    PingCreate(PlayerGroupActive(), "PingWarning", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 5.0);
    gf_TipNOTD(10000, StringExternal("Param/Value/643423F9"));
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("TScene14Tychus018", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("THorner05SScientist00060", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Emitter_CrowdPanic", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    autoB3708058_n = 18;
    for (autoB3708058_i = 1; autoB3708058_i <= autoB3708058_n; autoB3708058_i += 1) {
        Wait(RandomFixed(0.1, 1.5), c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(2, "Seeker", 0, 14, RegionRandomPoint(RegionFromId(114)), RegionGetCenter(RegionFromId(39)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(RandomFixed(0.1, 0.3), c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel2", 0, 14, RegionRandomPoint(RegionFromId(114)), RegionGetCenter(RegionFromId(39)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    }
    ObjectiveDestroy(gv_secondaryObjective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECZombieTime_Init () {
    gt_ECZombieTime = TriggerCreate("gt_ECZombieTime_Func");
    TriggerEnable(gt_ECZombieTime, false);
    TriggerAddEventUnitRegion(gt_ECZombieTime, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_ECZombieTime, null, RegionFromId(39), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 5 - Airlock Battle
//--------------------------------------------------------------------------------------------------
bool gt_Wave5AirlockBattle_Func (bool testConds, bool runActions) {
    int auto7DFCD305_n;
    int auto7DFCD305_i;
    int autoF1132485_n;
    int autoF1132485_i;
    int auto92B25AEB_n;
    int auto92B25AEB_i;

    // Variable Declarations
    unit lv_localUnitA;

    // Variable Initialization
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Wave5AirlockBattle, false);
    libNtve_gf_ShowHideBossBar(false, 3);
    gv_wave = 5;
    gv_hitPar = 30;
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(4.0, c_timeReal);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/DFDAC9AE"));
    Wait(7.0, c_timeReal);
    SoundPlay(SoundLink("InfestedCivilian_Moan", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(lv_localUnitA)), StringExternal("Param/Value/DF96DC2A"));
    Wait(3.0, c_timeReal);
    gf_TipNOTD(10000, StringExternal("Param/Value/B16D9C8C"));
    SoundPlay(SoundLink("Ultralisk_Pissed", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("TZeratul02HybridProtoss00014", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Mutalisk_Yes", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/236A95F9"));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/2A6CAC7C"), StringExternal("Param/Value/8505DA80"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gv_globalIntA = 0;
    auto7DFCD305_n = 3;
    for (auto7DFCD305_i = 1; auto7DFCD305_i <= auto7DFCD305_n; auto7DFCD305_i += 1) {
        if (((RandomInt(1, 7) == 1) || ((RandomInt(1, 3) == 1) && (gv_noNewbie == true)))) {
            libNtve_gf_UnitCreateFacingPoint(gv_spawnFactor, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionFromId(114)), RegionGetCenter(RegionFromId(9)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
        }
        else if (true) {
            libNtve_gf_UnitCreateFacingPoint(((gv_spawnFactor * 2) + 1), "Hulk", 0, 14, RegionRandomPoint(RegionFromId(15)), RegionGetCenter(RegionFromId(9)));
        }
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeGame);
        if ((gv_noNewbie == true)) {
            libNtve_gf_UnitCreateFacingPoint(gv_spawnFactor, "Hulk", 0, 14, RegionRandomPoint(RegionFromId(15)), RegionGetCenter(RegionFromId(9)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
        }

        libNtve_gf_UnitCreateFacingPoint(((gv_spawnFactor * 1) + 1), "ZombieLevel22", 0, 14, RegionRandomPoint(RegionFromId(15)), RegionGetCenter(RegionFromId(9)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(((gv_spawnFactor * 1) + 1), "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(15)), RegionGetCenter(RegionFromId(9)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(14.0, c_timeGame);
        gv_globalIntA += 1;
        if ((gv_globalIntA == 1)) {
            gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/0EE34416"));
        }

    }
    UnitGroupIssueOrder(UnitGroup("RoachBurrowed", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
    gv_globalIntA = 0;
    gf_AwardPlayerXPNOTD(1);
    gv_hitPar = 70;
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/C9F4F7B1"));
    if ((RandomInt(0, 25) == 1)) {
        libNtve_gf_UnitCreateFacingPoint(gv_alivePlayers, "SeekerBurrowed", 0, 14, RegionRandomPoint(RegionFromId(82)), RegionGetCenter(RegionFromId(8)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(gv_alivePlayers, "SeekerBurrowed", 0, 14, RegionRandomPoint(RegionFromId(82)), RegionGetCenter(RegionFromId(8)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    }
    else {
        libNtve_gf_UnitCreateFacingPoint(gv_alivePlayers, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionFromId(6)), RegionGetCenter(RegionFromId(8)));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    }
    Wait(7.0, c_timeGame);
    autoF1132485_n = 5;
    for (autoF1132485_i = 1; autoF1132485_i <= autoF1132485_n; autoF1132485_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(((gv_spawnFactor * 2) + 1), "ZombieLevel2", 0, 14, RegionRandomPoint(RegionFromId(9)), RegionGetCenter(RegionFromId(9)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeGame);
        auto92B25AEB_n = (gv_spawnFactor * 2);
        for (auto92B25AEB_i = 1; auto92B25AEB_i <= auto92B25AEB_n; auto92B25AEB_i += 1) {
            if (((gv_nightmare == true) || ((gv_squadRating >= 1700) && (gv_noNewbie == true)))) {
                libNtve_gf_UnitCreateFacingPoint(2, "HulkBurrowed", 0, 14, RegionRandomPoint(RegionFromId(9)), RegionGetCenter(RegionFromId(9)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel22", 0, 14, RegionRandomPoint(RegionFromId(9)), RegionGetCenter(RegionFromId(9)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            UnitGroupIssueOrder(UnitLastCreatedGroup(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionGetCenter(RegionFromId(8))), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
        }
        Wait(6.0, c_timeGame);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(25.0, c_timeReal);
    if ((gv_noNewbie == true) && (gv_colonyShipRescue == false)) {
        TriggerEnable(gt_ECDelta1Transport, false);
        TriggerEnable(gt_ECZombieTime, true);
    }

    TriggerEnable(gt_Wave6Cocoons, true);
    gf_AwardPlayerXPNOTD(1);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/02115397"), StringExternal("Param/Value/8F3C1D87"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(90.0, c_timeReal);
    if ((gv_wave <= 5)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/ACA7AE15"));
        PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(28)), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 15.0);
    }

    Wait(90.0, c_timeReal);
    if ((gv_wave <= 5)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/594AAF09"));
        PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(28)), ColorWithAlpha(100.00, 100.00, 100.00, 0.00), 15.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave5AirlockBattle_Init () {
    gt_Wave5AirlockBattle = TriggerCreate("gt_Wave5AirlockBattle_Func");
    TriggerEnable(gt_Wave5AirlockBattle, false);
    TriggerAddEventUnitRegion(gt_Wave5AirlockBattle, null, RegionFromId(8), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 6 - Cocoons
//--------------------------------------------------------------------------------------------------
bool gt_Wave6Cocoons_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;
    fixed lv_cocoonTime;
    revealer[10] lv_localRevealer;
    point lv_localPointA;
    unit lv_localUnitA;
    int lv_localTextTag;

    // Variable Initialization
    lv_localIntA = 1;
    lv_cocoonTime = 120.0;
    lv_localPointA = UnitGetPosition(UnitFromId(630));
    lv_localUnitA = EventUnit();
    lv_localTextTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((DistanceBetweenPoints(libNtve_gf_CenterOfUnitGroup(gv_marines), RegionGetCenter(RegionFromId(28))) <= 15.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveDestroy(gv_primaryObjective);
    gv_wave = 6;
    gv_hitPar = 40;
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/00AD8F43"));
    Wait(5.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lv_localUnitA, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, (StringExternal("Param/Value/74C8B185") + PlayerName(UnitGetOwner(lv_localUnitA))), StringExternal("Param/Value/1BF44CE6"), 3.7, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.0, c_timeReal);
    UnitKill(UnitFromId(630));
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, lv_localPointA);
    Wait(0.01, c_timeReal);
    if ((RandomInt(0, 20) != 1)) {
        libNtve_gf_UnitCreateFacingPoint(1, "Hulk", c_unitCreateIgnorePlacement, 14, lv_localPointA, RegionGetCenter(RegionFromId(9)));
    }
    else {
        if ((gv_noNewbie == true)) {
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "BrainBug", c_unitCreateIgnorePlacement, 14, lv_localPointA, RegionGetCenter(RegionFromId(9)));
            }
            else if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Sheep", c_unitCreateIgnorePlacement, 14, lv_localPointA, RegionGetCenter(RegionFromId(9)));
            }
            else if (true) {
                libNtve_gf_UnitCreateFacingPoint(1, "Hugger", c_unitCreateIgnorePlacement, 14, lv_localPointA, RegionGetCenter(RegionFromId(9)));
            }
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "UrsadakCalf", c_unitCreateIgnorePlacement, 14, lv_localPointA, RegionGetCenter(RegionFromId(9)));
        }
    }
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("THanson02InfestedRefugee00005", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/57918D53"));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/A779B0BC"));
    gf_TipNOTD(5000, StringExternal("Param/Value/ED78DA01"));
    Wait(4.5, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/28EEACC4"));
    UnitGroupLoopBegin(UnitGroupFromId(2));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateInvulnerable, false);
    }
    UnitGroupLoopEnd();
    if ((gv_noNewbie == true)) {
        IntLoopBegin(1, (gv_spawnFactor * 2));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            UnitCreate(1, "Egg", 0, 14, RegionRandomPoint(gv_eggVetSpawnAreas[RandomInt(0, 2)]), libNtve_gf_RandomAngle());
            Wait(0.1, c_timeReal);
        }
        IntLoopEnd();
    }

    Wait(5.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lv_localUnitA, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, (StringExternal("Param/Value/6A4ED2AC") + PlayerName(UnitGetOwner(lv_localUnitA))), StringExternal("Param/Value/CEB6030A"), 3.7, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    if ((gv_alivePlayers > 7)) {
        lv_cocoonTime = 35.0;
    }
    else if ((gv_alivePlayers > 4)) {
        lv_cocoonTime = 45.0;
    }
    else if ((gv_alivePlayers > 2)) {
        lv_cocoonTime = 55.0;
    }
    if (((gv_nightmare == true) || (gv_squadRating >= 1800)) && (gv_noNewbie == true)) {
        lv_cocoonTime = (lv_cocoonTime * 0.8);
        TriggerExecute(gt_BroodMotherAmbush, true, false);
    }

    TimerWindowCreate(gv_globalTimer, StringExternal("Param/Value/D235FC6D"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    TimerStart(gv_globalTimer, lv_cocoonTime, false, c_timeReal);
    gv_globalTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), true);
    while (!(((UnitGroupCount(UnitGroup("Egg", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 1) || (TimerGetRemaining(gv_globalTimer) < 0.1)))) {
        Wait(1.0, c_timeGame);
    }
    TimerWindowDestroy(gv_globalTimerWindow);
    if ((UnitGroupCount(UnitGroup("Egg", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) < 5)) {
        SoundPlay(SoundLink("TZeratul02HybridProtoss00020", -1), PlayerGroupActive(), 100.0, 0.0);
        gf_AwardPlayerXPNOTD(1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/2F400B8B"));
        gf_AwardRatingNOTD(1);
    }
    else {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/9E86CEF8"));
    }
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 3) == 1) && ((gv_nightmare == true) || (gv_squadRating >= 1700))) {
            libNtve_gf_UnitCreateFacingPoint(1, "Baneling", c_unitCreateIgnorePlacement, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionFromId(28)));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "Hulk", c_unitCreateIgnorePlacement, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionFromId(28)));
        }
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        UnitKill(UnitGroupLoopCurrent());
        Wait(0.3, c_timeReal);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    Wait(9.0, c_timeReal);
    TriggerExecute(gt_Boss2Spawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave6Cocoons_Init () {
    gt_Wave6Cocoons = TriggerCreate("gt_Wave6Cocoons_Func");
    TriggerEnable(gt_Wave6Cocoons, false);
    TriggerAddEventUnitRegion(gt_Wave6Cocoons, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_Wave6Cocoons, null, RegionFromId(28), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Brood Mother Ambush
//--------------------------------------------------------------------------------------------------
bool gt_BroodMotherAmbush_Func (bool testConds, bool runActions) {
    int auto17EE7257_n;
    int auto17EE7257_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto17EE7257_n = (gv_spawnFactor * 2);
    for (auto17EE7257_i = 1; auto17EE7257_i <= auto17EE7257_n; auto17EE7257_i += 1) {
        UnitCreate(1, "ZombieBroodMother2", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
        UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
        UnitGroupAdd(gv_blackOps, UnitLastCreated());
        if ((RandomInt(0, 5) == 1)) {
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }

    }
    UnitGroupLoopBegin(gv_blackOps);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        Wait(RandomFixed(0.0, 12.0), c_timeGame);
        while (!((gv_cinematicMode == false))) {
            Wait(1.0, c_timeGame);
        }
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("UnburrowBroodmother", 0)), c_orderQueueReplace);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BroodMotherAmbush_Init () {
    gt_BroodMotherAmbush = TriggerCreate("gt_BroodMotherAmbush_Func");
    TriggerEnable(gt_BroodMotherAmbush, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 2 - Spawn
//--------------------------------------------------------------------------------------------------
bool gt_Boss2Spawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Boss2Spawn, false);
    Wait(5.0, c_timeReal);
    gv_bossFight = true;
    gv_currentBoss = "Erebos 1";
    if ((gv_noNewbie == false)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/C0C84B70"));
        SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
        Wait(5.0, c_timeReal);
    }

    if ((RandomInt(0, 1) == 1) && (gv_noNewbie == true)) {
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Erebos", 0, 14, RegionRandomPoint(RegionFromId(98)), RegionGetCenter(RegionFromId(11)));
            gv_erebos1 = UnitLastCreated();
            TriggerExecute(gt_Wave4EnterAirlockBackupGate, false, false);
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "Erebos", 0, 14, RegionRandomPoint(RegionFromId(99)), RegionGetCenter(RegionFromId(11)));
            gv_erebos1 = UnitLastCreated();
            TriggerExecute(gt_Wave4EnterAirlockNorthGate, false, false);
        }
        UnitIssueOrder(UnitFromId(620), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
        UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
                UnitRemove(UnitGroupLoopCurrent());
            }

        }
        UnitGroupLoopEnd();
    }
    else {
        Wait(2.0, c_timeReal);
        TriggerExecute(gt_Boss2ErebosCinematic, true, true);
    }
    if (((gv_alivePlayers >= 5) && (gv_alivePlayers <= 8))) {
        if ((gv_noNewbie == true)) {
            UnitSetPropertyFixed(gv_erebos1, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_erebos1, c_unitPropLifeMax, c_unitPropCurrent) * 2.2));
            UnitSetPropertyFixed(gv_erebos1, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos1, c_unitPropLife, c_unitPropCurrent) * 2.2));
        }
        else {
            UnitSetPropertyFixed(gv_erebos1, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_erebos1, c_unitPropLifeMax, c_unitPropCurrent) * 2.0));
            UnitSetPropertyFixed(gv_erebos1, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos1, c_unitPropLife, c_unitPropCurrent) * 2.0));
        }
    }
    UnitGroupAdd(gv_zombieWave, gv_erebos1);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 80.0, 0.0);
    TriggerEnable(gt_Boss2Killed, true);
    TriggerEnable(gt_Boss2AI, true);
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_erebos1, ge_Ping_Enabled);
    gv_performanceTimer = 0;
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_EndCreditsG", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    Wait(5.0, c_timeReal);
    if ((((gv_squadRating >= 1650) && (gv_noNewbie == true)) || (gv_nightmare == true))) {
        UnitBehaviorAddPlayer(gv_erebos1, "ErebosBlind", 14, 1);
    }

    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(3.0, c_timeReal);
    if ((gv_noNewbie == false) && (UnitIsAlive(gv_erebos1) == true)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/32D3A5EF"));
    }

    Wait(27.0, c_timeReal);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss2Spawn_Init () {
    gt_Boss2Spawn = TriggerCreate("gt_Boss2Spawn_Func");
    TriggerEnable(gt_Boss2Spawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 2 - Erebos Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_Boss2ErebosCinematic_Func (bool testConds, bool runActions) {
    int auto48FA04C1_n;
    int auto48FA04C1_i;
    int auto7FAE74D1_n;
    int auto7FAE74D1_i;
    int autoF4812A46_n;
    int autoF4812A46_i;

    // Variable Declarations
    unitgroup lv_scaredCivs;
    point lv_localPointA;
    int lv_heroOwner;
    unitgroup lv_erebosBanelings;

    // Variable Initialization
    lv_scaredCivs = UnitGroupEmpty();
    lv_erebosBanelings = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gf_PreCinematicProcessing() == true)) {
    }

    auto48FA04C1_n = 3;
    for (auto48FA04C1_i = 1; auto48FA04C1_i <= auto48FA04C1_n; auto48FA04C1_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ColonistFemale2", 0, 9, RegionRandomPoint(RegionFromId(101)), RegionGetCenter(RegionFromId(11)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.3);
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitGroupAdd(lv_scaredCivs, UnitLastCreated());
        Wait(0.1, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Colonist2", 0, 9, RegionRandomPoint(RegionFromId(101)), RegionGetCenter(RegionFromId(11)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.3);
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitGroupAdd(lv_scaredCivs, UnitLastCreated());
        Wait(0.1, c_timeGame);
    }
    auto7FAE74D1_n = 2;
    for (auto7FAE74D1_i = 1; auto7FAE74D1_i <= auto7FAE74D1_n; auto7FAE74D1_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Scientist", 0, 9, RegionRandomPoint(RegionFromId(101)), RegionGetCenter(RegionFromId(11)));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 2.3);
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitGroupAdd(lv_scaredCivs, UnitLastCreated());
        Wait(0.1, c_timeGame);
    }
    GameSetLighting("NOTDGameOverLight", 0.2);
    libNtve_gf_UnitCreateFacingPoint(1, "Erebos", 0, 14, RegionRandomPoint(RegionFromId(37)), RegionGetCenter(RegionFromId(11)));
    gv_erebos1 = UnitLastCreated();
    UnitSetState(gv_erebos1, c_unitStateInvulnerable, true);
    UnitSetState(gv_erebos1, c_unitStateTargetable, false);
    UnitSetState(gv_erebos1, c_unitStateStatusBar, false);
    UnitSetState(gv_erebos1, c_unitStateSelectable, false);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionFromId(102), 32.0, false);
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(1633), 0.0, -1, 10, true);
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(1631), 6.0, -1, 10, true);
    }
    IntLoopEnd();
    UnitGroupLoopBegin(lv_scaredCivs);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "AdvancedMutation", UnitGroupLoopCurrent(), 2);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(100))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("THanson01Civilian600016", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitIssueOrder(gv_erebos1, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(100))), c_orderQueueReplace);
    Wait(1.0, c_timeReal);
    SoundPlay(SoundLink("HybridF_Roar", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("THorner05SScientist00062", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Emitter_CrowdPanic", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitGroupLoopBegin(lv_scaredCivs);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionFromId(100))), c_orderQueueReplace);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropMovementSpeed, 2.5);
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scared", UnitGroupLoopCurrent(), 1);
        }
    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(1632), 9.0, -1, 10, true);
    }
    IntLoopEnd();
    Wait(3.5, c_timeReal);
    lv_localPointA = UnitGetPosition(gv_erebos1);
    GameSetLighting("UnknownLight", 5.0);
    UnitBehaviorAdd(gv_erebos1, "CutsceneFreeze", gv_erebos1, 1);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(2270), 1.0, -1, 10, true);
    }
    IntLoopEnd();
    lv_heroOwner = UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive));
    SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, ((UserDataGetText("Ranks", UserDataInstance("Ranks", gv_playerRank[lv_heroOwner]), "Title Brief", 1) + PlayerName(lv_heroOwner)) + StringExternal("Param/Value/C96062D1")));
    SoundPlay(SoundLink("TZeratul02HybridProtoss00017", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.9, c_timeReal);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(2229), 0.0, -1, 10, true);
    }
    IntLoopEnd();
    autoF4812A46_n = 9;
    for (autoF4812A46_i = 1; autoF4812A46_i <= autoF4812A46_n; autoF4812A46_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, 14, RegionRandomPoint(RegionFromId(165)), RegionRandomPoint(RegionFromId(100)));
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitGroupAdd(lv_erebosBanelings, UnitLastCreated());
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopBegin(lv_erebosBanelings);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(100))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    SoundPlay(SoundLink("TZeratul02HybridProtoss00055", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2230), 2.5, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(1.8, c_timeReal);
    UnitGroupLoopBegin(lv_erebosBanelings);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Explode", 0)), c_orderQueueReplace);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitGroupLoopCurrent()));
        Wait(0.1, c_timeReal);
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Terran, UnitGetPosition(UnitFromId(620)));
    UnitIssueOrder(UnitFromId(620), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitKill(UnitFromId(620));
    UnitGroupLoopBegin(lv_erebosBanelings);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(lv_scaredCivs);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(0.3, c_timeReal);
    UnitBehaviorRemove(gv_erebos1, "CutsceneFreeze", 1);
    UnitIssueOrder(gv_erebos1, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionFromId(11))), c_orderQueueReplace);
    Wait(2.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
    if ((gf_PostCinematicProcessing() == true)) {
    }

    UnitSetState(gv_erebos1, c_unitStateStatusBar, true);
    UnitSetState(gv_erebos1, c_unitStateSelectable, true);
    UnitSetState(gv_erebos1, c_unitStateInvulnerable, false);
    UnitSetState(gv_erebos1, c_unitStateTargetable, true);
    Wait(1.0, c_timeReal);
    if ((RandomInt(0, 1) == 1)) {
        gf_TipNOTD(3000, StringExternal("Param/Value/8742BCDB"));
    }
    else if (true) {
        gf_TipNOTD(3000, StringExternal("Param/Value/B7286B3D"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss2ErebosCinematic_Init () {
    gt_Boss2ErebosCinematic = TriggerCreate("gt_Boss2ErebosCinematic_Func");
    TriggerEnable(gt_Boss2ErebosCinematic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 2 - AI
//--------------------------------------------------------------------------------------------------
bool gt_Boss2AI_Func (bool testConds, bool runActions) {
    int autoD3607774_n;
    int autoD3607774_i;
    int autoBA2C9622_n;
    int autoBA2C9622_i;

    // Variable Declarations
    point[8] lv_erebosAOE;
    region lv_erebosRange;
    unitgroup lv_erebosVeteranGroup;
    int lv_localIntA;
    int lv_sporeCycles;

    // Variable Initialization
    lv_erebosRange = RegionCircle(UnitGetPosition(gv_erebos1), 15.0);
    lv_erebosVeteranGroup = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(gv_erebos1), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_localIntA = 1;
    lv_sporeCycles = 5;

    // Conditions
    if (testConds) {
        if (!((gv_cinematicMode == false))) {
            return false;
        }

        if (!((UnitIsAlive(gv_erebos1) == true))) {
            return false;
        }

        if (!((gv_wave < 7))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_performanceTimer += 1;
    if ((gv_squadRating > 1550)) {
        lv_sporeCycles = 7;
    }

    if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 40)) {
        autoD3607774_n = gv_spawnFactor;
        for (autoD3607774_i = 1; autoD3607774_i <= autoD3607774_n; autoD3607774_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        }
        Wait(0.1, c_timeGame);
        if (((gv_squadXP > 200) && (gv_alivePlayers > 3) && (RandomInt(0, 2) == 1))) {
            libNtve_gf_UnitCreateFacingPoint(1, "Stalker2", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((gv_noNewbie == false)) {
                UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
            }

        }
        UnitGroupIssueOrder(gv_zombieWave, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), c_orderQueueReplace);
    }

    if ((UnitIsAlive(gv_erebos1) == true)) {
        lv_erebosRange = RegionCircle(UnitGetPosition(gv_erebos1), 15.0);
        lv_erebosAOE[1] = RegionRandomPoint(lv_erebosRange);
        lv_erebosAOE[2] = RegionRandomPoint(lv_erebosRange);
        lv_erebosAOE[3] = RegionRandomPoint(lv_erebosRange);
        if (((gv_squadXP >= 500) && (UnitGroupCount(lv_erebosVeteranGroup, c_unitCountAlive) > 1))) {
            lv_erebosAOE[4] = UnitGetPosition(UnitGroupRandomUnit(lv_erebosVeteranGroup, c_unitCountAlive));
            lv_erebosAOE[5] = UnitGetPosition(UnitGroupRandomUnit(lv_erebosVeteranGroup, c_unitCountAlive));
            lv_erebosAOE[6] = UnitGetPosition(UnitGroupRandomUnit(lv_erebosVeteranGroup, c_unitCountAlive));
            lv_erebosAOE[7] = UnitGetPosition(UnitGroupRandomUnit(lv_erebosVeteranGroup, c_unitCountAlive));
        }
        else {
            lv_erebosAOE[4] = RegionRandomPoint(lv_erebosRange);
            lv_erebosAOE[5] = RegionRandomPoint(lv_erebosRange);
            lv_erebosAOE[6] = RegionRandomPoint(lv_erebosRange);
            lv_erebosAOE[7] = RegionRandomPoint(lv_erebosRange);
        }
        SoundPlay(SoundLink("HybridF_ConstrictingSlimeLaunch", -1), PlayerGroupActive(), 100.0, 0.0);
        autoBA2C9622_n = lv_sporeCycles;
        for (autoBA2C9622_i = 1; autoBA2C9622_i <= autoBA2C9622_n; autoBA2C9622_i += 1) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_erebosAOE[lv_localIntA]);
            UnitCreate(1, "ZergDropPod", 0, 14, lv_erebosAOE[lv_localIntA], libNtve_gf_RandomAngle());
            UnitBehaviorAddPlayer(UnitLastCreated(), "ErebosSporeDetonation", 14, 1);
            Wait(RandomFixed(0.01, 0.1), c_timeGame);
            lv_localIntA += 1;
        }
        if ((gv_noNewbie == false) && (RandomInt(0, 2) == 1)) {
            gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0CE405E2"));
        }

        Wait(5.0, c_timeGame);
        SoundPlay(SoundLink("HybridFAoEStunImpact", -1), PlayerGroupActive(), 100.0, 0.0);
        IntLoopBegin(1, lv_sporeCycles);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, lv_erebosAOE[IntLoopCurrent()]);
            Wait(0.1, c_timeGame);
        }
        IntLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss2AI_Init () {
    gt_Boss2AI = TriggerCreate("gt_Boss2AI_Func");
    TriggerEnable(gt_Boss2AI, false);
    TriggerAddEventTimePeriodic(gt_Boss2AI, RandomFixed(6.0, 9.5), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 2 - Killed
//--------------------------------------------------------------------------------------------------
bool gt_Boss2Killed_Func (bool testConds, bool runActions) {
    int auto687792D6_n;
    int auto687792D6_i;
    int auto2EF8F90D_n;
    int auto2EF8F90D_i;

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(gv_erebos1, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Boss2AI, false);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_erebos1));
    gf_UnifiedAwards(3, libNtve_gf_DifficultyValueInt(375, 250, 250, 0), libNtve_gf_DifficultyValueInt(15, 15, 30, 0), 0, 0);
    gf_BossAfterAction();
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/D12FB155"));
    UnitSetState(gv_erebos1, c_unitStateInvulnerable, true);
    UnitSetState(gv_erebos1, c_unitStateTargetable, false);
    UnitSetState(gv_erebos1, c_unitStateRadarable, false);
    UnitSetState(gv_erebos1, c_unitStateDetectable, false);
    UnitGroupRemove(gv_zombieWave, gv_erebos1);
    SoundPlay(SoundLink("HybridF_Roar", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitSetPropertyFixed(gv_erebos1, c_unitPropLifeRegen, 150.0);
    UnitSetPropertyFixed(gv_erebos1, c_unitPropMovementSpeed, 0.8);
    UnitSetPropertyFixed(gv_erebos1, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos1, c_unitPropLife, c_unitPropCurrent) * 1.7));
    UnitAbilityEnable(gv_erebos1, "attack", false);
    auto687792D6_n = 3;
    for (auto687792D6_i = 1; auto687792D6_i <= auto687792D6_n; auto687792D6_i += 1) {
        Wait(0.3, c_timeReal);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_erebos1));
    }
    Wait(0.4, c_timeReal);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_erebos1));
    SoundPlay(SoundLink("TZeratul02HybridProtoss00021", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitIssueOrder(gv_erebos1, Order(AbilityCommand("BurrowInfestedAbominationDown", 0)), c_orderQueueReplace);
    UnitSetPropertyFixed(gv_erebos1, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos1, c_unitPropLife, c_unitPropCurrent) * 1.7));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TZeratul02HybridProtoss00024", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0B49A8C2"));
    auto2EF8F90D_n = 5;
    for (auto2EF8F90D_i = 1; auto2EF8F90D_i <= auto2EF8F90D_n; auto2EF8F90D_i += 1) {
        Wait(1.5, c_timeReal);
        UnitIssueOrder(gv_erebos1, Order(AbilityCommand("BurrowInfestedAbominationDown", 0)), c_orderQueueReplace);
    }
    SoundPlay(SoundLink("THorner05SRaynor00021", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitSetPropertyFixed(gv_erebos1, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos1, c_unitPropLife, c_unitPropCurrent) * 1.7));
    UnitSetPropertyFixed(gv_erebos1, c_unitPropMovementSpeed, 1.5);
    UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(gv_erebos1), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(37))), c_orderQueueReplace);
    gv_hitPar = 80;
    if ((gv_performanceTimer <= 10)) {
        gf_AwardPlayerXPNOTD(1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/32F3AC3C"));
        PlayerGroupLoopBegin(gv_marineSquad);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == true) && ((gv_noNewbie == true) || ((gv_noNewbie == false) && (gv_playerRating[PlayerGroupLoopCurrent()] < 1550)))) {
                gv_playerRating[PlayerGroupLoopCurrent()] += 1;
            }

        }
        PlayerGroupLoopEnd();
    }

    Wait(3.0, c_timeReal);
    TriggerExecute(gt_AutoSave, true, false);
    Wait(4.0, c_timeReal);
    UnitRemove(gv_erebos1);
    TriggerEnable(gt_Boss2AI, false);
    UnitCreate(1, "InfestedAbominationBurrowed", 0, 14, RegionRandomPoint(RegionFromId(37)), libNtve_gf_RandomAngle());
    gv_erebos2 = UnitLastCreated();
    UnitSetState(gv_erebos2, c_unitStateInvulnerable, true);
    UnitSetState(gv_erebos2, c_unitStateTargetable, false);
    UnitSetState(gv_erebos2, c_unitStateRadarable, false);
    UnitSetState(gv_erebos2, c_unitStateDetectable, false);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    UnitIssueOrder(gv_erebos2, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/60438EA0"));
    Wait(5.0, c_timeReal);
    UnitIssueOrder(gv_erebos2, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    TriggerEnable(gt_ECNydusFirstBlood, true);
    gv_wave = 7;
    if ((gv_noNewbie == true)) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/1DB5DCFB"));
        Wait(5.0, c_timeReal);
        TriggerExecute(gt_Wave7DropshipEVACVeteran, true, false);
    }
    else {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/BCA5739D"));
        Wait(5.0, c_timeReal);
        TriggerExecute(gt_Wave7DropshipEVACRecruit, true, false);
    }
    Wait(RandomFixed(2.0, 20.0), c_timeReal);
    if (((gv_nightmare == true) || (gv_squadRating > 1650))) {
        TriggerExecute(gt_Boss3SpawnMenoetes, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss2Killed_Init () {
    gt_Boss2Killed = TriggerCreate("gt_Boss2Killed_Func");
    TriggerEnable(gt_Boss2Killed, false);
    TriggerAddEventUnitDamaged(gt_Boss2Killed, UnitRefFromVariable("gv_erebos1"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 3 - Spawn (Menoetes)
//--------------------------------------------------------------------------------------------------
bool gt_Boss3SpawnMenoetes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentBoss = "Menoetes";
    UnitCreate(1, "Menoetes", 0, 14, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), libNtve_gf_RandomAngle());
    gv_menoestes = UnitLastCreated();
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_menoestes, ge_Ping_Enabled);
    libNtve_gf_AICast(gv_menoestes, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())));
    gf_MenoEvasion(15);
    gv_prowlerPing = PingLastCreated();
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/D7491251"));
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 1.0, 2.0, 100.0, 2.0);
    }
    IntLoopEnd();
    TriggerEnable(gt_Boss3AI, true);
    TriggerEnable(gt_Boss3Killed, true);
    Wait(2.0, c_timeGame);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/45FDE674"));
    Wait(3.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/81F61D65"));
    gf_TipNOTD(5000, StringExternal("Param/Value/AA575A06"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss3SpawnMenoetes_Init () {
    gt_Boss3SpawnMenoetes = TriggerCreate("gt_Boss3SpawnMenoetes_Func");
    TriggerEnable(gt_Boss3SpawnMenoetes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 3 - AI
//--------------------------------------------------------------------------------------------------
bool gt_Boss3AI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_infestedWormPoint;
    actor lv_localActorRumble;
    actor lv_localActorWarning;
    unit lv_localUnitInfestedWorm;

    // Variable Initialization
    lv_infestedWormPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 2.0));

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_menoestes) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }

        if (!((gv_cinematicMode == false))) {
            return false;
        }

        if (!((RandomInt(0, 2) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateModelAtPoint("NydusRumble", lv_infestedWormPoint);
    lv_localActorRumble = libNtve_gf_ActorLastCreated();
    Wait(RandomFixed(1.0, 3.5), c_timeReal);
    libNtve_gf_KillModel(lv_localActorRumble);
    if ((gv_cinematicMode == false)) {
        UnitCreate(1, "InfestedWorm", c_unitCreateIgnorePlacement, 14, lv_infestedWormPoint, libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "MenoetesWormBurst", 14, 1);
        lv_localUnitInfestedWorm = UnitLastCreated();
        Wait(2.0, c_timeReal);
        libNtve_gf_KillModel(lv_localActorWarning);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss3AI_Init () {
    gt_Boss3AI = TriggerCreate("gt_Boss3AI_Func");
    TriggerEnable(gt_Boss3AI, false);
    TriggerAddEventTimePeriodic(gt_Boss3AI, 5.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss 3 - Killed
//--------------------------------------------------------------------------------------------------
bool gt_Boss3Killed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Boss3AI, false);
    PingDestroy(gv_prowlerPing);
    gf_UnifiedAwards(2, 50.0, libNtve_gf_DifficultyValueInt(0, 0, 40, 0), 0, 0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/571BB748"));
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/EDB52871"));
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Boss3Killed_Init () {
    gt_Boss3Killed = TriggerCreate("gt_Boss3Killed_Func");
    TriggerEnable(gt_Boss3Killed, false);
    TriggerAddEventUnitDied(gt_Boss3Killed, UnitRefFromVariable("gv_menoestes"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 7 - Dropship EVAC Recruit
//--------------------------------------------------------------------------------------------------
bool gt_Wave7DropshipEVACRecruit_Func (bool testConds, bool runActions) {
    int auto8AD14F61_n;
    int auto8AD14F61_i;
    int auto1926634D_n;
    int auto1926634D_i;
    int auto1E9E537C_n;
    int auto1E9E537C_i;

    // Variable Declarations
    int lv_lZChoice;

    // Variable Initialization
    lv_lZChoice = RandomInt(1, 7);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    gv_hitPar = 50;
    gf_ECNydusSpawn(2);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/C4896DEF"), StringExternal("Param/Value/7A2BF702"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TimerStart(gv_globalTimer, 360.0, false, c_timeReal);
    TimerWindowCreate(gv_globalTimer, StringExternal("Param/Value/98B55E3E"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    gv_globalTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), true);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterCWOHussein, StringExternal("Param/Value/163EA7C6"));
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(gv_lZ[lv_lZChoice]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 150.0);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E95917BD"));
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gf_ECRecruitDropshipWaves();
    while (!((TimerGetRemaining(gv_globalTimer) <= 9.0))) {
        Wait(1.0, c_timeReal);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/35B64B6A"));
    Wait(9.0, c_timeReal);
    if ((gv_gameOver == true)) {
        TriggerStop(gt_Wave7DropshipEVACRecruit);
    }

    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), false);
    TimerWindowDestroy(gv_globalTimerWindow);
    Wait(0.5, c_timeReal);
    gf_DropshipArrival();
    if ((UnitGroupCount(gv_nydusWormGroup, c_unitCountAlive) > 0)) {
        gv_nydusFailed = true;
    }

    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("TRaynor03Marine100008", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("TRaynor03Tychus00013", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    auto8AD14F61_n = 8;
    for (auto8AD14F61_i = 1; auto8AD14F61_i <= auto8AD14F61_n; auto8AD14F61_i += 1) {
        auto1926634D_n = gv_spawnFactor;
        for (auto1926634D_i = 1; auto1926634D_i <= auto1926634D_n; auto1926634D_i += 1) {
            auto1E9E537C_n = gv_spawnFactor;
            for (auto1E9E537C_i = 1; auto1E9E537C_i <= auto1E9E537C_n; auto1E9E537C_i += 1) {
                gf_SmartSpawnNOTD("Mutalisk", 160.0);
                Wait(0.12, c_timeGame);
            }
        }
        Wait(1.0, c_timeReal);
    }
    Wait(25.0, c_timeReal);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/3EF0EAF1"));
    Wait(10.0, c_timeReal);
    gv_hitPar = 80;
    Wait(10.0, c_timeReal);
    if ((gv_alivePlayers == gv_totalPlayers)) {
        gf_AwardPlayerXPNOTD(1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/657E58AC"));
        gf_AwardRatingNOTD(1);
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }

    Wait(5.0, c_timeReal);
    TriggerExecute(gt_NightmareBonus, true, false);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_Chapter2Initialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave7DropshipEVACRecruit_Init () {
    gt_Wave7DropshipEVACRecruit = TriggerCreate("gt_Wave7DropshipEVACRecruit_Func");
    TriggerEnable(gt_Wave7DropshipEVACRecruit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 7 - Dropship EVAC Veteran
//--------------------------------------------------------------------------------------------------
bool gt_Wave7DropshipEVACVeteran_Func (bool testConds, bool runActions) {
    int auto61BD08CF_n;
    int auto61BD08CF_i;
    int auto60569BE4_n;
    int auto60569BE4_i;
    int auto608EB2A1_n;
    int auto608EB2A1_i;

    // Variable Declarations
    point lv_localPoint;
    point[9] lv_dropPodPoints;
    unitgroup lv_dropPods;
    region lv_localRegionA;
    point lv_localPointA;
    unitgroup lv_localUnitGroupA;
    int lv_lZChoice;

    // Variable Initialization
    lv_dropPods = UnitGroupEmpty();
    lv_localUnitGroupA = UnitGroupEmpty();
    lv_lZChoice = RandomInt(1, 7);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    gv_hitPar = 55;
    gf_ECNydusSpawn(4);
    libNtve_gf_UnitCreateFacingPoint(1, "Lelantos", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
    gv_infestedParrot = UnitLastCreated();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    TriggerEnable(gt_OptionalParrotKill, true);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/09D7CA4D"), StringExternal("Param/Value/E25FCAD9"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TimerStart(gv_globalTimer, 420.0, false, c_timeReal);
    TimerWindowCreate(gv_globalTimer, StringExternal("Param/Value/9A8AA95F"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    gv_globalTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), true);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterCWOHussein, StringExternal("Param/Value/3E1B8894"));
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(gv_lZ[lv_lZChoice]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 180.0);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/19A9FF60"));
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/1A082645"));
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gf_ECVeteranDropshipIntialWaves();
    while (!((TimerGetRemaining(gv_globalTimer) <= 120.0))) {
        Wait(1.0, c_timeReal);
    }
    gf_RadioNOTD(gv_characterCWOHussein, StringExternal("Param/Value/5F4DD8DA"));
    gf_ECVeteranDropshipSecondWaves();
    SoundPlay(SoundLink("TRaynor03Raynor00019", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(30.0, c_timeGame);
    SoundPlay(SoundLink("TRaynor03Raynor00017", -1), PlayerGroupAll(), 100.0, 0.0);
    while (!((TimerGetRemaining(gv_globalTimer) <= 1.0))) {
        Wait(0.5, c_timeReal);
    }
    if ((gv_gameOver == true)) {
        TriggerStop(gt_Wave7DropshipEVACVeteran);
    }

    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), false);
    TimerWindowDestroy(gv_globalTimerWindow);
    Wait(0.7, c_timeReal);
    gf_DropshipArrival();
    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("TRaynor03Marine100008", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("TRaynor03Tychus00013", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    auto61BD08CF_n = 8;
    for (auto61BD08CF_i = 1; auto61BD08CF_i <= auto61BD08CF_n; auto61BD08CF_i += 1) {
        auto60569BE4_n = gv_spawnFactor;
        for (auto60569BE4_i = 1; auto60569BE4_i <= auto60569BE4_n; auto60569BE4_i += 1) {
            auto608EB2A1_n = gv_spawnFactor;
            for (auto608EB2A1_i = 1; auto608EB2A1_i <= auto608EB2A1_n; auto608EB2A1_i += 1) {
                if ((RandomInt(0, 23) == 1)) {
                    gf_SmartSpawnNOTD("Slasher2", 120.0);
                }
                else {
                    if ((gv_nightmare == true) && (RandomInt(0, 9) == 1)) {
                        gf_SmartSpawnNOTD("Wraith2", 155.0);
                    }
                    else {
                        gf_SmartSpawnNOTD("Mutalisk", 155.0);
                    }
                }
                Wait(0.2, c_timeGame);
            }
        }
        Wait(2.1, c_timeReal);
    }
    if ((UnitGroupCount(gv_nydusWormGroup, c_unitCountAlive) > 0)) {
        gv_nydusFailed = true;
    }

    Wait(25.0, c_timeReal);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    Wait(15.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/4CA79992"));
    gv_hitPar = 80;
    Wait(10.0, c_timeReal);
    if ((gv_alivePlayers == gv_totalPlayers)) {
        gf_AwardPlayerXPNOTD(2);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/0D94F306"));
        gf_AwardRatingNOTD(1);
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }

    Wait(5.0, c_timeReal);
    TriggerExecute(gt_NightmareBonus, true, false);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_Chapter2Initialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave7DropshipEVACVeteran_Init () {
    gt_Wave7DropshipEVACVeteran = TriggerCreate("gt_Wave7DropshipEVACVeteran_Func");
    TriggerEnable(gt_Wave7DropshipEVACVeteran, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC Nydus First Blood
//--------------------------------------------------------------------------------------------------
bool gt_ECNydusFirstBlood_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "NydusCanal"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("TTychus03Raynor00011", -1), PlayerGroupAll(), 300.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECNydusFirstBlood_Init () {
    gt_ECNydusFirstBlood = TriggerCreate("gt_ECNydusFirstBlood_Func");
    TriggerEnable(gt_ECNydusFirstBlood, false);
    TriggerAddEventUnitDied(gt_ECNydusFirstBlood, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Optional - Parrot Kill
//--------------------------------------------------------------------------------------------------
bool gt_OptionalParrotKill_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("TTosh03AMarine800019", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_AwardPlayerXPNOTD(2);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/11E97FFE"));
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    if ((UnitGroupHasUnit(gv_marines, libNtve_gf_KillingUnit()) == true)) {
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/62889D26"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionalParrotKill_Init () {
    gt_OptionalParrotKill = TriggerCreate("gt_OptionalParrotKill_Func");
    TriggerEnable(gt_OptionalParrotKill, false);
    TriggerAddEventUnitDied(gt_OptionalParrotKill, UnitRefFromVariable("gv_infestedParrot"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Optional - Enter Lab @ Chapter 1 (Dr Bergmann)
//--------------------------------------------------------------------------------------------------
bool gt_OptionalEnterLabChapter1DrBergmann_Func (bool testConds, bool runActions) {
    int auto5DCBE236_n;
    int auto5DCBE236_i;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/C35F7AF8"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/AE4C8D7E"));
    SoundPlay(SoundLink("Reload", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitWeaponAdd(gv_drBergmann, "HyperionAir", null);
    UnitBehaviorAddPlayer(gv_drBergmann, "Run", 13, 1);
    libNtve_gf_MakeUnitInvulnerable(gv_drBergmann, true);
    UnitSetOwner(gv_drBergmann, 13, false);
    UnitGroupAdd(gv_zombieWave, gv_drBergmann);
    auto5DCBE236_n = 12;
    for (auto5DCBE236_i = 1; auto5DCBE236_i <= auto5DCBE236_n; auto5DCBE236_i += 1) {
        UnitBehaviorAddPlayer(gv_drBergmann, "Rampage", 14, 1);
        Wait(10.0, c_timeReal);
    }
    UnitGroupRemove(gv_zombieWave, gv_drBergmann);
    UnitSetPosition(gv_drBergmann, PointFromId(2392), false);
    UnitWeaponRemove(gv_drBergmann, "HyperionAir");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionalEnterLabChapter1DrBergmann_Init () {
    gt_OptionalEnterLabChapter1DrBergmann = TriggerCreate("gt_OptionalEnterLabChapter1DrBergmann_Func");
    TriggerEnable(gt_OptionalEnterLabChapter1DrBergmann, false);
    TriggerAddEventUnitRegion(gt_OptionalEnterLabChapter1DrBergmann, null, RegionFromId(137), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2Initialize_Func (bool testConds, bool runActions) {
    int auto6838A2FE_n;
    int auto6838A2FE_i;

    // Variable Declarations
    point lv_localPointA;
    camerainfo[6] lv_chapter2CamOptions;
    camerainfo lv_chapter2CamChoice;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_OptionalEnterLabChapter1DrBergmann, false);
    TriggerEnable(gt_OptionalParrotKill, false);
    UnitRemove(gv_infestedParrot);
    lv_chapter2CamOptions[1] = CameraInfoFromId(313);
    lv_chapter2CamOptions[2] = CameraInfoFromId(1242);
    lv_chapter2CamOptions[3] = CameraInfoFromId(1630);
    lv_chapter2CamChoice = lv_chapter2CamOptions[RandomInt(1, 3)];
    ObjectiveDestroy(gv_primaryObjective);
    TriggerExecute(gt_ChapterEndMedicRatingBonus, true, false);
    TriggerExecute(gt_VetPugGameBonus, true, false);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_EndCreditsD", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(5.0, c_timeReal);
    if ((gv_noNewbie == false)) {
        if ((gf_PreCinematicProcessing() == true)) {
        }

        IntLoopBegin(1, 8);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            VisRevealArea(IntLoopCurrent(), RegionFromId(70), 25.0, false);
            VisRevealArea(IntLoopCurrent(), RegionFromId(69), 45.0, false);
        }
        IntLoopEnd();
        IntLoopBegin(1, 8);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(324), 0.0, -1, 10, true);
            CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(1160), 5.0, -1, 10, true);
        }
        IntLoopEnd();
        libNtve_gf_PauseUnit(gv_drBergmann, false);
        libNtve_gf_PauseUnit(gv_blackOpsOperator, true);
        UnitSetPosition(gv_drBergmann, PointFromId(2390), false);
        UnitSetFacing(gv_drBergmann, 33.0, 0.0);
        Wait(1.0, c_timeReal);
        SoundPlay(SoundLink("Transmission", -1), PlayerGroupActive(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/637E1EF6"));
        Wait(4.0, c_timeReal);
        UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2391)), c_orderQueueReplace);
        Wait(1.0, c_timeReal);
        UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
        IntLoopBegin(1, 8);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(346), 0.0, -1, 10, true);
            CameraApplyInfo(IntLoopCurrent(), CameraInfoFromId(1161), 6.0, -1, 10, true);
        }
        IntLoopEnd();
        Wait(1.0, c_timeReal);
        SoundPlay(SoundLink("Transmission", -1), PlayerGroupActive(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaCinematic, StringExternal("Param/Value/38903A5B"));
        Wait(4.9, c_timeReal);
        UnitSetPosition(gv_drBergmann, PointFromId(2392), false);
        UnitSetFacing(gv_drBergmann, 80.0, 0.0);
        libNtve_gf_PauseUnit(gv_blackOpsOperator, false);
        UIClearMessages(PlayerGroupAll(), c_messageAreaCinematic);
        if ((gf_PostCinematicProcessing() == true)) {
        }

    }

    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisExploreArea(IntLoopCurrent(), RegionFromId(68), false, true);
    }
    IntLoopEnd();
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    TriggerEnable(gt_Wave8EnterScrapyardDoor, true);
    TriggerEnable(gt_Wave8BanelingSurprise, true);
    TriggerEnable(gt_OptionalPowerGeneratorRestart, true);
    TriggerEnable(gt_Wave9DrBergmannEncounter, true);
    gf_ECChapter2ItemSpawn();
    gf_ErebosReturns();
    TriggerExecute(gt_Chapter2AmbientSpawns, true, false);
    TriggerExecute(gt_AutoSave, true, false);
    ObjectiveCreate(StringExternal("Param/Value/1C72DC4A"), StringExternal("Param/Value/5D0A145A"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/069FDC3C"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(83)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(84)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(85)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(86)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(87)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0, 270.0);
    Wait(5.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/5AC82CF0"), StringExternal("Param/Value/E8977402"), 5.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(8.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    Wait(22.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B4E088A7"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(24)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0, 270.0);
    auto6838A2FE_n = (gv_spawnFactor * 3);
    for (auto6838A2FE_i = 1; auto6838A2FE_i <= auto6838A2FE_n; auto6838A2FE_i += 1) {
        UnitCreate(1, "ZombieLevel22", 0, 14, RegionRandomPoint(RegionPlayableMap()), libNtve_gf_RandomAngle());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(1.0, c_timeReal);
        UnitCreate(2, "ZombieLevel22", 0, 14, RegionRandomPoint(RegionPlayableMap()), libNtve_gf_RandomAngle());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
        UnitGroupAddUnitGroup(gv_zombieWave, UnitLastCreatedGroup());
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2Initialize_Init () {
    gt_Chapter2Initialize = TriggerCreate("gt_Chapter2Initialize_Func");
    TriggerEnable(gt_Chapter2Initialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 - Ambient Spawns
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2AmbientSpawns_Func (bool testConds, bool runActions) {
    int auto6C7E6A38_n;
    int auto6C7E6A38_i;
    int auto26763992_n;
    int auto26763992_i;
    int auto2E2C48F2_n;
    int auto2E2C48F2_i;

    // Variable Declarations
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_localIntA < 90) && (gv_gameOver == false)) {
        Wait(15.0, c_timeReal);
        if ((RandomInt(0, 3) == 1)) {
            SoundPlay(SoundLink("InfestedCivilian_Moan", -1), PlayerGroupActive(), 100.0, 0.0);
        }
        if ((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 100)) {
            auto6C7E6A38_n = gv_spawnFactor;
            for (auto6C7E6A38_i = 1; auto6C7E6A38_i <= auto6C7E6A38_n; auto6C7E6A38_i += 1) {
                if ((RandomInt(0, 12) == 1)) {
                    auto26763992_n = 2;
                    for (auto26763992_i = 1; auto26763992_i <= auto26763992_n; auto26763992_i += 1) {
                        libNtve_gf_UnitCreateFacingPoint(1, "SeekerBurrowed", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
                        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                        Wait(0.2, c_timeGame);
                    }
                }
                else if ((RandomInt(0, 3) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                    if ((gv_noNewbie == false)) {
                        libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
                    }

                }
                else if ((gv_noNewbie == false) && (RandomInt(0, 2) != 1)) {
                    auto2E2C48F2_n = 2;
                    for (auto2E2C48F2_i = 1; auto2E2C48F2_i <= auto2E2C48F2_n; auto2E2C48F2_i += 1) {
                        libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel22", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
                        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                        Wait(0.2, c_timeGame);
                    }
                }
                else if (true) {
                    libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                    if ((gv_noNewbie == false)) {
                        UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
                    }

                }
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.3, c_timeGame);
            }
            if ((gv_squadXP > 200) && (gv_alivePlayers > 3) && (RandomInt(0, 2) == 1)) {
                if ((gv_noNewbie == true) && (RandomInt(0, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Devourer2", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                    if ((gv_noNewbie == false)) {
                        UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
                    }

                }
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }
        }

        lv_localIntA += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2AmbientSpawns_Init () {
    gt_Chapter2AmbientSpawns = TriggerCreate("gt_Chapter2AmbientSpawns_Func");
    TriggerEnable(gt_Chapter2AmbientSpawns, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 - Erebos AI
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2ErebosAI_Func (bool testConds, bool runActions) {
    int auto7AAFD947_n;
    int auto7AAFD947_i;

    // Variable Declarations
    point lv_blackHolePoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnitDamageSourceUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_bossFight = true;
    gv_currentBoss = "Erebos 1";
    gf_RadioNOTD(PlayerName(UnitGetOwner(EventUnitDamageSourceUnit())), StringExternal("Param/Value/4D3249B2"));
    UnitSetTeamColorIndex(gv_erebos2, 0);
    gf_TipNOTD(10000, StringExternal("Param/Value/89D6CBC2"));
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("TZeratul02HybridProtoss00056", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_erebos2, ge_Ping_Enabled);
    Wait(6.0, c_timeReal);
    while ((UnitIsAlive(gv_erebos2) == true) && (gv_gameOver == false)) {
        if ((RandomInt(0, 3) == 1)) {
            SoundPlay(SoundLink("Zerg_BuildingMorphStart", -1), PlayerGroupActive(), 200.0, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/0F14107D"));
            gf_TipNOTD(5000, StringExternal("Param/Value/8988293C"));
            UnitBehaviorAddPlayer(gv_erebos2, "Madness", 14, 1);
            Wait(3.0, c_timeReal);
            UnitBehaviorAddPlayer(gv_erebos2, "ErebosRegeneration", 14, 1);
            while (!((UnitHasBehavior(gv_erebos2, "ErebosRegeneration") == false))) {
                Wait(0.5, c_timeGame);
            }
            if ((UnitIsAlive(gv_erebos2) == true)) {
                UnitBehaviorRemove(gv_erebos2, "Madness", 1);
                SoundPlay(SoundLink("Zerg_BuildingMorphEnd", -1), PlayerGroupActive(), 200.0, 0.0);
                UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/99D46EAC"));
                gf_TipNOTD(5000, StringExternal("Param/Value/C9EC1B92"));
            }

        }
        else if (true) {
            lv_blackHolePoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_erebos2), 11.0));
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, lv_blackHolePoint);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/A86AA5D2"));
            SoundPlay(SoundLink("Obelisk_WarpJumpEnd", -1), PlayerGroupActive(), 100.0, 0.0);
            auto7AAFD947_n = 3;
            for (auto7AAFD947_i = 1; auto7AAFD947_i <= auto7AAFD947_n; auto7AAFD947_i += 1) {
                Wait(0.5, c_timeReal);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_blackHolePoint);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Parasite2", 0, 14, lv_blackHolePoint);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            }
            Wait(0.1, c_timeReal);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blackhole", 0, 14, lv_blackHolePoint);
        }
        Wait(libNtve_gf_DifficultyValueFixed(10.0, 5.0, 5.0, 0.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2ErebosAI_Init () {
    gt_Chapter2ErebosAI = TriggerCreate("gt_Chapter2ErebosAI_Func");
    TriggerEnable(gt_Chapter2ErebosAI, false);
    TriggerAddEventUnitDamaged(gt_Chapter2ErebosAI, UnitRefFromVariable("gv_erebos2"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2 - Erebos HP Lifesteal
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2ErebosHPLifesteal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_erebosDamageTaken;

    // Variable Initialization
    lv_erebosDamageTaken = EventUnitDamageAbsorbed();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_erebos2) == true))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ErebosRegeneration") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_marines, EventUnitDamageSourceUnit()) == true)) {
        if (((gv_squadRating >= 1900) || (gv_nightmare == true))) {
            UnitSetPropertyFixed(gv_erebos2, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos2, c_unitPropLife, c_unitPropCurrent) + (lv_erebosDamageTaken * 3.2)));
        }
        else if ((gv_squadRating >= 1750) && (gv_noNewbie == true)) {
            UnitSetPropertyFixed(gv_erebos2, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos2, c_unitPropLife, c_unitPropCurrent) + (lv_erebosDamageTaken * 2.4)));
        }
        else if ((gv_squadRating >= 1600)) {
            UnitSetPropertyFixed(gv_erebos2, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos2, c_unitPropLife, c_unitPropCurrent) + (lv_erebosDamageTaken * 1.8)));
        }
        else if (true) {
            UnitSetPropertyFixed(gv_erebos2, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos2, c_unitPropLife, c_unitPropCurrent) + (lv_erebosDamageTaken * 1.3)));
        }
    }
    else if (true) {
        UnitSetPropertyFixed(gv_erebos2, c_unitPropLife, (UnitGetPropertyFixed(gv_erebos2, c_unitPropLife, c_unitPropCurrent) + (lv_erebosDamageTaken * 1.0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2ErebosHPLifesteal_Init () {
    gt_Chapter2ErebosHPLifesteal = TriggerCreate("gt_Chapter2ErebosHPLifesteal_Func");
    TriggerEnable(gt_Chapter2ErebosHPLifesteal, false);
    TriggerAddEventUnitDamaged(gt_Chapter2ErebosHPLifesteal, UnitRefFromVariable("gv_erebos2"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 2- Erebos Killed
//--------------------------------------------------------------------------------------------------
bool gt_Chapter2ErebosKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_Chapter2ErebosHPLifesteal, false);
    gf_BossAfterAction();
    gf_UnifiedAwards(2, 350.0, libNtve_gf_DifficultyValueInt(25, 25, 50, 0), 0, 0);
    SoundPlay(SoundLink("TZeratul02HybridProtoss00026", -1), PlayerGroupActive(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter2ErebosKilled_Init () {
    gt_Chapter2ErebosKilled = TriggerCreate("gt_Chapter2ErebosKilled_Func");
    TriggerEnable(gt_Chapter2ErebosKilled, false);
    TriggerAddEventUnitDied(gt_Chapter2ErebosKilled, UnitRefFromVariable("gv_erebos2"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Optional - Power Generator Restart
//--------------------------------------------------------------------------------------------------
bool gt_OptionalPowerGeneratorRestart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_localRegionA;
    unit lv_localUnitA;

    // Variable Initialization
    lv_localRegionA = RegionCircle(UnitGetPosition(EventUnit()), 5.0);
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(RegionGetCenter(EventUnitRegion()), PointFromId(14)) > 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("PowerGeneratorPowerUp", -1), PlayerGroupActive(), 100.0, 0.0);
    PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 10.0);
    UnitFlashSelection(EventUnit(), 1.0);
    RegionSetCenter(EventUnitRegion(), PointFromId(14));
    gv_powerGenerators += 1;
    if ((gv_powerGenerators >= 4)) {
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerEnable(gt_Wave8EnterScrapyardDoor, false);
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/32728280"));
        gf_RadioNOTD(PlayerName(UnitGetOwner(lv_localUnitA)), StringExternal("Param/Value/DF20B52C"));
        Wait(5.0, c_timeReal);
        ObjectiveDestroy(gv_primaryObjective);
        gf_PowerGeneratorsComplete();
    }
    else {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/80F676DE") + (IntToText((25 * gv_powerGenerators)) + StringExternal("Param/Value/54B63D99"))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OptionalPowerGeneratorRestart_Init () {
    gt_OptionalPowerGeneratorRestart = TriggerCreate("gt_OptionalPowerGeneratorRestart_Func");
    TriggerEnable(gt_OptionalPowerGeneratorRestart, false);
    TriggerAddEventUnitRegion(gt_OptionalPowerGeneratorRestart, null, RegionFromId(83), true);
    TriggerAddEventUnitRegion(gt_OptionalPowerGeneratorRestart, null, RegionFromId(84), true);
    TriggerAddEventUnitRegion(gt_OptionalPowerGeneratorRestart, null, RegionFromId(85), true);
    TriggerAddEventUnitRegion(gt_OptionalPowerGeneratorRestart, null, RegionFromId(86), true);
    TriggerAddEventUnitRegion(gt_OptionalPowerGeneratorRestart, null, RegionFromId(87), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 8 - Enter Scrapyard Door
//--------------------------------------------------------------------------------------------------
bool gt_Wave8EnterScrapyardDoor_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(197), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((gv_survivalMode == false) && (gv_wave < 10)) {
        ObjectiveDestroy(gv_primaryObjective);
        ObjectiveCreate(StringExternal("Param/Value/A9BBC9F5"), StringExternal("Param/Value/5207DB94"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
        gf_RadioNOTD(PlayerName(UnitGetOwner(EventUnit())), StringExternal("Param/Value/35ABB2BE"));
        Wait(3.0, c_timeReal);
        SoundPlay(SoundLink("Event_Hanson02ZombieHowl", -1), PlayerGroupActive(), 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave8EnterScrapyardDoor_Init () {
    gt_Wave8EnterScrapyardDoor = TriggerCreate("gt_Wave8EnterScrapyardDoor_Func");
    TriggerEnable(gt_Wave8EnterScrapyardDoor, false);
    TriggerAddEventUnitRegion(gt_Wave8EnterScrapyardDoor, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 8 - Baneling Surprise
//--------------------------------------------------------------------------------------------------
bool gt_Wave8BanelingSurprise_Func (bool testConds, bool runActions) {
    int auto5F6515AE_n;
    int auto5F6515AE_i;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((RandomInt(0, 5) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_TipNOTD(5000, StringExternal("Param/Value/9D795DCA"));
    Wait(2.0, c_timeReal);
    auto5F6515AE_n = (gv_spawnFactor * 3);
    for (auto5F6515AE_i = 1; auto5F6515AE_i <= auto5F6515AE_n; auto5F6515AE_i += 1) {
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, 14, RegionRandomPoint(RegionFromId(93)), RegionGetCenter(RegionFromId(92)));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "Baneling", 0, 14, RegionRandomPoint(RegionFromId(94)), RegionGetCenter(RegionFromId(92)));
        }
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        if ((gv_noNewbie == false)) {
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
        }

        Wait(RandomFixed(0.1, 3.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave8BanelingSurprise_Init () {
    gt_Wave8BanelingSurprise = TriggerCreate("gt_Wave8BanelingSurprise_Func");
    TriggerEnable(gt_Wave8BanelingSurprise, false);
    TriggerAddEventUnitRegion(gt_Wave8BanelingSurprise, null, RegionFromId(92), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 9 - Dr Bergmann Encounter
//--------------------------------------------------------------------------------------------------
bool gt_Wave9DrBergmannEncounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nextDomeSpawn;
    int lv_localIntA;

    // Variable Initialization
    lv_nextDomeSpawn = RandomInt(1, 3);
    lv_localIntA = RandomInt(1, 3);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitFlashSelection(EventUnit(), 0.5);
    Wait(2.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "TValerian02BMusicChoice", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_drBergmann, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterDrBergmann, StringExternal("Param/Value/52DA736C"), 3.9, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/ECDA2C2E"));
    Wait(3.5, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/B562184C"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_drBergmann, StringExternal("Param/Value/EED1DF6B"));
    UnitCreate(1, "LaserRifle", 0, 0, RegionRandomPoint(RegionFromId(168)), libNtve_gf_RandomAngle());
    Wait(0.1, c_timeReal);
    UnitCreate(1, "LaserRifle", 0, 0, RegionRandomPoint(RegionFromId(168)), libNtve_gf_RandomAngle());
    gf_TipNOTD(5000, StringExternal("Param/Value/D57FD37C"));
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/A91914B9"));
    Wait(10.0, c_timeReal);
    if ((RandomInt(0, 2) == 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/F622F9C3"));
    }
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("MissionpitchesValerian00044", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/E13A28B5"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/C79D92C1"));
    Wait(10.0, c_timeReal);
    TriggerExecute(gt_Wave10OptionalCivilianRescueInitialization, true, false);
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/7924EE5C"));
    gv_hitPar = 65;
    Wait(10.0, c_timeReal);
    UnitIssueOrder(UnitFromId(829), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerExecute(gv_domeSpawn[lv_nextDomeSpawn], true, false);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/F33DB05F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave9DrBergmannEncounter_Init () {
    gt_Wave9DrBergmannEncounter = TriggerCreate("gt_Wave9DrBergmannEncounter_Func");
    TriggerEnable(gt_Wave9DrBergmannEncounter, false);
    TriggerAddEventUnitRegion(gt_Wave9DrBergmannEncounter, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 10 Optional - Civilian Rescue Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Wave10OptionalCivilianRescueInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/3DB8A1A0"));
    gf_AwardKarmaNOTD(-1);
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(103)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 300.0);
    TriggerEnable(gt_Wave10OptionalCivilianEntersContainment, true);
    ObjectiveCreate(StringExternal("Param/Value/A9E035B3"), StringExternal("Param/Value/296BA2BF"), c_objectiveStateActive, false);
    gv_civRescueObjective = ObjectiveLastCreated();
    Wait(5.0, c_timeReal);
    while ((lv_localIntA < 13)) {
        gv_cityRescueAlarm = gv_cityRescue[RandomInt(1, 9)];
        UnitCreate(1, "ShapeArrowPointer", 0, 0, RegionGetCenter(gv_cityRescueAlarm), 45.0);
        UnitSetTeamColorIndex(UnitLastCreated(), 7);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        gv_rescueArrow = UnitLastCreated();
        if ((RandomInt(0, 1) == 1)) {
            SoundPlay(SoundLink("TRaynor02Civilian400028", -1), PlayerGroupActive(), 100.0, 0.0);
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                SoundPlay(SoundLink("THanson01Civilian800027", -1), PlayerGroupActive(), 100.0, 0.0);
            }
            else {
                if ((RandomInt(0, 1) == 1)) {
                    SoundPlay(SoundLink("THanson03BCivilian300040", -1), PlayerGroupActive(), 100.0, 0.0);
                }
                else {
                    SoundPlay(SoundLink("TTychus03MoebiusMarine00030", -1), PlayerGroupActive(), 100.0, 0.0);
                }
            }
        }
        TriggerEnable(gt_Wave10OptionalCivilianRescueSave, true);
        Wait(45.0, c_timeReal);
        UnitRemove(gv_rescueArrow);
        lv_localIntA += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave10OptionalCivilianRescueInitialization_Init () {
    gt_Wave10OptionalCivilianRescueInitialization = TriggerCreate("gt_Wave10OptionalCivilianRescueInitialization_Func");
    TriggerEnable(gt_Wave10OptionalCivilianRescueInitialization, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 10 Optional - Civilian Rescue Save
//--------------------------------------------------------------------------------------------------
bool gt_Wave10OptionalCivilianRescueSave_Func (bool testConds, bool runActions) {
    int auto4F10CAB0_n;
    int auto4F10CAB0_i;

    // Variable Declarations
    int lv_savingPlayer;
    region lv_civRescueRegion;

    // Variable Initialization
    lv_savingPlayer = EventPlayer();
    lv_civRescueRegion = gv_cityRescueAlarm;

    // Conditions
    if (testConds) {
        if (!((EventUnitRegion() == gv_cityRescueAlarm))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitRemove(gv_rescueArrow);
    auto4F10CAB0_n = 5;
    for (auto4F10CAB0_i = 1; auto4F10CAB0_i <= auto4F10CAB0_n; auto4F10CAB0_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, gv_civPool[RandomInt(0, 1)], 0, lv_savingPlayer, RegionRandomPoint(lv_civRescueRegion), RegionRandomPoint(RegionPlayableMap()));
        UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_apolloCivs);
        UnitBehaviorAdd(UnitLastCreated(), "SpeedBuff", UnitLastCreated(), 1);
        if ((gv_noNewbie == false)) {
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 50.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 50.0);
        }

        Wait(0.1, c_timeGame);
    }
    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("THanson03ACivilianFemale1Brunette00035", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("THanson03BCivilian200015", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    if ((RandomInt(0, 1) == 1) && (gv_noNewbie == false)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C22C6D9F"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave10OptionalCivilianRescueSave_Init () {
    gt_Wave10OptionalCivilianRescueSave = TriggerCreate("gt_Wave10OptionalCivilianRescueSave_Func");
    TriggerEnable(gt_Wave10OptionalCivilianRescueSave, false);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(104), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(105), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(106), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(107), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(108), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(109), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(110), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(111), true);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianRescueSave, null, RegionFromId(112), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 10 Optional - Civilian Enters Containment
//--------------------------------------------------------------------------------------------------
bool gt_Wave10OptionalCivilianEntersContainment_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_apolloCivs, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    gv_rescuedApolloCivs += 1;
    gv_legionOfMeritCivsRescued += 1;
    SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupActive(), 100.0, 0.0);
    if ((gv_rescuedApolloCivs == 60)) {
        gf_AwardPlayerXPNOTD(3);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/F318EF99"));
        gf_AwardRatingNOTD(1);
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    else if ((gv_rescuedApolloCivs == 50)) {
        gf_AwardPlayerXPNOTD(3);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/49C90A50"));
        gf_AwardRatingNOTD(1);
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    else if ((gv_rescuedApolloCivs == 40)) {
        gf_AwardPlayerXPNOTD(3);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/541BADD6"));
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    else if ((gv_rescuedApolloCivs == 30)) {
        gf_AwardPlayerXPNOTD(2);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/93F78E01"));
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    else if ((gv_rescuedApolloCivs == 20)) {
        gf_AwardPlayerXPNOTD(2);
        gf_AwardKarmaNOTD(1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/7616B27D"));
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    else if ((gv_rescuedApolloCivs == 10)) {
        gf_AwardPlayerXPNOTD(2);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/EEF19AF0"));
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave10OptionalCivilianEntersContainment_Init () {
    gt_Wave10OptionalCivilianEntersContainment = TriggerCreate("gt_Wave10OptionalCivilianEntersContainment_Func");
    TriggerEnable(gt_Wave10OptionalCivilianEntersContainment, false);
    TriggerAddEventUnitRegion(gt_Wave10OptionalCivilianEntersContainment, null, RegionFromId(103), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W10 - Dome A
//--------------------------------------------------------------------------------------------------
bool gt_W10DomeA_Func (bool testConds, bool runActions) {
    int autoD3603E86_n;
    int autoD3603E86_i;
    int auto10811165_n;
    int auto10811165_i;

    // Variable Declarations
    int lv_nextDomeSpawn;

    // Variable Initialization
    lv_nextDomeSpawn = RandomInt(1, 3);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 10;
    ObjectiveCreate(StringExternal("Param/Value/56E0E208"), StringExternal("Param/Value/395C9A4C"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_drBergmann, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterDrBergmann, StringExternal("Param/Value/F821802E"), 3.9, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupActive(), 100.0, 0.0);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(79)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 10.0);
    gf_TipNOTD(2500, StringExternal("Param/Value/55F8FC7E"));
    Wait(10.0, c_timeReal);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(79)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 115.0);
    autoD3603E86_n = 33;
    for (autoD3603E86_i = 1; autoD3603E86_i <= autoD3603E86_n; autoD3603E86_i += 1) {
        Wait(1.8, c_timeReal);
        auto10811165_n = gv_spawnFactor;
        for (auto10811165_i = 1; auto10811165_i <= auto10811165_n; auto10811165_i += 1) {
            if ((gv_noNewbie == true) && (((gv_squadRating >= 1800) && (RandomInt(0, 7) == 1)) || ((gv_squadRating >= 1600) && (RandomInt(0, 10) == 1)) || ((RandomInt(0, 12) == 1)))) {
                libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, RegionRandomPoint(RegionFromId(79)), RegionGetCenter(RegionFromId(1)));
            }
            else {
                if ((RandomInt(0, 7) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran", 0, 14, RegionRandomPoint(RegionFromId(79)), RegionGetCenter(RegionFromId(1)));
                }
                else if ((RandomInt(0, 6) == 1) && (gv_squadRating > 1600)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Hulk", 0, 14, RegionRandomPoint(RegionFromId(79)), RegionGetCenter(RegionFromId(1)));
                }
                else if (true) {
                    libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel2", 0, 14, RegionRandomPoint(RegionFromId(79)), RegionGetCenter(RegionFromId(1)));
                }
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            UnitGroupLoopBegin(UnitLastCreatedGroup());
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "AdvancedMutation", 14, 1);
            }
            UnitGroupLoopEnd();
            Wait(0.1, c_timeGame);
        }
    }
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/03A117C6"));
    Wait(38.0, c_timeReal);
    SoundPlay(SoundLink("THanson02Raynor00009", -1), PlayerGroupAll(), 90.0, 0.0);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_AwardPlayerXPNOTD(2);
    if ((TriggerGetExecCount(gv_domeSpawn[1]) == 1) && (TriggerGetExecCount(gv_domeSpawn[2]) == 1) && (TriggerGetExecCount(gv_domeSpawn[3]) == 1)) {
        TriggerExecute(gt_W13DomeD, true, false);
        return true;
    }
    while ((TriggerGetExecCount(gv_domeSpawn[lv_nextDomeSpawn]) != 0)) {
        lv_nextDomeSpawn = RandomInt(1, 3);
    }
    TriggerExecute(gv_domeSpawn[lv_nextDomeSpawn], true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W10DomeA_Init () {
    gt_W10DomeA = TriggerCreate("gt_W10DomeA_Func");
    TriggerEnable(gt_W10DomeA, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W11 - Dome B
//--------------------------------------------------------------------------------------------------
bool gt_W11DomeB_Func (bool testConds, bool runActions) {
    int auto05AB58AE_n;
    int auto05AB58AE_i;
    int autoB0C57CCF_n;
    int autoB0C57CCF_i;
    int auto4F72F1FC_n;
    int auto4F72F1FC_i;
    int auto89FDDF18_n;
    int auto89FDDF18_i;
    fixed auto2D31A5F3_at;

    // Variable Declarations
    int lv_nextDomeSpawn;
    point lv_attackWaveWaypoint;
    unitgroup lv_airWave;

    // Variable Initialization
    lv_nextDomeSpawn = RandomInt(1, 3);
    lv_airWave = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 11;
    ObjectiveCreate(StringExternal("Param/Value/95E58F97"), StringExternal("Param/Value/72189A49"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_drBergmann, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterDrBergmann, StringExternal("Param/Value/1A68C4EF"), 3.9, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_TipNOTD(2500, StringExternal("Param/Value/5B1491B3"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupActive(), 100.0, 0.0);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(78)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 10.0);
    Wait(5.0, c_timeReal);
    if ((RandomInt(0, 2) == 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/F14CDB28"));
    }
    Wait(5.0, c_timeReal);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(78)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 100.0);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    AISetDifficulty(14, c_diffWaveAvoidDanger, false);
    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    auto05AB58AE_n = 4;
    for (auto05AB58AE_i = 1; auto05AB58AE_i <= auto05AB58AE_n; auto05AB58AE_i += 1) {
        autoB0C57CCF_n = gv_spawnFactor;
        for (autoB0C57CCF_i = 1; autoB0C57CCF_i <= autoB0C57CCF_n; autoB0C57CCF_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(78)), RegionGetCenter(RegionFromId(1)));
            AIAttackWaveUseUnit(14, UnitLastCreated());
            if ((gv_nightmare == true)) {
                UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
            }

            Wait(0.0, c_timeGame);
        }
        lv_attackWaveWaypoint = PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_marines), 35.0, libNtve_gf_RandomAngle());
        while ((RegionContainsPoint(RegionEntireMap(), lv_attackWaveWaypoint) == false)) {
            lv_attackWaveWaypoint = PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_marines), 35.0, libNtve_gf_RandomAngle());
        }
        AIAttackWaveAddWaypoint(14, lv_attackWaveWaypoint, false);
        AIAttackWaveSend(14, 2, true);
    }
    SoundPlay(SoundLink("TTychus02Adjutant00029", -1), PlayerGroupActive(), 100.0, 0.0);
    auto4F72F1FC_n = 28;
    for (auto4F72F1FC_i = 1; auto4F72F1FC_i <= auto4F72F1FC_n; auto4F72F1FC_i += 1) {
        auto89FDDF18_n = gv_spawnFactor;
        for (auto89FDDF18_i = 1; auto89FDDF18_i <= auto89FDDF18_n; auto89FDDF18_i += 1) {
            if ((gv_noNewbie == true) && (RandomInt(0, 18) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Wraith2", 0, 14, RegionRandomPoint(RegionFromId(78)), RegionGetCenter(RegionFromId(1)));
            }
            else if ((RandomInt(0, 20) == 1) && (gv_alivePlayers > 1) && ((gv_noNewbie == true) || (RandomInt(0, 10) == 1))) {
                libNtve_gf_UnitCreateFacingPoint(1, "Strangler", 0, 14, RegionRandomPoint(RegionFromId(78)), RegionGetCenter(RegionFromId(1)));
            }
            else if (true) {
                libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(78)), RegionGetCenter(RegionFromId(1)));
            }
            AIAttackWaveUseUnit(14, UnitLastCreated());
            UnitGroupAdd(lv_airWave, UnitLastCreated());
            Wait(0.1, c_timeGame);
        }
        lv_attackWaveWaypoint = PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_marines), 35.0, libNtve_gf_RandomAngle());
        while ((RegionContainsPoint(RegionEntireMap(), lv_attackWaveWaypoint) == false)) {
            lv_attackWaveWaypoint = PointWithOffsetPolar(UnitGroupCenterOfGroup(gv_marines), 35.0, libNtve_gf_RandomAngle());
        }
        AIAttackWaveAddWaypoint(14, lv_attackWaveWaypoint, false);
        AIAttackWaveSend(14, 2, true);
    }
    auto2D31A5F3_at = 0;
    while (!((UnitGroupCount(lv_airWave, c_unitCountAlive) == 0)) && auto2D31A5F3_at <= 45.0) {
        Wait(1.0, c_timeReal);
        auto2D31A5F3_at = auto2D31A5F3_at + 1.0;
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    AISetDifficulty(14, c_diffWaveAvoidDanger, true);
    gf_AwardPlayerXPNOTD(2);
    TriggerExecute(gt_AutoSave, true, false);
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    if ((TriggerGetExecCount(gv_domeSpawn[1]) == 1) && (TriggerGetExecCount(gv_domeSpawn[2]) == 1) && (TriggerGetExecCount(gv_domeSpawn[3]) == 1)) {
        TriggerExecute(gt_W13DomeD, true, false);
        return true;
    }
    while ((TriggerGetExecCount(gv_domeSpawn[lv_nextDomeSpawn]) != 0)) {
        lv_nextDomeSpawn = RandomInt(1, 3);
    }
    TriggerExecute(gv_domeSpawn[lv_nextDomeSpawn], true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W11DomeB_Init () {
    gt_W11DomeB = TriggerCreate("gt_W11DomeB_Func");
    TriggerEnable(gt_W11DomeB, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W12 - Dome C
//--------------------------------------------------------------------------------------------------
bool gt_W12DomeC_Func (bool testConds, bool runActions) {
    int autoD16789D3_n;
    int autoD16789D3_i;
    int auto813FACF3_n;
    int auto813FACF3_i;

    // Variable Declarations
    int lv_nextDomeSpawn;

    // Variable Initialization
    lv_nextDomeSpawn = RandomInt(1, 3);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AutoSave, true, false);
    gv_wave = 12;
    ObjectiveCreate(StringExternal("Param/Value/6F85F77F"), StringExternal("Param/Value/D8269A91"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_drBergmann, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterDrBergmann, StringExternal("Param/Value/E4B97BCD"), 3.9, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_TipNOTD(2500, StringExternal("Param/Value/138747BD"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupActive(), 100.0, 0.0);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(80)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 10.0);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/241B89C3"));
    Wait(10.0, c_timeReal);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(80)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 80.0);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    autoD16789D3_n = 15;
    for (autoD16789D3_i = 1; autoD16789D3_i <= autoD16789D3_n; autoD16789D3_i += 1) {
        Wait(2.5, c_timeReal);
        auto813FACF3_n = gv_spawnFactor;
        for (auto813FACF3_i = 1; auto813FACF3_i <= auto813FACF3_n; auto813FACF3_i += 1) {
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Stalker2", 0, 14, RegionRandomPoint(RegionFromId(80)), RegionGetCenter(RegionFromId(1)));
                if ((gv_noNewbie == false)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
                }

            }
            else {
                if ((RandomInt(0, 1) == 1)) {
                    if ((RandomInt(0, libNtve_gf_DifficultyValueInt(9, 6, 3, 3)) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Beastling", 0, 14, RegionRandomPoint(RegionFromId(80)), RegionGetCenter(RegionFromId(1)));
                    }

                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, 14, RegionRandomPoint(RegionFromId(80)), RegionGetCenter(RegionFromId(1)));
                }
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
        }
    }
    Wait(34.0, c_timeReal);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    gf_AwardPlayerXPNOTD(2);
    ObjectiveDestroy(gv_primaryObjective);
    if ((TriggerGetExecCount(gv_domeSpawn[1]) == 1) && (TriggerGetExecCount(gv_domeSpawn[2]) == 1) && (TriggerGetExecCount(gv_domeSpawn[3]) == 1)) {
        TriggerExecute(gt_W13DomeD, true, false);
        return true;
    }
    while ((TriggerGetExecCount(gv_domeSpawn[lv_nextDomeSpawn]) != 0)) {
        lv_nextDomeSpawn = RandomInt(1, 3);
    }
    TriggerExecute(gv_domeSpawn[lv_nextDomeSpawn], true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W12DomeC_Init () {
    gt_W12DomeC = TriggerCreate("gt_W12DomeC_Func");
    TriggerEnable(gt_W12DomeC, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W13 - Dome D
//--------------------------------------------------------------------------------------------------
bool gt_W13DomeD_Func (bool testConds, bool runActions) {
    int auto489048B0_n;
    int auto489048B0_i;
    int auto05328C7A_n;
    int auto05328C7A_i;
    int autoC5B243FB_n;
    int autoC5B243FB_i;

    // Variable Declarations
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 13;
    gv_hitPar = 75;
    ObjectiveCreate(StringExternal("Param/Value/E6AD569D"), StringExternal("Param/Value/8CEE61A4"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_drBergmann, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterDrBergmann, StringExternal("Param/Value/CD1C7D4C"), 5.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/76C3D41C"));
    Wait(5.0, c_timeReal);
    libNtve_gf_AttachModelToUnit(gv_bioDome[3], "InfestationBiodome3", "Ref_Center");
    UnitSetOwner(gv_bioDome[3], 14, true);
    SoundPlay(SoundLink("UI_TerranReminderPing", -1), PlayerGroupActive(), 100.0, 0.0);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(81)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 10.0);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/2E973C55"));
    Wait(10.0, c_timeReal);
    PingCreate(PlayerGroupActive(), "PingWarning", RegionGetCenter(RegionFromId(81)), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 120.0);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    auto489048B0_n = 7;
    for (auto489048B0_i = 1; auto489048B0_i <= auto489048B0_n; auto489048B0_i += 1) {
        Wait(5.0, c_timeReal);
        auto05328C7A_n = gv_spawnFactor;
        for (auto05328C7A_i = 1; auto05328C7A_i <= auto05328C7A_n; auto05328C7A_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel2", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.01, c_timeGame);
            if ((RandomInt(0, 8) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
            }
            else {
                if ((RandomInt(0, 5) == 1) && (gv_noNewbie == true)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Slasher", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(1, "Stalker2", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
                    if ((gv_noNewbie == false)) {
                        UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
                    }

                }
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.01, c_timeGame);
            libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
        }
    }
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/CB4C0097"));
    gf_AwardPlayerXPNOTD(2);
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/0904F780"), StringExternal("Param/Value/843B3A52"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_Wave13BioDomeDDestroyed, true);
    TriggerEnable(gt_Wave13BioDomeDMobs, true);
    if ((gv_nightmare == true)) {
        UnitBehaviorAdd(gv_bioDome[3], "AdvancedMutation", gv_bioDome[3], 1);
    }

    libNtve_gf_MakeUnitInvulnerable(gv_bioDome[4], false);
    UnitSetOwner(gv_bioDome[4], 14, false);
    UnitSetState(gv_bioDome[4], c_unitStateTargetable, true);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/6869707B"));
    if (((gv_nightmare == true) || ((gv_squadRating >= 1600) && (gv_noNewbie == true)))) {
        autoC5B243FB_n = gv_spawnFactor;
        for (autoC5B243FB_i = 1; autoC5B243FB_i <= autoC5B243FB_n; autoC5B243FB_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
            Wait(0.1, c_timeGame);
        }
    }

    Wait(20.0, c_timeReal);
    if ((UnitIsAlive(gv_bioDome[4]) == true)) {
        gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/9279BE21"));
    }

    TriggerExecute(gt_AutoSave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W13DomeD_Init () {
    gt_W13DomeD = TriggerCreate("gt_W13DomeD_Func");
    TriggerEnable(gt_W13DomeD, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 13 - Bio-Dome D Mobs
//--------------------------------------------------------------------------------------------------
bool gt_Wave13BioDomeDMobs_Func (bool testConds, bool runActions) {
    int auto3CB5672D_n;
    int auto3CB5672D_i;

    // Conditions
    if (testConds) {
        if (!((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 150))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto3CB5672D_n = gv_spawnFactor;
    for (auto3CB5672D_i = 1; auto3CB5672D_i <= auto3CB5672D_n; auto3CB5672D_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel2", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.01, c_timeGame);
        if ((RandomInt(0, 8) == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
            if ((gv_noNewbie == false)) {
                libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
            }

        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "Stalker2", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
            if ((gv_noNewbie == false)) {
                UnitBehaviorAdd(UnitLastCreated(), "Weakness", UnitLastCreated(), 1);
            }

        }
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.01, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionGetCenter(RegionFromId(1)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.01, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave13BioDomeDMobs_Init () {
    gt_Wave13BioDomeDMobs = TriggerCreate("gt_Wave13BioDomeDMobs_Func");
    TriggerEnable(gt_Wave13BioDomeDMobs, false);
    TriggerAddEventTimePeriodic(gt_Wave13BioDomeDMobs, 15.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 13 - Bio-Dome D Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_Wave13BioDomeDDestroyed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ApolloBioDome"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Wave13BioDomeDDestroyed, false);
    TriggerEnable(gt_Wave13BioDomeDMobs, false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardPlayerXPNOTD(2);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/5907AE6D"));
    Wait(3.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/46979E56") + IntToText(gv_legionOfMeritCivsRescued)) + StringExternal("Param/Value/4D6E3714")));
    ObjectiveDestroy(gv_primaryObjective);
    TriggerExecute(gt_Wave14Betrayal, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave13BioDomeDDestroyed_Init () {
    gt_Wave13BioDomeDDestroyed = TriggerCreate("gt_Wave13BioDomeDDestroyed_Func");
    TriggerEnable(gt_Wave13BioDomeDDestroyed, false);
    TriggerAddEventUnitDied(gt_Wave13BioDomeDDestroyed, UnitRefFromVariable("gv_bioDome[4]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 14 - Betrayal
//--------------------------------------------------------------------------------------------------
bool gt_Wave14Betrayal_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_Boss3AI, false);
    TriggerEnable(gt_Boss3Killed, false);
    UnitRemove(gv_menoestes);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/3C6EFD98"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0D7CAB5F"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/076B1E59"));
    UnitBehaviorAdd(gv_drBergmann, "Run", gv_drBergmann, 1);
    UnitSetPropertyFixed(gv_drBergmann, c_unitPropMovementSpeed, 2.5);
    UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(gv_drBergmann), OrderTargetingPoint(AbilityCommand("move", 0), RegionGetBoundsMax(RegionFromId(103))), c_orderQueueReplace);
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("Dialogue_TransmissionStart", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/495E5364"));
    gf_TipNOTD(5000, StringExternal("Param/Value/A524C94A"));
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/8C66BAE3"));
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/6ADF0DB6"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TScene12Horner018", -1), PlayerGroupActive(), 100.0, 0.0);
    libNtve_gf_UnitCreateFacingPoint(1, "Eos", 0, 14, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), RegionGetCenter(RegionFromId(1)));
    gv_finalBoss = UnitLastCreated();
    if ((gv_noNewbie == false)) {
        libNtve_gf_AttachModelToUnit(gv_finalBoss, "BriefingUnitSelectLargeRed", "Ref_Center");
        UnitSetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, c_unitPropNormal) * 0.8));
    }

    if ((gv_alivePlayers <= 4)) {
        UnitSetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, c_unitPropNormal) * 0.65));
    }
    else if ((gv_alivePlayers == 5)) {
        UnitSetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, c_unitPropNormal) * 0.75));
    }
    else if ((gv_alivePlayers == 6)) {
        UnitSetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, c_unitPropNormal) * 0.8));
    }
    else if ((gv_alivePlayers == 7)) {
        UnitSetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifeMax, c_unitPropNormal) * 0.95));
    }
    UnitGroupAdd(gv_zombieWave, gv_finalBoss);
    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 0.3);
    libNtve_gf_MakeUnitInvulnerable(gv_finalBoss, true);
    if ((gv_noNewbie == false)) {
        PingCreate(PlayerGroupActive(), "PingBoss", UnitGetPosition(gv_finalBoss), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 600.0);
        PingSetUnit(PingLastCreated(), gv_finalBoss);
        gv_queenBossPing = PingLastCreated();
    }

    SoundPlay(SoundLink("THanson03BAdjutant00018", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/12E1BEF9"));
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/8EA6D3E7"));
    UnitRemove(gv_drBergmann);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/3058CD37"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/95F385B4"), StringExternal("Param/Value/D51CF3B1"));
    Wait(5.0, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/68CD3E1E"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/5519FB0D"));
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/B30D4982"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/9734B78C"));
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_W14BlackOps, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave14Betrayal_Init () {
    gt_Wave14Betrayal = TriggerCreate("gt_Wave14Betrayal_Func");
    TriggerEnable(gt_Wave14Betrayal, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: W14 - Black Ops
//--------------------------------------------------------------------------------------------------
bool gt_W14BlackOps_Func (bool testConds, bool runActions) {
    int auto11331AC0_n;
    int auto11331AC0_i;
    int autoECD6A529_n;
    int autoECD6A529_i;
    int auto46818FB6_n;
    int auto46818FB6_i;
    int autoDA4DA76F_n;
    int autoDA4DA76F_i;

    // Variable Declarations
    bool lv_sawSomethingChat;
    int lv_cycle;
    unit lv_blackOpsLeader;

    // Variable Initialization
    lv_cycle = 1;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(gt_AutoSave, true, false);
    ObjectiveDestroy(gv_civRescueObjective);
    gv_hitPar = 80;
    gv_wave = 14;
    libNtve_gf_SetAlliance(13, 14, libNtve_ge_AllianceSetting_Ally);
    libNtve_gf_UnitCreateFacingPoint(1, "BlackOps", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), RegionGetCenter(RegionFromId(1)));
    UnitSetTeamColorIndex(UnitLastCreated(), 14);
    UnitGroupAdd(gv_blackOps, UnitLastCreated());
    lv_blackOpsLeader = UnitLastCreated();
    Wait(0.1, c_timeReal);
    if ((gv_noNewbie == true)) {
        libNtve_gf_UnitCreateFacingPoint(1, "T65Sentinel", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), RegionGetCenter(RegionFromId(1)));
        UnitSetTeamColorIndex(UnitLastCreated(), 1);
        gv_blackOpsSentinel = UnitLastCreated();
    }

    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lv_blackOpsLeader, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterBlackOpsOperator, StringExternal("Param/Value/C5BD2B36"), 5.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/2888B3DA"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(gv_characterBlackOpsOperator, StringExternal("Param/Value/29FDB2A4"));
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/AA9791B6"), StringExternal("Param/Value/944A02AA"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_BlackOpsAIReactive, true);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/170B2CA0"));
    auto11331AC0_n = 3;
    for (auto11331AC0_i = 1; auto11331AC0_i <= auto11331AC0_n; auto11331AC0_i += 1) {
        Wait(5.0, c_timeReal);
        if ((lv_cycle == 2) && (lv_sawSomethingChat == false)) {
            lv_sawSomethingChat = true;
            SoundPlay(SoundLink("TTosh03BMarine500012", -1), PlayerGroupAll(), 100.0, 0.0);
        }

        autoECD6A529_n = gv_spawnFactor;
        for (autoECD6A529_i = 1; autoECD6A529_i <= autoECD6A529_n; autoECD6A529_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "BlackOps", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), RegionGetCenter(RegionFromId(1)));
            if ((gv_nightmare == true)) {
                UnitBehaviorAddPlayer(UnitLastCreated(), "SpeedBuff35", 13, 1);
            }

            UnitGroupAdd(gv_blackOps, UnitLastCreated());
            UnitSetTeamColorIndex(UnitLastCreated(), 14);
            if ((RandomInt(0, 1) == 1)) {
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
            }

            Wait(0.1, c_timeGame);
        }
        lv_cycle += 1;
    }
    gf_BlackOpsAIInitiative();
    if ((gv_noNewbie == true) && (gv_squadRating >= 1600)) {
        auto46818FB6_n = 2;
        for (auto46818FB6_i = 1; auto46818FB6_i <= auto46818FB6_n; auto46818FB6_i += 1) {
            Wait(0.1, c_timeReal);
            autoDA4DA76F_n = gv_spawnFactor;
            for (autoDA4DA76F_i = 1; autoDA4DA76F_i <= autoDA4DA76F_n; autoDA4DA76F_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, "Drone3", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), RegionGetCenter(RegionFromId(1)));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_blackOpsDroneTeam);
                UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(UnitLastCreated()), OrderTargetingPoint(AbilityCommand("move", 1), UnitGetPosition(UnitGroupRandomUnit(gv_blackOps, c_unitCountAlive))), c_orderQueueReplace);
                Wait(0.1, c_timeGame);
            }
        }
    }

    Wait(15.0, c_timeReal);
    gf_RadioNOTD(gv_characterBlackOpsOperator, StringExternal("Param/Value/CA7A62A2"));
    gf_TipNOTD(5000, StringExternal("Param/Value/DB690FF7"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/477A5ACF"));
    Wait(8.0, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/F99A2CE8"));
    Wait(10.0, c_timeReal);
    SoundPlay(SoundLink("CharAmbientMarine100001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(30.0, c_timeReal);
    gf_AwardPlayerXPNOTD(libNtve_gf_DifficultyValueInt(3, 4, 4, 0));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DEFE4055"));
    Wait(35.0, c_timeReal);
    TriggerExecute(gt_NightmareBonus, true, false);
    if ((gv_rescuedApolloCivs >= 10)) {
        ObjectiveSetState(gv_civRescueObjective, c_objectiveStateCompleted);
    }
    else {
        ObjectiveSetState(gv_civRescueObjective, c_objectiveStateFailed);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/048EF2B2"));
    Wait(20.0, c_timeReal);
    TriggerExecute(gt_Chapter3Initialize, true, false);
    ObjectiveDestroy(gv_primaryObjective);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_W14BlackOps_Init () {
    gt_W14BlackOps = TriggerCreate("gt_W14BlackOps_Func");
    TriggerEnable(gt_W14BlackOps, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Ops AI - Gunship Support
//--------------------------------------------------------------------------------------------------
bool gt_BlackOpsAIGunshipSupport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_localPointA;
    fixed lv_coordinatesX;
    fixed lv_coordinatesY;
    unit[6] lv_gunshipBeacon;

    // Variable Initialization
    lv_localPointA = RegionRandomPoint(gv_gunshipAttackRegion);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gunshipSupport = true;
    lv_coordinatesX = PointGetX(lv_localPointA);
    lv_coordinatesY = PointGetY(lv_localPointA);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, (StringExternal("Param/Value/F516C1B9") + (FixedToText(lv_coordinatesX, 1) + (StringExternal("Param/Value/C3CF6659") + (FixedToText(lv_coordinatesY, 1) + StringExternal("Param/Value/B66F724C"))))));
    IntLoopBegin(1, libNtve_gf_DifficultyValueInt(1, 3, 5, 0));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        Wait(1.0, c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(1, "Gunship", 0, 14, RegionRandomPoint(gv_gunshipAttackRegion), RegionGetCenter(RegionFromId(1)));
        lv_gunshipBeacon[IntLoopCurrent()] = UnitLastCreated();
        if ((gv_noNewbie == false)) {
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
        }

    }
    IntLoopEnd();
    Wait(5.0, c_timeReal);
    IntLoopBegin(1, libNtve_gf_DifficultyValueInt(1, 3, 5, 0));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitIssueOrder(lv_gunshipBeacon[IntLoopCurrent()], OrderTargetingPoint(AbilityCommand("OdinBarrage", 0), UnitGetPosition(lv_gunshipBeacon[IntLoopCurrent()])), c_orderQueueReplace);
    }
    IntLoopEnd();
    Wait(5.0, c_timeReal);
    IntLoopBegin(1, libNtve_gf_DifficultyValueInt(1, 3, 5, 0));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitRemove(lv_gunshipBeacon[IntLoopCurrent()]);
    }
    IntLoopEnd();
    gv_gunshipSupport = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlackOpsAIGunshipSupport_Init () {
    gt_BlackOpsAIGunshipSupport = TriggerCreate("gt_BlackOpsAIGunshipSupport_Func");
    TriggerEnable(gt_BlackOpsAIGunshipSupport, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Black Ops AI - Reactive
//--------------------------------------------------------------------------------------------------
bool gt_BlackOpsAIReactive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bODefender;
    unit lv_bOAttacker;
    unit lv_alertedDrone;
    point lv_localPointA;
    int lv_defenderOwner;

    // Variable Initialization
    lv_bODefender = EventUnit();
    lv_bOAttacker = EventUnitTarget();
    lv_defenderOwner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_blackOps, lv_bODefender) == true) || (UnitGroupHasUnit(gv_blackOpsDroneTeam, lv_bODefender) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_blackOpsDroneTeam, lv_bODefender) == true) && (RandomInt(0, 4) == 1)) {
        UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(lv_bODefender), OrderTargetingPoint(AbilityCommand("UltrasonicPulse", 0), UnitGetPosition(lv_bOAttacker)), c_orderQueueReplace);
    }
    else {

    }
    if ((RandomInt(0, 4) == 1) && (libNtve_gf_UnitIsVisibleToPlayer(lv_bOAttacker, lv_defenderOwner) == true)) {
        UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(lv_bODefender), OrderTargetingUnit(AbilityCommand("ZeratulStun", 0), lv_bOAttacker), c_orderQueueReplace);
    }

    if ((RandomInt(0, 2) == 1)) {
        UnitIssueOrder(lv_bODefender, Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
    }

    if ((UnitGetPropertyFixed(lv_bODefender, c_unitPropLife, c_unitPropCurrent) <= 50.0)) {
        if ((RandomInt(0, 5) == 1) && (gv_gunshipSupport == false) && (lv_defenderOwner == 13)) {
            gv_gunshipAttackRegion = RegionCircle(UnitGetPosition(lv_bOAttacker), 5.5);
            TriggerExecute(gt_BlackOpsAIGunshipSupport, true, false);
        }

    }

    if ((RandomInt(0, 4) == 1) && (DistanceBetweenPoints(UnitGetPosition(lv_bODefender), UnitGetPosition(lv_bOAttacker)) <= 4.0) && (UnitGroupHasUnit(gv_blackOps, lv_bODefender) == true) && (lv_defenderOwner == 13)) {
        lv_localPointA = libNtve_gf_RandomPointBetweenPoints(UnitGetPosition(lv_bOAttacker), UnitGetPosition(lv_bODefender));
        libNtve_gf_UnitCreateFacingPoint(1, "SatchelLevel1", 0, lv_defenderOwner, lv_localPointA, RegionGetCenter(RegionFromId(1)));
        UnitBehaviorAdd(UnitLastCreated(), "SatchelLevel2", lv_bODefender, 1);
        UnitSetTeamColorIndex(EventUnitCreatedUnit(), 5);
    }
    else {
        if ((RandomInt(0, 3) == 1) && ((UnitHasBehavior(lv_bOAttacker, "SpectreCloaking") == true) || (UnitHasBehavior(lv_bOAttacker, "SpectreCloaking2") == true)) && (UnitGroupHasUnit(gv_blackOps, lv_bODefender) == true)) {
            lv_alertedDrone = UnitGroupRandomUnit(gv_blackOpsDroneTeam, c_unitCountAlive);
            UnitGroupRemove(gv_blackOpsDroneTeam, lv_alertedDrone);
            UnitGroupIssueOrder(libNtve_gf_ConvertUnitToUnitGroup(lv_alertedDrone), OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_bOAttacker)), c_orderQueueReplace);
            Wait(5.0, c_timeReal);
            UnitGroupAdd(gv_blackOpsDroneTeam, lv_alertedDrone);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BlackOpsAIReactive_Init () {
    gt_BlackOpsAIReactive = TriggerCreate("gt_BlackOpsAIReactive_Func");
    TriggerEnable(gt_BlackOpsAIReactive, false);
    TriggerAddEventUnitAttacked(gt_BlackOpsAIReactive, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 3 - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_Chapter3Initialize_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitInvulnerable(gv_finalBoss, false);
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(104), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(105), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(106), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(107), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(108), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(109), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(110), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(111), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(112), "DecalProtoss");
    gf_ECChapter3AirDrop();
    TriggerEnable(gt_Chapter3QueenEngaged, true);
    TriggerEnable(gt_QueenChaseSequence, true);
    TriggerEnable(gt_QueenKilled, true);
    TriggerExecute(gt_ChapterEndMedicRatingBonus, true, false);
    gf_AutoSaveLong();
    UnitGroupLoopBegin(UnitGroup("BlackOps", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitAbilityEnable(UnitGroupLoopCurrent(), "ZeratulStun", false);
    }
    UnitGroupLoopEnd();
    if ((gv_squadRating >= 1800) && (gv_noNewbie == true)) {
        gv_queenMoveSpeed = 1.7;
    }
    else if ((gv_squadRating >= 1700) && (gv_noNewbie == true)) {
        gv_queenMoveSpeed = 1.5;
    }
    else if ((gv_squadRating >= 1600) && (gv_noNewbie == true)) {
        gv_queenMoveSpeed = 1.3;
    }
    else if (true) {
        gv_queenMoveSpeed = 1.0;
    }
    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, gv_queenMoveSpeed);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/FBAB4279"), StringExternal("Param/Value/B5F23A49"), 12.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/78EE4707"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TRaynor03Marine500005", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/82F1182C"));
    Wait(2.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0D3A884E"));
    TriggerExecute(gt_Wave15RandomMobs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter3Initialize_Init () {
    gt_Chapter3Initialize = TriggerCreate("gt_Chapter3Initialize_Func");
    TriggerEnable(gt_Chapter3Initialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC OPTIONAL - Truck Escort Begins
//--------------------------------------------------------------------------------------------------
bool gt_ECOPTIONALTruckEscortBegins_Func (bool testConds, bool runActions) {
    int autoBDFD7AFD_n;
    int autoBDFD7AFD_i;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_madMaxTruck) == true))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ECOPTIONALTruckDestroyed, true);
    TriggerEnable(gt_ECOPTIONALTruckEvacSuccessful, true);
    libNtve_gf_RescueUnit(gv_madMaxTruck, 9, false);
    UnitWeaponAdd(gv_madMaxTruck, "ColonistTransport", "ColonistTransport");
    gf_RadioNOTD(PlayerName(UnitGetOwner(EventUnit())), StringExternal("Param/Value/FE378CE9"));
    Wait(3.0, c_timeReal);
    UnitIssueOrder(gv_madMaxTruck, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(159))), c_orderQueueReplace);
    while ((UnitIsAlive(gv_madMaxTruck) == true) && (gv_truckEscortSuccessful == false)) {
        Wait(RandomFixed(5.0, 18.0), c_timeReal);
        UnitIssueOrder(gv_madMaxTruck, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(159))), c_orderQueueAddToEnd);
        autoBDFD7AFD_n = gv_spawnFactor;
        for (autoBDFD7AFD_i = 1; autoBDFD7AFD_i <= autoBDFD7AFD_n; autoBDFD7AFD_i += 1) {
            Wait(0.1, c_timeReal);
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Immortal22", 0, 14, RegionGetCenter(RegionCircle(UnitGetPosition(gv_madMaxTruck), 39.0)), UnitGetPosition(gv_madMaxTruck));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowImmortal", 0)), c_orderQueueReplace);
            }
            else if ((RandomInt(0, 3) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionGetCenter(RegionCircle(UnitGetPosition(gv_madMaxTruck), 40.0)), UnitGetPosition(gv_madMaxTruck));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            }
            else if ((RandomInt(0, 2) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Wraith2", 0, 14, RegionGetCenter(RegionCircle(UnitGetPosition(gv_madMaxTruck), 45.0)), UnitGetPosition(gv_madMaxTruck));
            }
            else if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(2, "InfestorTerran2", 0, 14, RegionGetCenter(RegionCircle(UnitGetPosition(gv_madMaxTruck), 39.0)), UnitGetPosition(gv_madMaxTruck));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowInfestedMarine", 0)), c_orderQueueReplace);
            }
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_madMaxTruck)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_truckAttackers);
        }
        UnitGroupLoopBegin(gv_truckAttackers);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(gv_madMaxTruck)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECOPTIONALTruckEscortBegins_Init () {
    gt_ECOPTIONALTruckEscortBegins = TriggerCreate("gt_ECOPTIONALTruckEscortBegins_Func");
    TriggerEnable(gt_ECOPTIONALTruckEscortBegins, false);
    TriggerAddEventUnitRegion(gt_ECOPTIONALTruckEscortBegins, null, RegionFromId(42), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC OPTIONAL - Truck Destroyed
//--------------------------------------------------------------------------------------------------
bool gt_ECOPTIONALTruckDestroyed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ECOPTIONALTruckEvacSuccessful, false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/B9DF17AA"));
    SoundPlay(SoundLink("UI_TerranMissionFailed", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECOPTIONALTruckDestroyed_Init () {
    gt_ECOPTIONALTruckDestroyed = TriggerCreate("gt_ECOPTIONALTruckDestroyed_Func");
    TriggerEnable(gt_ECOPTIONALTruckDestroyed, false);
    TriggerAddEventUnitDied(gt_ECOPTIONALTruckDestroyed, UnitRefFromVariable("gv_madMaxTruck"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: EC OPTIONAL - Truck Evac Successful
//--------------------------------------------------------------------------------------------------
bool gt_ECOPTIONALTruckEvacSuccessful_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/82B6C1FA"));
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("ColonyTransport_Load", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeReal);
    UnitIssueOrder(gv_madMaxTruck, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(133))), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    if ((UnitIsAlive(gv_madMaxTruck) == true)) {
        gv_truckEscortSuccessful = true;
        gf_AwardPlayerXPNOTD(5);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/70E0C384"));
        gv_rescuedApolloCivs += 5;
        gv_legionOfMeritCivsRescued += 5;
        SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupActive(), 100.0, 0.0);
        gf_AwardRatingNOTD(2);
        gf_AwardKarmaNOTD(1);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, ((StringExternal("Param/Value/A710D405") + IntToText(gv_legionOfMeritCivsRescued)) + StringExternal("Param/Value/2693D490")));
        Wait(5.0, c_timeReal);
        UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    }

    TriggerEnable(gt_ECOPTIONALTruckDestroyed, false);
    UnitRemove(gv_madMaxTruck);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ECOPTIONALTruckEvacSuccessful_Init () {
    gt_ECOPTIONALTruckEvacSuccessful = TriggerCreate("gt_ECOPTIONALTruckEvacSuccessful_Func");
    TriggerEnable(gt_ECOPTIONALTruckEvacSuccessful, false);
    TriggerAddEventUnitRegion(gt_ECOPTIONALTruckEvacSuccessful, UnitRefFromVariable("gv_madMaxTruck"), RegionFromId(159), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 3 - Queen Engaged
//--------------------------------------------------------------------------------------------------
bool gt_Chapter3QueenEngaged_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_currentBoss = "Eos";
    TriggerEnable(TriggerGetCurrent(), false);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, false);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_QueenBattle", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_finalBoss, ge_Ping_Enabled);
    TriggerEnable(gt_QueenChaseSequence, true);
    gf_QueenAI();
    TriggerEnable(gt_QueenShriek67HP, true);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E0A4248A"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/A9C5BF56"));
    Wait(7.0, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/20EF41FA"));
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/F9C1DDDB"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter3QueenEngaged_Init () {
    gt_Chapter3QueenEngaged = TriggerCreate("gt_Chapter3QueenEngaged_Func");
    TriggerEnable(gt_Chapter3QueenEngaged, false);
    TriggerAddEventUnitDamaged(gt_Chapter3QueenEngaged, UnitRefFromVariable("gv_finalBoss"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chapter 3 - Mini Marine Evasion AI
//--------------------------------------------------------------------------------------------------
bool gt_Chapter3MiniMarineEvasionAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_safetyRange;
    unitgroup lv_localAllies;
    bool lv_alliesAvailable;
    unit lv_enemy;
    unit lv_defender;
    fixed lv_damageTaken;

    // Variable Initialization
    lv_safetyRange = RegionCircle(UnitGetPosition(EventUnit()), 20.0);
    lv_localAllies = UnitGroupEmpty();
    lv_enemy = EventUnitDamageSourceUnit();
    lv_defender = EventUnit();
    lv_damageTaken = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(gv_easyCompany, EventUnit()) == true) || (UnitGroupHasUnit(gv_secTeamBMarines, EventUnit()) == true)))) {
            return false;
        }

        if (!((UnitHasBehavior(EventUnit(), "ComplianceMatrix") == false))) {
            return false;
        }

        if (!((PlayerType(UnitGetOwner(lv_defender)) != c_playerTypeUser))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, lv_safetyRange, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetOwner(UnitGroupLoopCurrent()) >= 1) && (UnitGetOwner(UnitGroupLoopCurrent()) <= 9)) && (UnitGroupLoopCurrent() != lv_defender) && (UnitGroupLoopCurrent() != gv_madMaxTruck)) {
            UnitGroupAdd(lv_localAllies, UnitGroupLoopCurrent());
            lv_alliesAvailable = true;
        }

    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, 9) == false) && (RandomInt(0, 1) == 1)) {
        UnitIssueOrder(lv_defender, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_defender, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 2.5))), c_orderQueueReplace);
    }
    else if ((lv_alliesAvailable == true) && (RandomInt(0, 1) == 1)) {
        UnitIssueOrder(lv_defender, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_defender, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(lv_localAllies, c_unitCountAlive)), 2.0))), c_orderQueueReplace);
    }
    else if ((lv_damageTaken > 22.0)) {
        UnitIssueOrder(lv_defender, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        UnitIssueOrder(lv_defender, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 1.0))), c_orderQueueReplace);
    }
    UnitGroupLoopBegin(lv_localAllies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetOwner(UnitGroupLoopCurrent()) == 9) && (UnitGetPropertyFixed(lv_enemy, c_unitPropLife, c_unitPropCurrent) <= 300.0) && (UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent) > 100.0) && ((UnitGetOwner(lv_enemy) == 14) || (UnitGetOwner(lv_enemy) == 13)) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_enemy)) <= 8.0) && (UnitGroupLoopCurrent() != lv_defender)) {
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Stimpack", 0)), c_orderQueueReplace);
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), lv_enemy), c_orderQueueReplace);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Chapter3MiniMarineEvasionAI_Init () {
    gt_Chapter3MiniMarineEvasionAI = TriggerCreate("gt_Chapter3MiniMarineEvasionAI_Func");
    TriggerEnable(gt_Chapter3MiniMarineEvasionAI, false);
    TriggerAddEventUnitDamaged(gt_Chapter3MiniMarineEvasionAI, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 15 - Random Mobs
//--------------------------------------------------------------------------------------------------
bool gt_Wave15RandomMobs_Func (bool testConds, bool runActions) {
    int autoDAFCCE5E_n;
    int autoDAFCCE5E_i;
    int auto3B939A56_n;
    int auto3B939A56_i;
    int auto350EC625_n;
    int auto350EC625_i;
    int auto5B85E551_n;
    int auto5B85E551_i;
    int autoAD715BCD_n;
    int autoAD715BCD_i;

    // Variable Declarations
    int lv_randomInteger;
    region lv_charlieDropPoint;

    // Variable Initialization
    lv_randomInteger = RandomInt(1, 6);
    lv_charlieDropPoint = gv_reinforcementSpawn[lv_randomInteger];

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 15;
    gv_hitPar = 80;
    if (((gv_squadRating >= 1650) || (gv_noNewbie == true))) {
        libNtve_gf_UnitCreateFacingPoint(1, "Lelantos", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(1.0, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Lelantos", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionGetCenter(RegionFromId(1)));
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    }

    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/AA4F6A1D"));
    autoDAFCCE5E_n = 24;
    for (autoDAFCCE5E_i = 1; autoDAFCCE5E_i <= autoDAFCCE5E_n; autoDAFCCE5E_i += 1) {
        auto3B939A56_n = gv_spawnFactor;
        for (auto3B939A56_i = 1; auto3B939A56_i <= auto3B939A56_n; auto3B939A56_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel22", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 80.0)), RegionGetCenter(RegionFromId(1)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", UnitLastCreated(), 1);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.3, c_timeGame);
        }
        Wait(0.5, c_timeGame);
    }
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/E3864FB9"), StringExternal("Param/Value/3969D2BA"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 0.8);
    gf_CharlieCompanyAI();
    TriggerEnable(gt_Chapter3MiniMarineEvasionAI, true);
    gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/A9BBE26A"));
    auto350EC625_n = gv_spawnFactor;
    for (auto350EC625_i = 1; auto350EC625_i <= auto350EC625_n; auto350EC625_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Flamethrower2", 0, 9, gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randomInteger]), RegionRandomPoint(RegionPlayableMap()));
        UnitGroupAdd(gv_easyCompany, UnitLastCreated());
        UnitSetTeamColorIndex(UnitLastCreated(), 14);
        Wait(0.2, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, 9, gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randomInteger]), RegionRandomPoint(RegionPlayableMap()));
        UnitGroupAdd(gv_easyCompany, UnitLastCreated());
        UnitSetTeamColorIndex(UnitLastCreated(), 14);
        Wait(0.2, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(1, "Corpsman", 0, 9, gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randomInteger]), RegionRandomPoint(RegionPlayableMap()));
        UnitGroupAdd(gv_easyCompany, UnitLastCreated());
        UnitSetTeamColorIndex(UnitLastCreated(), 14);
        Wait(0.2, c_timeGame);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "SpartanCompany", 0, 9, gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randomInteger]), RegionRandomPoint(RegionPlayableMap()));
    UnitGroupAdd(gv_easyCompany, UnitLastCreated());
    UnitSetTeamColorIndex(UnitLastCreated(), 14);
    Wait(0.1, c_timeGame);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == false)) {
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingArrow", RegionGetCenter(lv_charlieDropPoint), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0);
            libNtve_gf_UnitCreateFacingPoint(1, "SpartanCompany", 0, PlayerGroupLoopCurrent(), gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randomInteger]), RegionRandomPoint(RegionPlayableMap()));
        }

        Wait(0.2, c_timeGame);
    }
    PlayerGroupLoopEnd();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/7B981C01"));
    if ((UnitIsAlive(gv_madMaxTruck) == true) && (gv_colonyShipRescueSuccessful == true)) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/A1557A98"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_madMaxTruck), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0, 270.0);
        TriggerEnable(gt_ECOPTIONALTruckEscortBegins, true);
    }

    gf_TipNOTD(5000, StringExternal("Param/Value/4F3035D8"));
    auto5B85E551_n = 18;
    for (auto5B85E551_i = 1; auto5B85E551_i <= auto5B85E551_n; auto5B85E551_i += 1) {
        autoAD715BCD_n = gv_spawnFactor;
        for (autoAD715BCD_i = 1; autoAD715BCD_i <= autoAD715BCD_n; autoAD715BCD_i += 1) {
            gf_SmartSpawnNOTD("ZombieLevel22", 55.0);
            Wait(0.2, c_timeGame);
            gf_SmartSpawnNOTD("ZombieLevel22", 55.0);
            Wait(0.2, c_timeGame);
        }
        Wait(0.6, c_timeGame);
    }
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/C7D868A4"));
    Wait(60.0, c_timeReal);
    UnitKill(gv_blackOpsSentinel);
    TriggerExecute(gt_Wave16RandomMobs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave15RandomMobs_Init () {
    gt_Wave15RandomMobs = TriggerCreate("gt_Wave15RandomMobs_Func");
    TriggerEnable(gt_Wave15RandomMobs, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 16 - Random Mobs
//--------------------------------------------------------------------------------------------------
bool gt_Wave16RandomMobs_Func (bool testConds, bool runActions) {
    int auto0A722DE0_n;
    int auto0A722DE0_i;
    int auto1F046FEA_n;
    int auto1F046FEA_i;
    int autoE84C3CFA_n;
    int autoE84C3CFA_i;

    // Variable Declarations
    int lv_randominteger;
    region lv_charlieDropPoint;

    // Variable Initialization
    lv_randominteger = RandomInt(1, 6);
    lv_charlieDropPoint = gv_reinforcementSpawn[lv_randominteger];

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 16;
    gv_hitPar = 85;
    if ((gv_noNewbie == true)) {
        gf_AwardPlayerXPNOTD(2);
    }
    else {
        gf_AwardPlayerXPNOTD(1);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/6EEE6DA0"));
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == false)) {
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingArrow", RegionGetCenter(lv_charlieDropPoint), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0);
            libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, PlayerGroupLoopCurrent(), gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randominteger]), RegionRandomPoint(RegionPlayableMap()));
            Wait(0.2, c_timeGame);
            libNtve_gf_UnitCreateFacingPoint(1, "Corpsman", 0, PlayerGroupLoopCurrent(), gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randominteger]), RegionRandomPoint(RegionPlayableMap()));
            Wait(0.2, c_timeGame);
        }

        Wait(0.2, c_timeGame);
    }
    PlayerGroupLoopEnd();
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/6D86C4C5"));
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/B0BFE06F"));
    auto0A722DE0_n = 6;
    for (auto0A722DE0_i = 1; auto0A722DE0_i <= auto0A722DE0_n; auto0A722DE0_i += 1) {
        auto1F046FEA_n = gv_spawnFactor;
        for (auto1F046FEA_i = 1; auto1F046FEA_i <= auto1F046FEA_n; auto1F046FEA_i += 1) {
            gf_SmartSpawnNOTD("Immortal22", 65.0);
            Wait(0.2, c_timeGame);
            gf_SmartSpawnNOTD("Immortal22", 65.0);
            Wait(0.2, c_timeGame);
        }
        Wait(2.0, c_timeGame);
    }
    autoE84C3CFA_n = gv_spawnFactor;
    for (autoE84C3CFA_i = 1; autoE84C3CFA_i <= autoE84C3CFA_n; autoE84C3CFA_i += 1) {
        UnitCreate(1, "ZombieBroodMother2", c_unitCreateIgnorePlacement, 14, RegionRandomPoint(RegionFromId(28)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBroodmother", 0)), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    Wait(50.0, c_timeReal);
    TriggerExecute(gt_Wave17RandomMobs, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave16RandomMobs_Init () {
    gt_Wave16RandomMobs = TriggerCreate("gt_Wave16RandomMobs_Func");
    TriggerEnable(gt_Wave16RandomMobs, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 17 - Random Mobs
//--------------------------------------------------------------------------------------------------
bool gt_Wave17RandomMobs_Func (bool testConds, bool runActions) {
    int autoB1ED5CA0_n;
    int autoB1ED5CA0_i;
    int auto0DAA3B0D_n;
    int auto0DAA3B0D_i;
    int auto15B07EDE_n;
    int auto15B07EDE_i;
    int auto4932C75E_n;
    int auto4932C75E_i;
    int autoA4D58423_n;
    int autoA4D58423_i;

    // Variable Declarations
    int lv_randominteger;
    region lv_charlieDropPoint;

    // Variable Initialization
    lv_randominteger = RandomInt(1, 6);
    lv_charlieDropPoint = gv_reinforcementSpawn[lv_randominteger];

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 17;
    gv_hitPar = 85;
    if ((gv_noNewbie == true)) {
        gf_AwardPlayerXPNOTD(2);
    }
    else {
        gf_AwardPlayerXPNOTD(1);
    }
    gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/E51F85FC"));
    autoB1ED5CA0_n = gv_spawnFactor;
    for (autoB1ED5CA0_i = 1; autoB1ED5CA0_i <= autoB1ED5CA0_n; autoB1ED5CA0_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "SiegeBreaker", 0, 9, gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randominteger]), RegionRandomPoint(RegionPlayableMap()));
        UnitGroupAdd(gv_easyCompany, UnitLastCreated());
        UnitSetTeamColorIndex(UnitLastCreated(), 6);
        Wait(0.5, c_timeGame);
    }
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == false)) {
            PingCreate(PlayerGroupSingle(PlayerGroupLoopCurrent()), "PingArrow", RegionGetCenter(lv_charlieDropPoint), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 10.0);
            libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, PlayerGroupLoopCurrent(), gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randominteger]), RegionRandomPoint(RegionPlayableMap()));
            Wait(0.2, c_timeGame);
            libNtve_gf_UnitCreateFacingPoint(1, "Sniper", 0, PlayerGroupLoopCurrent(), gf_RandomPointatGroundHeight(lv_charlieDropPoint, gv_reinforcementSpawnHeight[lv_randominteger]), RegionRandomPoint(RegionPlayableMap()));
            Wait(0.2, c_timeGame);
        }

        Wait(0.2, c_timeGame);
    }
    PlayerGroupLoopEnd();
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DF31D03F"));
    auto0DAA3B0D_n = 3;
    for (auto0DAA3B0D_i = 1; auto0DAA3B0D_i <= auto0DAA3B0D_n; auto0DAA3B0D_i += 1) {
        auto15B07EDE_n = gv_spawnFactor;
        for (auto15B07EDE_i = 1; auto15B07EDE_i <= auto15B07EDE_n; auto15B07EDE_i += 1) {
            if ((gv_nightmare == true)) {
                gf_SmartSpawnNOTD("Wraith2", 80.0);
                Wait(0.2, c_timeGame);
                gf_SmartSpawnNOTD("Wraith2", 80.0);
            }
            else {
                gf_SmartSpawnNOTD("Mutalisk", 80.0);
                Wait(0.2, c_timeGame);
                gf_SmartSpawnNOTD("Mutalisk", 80.0);
            }
            Wait(0.2, c_timeGame);
        }
        Wait(2.0, c_timeGame);
    }
    auto4932C75E_n = 22;
    for (auto4932C75E_i = 1; auto4932C75E_i <= auto4932C75E_n; auto4932C75E_i += 1) {
        autoA4D58423_n = gv_spawnFactor;
        for (autoA4D58423_i = 1; autoA4D58423_i <= autoA4D58423_n; autoA4D58423_i += 1) {
            if ((gv_alivePlayers > 1) && (gv_noNewbie == true) && (RandomInt(0, 45) == 1)) {
                gf_SmartSpawnNOTD("TitanBurrowed", 70.0);
            }
            else if ((RandomInt(0, 12) == 1)) {
                gf_SmartSpawnNOTD("Immortal22", 58.0);
            }
            else if (true) {
                gf_SmartSpawnNOTD("HulkBurrowed", 58.0);
            }
            Wait(0.4, c_timeGame);
        }
        Wait(2.5, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    TriggerExecute(gt_Wave18Finale, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave17RandomMobs_Init () {
    gt_Wave17RandomMobs = TriggerCreate("gt_Wave17RandomMobs_Func");
    TriggerEnable(gt_Wave17RandomMobs, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Wave 18 - Finale
//--------------------------------------------------------------------------------------------------
bool gt_Wave18Finale_Func (bool testConds, bool runActions) {
    int auto9EEB5470_n;
    int auto9EEB5470_i;
    int auto4F5CEA5F_n;
    int auto4F5CEA5F_i;
    int auto18F245A1_n;
    int auto18F245A1_i;

    // Variable Declarations
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 18;
    gv_hitPar = 85;
    auto9EEB5470_n = 3;
    for (auto9EEB5470_i = 1; auto9EEB5470_i <= auto9EEB5470_n; auto9EEB5470_i += 1) {
        auto4F5CEA5F_n = gv_spawnFactor;
        for (auto4F5CEA5F_i = 1; auto4F5CEA5F_i <= auto4F5CEA5F_n; auto4F5CEA5F_i += 1) {
            gf_SmartSpawnNOTD("Immortal22", 65.0);
            Wait(0.2, c_timeGame);
            gf_SmartSpawnNOTD("UltraliskBurrowed", 75.0);
            Wait(0.3, c_timeGame);
        }
        Wait(20.0, c_timeGame);
    }
    gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/F58C652F"));
    Wait(60.0, c_timeReal);
    if ((UnitGroupCount(gv_easyCompany, c_unitCountAlive) <= 3) && (UnitIsAlive(gv_finalBoss) == true) && (gv_gameOver == false)) {
        gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/AD6DE3C6"));
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/4AB0C16C"));
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/35A5B238"));
        gf_AwardRatingNOTD(-1);
        gf_AwardKarmaNOTD(-1);
        gf_BrokenArrow();
    }

    Wait(300.0, c_timeReal);
    if ((UnitIsAlive(gv_finalBoss) == true) && (gv_gameOver == false)) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/393F2E80"));
        gf_AwardRatingNOTD(-2);
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/5472209A"));
        while ((UnitIsAlive(gv_finalBoss) == true) && (lv_localIntA < 50)) {
            Wait(10.0, c_timeReal);
            auto18F245A1_n = 5;
            for (auto18F245A1_i = 1; auto18F245A1_i <= auto18F245A1_n; auto18F245A1_i += 1) {
                gf_KollersFireMission();
                Wait(0.8, c_timeReal);
            }
            lv_localIntA += 1;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Wave18Finale_Init () {
    gt_Wave18Finale = TriggerCreate("gt_Wave18Finale_Func");
    TriggerEnable(gt_Wave18Finale, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen - Shriek @ 67% HP
//--------------------------------------------------------------------------------------------------
bool gt_QueenShriek67HP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Eos"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifePercent, c_unitPropCurrent) <= 67.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_finalBoss) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_QueenShriek67HP, false);
    gv_bossFight = true;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/507094E5"));
    gf_TipNOTD(5000, StringExternal("Param/Value/EA1145DB"));
    Wait(3.5, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/536BBA19"));
    SoundPlay(SoundLink("ZombieQueenFrenzy", -1), PlayerGroupActive(), 100.0, 0.0);
    GameSetLighting("NOTDApoptosisLighting", 0.2);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "TimetoDie") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "Protect") == true) || (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_finalBoss)) >= 20.0))) {
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Shriek", gv_finalBoss, 1);
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 1.0, 100.0, 1.5);
        }
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_QueenShriek33HP, true);
    UnitGroupLoopBegin(gv_easyCompany);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel2") == true) || (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_finalBoss)) >= 20.0))) {
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Shriek", gv_finalBoss, 1);
        }
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeReal);
    if ((gv_inceptionOn == false)) {
        GameSetLighting("UnknownLight", 1.0);
    }
    else {
        GameSetLighting("NOTDInception", 1.0);
    }
    gv_bossFight = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenShriek67HP_Init () {
    gt_QueenShriek67HP = TriggerCreate("gt_QueenShriek67HP_Func");
    TriggerEnable(gt_QueenShriek67HP, false);
    TriggerAddEventUnitDamaged(gt_QueenShriek67HP, UnitRefFromVariable("gv_finalBoss"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen - Shriek @ 33% HP
//--------------------------------------------------------------------------------------------------
bool gt_QueenShriek33HP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Eos"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifePercent, c_unitPropCurrent) <= 33.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_finalBoss) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_QueenShriek33HP, false);
    gv_bossFight = true;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/20A80FD0"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/EA780536"));
    gf_TipNOTD(5000, StringExternal("Param/Value/CE2186ED"));
    Wait(3.5, c_timeReal);
    SoundPlay(SoundLink("ZombieQueenFrenzy", -1), PlayerGroupActive(), 100.0, 0.0);
    GameSetLighting("NOTDApoptosisLighting", 0.2);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "TimetoDie") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "Protect") == true) || (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_finalBoss)) >= 20.0))) {
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Shriek", gv_finalBoss, 1);
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 1.0, 100.0, 1.5);
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_easyCompany);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "NanoShieldLevel2") == true) || (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_finalBoss)) >= 20.0))) {
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Shriek", gv_finalBoss, 1);
        }
    }
    UnitGroupLoopEnd();
    Wait(1.5, c_timeReal);
    libNtve_gf_MakeUnitInvulnerable(gv_finalBoss, false);
    if ((gv_inceptionOn == false)) {
        GameSetLighting("UnknownLight", 1.0);
    }
    else {
        GameSetLighting("NOTDInception", 1.0);
    }
    gv_bossFight = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenShriek33HP_Init () {
    gt_QueenShriek33HP = TriggerCreate("gt_QueenShriek33HP_Func");
    TriggerEnable(gt_QueenShriek33HP, false);
    TriggerAddEventUnitDamaged(gt_QueenShriek33HP, UnitRefFromVariable("gv_finalBoss"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen - Chase Sequence
//--------------------------------------------------------------------------------------------------
bool gt_QueenChaseSequence_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Eos"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifePercent, c_unitPropCurrent) <= 20.0))) {
            return false;
        }

        if (!((UnitIsAlive(gv_finalBoss) == true))) {
            return false;
        }

        if (!((gv_queenEscapeMode == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_QueenChaseSequence, false);
    gv_queenEscapeMode = true;
    libNtve_gf_MakeUnitInvulnerable(gv_finalBoss, false);
    UnitBehaviorAdd(gv_finalBoss, "OpenWound", UnitGroupRandomUnit(gv_marines, c_unitCountAlive), 1);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/5E7C397E"));
    UnitGroupRemove(gv_zombieWave, gv_finalBoss);
    SoundPlay(SoundLink("ZombieQueenFrenzy", -1), PlayerGroupActive(), 100.0, 0.0);
    if ((gv_noNewbie == false)) {
        PingDestroy(gv_queenBossPing);
        PingCreate(PlayerGroupActive(), "PingBoss", UnitGetPosition(gv_finalBoss), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 300.0);
        gv_queenBossPing = PingLastCreated();
        PingSetUnit(gv_queenBossPing, gv_finalBoss);
    }

    UnitAbilityEnable(gv_finalBoss, "attack", false);
    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 1.6);
    UnitIssueOrder(gv_finalBoss, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Music_QueenChase", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gf_MarineSpeechNOTD(gv_sgtStallans, StringExternal("Param/Value/B2928F29"));
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("TValerian03Raynor00020", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_TipNOTD(5000, StringExternal("Param/Value/B725B7C7"));
    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 2.0);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/6022681D"));
    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 2.4);
    UnitIssueOrder(gv_finalBoss, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    Wait(3.5, c_timeReal);
    SoundPlay(SoundLink("THorner04Marine00019", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitSetPropertyFixed(gv_finalBoss, c_unitPropMovementSpeed, 2.8);
    gv_queenMoveSpeed = 2.8;
    UnitIssueOrder(gv_finalBoss, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    UnitAbilityEnable(gv_finalBoss, "attack", true);
    while ((UnitIsAlive(gv_finalBoss) == true)) {
        Wait(7.0, c_timeReal);
        if ((UnitGetPropertyFixed(gv_finalBoss, c_unitPropLifePercent, c_unitPropCurrent) >= 15.0)) {
            gv_queenEscapeMode = false;
            UnitIssueOrder(gv_finalBoss, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), c_orderQueueReplace);
        }
        else {
            gv_queenEscapeMode = true;
            UnitIssueOrder(gv_finalBoss, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenChaseSequence_Init () {
    gt_QueenChaseSequence = TriggerCreate("gt_QueenChaseSequence_Func");
    TriggerEnable(gt_QueenChaseSequence, false);
    TriggerAddEventUnitDamaged(gt_QueenChaseSequence, UnitRefFromVariable("gv_finalBoss"), c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Queen - Killed
//--------------------------------------------------------------------------------------------------
bool gt_QueenKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_localPointA;
    point lv_spawnPoint;
    int lv_localIntA;
    int lv_localSpawnInterations;

    // Variable Initialization
    lv_localPointA = UnitGetPosition(EventUnit());
    lv_localIntA = 1;
    lv_localSpawnInterations = (gv_spawnFactor * 15);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Eos"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_gameVictoryTime = TimerGetElapsed(gv_gameTime);
    SoundPlay(SoundLink("Queen_SpawnLarvaLaunch", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_BossAfterAction();
    PingDestroy(gv_queenBossPing);
    while ((lv_localIntA < lv_localSpawnInterations)) {
        Wait(0.2, c_timeGame);
        lv_spawnPoint = RegionRandomPoint(RegionCircle(lv_localPointA, 4.0));
        UnitCreate(1, "Parasite", 0, 14, lv_spawnPoint, libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 3);
        if ((gv_noNewbie == true)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "Frenzy35", 14, 1);
            UnitBehaviorAddPlayer(UnitLastCreated(), "Rampage", 14, 1);
        }

        UnitGroupAddUnitGroup(gv_zombieWave, UnitLastCreatedGroup());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, lv_spawnPoint);
        lv_localIntA += 1;
    }
    gf_UnifiedAwards(libNtve_gf_DifficultyValueInt(5, 8, 8, 0), 1000.0, libNtve_gf_DifficultyValueInt(50, 50, 100, 0), 0, 0);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterCaptainLinh, StringExternal("Param/Value/9059199A"));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/7F3B5C2C"));
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/B0B303DB"));
    SoundPlay(SoundLink("TValerian01DominionMarine500002", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TTychus03Marine500019", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_ECEndCinematic();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_QueenKilled_Init () {
    gt_QueenKilled = TriggerCreate("gt_QueenKilled_Func");
    TriggerEnable(gt_QueenKilled, false);
    TriggerAddEventUnitDied(gt_QueenKilled, UnitRefFromVariable("gv_finalBoss"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC Initialize
//--------------------------------------------------------------------------------------------------
bool gt_ACInitialize_Func (bool testConds, bool runActions) {
    int autoF92EC971_n;
    int autoF92EC971_i;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "THanson01MusicBriefing", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    gv_chapter1SpawnRegion[1] = RegionFromId(95);
    gv_chapter1SpawnRegion[2] = RegionFromId(7);
    gv_chapter1SpawnRegion[3] = RegionFromId(5);
    gv_chapter1SpawnRegion[4] = RegionFromId(4);
    gv_labSpawn[1] = RegionFromId(212);
    gv_labSpawn[2] = RegionFromId(213);
    gv_labSpawn[3] = RegionFromId(214);
    gv_labSpawn[4] = RegionFromId(215);
    gv_labSpawn[5] = RegionFromId(216);
    TriggerEnable(gt_ECW4AirlockRoadAmbush, false);
    TriggerEnable(gt_ECW2ScrapyardAmbush, false);
    TriggerEnable(gt_OM11Delta2, true);
    TriggerEnable(gt_OM12Prisoner2FaricaAugustin, true);
    gf_ZombieAIWorldEvents();
    gf_BlackMaskApplication();
    gf_ACEnvironmentalChanges();
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(153), true, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(153), 90.0, false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(2454), 0.0, -1, 10, true);
        CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1410), 5.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(7.0, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/AAF27ACA"));
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/14B74FC4"), StringExternal("Param/Value/CF63E660"), 12.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(10.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    gf_TipNOTD(5000, StringExternal("Param/Value/6F38C800"));
    Wait(5.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/2BEAC282"), StringExternal("Param/Value/115D3793"), 20.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/A090EC23"));
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/281F82AD"));
    UIHideTextCrawl(PlayerGroupAll());
    UnitCreate(1, "P45GaussPistol", 0, 0, RegionRandomPoint(RegionFromId(3)), 270.0);
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "ColonistSupplyCrate", 0, "");
    Wait(0.1, c_timeReal);
    UnitCreate(1, "P45GaussPistol", 0, 0, RegionRandomPoint(RegionFromId(3)), 270.0);
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "ColonistSupplyCrate", 0, "");
    Wait(0.1, c_timeReal);
    UnitCreate(1, "Shotgun", 0, 0, RegionRandomPoint(RegionFromId(3)), 270.0);
    TriggerExecute(gt_ACW1Landing, true, false);
    autoF92EC971_n = 3;
    for (autoF92EC971_i = 1; autoF92EC971_i <= autoF92EC971_n; autoF92EC971_i += 1) {
        UnitCreate(1, "SpineCrawler", 0, 14, RegionRandomPoint(RegionFromId(127)), libNtve_gf_RandomAngle());
        Wait(0.1, c_timeReal);
        UnitCreate(1, "SpineCrawler", 0, 14, RegionRandomPoint(RegionFromId(211)), libNtve_gf_RandomAngle());
        Wait(0.1, c_timeReal);
        UnitCreate(1, "SpineCrawler", 0, 14, RegionRandomPoint(RegionFromId(200)), libNtve_gf_RandomAngle());
        Wait(0.1, c_timeReal);
    }
    if (((gv_noNewbie == true) && (gv_alivePlayers > 3))) {
        UnitCreate(1, "Hugger", 0, 14, RegionRandomPoint(RegionFromId(127)), libNtve_gf_RandomAngle());
        Wait(0.1, c_timeReal);
        UnitCreate(1, "Hugger", 0, 14, RegionRandomPoint(RegionFromId(211)), libNtve_gf_RandomAngle());
        Wait(0.1, c_timeReal);
        UnitCreate(1, "Hugger", 0, 14, RegionRandomPoint(RegionFromId(200)), libNtve_gf_RandomAngle());
    }

    if ((gv_noNewbie == true)) {
        Wait(150.0, c_timeReal);
        UnitSetState(UnitFromId(1857), c_unitStateSelectable, false);
        UnitSetState(UnitFromId(2505), c_unitStateSelectable, false);
    }
    else {
        UnitSetState(UnitFromId(1857), c_unitStateSelectable, false);
        UnitSetState(UnitFromId(2505), c_unitStateSelectable, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACInitialize_Init () {
    gt_ACInitialize = TriggerCreate("gt_ACInitialize_Func");
    TriggerEnable(gt_ACInitialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Dr. Tanaka Death
//--------------------------------------------------------------------------------------------------
bool gt_ACDrTanakaDeath_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_gameOver = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACDrTanakaDeath_Init () {
    gt_ACDrTanakaDeath = TriggerCreate("gt_ACDrTanakaDeath_Func");
    TriggerEnable(gt_ACDrTanakaDeath, false);
    TriggerAddEventUnitDied(gt_ACDrTanakaDeath, UnitRefFromUnit(UnitFromId(2625)));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACC1 - Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_ACC1ItemSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_magazineSpawn;

    // Variable Initialization
    lv_magazineSpawn = 30;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nightmare == true)) {
        lv_magazineSpawn = 33;
        gf_CreateItemNOTD("Helium3Canister", 1);
    }

    lv_magazineSpawn += gv_magazineAdjustment;
    gf_CreateItemNOTD("Magazine", lv_magazineSpawn);
    gf_CreateItemNOTD("AmmoBox", 4);
    if ((gv_navyCrossMode == false)) {
        gf_CreateItemNOTD("Medpack", 8);
        gf_CreateItemNOTD("Bandage", 5);
    }

    if ((gv_noNewbie == true)) {
        gf_CreateItemNOTD("BarrettM112", 1);
        gf_CreateItemNOTD("Chaingun", 1);
        gf_CreateItemNOTD("L3GrenadeLauncher", 1);
        gf_CreateItemNOTD("MP9A2SubMachineGun", 2);
        gf_CreateItemNOTD("UA420AssaultRifle", 3);
    }
    else {
        gf_CreateItemNOTD("UA420AssaultRifle", 4);
        gf_CreateItemNOTD("M5PulseRifle", 2);
    }
    gf_CreateItemNOTD("AntiVenom", 3);
    gf_CreateItemNOTD("OccularImplants", 4);
    gf_CreateItemNOTD("HighCapacityClip", 2);
    gf_CreateItemNOTD("NanoHealthAugment", 2);
    gf_CreateItemNOTD("RoadFlare", 10);
    gf_CreateItemNOTD("ThermalSight", 1);
    gf_CreateItemNOTD("CombatMobilityAugment", 1);
    gf_CreateItemNOTD("C2Armor", 2);
    gf_CreateItemNOTD("C4Armor", 2);
    gf_CreateItemNOTD("XS4Armor", 1);
    gf_CreateItemNOTD("KineticArmor", 1);
    gf_CreateItemNOTD("ReactiveArmor", 2);
    gf_CreateItemNOTD("Flamethrower", 2);
    gf_CreateItemNOTD("SniperRifle", 3);
    gf_CreateItemNOTD("Shotgun", 1);
    gf_CreateItemNOTD("HEAmmo", 2);
    gf_CreateItemNOTD("HPAmmo", 2);
    gf_CreateItemNOTD("APAmmo", 2);
    gf_CreateItemNOTD("FMJAmmo", 2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACC1ItemSpawn_Init () {
    gt_ACC1ItemSpawn = TriggerCreate("gt_ACC1ItemSpawn_Func");
    TriggerEnable(gt_ACC1ItemSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW1 - Landing
//--------------------------------------------------------------------------------------------------
bool gt_ACW1Landing_Func (bool testConds, bool runActions) {
    int autoCFBFA4F3_n;
    int autoCFBFA4F3_i;
    int auto77FFBBF9_n;
    int auto77FFBBF9_i;
    int autoF1EFFAB5_n;
    int autoF1EFFAB5_i;
    int autoBC475DEF_n;
    int autoBC475DEF_i;
    int auto9638E792_n;
    int auto9638E792_i;
    int autoAA91829E_n;
    int autoAA91829E_i;
    int auto2996FD4D_n;
    int auto2996FD4D_i;
    int auto4A86D570_n;
    int auto4A86D570_i;
    int autoBCD4A216_n;
    int autoBCD4A216_i;
    int auto72993DF8_n;
    int auto72993DF8_i;
    int autoB92F1216_n;
    int autoB92F1216_i;
    int auto0B9F5985_n;
    int auto0B9F5985_i;

    // Variable Declarations
    unitgroup lv_possibleEscorts;
    unit lv_escortUnit;
    int lv_chosenRallyArea;

    // Variable Initialization
    lv_possibleEscorts = UnitGroupEmpty();
    lv_chosenRallyArea = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    gv_wave = 1;
    gv_hitPar = 20;
    TriggerEnable(gt_ManualSave, true);
    SoundPlay(SoundLink("TRaynor01Raynor00037", -1), PlayerGroupActive(), 100.0, 0.0);
    TriggerExecute(gt_ACC1ItemSpawn, true, false);
    Wait(10.0, c_timeReal);
    if ((gv_alivePlayers >= 1)) {
        autoCFBFA4F3_n = gv_spawnFactor;
        for (autoCFBFA4F3_i = 1; autoCFBFA4F3_i <= autoCFBFA4F3_n; autoCFBFA4F3_i += 1) {
            gf_SmartSpawnNOTD("HulkBurrowed", 35.0);
            Wait(0.1, c_timeGame);
            gf_SmartSpawnNOTD("ZombieLevel12", 35.0);
            Wait(0.3, c_timeGame);
        }
        SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupActive(), 100.0, 0.0);
        auto77FFBBF9_n = (gv_spawnFactor * 3);
        for (auto77FFBBF9_i = 1; auto77FFBBF9_i <= auto77FFBBF9_n; auto77FFBBF9_i += 1) {
            Wait(RandomFixed(0.1, 0.5), c_timeGame);
            gf_SmartSpawnNOTD("ZombieLevel12", 35.0);
        }
        UnitGroupIssueOrder(gv_zombieWave, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), c_orderQueueReplace);
        SoundPlay(SoundLink("Ultralisk_Pissed", -1), PlayerGroupActive(), 100.0, 0.0);
        Wait(4.0, c_timeReal);
        if ((gv_totalPlayers > 5)) {
            autoF1EFFAB5_n = (gv_spawnFactor * 1);
            for (autoF1EFFAB5_i = 1; autoF1EFFAB5_i <= autoF1EFFAB5_n; autoF1EFFAB5_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionFromId(3)), RegionRandomPoint(RegionFromId(29)));
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(RandomFixed(0.1, 1.0), c_timeGame);
            }
        }

    }

    SoundPlay(SoundLink("TValerian01BriefingMarine00013", -1), PlayerGroupActive(), 100.0, 0.0);
    autoBC475DEF_n = (gv_spawnFactor - 2);
    for (autoBC475DEF_i = 1; autoBC475DEF_i <= autoBC475DEF_n; autoBC475DEF_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, 0, RegionRandomPoint(RegionFromId(169)), RegionRandomPoint(RegionFromId(29)));
        UnitGroupAdd(gv_secTeamAMarines, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, RandomFixed(50.0, 90.0));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, RandomFixed(0.0, 50.0));
        Wait(0.1, c_timeReal);
    }
    libNtve_gf_UnitCreateFacingPoint(1, "Flamethrower2", 0, 0, RegionRandomPoint(RegionFromId(169)), RegionRandomPoint(RegionFromId(29)));
    UnitGroupAdd(gv_secTeamAMarines, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, RandomFixed(50.0, 90.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, RandomFixed(0.0, 50.0));
    Wait(0.1, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "LtSheng", 0, 0, RegionRandomPoint(RegionFromId(169)), RegionRandomPoint(RegionFromId(29)));
    UnitGroupAdd(gv_secTeamAMarines, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, RandomFixed(50.0, 90.0));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropShieldsPercent, RandomFixed(0.0, 50.0));
    gv_ltSheng = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_ltSheng, true);
    auto9638E792_n = (gv_spawnFactor - 1);
    for (auto9638E792_i = 1; auto9638E792_i <= auto9638E792_n; auto9638E792_i += 1) {
        Wait(0.1, c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, 0, RegionRandomPoint(RegionFromId(210)), RegionRandomPoint(RegionFromId(29)));
        UnitGroupAdd(gv_secTeamBMarines, UnitLastCreated());
    }
    autoAA91829E_n = 2;
    for (autoAA91829E_i = 1; autoAA91829E_i <= autoAA91829E_n; autoAA91829E_i += 1) {
        Wait(0.1, c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(1, "Corpsman", 0, 0, RegionRandomPoint(RegionFromId(210)), RegionRandomPoint(RegionFromId(29)));
        UnitGroupAdd(gv_secTeamBMarines, UnitLastCreated());
    }
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_secTeamMiniRally[lv_chosenRallyArea])), c_orderQueueReplace);
        Wait(RandomFixed(0.0, 0.2), c_timeGame);
    }
    UnitGroupLoopEnd();
    Wait(3.5, c_timeReal);
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_secTeamMiniRally[lv_chosenRallyArea])), c_orderQueueReplace);
        Wait(RandomFixed(0.0, 0.2), c_timeGame);
    }
    UnitGroupLoopEnd();
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice, StringExternal("Param/Value/4D0E1B81"));
    Wait(3.0, c_timeReal);
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 9, false);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, RandomFixed(50.0, 80.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, RandomFixed(0.0, 50.0));
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_secTeamMiniRally[lv_chosenRallyArea])), c_orderQueueReplace);
        Wait(RandomFixed(0.0, 0.2), c_timeGame);
    }
    UnitGroupLoopEnd();
    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Marksman") && (UnitGetType(UnitGroupLoopCurrent()) != "Spectre")) {
            UnitGroupAdd(lv_possibleEscorts, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        if ((UnitGroupCount(lv_possibleEscorts, c_unitCountAlive) > 0)) {
            lv_escortUnit = UnitGroupRandomUnit(lv_possibleEscorts, c_unitCountAlive);
        }
        else {
            lv_escortUnit = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
        }
        AIAttackWaveAddEscortUnit(9, UnitGroupLoopCurrent(), lv_escortUnit, RandomFixed(2.0, 3.0), libNtve_gf_RandomAngle());
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(9, 0, false);
    SoundPlay(SoundLink("TRaynor01Raynor00043", -1), PlayerGroupActive(), 100.0, 0.0);
    ObjectiveCreate(StringExternal("Param/Value/44C67D19"), StringExternal("Param/Value/83EBF2B8"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(5.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/349C8407"), 5.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("TRaynor03Marine700004", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("TRaynor02Rebel00034", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/D4C63982"));
    gf_TipNOTD(5000, StringExternal("Param/Value/06A43C14"));
    auto2996FD4D_n = 2;
    for (auto2996FD4D_i = 1; auto2996FD4D_i <= auto2996FD4D_n; auto2996FD4D_i += 1) {
        auto4A86D570_n = (gv_spawnFactor * 2);
        for (auto4A86D570_i = 1; auto4A86D570_i <= auto4A86D570_n; auto4A86D570_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel12", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.15, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel12", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.15, c_timeReal);
            if ((RandomInt(0, 7) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Beastling2", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBeastling", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            }

        }
        Wait(2.1, c_timeReal);
    }
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/B6BA3533"));
    Wait(1.5, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/526129D0"));
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 2) != 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "SonicTrapLevel1", 0, 9, RegionGetBoundsMax(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.5)), RegionRandomPoint(RegionPlayableMap()));
            Wait(0.3, c_timeReal);
        }

    }
    UnitGroupLoopEnd();
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/8F257BCB"));
    autoBCD4A216_n = 2;
    for (autoBCD4A216_i = 1; autoBCD4A216_i <= autoBCD4A216_n; autoBCD4A216_i += 1) {
        auto72993DF8_n = (gv_spawnFactor * 2);
        for (auto72993DF8_i = 1; auto72993DF8_i <= auto72993DF8_n; auto72993DF8_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel12", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel12", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeReal);
            if ((RandomInt(0, 7) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Beastling2", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBeastling", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            }

        }
        Wait(1.8, c_timeReal);
    }
    Wait(8.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/27B9C85A"));
    Wait(1.5, c_timeReal);
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, c_unitPropCurrent) <= 90.0)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Medkit", UnitGroupLoopCurrent(), 1);
            Wait(0.3, c_timeReal);
        }

    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeReal);
    autoB92F1216_n = 2;
    for (autoB92F1216_i = 1; autoB92F1216_i <= autoB92F1216_n; autoB92F1216_i += 1) {
        auto0B9F5985_n = (gv_spawnFactor * 2);
        for (auto0B9F5985_i = 1; auto0B9F5985_i <= auto0B9F5985_n; auto0B9F5985_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, "RoachBurrowed", 0, 14, RegionRandomPoint(gv_chapter1SpawnRegion[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
            Wait(0.2, c_timeReal);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        }
        Wait(5.9, c_timeReal);
    }
    Wait(6.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/35E13D08"));
    Wait(6.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/B2B28473"));
    SoundPlay(SoundLink("Tosh03ABriefing_Uploading", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(4.5, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/63100822"));
    CameraSetBounds(PlayerGroupActive(), RegionPlayableMap(), true);
    Wait(2.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/981280E9"), 5.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/E2C16EBA"), StringExternal("Param/Value/8E30F23B"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(210)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0);
    gf_ACAmbientSpawn();
    TriggerEnable(gt_ACW1EnterArmory, true);
    Wait(5.0, c_timeReal);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("TRaynor01Raynor00030", -1), PlayerGroupAll(), 150.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW1Landing_Init () {
    gt_ACW1Landing = TriggerCreate("gt_ACW1Landing_Func");
    TriggerEnable(gt_ACW1Landing, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW1 - Enter Armory
//--------------------------------------------------------------------------------------------------
bool gt_ACW1EnterArmory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_possibleEscorts;
    unit lv_escortUnit;

    // Variable Initialization
    lv_possibleEscorts = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_wave = 2;
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionFromId(210), 7.0, false);
    }
    IntLoopEnd();
    Wait(1.5, c_timeReal);
    SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupAll(), 200.0, 0.0);
    UnitGroupLoopBegin(gv_secTeamBMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 9, false);
        UnitFlashSelection(UnitGroupLoopCurrent(), 1.5);
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, RandomFixed(50.0, 90.0));
        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, RandomFixed(0.0, 50.0));
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_secTeamAMarines, gv_secTeamBMarines);
    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Marksman") && (UnitGetType(UnitGroupLoopCurrent()) != "Spectre")) {
            UnitGroupAdd(lv_possibleEscorts, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_secTeamBMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        if ((UnitGroupCount(lv_possibleEscorts, c_unitCountAlive) > 0)) {
            lv_escortUnit = UnitGroupRandomUnit(lv_possibleEscorts, c_unitCountAlive);
        }
        else {
            lv_escortUnit = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
        }
        AIAttackWaveAddEscortUnit(9, UnitGroupLoopCurrent(), lv_escortUnit, RandomFixed(2.0, 3.0), libNtve_gf_RandomAngle());
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(9, 0, false);
    SoundPlay(SoundLink("TScene11Raynor011", -1), PlayerGroupAll(), 150.0, 0.0);
    Wait(5.9, c_timeReal);
    gf_RadioNOTD(gv_characterCorpsmanKeller, StringExternal("Param/Value/B3B45980"));
    Wait(4.0, c_timeReal);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/C3B479AA"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterCorpsmanKeller, StringExternal("Param/Value/E12D43BE"));
    Wait(7.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    SoundPlay(SoundLink("TScene11Tychus014", -1), PlayerGroupAll(), 150.0, 0.0);
    TriggerExecute(gt_ACW2DefendwithSecTeamArmory, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW1EnterArmory_Init () {
    gt_ACW1EnterArmory = TriggerCreate("gt_ACW1EnterArmory_Func");
    TriggerEnable(gt_ACW1EnterArmory, false);
    TriggerAddEventUnitRegion(gt_ACW1EnterArmory, null, RegionFromId(122), true);
    TriggerAddEventUnitRegion(gt_ACW1EnterArmory, null, RegionFromId(122), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Prowler Enters
//--------------------------------------------------------------------------------------------------
bool gt_ACProwlerEnters_Func (bool testConds, bool runActions) {
    int auto5999F4F2_n;
    int auto5999F4F2_i;

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/F0CC8C89"));
    Wait(3.0, c_timeGame);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitCreate(1, "Hephaestus", 0, 13, RegionRandomPoint(RegionFromId(158)), libNtve_gf_RandomAngle());
    gv_prowler = UnitLastCreated();
    libNtve_gf_ChangeUnitDamage(gv_prowler, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    UnitBehaviorAddPlayer(gv_prowler, "SpeedDebuff", 13, 1);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBoss", UnitGetPosition(gv_prowler), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 120.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_prowler);
    gv_prowlerPing = PingLastCreated();
    TriggerEnable(gt_ACProwlerDies, true);
    UnitIssueOrder(gv_prowler, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 20.0))), c_orderQueueReplace);
    Wait(10.0, c_timeGame);
    SoundPlay(SoundLink("AICommunication_TerranAICommand_013", -1), PlayerGroupActive(), 100.0, 0.0);
    auto5999F4F2_n = 11;
    for (auto5999F4F2_i = 1; auto5999F4F2_i <= auto5999F4F2_n; auto5999F4F2_i += 1) {
        Wait(10.0, c_timeGame);
        UnitIssueOrder(gv_prowler, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 20.0))), c_orderQueueReplace);
    }
    UnitRemove(gv_prowler);
    TriggerEnable(gt_ACProwlerDies, false);
    TriggerExecute(gt_AutoSave, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACProwlerEnters_Init () {
    gt_ACProwlerEnters = TriggerCreate("gt_ACProwlerEnters_Func");
    TriggerEnable(gt_ACProwlerEnters, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Prowler Dies
//--------------------------------------------------------------------------------------------------
bool gt_ACProwlerDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_deathPoint;

    // Variable Initialization
    lv_deathPoint = UnitGetPosition(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_AwardRatingNOTD(1);
    gf_AwardMarineXPNOTD(125.0);
    PingDestroy(gv_prowlerPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACProwlerDies_Init () {
    gt_ACProwlerDies = TriggerCreate("gt_ACProwlerDies_Func");
    TriggerEnable(gt_ACProwlerDies, false);
    TriggerAddEventUnitDied(gt_ACProwlerDies, UnitRefFromVariable("gv_prowler"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW2 - Defend with Sec Team (Armory)
//--------------------------------------------------------------------------------------------------
bool gt_ACW2DefendwithSecTeamArmory_Func (bool testConds, bool runActions) {
    int autoAE09A8A9_n;
    int autoAE09A8A9_i;
    int autoA0E8C447_n;
    int autoA0E8C447_i;
    int autoA1CE493D_n;
    int autoA1CE493D_i;
    int auto0CB281FF_n;
    int auto0CB281FF_i;
    int auto41BD7B58_n;
    int auto41BD7B58_i;
    int autoBFC2860F_n;
    int autoBFC2860F_i;
    int auto59D00585_n;
    int auto59D00585_i;
    int auto00D88F00_n;
    int auto00D88F00_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    gf_AwardPlayerXPNOTD(2);
    gv_wave = 2;
    gv_hitPar = 30;
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(211))), c_orderQueueReplace);
    TriggerExecute(gt_ACEnterApolloDockGate, true, false);
    TriggerExecute(gt_ACEnterApolloReactorGate, true, false);
    TriggerExecute(gt_ACEnterLabNorthGate, true, false);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/70477DFA"));
    SoundPlay(SoundLink("TRaynor03Marine100008", -1), PlayerGroupAll(), 100.0, 0.0);
    ObjectiveCreate(StringExternal("Param/Value/92A2458A"), StringExternal("Param/Value/D9C4D665"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    UnitIssueOrder(UnitFromId(829), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    autoAE09A8A9_n = 5;
    for (autoAE09A8A9_i = 1; autoAE09A8A9_i <= autoAE09A8A9_n; autoAE09A8A9_i += 1) {
        autoA0E8C447_n = (gv_spawnFactor * 2);
        for (autoA0E8C447_i = 1; autoA0E8C447_i <= autoA0E8C447_n; autoA0E8C447_i += 1) {
            gf_WaveSpawnAroundMarines("ZombieLevel22", 50.0, 2);
            Wait(0.15, c_timeReal);
            gf_WaveSpawnAroundMarines("Immortal22", 55.0, 1);
            Wait(0.15, c_timeReal);
            if ((RandomInt(0, 6) == 1)) {
                gf_WaveSpawnAroundMarines("Beastling2", 50.0, 1);
            }

            Wait(0.15, c_timeReal);
            AIAttackWaveSend(14, 0, false);
        }
    }
    SoundPlay(SoundLink("TRaynor03Tychus00009", -1), PlayerGroupAll(), 150.0, 0.0);
    Wait(8.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/D5FA6AE6"));
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitWeaponRemove(UnitGroupLoopCurrent(), "GaussRifleMini");
        UnitWeaponAdd(UnitGroupLoopCurrent(), "SniperRifleMini", null);
        Wait(0.1, c_timeReal);
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    if ((gv_nightmare == true) && (RandomInt(0, 7) == 1)) {
        TriggerExecute(gt_ACProwlerEnters, true, false);
    }
    autoA1CE493D_n = 5;
    for (autoA1CE493D_i = 1; autoA1CE493D_i <= autoA1CE493D_n; autoA1CE493D_i += 1) {
        auto0CB281FF_n = (gv_spawnFactor * 2);
        for (auto0CB281FF_i = 1; auto0CB281FF_i <= auto0CB281FF_n; auto0CB281FF_i += 1) {
            gf_SmartSpawnNOTD("Mutalisk", 80.0);
            Wait(0.2, c_timeReal);
            gf_SmartSpawnNOTD("Mutalisk", 80.0);
            Wait(0.2, c_timeReal);
            if ((RandomInt(0, 9) == 1)) {
                gf_SmartSpawnNOTD("UltraliskBurrowed", 60.0);
                UnitBehaviorRemove(UnitLastCreated(), "Detector5", 1);
            }

            Wait(0.2, c_timeReal);
            if ((RandomInt(0, 9) == 1)) {
                gf_SmartSpawnNOTD("UltraliskBurrowed", 60.0);
                UnitBehaviorRemove(UnitLastCreated(), "Detector5", 1);
            }

            Wait(0.5, c_timeReal);
            AIAttackWaveSend(14, 0, false);
        }
        Wait(5.9, c_timeReal);
    }
    Wait(15.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/B0E31603"));
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitWeaponRemove(UnitGroupLoopCurrent(), "SniperRifleMini");
        UnitWeaponAdd(UnitGroupLoopCurrent(), "FlamethrowerMK2", null);
        Wait(0.1, c_timeReal);
    }
    UnitGroupLoopEnd();
    auto41BD7B58_n = 1;
    for (auto41BD7B58_i = 1; auto41BD7B58_i <= auto41BD7B58_n; auto41BD7B58_i += 1) {
        autoBFC2860F_n = (gv_spawnFactor * 2);
        for (autoBFC2860F_i = 1; autoBFC2860F_i <= autoBFC2860F_n; autoBFC2860F_i += 1) {
            gf_WaveSpawnAroundMarines("SeekerBurrowed", 55.0, 2);
            Wait(0.3, c_timeReal);
            gf_WaveSpawnAroundMarines("SeekerBurrowed", 55.0, 2);
            AIAttackWaveSend(14, 1, false);
            Wait(0.3, c_timeReal);
        }
    }
    Wait(15.0, c_timeReal);
    gf_WaveSpawnAtRegion("TitanBurrowed", RegionFromId(158), 1);
    AIAttackWaveSend(14, 0, false);
    gf_WaveSpawnAtRegion("ZombieBroodMother2", RegionFromId(158), libNtve_gf_DifficultyValueInt(0, (gv_spawnFactor / 2), (gv_spawnFactor / 2), 0));
    Wait(0.3, c_timeReal);
    gf_WaveSpawnAtRegion("Slasher2", RegionFromId(158), libNtve_gf_DifficultyValueInt(0, 0, (gv_spawnFactor / 2), 0));
    AIAttackWaveSetTargetEscort(14, UnitGroup("Titan", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    AIAttackWaveSend(14, 0, false);
    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    auto59D00585_n = 2;
    for (auto59D00585_i = 1; auto59D00585_i <= auto59D00585_n; auto59D00585_i += 1) {
        auto00D88F00_n = (gv_spawnFactor * 2);
        for (auto00D88F00_i = 1; auto00D88F00_i <= auto00D88F00_n; auto00D88F00_i += 1) {
            Wait(0.5, c_timeReal);
            gf_WaveSpawnAroundMarines("HulkBurrowed", 50.0, 2);
            Wait(0.3, c_timeReal);
            gf_WaveSpawnAroundMarines("RoachBurrowed", 50.0, 2);
            AIAttackWaveSend(14, 2, true);
        }
    }
    Wait(25.0, c_timeReal);
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Flamethrower2")) {
        }
        else if ((UnitGetType(UnitGroupLoopCurrent()) == "LtSheng")) {
            UnitWeaponRemove(UnitGroupLoopCurrent(), "FlamethrowerMK2");
            UnitWeaponAdd(UnitGroupLoopCurrent(), "UA420AssaultRifle", null);
        }
        else if (true) {
            UnitWeaponRemove(UnitGroupLoopCurrent(), "FlamethrowerMK2");
            UnitWeaponAdd(UnitGroupLoopCurrent(), "GaussRifleMini", null);
        }
        Wait(1.0, c_timeReal);
    }
    UnitGroupLoopEnd();
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/D137113F"));
    Wait(3.0, c_timeReal);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/D5F3E2AC"));
    Wait(5.5, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaSubtitle);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/A0BB6B2F"));
    Wait(7.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaSubtitle);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/1EA31214"));
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionFromId(211))), c_orderQueueReplace);
    Wait(8.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaSubtitle);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/CF0F64B0"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/9E112488"));
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/298F1A5E"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(gv_charlie), ColorWithAlpha(98.82, 86.67, 1.18, 0.00), 10.0, 270.0);
    PingSetUnit(PingLastCreated(), gv_charlie);
    ObjectiveCreate(StringExternal("Param/Value/BD12F8A1"), StringExternal("Param/Value/796A229D"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(8.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/FD4C0073"));
    UnitBehaviorAddPlayer(gv_charlie, "Rampage", 0, 1);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/2CC7E08B"));
    TriggerEnable(gt_ACW2CharlieFind, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW2DefendwithSecTeamArmory_Init () {
    gt_ACW2DefendwithSecTeamArmory = TriggerCreate("gt_ACW2DefendwithSecTeamArmory_Func");
    TriggerEnable(gt_ACW2DefendwithSecTeamArmory, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW2 - Charlie Find
//--------------------------------------------------------------------------------------------------
bool gt_ACW2CharlieFind_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) >= 1) && (UnitGetOwner(EventUnit()) <= 8)))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), 1, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            return false;
        }

        if (!((gv_charlieFound == false))) {
            return false;
        }

        if (!((gv_wave >= 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_charlieFound = true;
    gf_RadioNOTD(PlayerName(EventPlayer()), StringExternal("Param/Value/B4A4C624"));
    TriggerExecute(gt_ACW3CharlieFound, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW2CharlieFind_Init () {
    gt_ACW2CharlieFind = TriggerCreate("gt_ACW2CharlieFind_Func");
    TriggerEnable(gt_ACW2CharlieFind, false);
    TriggerAddEventUnitRange(gt_ACW2CharlieFind, null, UnitFromId(2211), 2.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW3 - Charlie Found!
//--------------------------------------------------------------------------------------------------
bool gt_ACW3CharlieFound_Func (bool testConds, bool runActions) {
    int auto2AA14CCE_n;
    int auto2AA14CCE_i;

    // Variable Declarations
    region lv_localRegionA;
    int lv_chosenRallyArea;

    // Variable Initialization
    lv_chosenRallyArea = RandomInt(1, 3);

    // Actions
    if (!runActions) {
        return true;
    }

    gf_AwardPlayerXPNOTD(2);
    gv_wave = 3;
    gv_hitPar = 35;
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitIssueOrder(gv_charlie, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_charlie, Order(AbilityCommand("stop", 3)), c_orderQueueReplace);
    Wait(10.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    Wait(3.0, c_timeReal);
    gv_aCSpawnRespite = true;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/C6CC2B17"));
    SoundPlay(SoundLink("BroodLord_Pissed", -1), PlayerGroupAll(), 100.0, 0.0);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 1.0, 100.0, 1.7);
    }
    IntLoopEnd();
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/8C305502"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TRaynor03BriefingRaynor00009", -1), PlayerGroupAll(), 150.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/4F608041"));
    Wait(1.5, c_timeReal);
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "SonicTrapLevel1", 0, 9, RegionGetBoundsMax(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 1.5)), RegionRandomPoint(RegionPlayableMap()));
            Wait(0.3, c_timeReal);
        }

    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/2D573AA9"));
    lv_localRegionA = RegionCircle(UnitGetPosition(gv_charlie), 12.0);
    SoundPlay(SoundLink("Ultralisk_Roar", -1), PlayerGroupActive(), 100.0, 0.0);
    auto2AA14CCE_n = (gv_spawnFactor * 1);
    for (auto2AA14CCE_i = 1; auto2AA14CCE_i <= auto2AA14CCE_n; auto2AA14CCE_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(RandomFixed(0.5, 1.0), c_timeReal);
    }
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/4FEFEA27"));
    Wait(1.0, c_timeReal);
    UnitGroupAddUnitGroup(gv_ghostCompany, gv_secTeamAMarines);
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(211)), 4.0))));
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopEnd();
    UnitGroupClear(gv_secTeamAMarines);
    Wait(5.5, c_timeReal);
    UnitGroupLoopBegin(gv_ghostCompany);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ACDemeterSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW3CharlieFound_Init () {
    gt_ACW3CharlieFound = TriggerCreate("gt_ACW3CharlieFound_Func");
    TriggerEnable(gt_ACW3CharlieFound, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Demeter Spawn
//--------------------------------------------------------------------------------------------------
bool gt_ACDemeterSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_localRegionA;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ACEnterSiteAlphaGate, false);
    TriggerExecute(gt_ACEnterSiteAlphaGate, false, false);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
    gv_bossFight = true;
    gv_currentBoss = "Demeter";
    libNtve_gf_UnitCreateFacingPoint(1, "Demeter", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), RegionRandomPoint(RegionPlayableMap()));
    gv_boss = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, gv_boss);
    PlayerSetAlliance(14, c_allianceIdVision, 13, false);
    TriggerEnable(gt_DemeterEngaged, true);
    if ((gv_alivePlayers < 7)) {
        UnitSetPropertyFixed(gv_boss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_boss, c_unitPropLifeMax, c_unitPropCurrent) * 0.85));
    }
    else if ((gv_alivePlayers < 5)) {
        UnitSetPropertyFixed(gv_boss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_boss, c_unitPropLifeMax, c_unitPropCurrent) * 0.65));
    }
    else if ((gv_alivePlayers < 3)) {
        UnitSetPropertyFixed(gv_boss, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_boss, c_unitPropLifeMax, c_unitPropCurrent) * 0.5));
    }
    if ((gv_nightmare == true)) {
        UnitBehaviorAdd(gv_boss, "Frenzy35", gv_boss, 1);
    }
    else if ((gv_squadRating > 1800)) {
        UnitBehaviorAdd(gv_boss, "Frenzy3", gv_boss, 1);
    }
    UnitSetTeamColorIndex(gv_boss, 7);
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_boss, ge_Ping_Enabled);
    TriggerEnable(gt_DemeterKilled, true);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/B41BEB9B"));
    gf_TipNOTD(5000, StringExternal("Param/Value/4876E9AF"));
    Wait(300.0, c_timeReal);
    if ((gv_wave == 3)) {
        gf_AwardRatingNOTD(-2);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACDemeterSpawn_Init () {
    gt_ACDemeterSpawn = TriggerCreate("gt_ACDemeterSpawn_Func");
    TriggerEnable(gt_ACDemeterSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demeter Engaged
//--------------------------------------------------------------------------------------------------
bool gt_DemeterEngaged_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/8EA89AFF"));
    gf_DemeterAI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DemeterEngaged_Init () {
    gt_DemeterEngaged = TriggerCreate("gt_DemeterEngaged_Func");
    TriggerEnable(gt_DemeterEngaged, false);
    TriggerAddEventUnitBehaviorChange(gt_DemeterEngaged, UnitRefFromVariable("gv_boss"), "DemeterRangedImmunity", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Demeter Killed
//--------------------------------------------------------------------------------------------------
bool gt_DemeterKilled_Func (bool testConds, bool runActions) {
    int autoC017E6E8_n;
    int autoC017E6E8_i;

    // Variable Declarations
    point lv_localPoint;
    int lv_inquisitiveMarine;
    unitgroup lv_possibleEscorts;
    unit lv_escortUnit;

    // Variable Initialization
    lv_localPoint = UnitGetPosition(EventUnit());
    lv_possibleEscorts = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_wave = 4;
    gf_BossAfterAction();
    gf_UnifiedAwards(3, 275.0, libNtve_gf_DifficultyValueInt(0, 30, 50, 0), 0, 1);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/8859CAF7"));
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/789187AF"));
    gv_aCSpawnRespite = false;
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_AFKCheck, true, false);
    if (((gv_nightmare == true) || (RandomInt(0, 9) == 1))) {
        autoC017E6E8_n = gv_spawnFactor;
        for (autoC017E6E8_i = 1; autoC017E6E8_i <= autoC017E6E8_n; autoC017E6E8_i += 1) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "DemetersCocoon", 0, 14, lv_localPoint);
            Wait(0.1, c_timeReal);
        }
        Wait(1.5, c_timeReal);
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/332DEA9D"));
    }

    UnitGroupLoopBegin(gv_ghostCompany);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    UnitGroupAddUnitGroup(gv_secTeamAMarines, gv_ghostCompany);
    UnitGroupClear(gv_ghostCompany);
    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Marksman") && (UnitGetType(UnitGroupLoopCurrent()) != "Spectre")) {
            UnitGroupAdd(lv_possibleEscorts, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        if ((UnitGroupCount(lv_possibleEscorts, c_unitCountAlive) > 0)) {
            lv_escortUnit = UnitGroupRandomUnit(lv_possibleEscorts, c_unitCountAlive);
        }
        else {
            lv_escortUnit = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
        }
        AIAttackWaveAddEscortUnit(9, UnitGroupLoopCurrent(), lv_escortUnit, RandomFixed(2.0, 3.0), libNtve_gf_RandomAngle());
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(9, 0, false);
    Wait(3.5, c_timeReal);
    lv_inquisitiveMarine = UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive));
    gf_RadioNOTD(PlayerName(lv_inquisitiveMarine), StringExternal("Param/Value/51BE6262"));
    Wait(3.5, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/CF0DC1C1"));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/17187F2B"));
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ACW4MindlessHordes, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DemeterKilled_Init () {
    gt_DemeterKilled = TriggerCreate("gt_DemeterKilled_Func");
    TriggerEnable(gt_DemeterKilled, false);
    TriggerAddEventUnitDied(gt_DemeterKilled, UnitRefFromVariable("gv_boss"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW4 - Mindless Hordes
//--------------------------------------------------------------------------------------------------
bool gt_ACW4MindlessHordes_Func (bool testConds, bool runActions) {
    int auto21960EAC_n;
    int auto21960EAC_i;
    int auto7FF589A9_n;
    int auto7FF589A9_i;
    int auto05C801A1_n;
    int auto05C801A1_i;
    int autoEC48C258_n;
    int autoEC48C258_i;
    int auto73D59C1C_n;
    int auto73D59C1C_i;

    // Variable Declarations
    string[3] lv_supportUnits;
    string[3] lv_assaultUnits;
    unit lv_flankingTitan;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_supportUnits[0] = "ZombieBroodMother2";
    lv_supportUnits[1] = "ZombieBroodMother2";
    lv_assaultUnits[0] = "HulkBurrowed";
    lv_assaultUnits[1] = "Slasher2";
    gv_hitPar = 40;
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/D264437A"));
    Wait(5.0, c_timeReal);
    UnitBehaviorRemove(gv_charlie, "Rampage", 3);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/4ED7F8FF"));
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
    auto21960EAC_n = 4;
    for (auto21960EAC_i = 1; auto21960EAC_i <= auto21960EAC_n; auto21960EAC_i += 1) {
        auto7FF589A9_n = libNtve_gf_DifficultyValueInt(0, gv_spawnFactor, (gv_spawnFactor + 3), 0);
        for (auto7FF589A9_i = 1; auto7FF589A9_i <= auto7FF589A9_n; auto7FF589A9_i += 1) {
            gf_WaveSpawnAroundMarines("Devourer2", 35.0, 1);
            AIAttackWaveSend(14, 1, true);
            gf_SmartSpawnNOTD("Mutalisk", 75.0);
            gf_SmartSpawnNOTD("Wraith2", 75.0);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.5, c_timeReal);
        }
        Wait(7.0, c_timeReal);
    }
    auto05C801A1_n = gv_spawnFactor;
    for (auto05C801A1_i = 1; auto05C801A1_i <= auto05C801A1_n; auto05C801A1_i += 1) {
        Wait(RandomFixed(1.0, 5.0), c_timeReal);
        gf_WaveSpawnAtRegion("TitanBurrowed", RegionFromId(158), 1);
        AIAttackWaveSend(14, 0, false);
    }
    Wait(6.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup("Titan", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 3) == 1)) {
            gf_WaveSpawnAtRegion(lv_assaultUnits[1], RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 12.0), libNtve_gf_DifficultyValueInt(0, 0, (gv_spawnFactor / 3), 0));
            gf_WaveSpawnAtRegion(lv_supportUnits[1], RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 12.0), libNtve_gf_DifficultyValueInt(0, (gv_spawnFactor / 3), (gv_spawnFactor / 3), 0));
        }
        else {
            gf_WaveSpawnAtRegion(lv_assaultUnits[0], RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 12.0), libNtve_gf_DifficultyValueInt(0, gv_spawnFactor, (gv_spawnFactor* 2), 0));
            gf_WaveSpawnAtRegion(lv_supportUnits[0], RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 12.0), libNtve_gf_DifficultyValueInt(0, (gv_spawnFactor / 3), (gv_spawnFactor / 3), 0));
        }
        AIAttackWaveSetTargetEscort(14, libNtve_gf_ConvertUnitToUnitGroup(UnitGroupLoopCurrent()), 0);
        AIAttackWaveSend(14, 1, true);
        Wait(1.0, c_timeGame);
    }
    UnitGroupLoopEnd();
    lv_flankingTitan = UnitGroupRandomUnit(UnitGroup("Titan", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
    libNtve_gf_AICast(lv_flankingTitan, OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(977)));
    UnitGroupLoopBegin(AIGetAllEscorts(lv_flankingTitan));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1063)));
        }
        else {
            libNtve_gf_AICast(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitFromId(1053)));
        }
    }
    UnitGroupLoopEnd();
    Wait(25.0, c_timeReal);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
    AIAttackWaveSetTargetUnitGroup(14, gv_marines);
    autoEC48C258_n = 2;
    for (autoEC48C258_i = 1; autoEC48C258_i <= autoEC48C258_n; autoEC48C258_i += 1) {
        auto73D59C1C_n = (gv_spawnFactor * 2);
        for (auto73D59C1C_i = 1; auto73D59C1C_i <= auto73D59C1C_n; auto73D59C1C_i += 1) {
            gf_WaveSpawnAroundMarines("ZombieLevel22", 50.0, 1);
            Wait(0.2, c_timeReal);
            gf_WaveSpawnAroundMarines("InfestorTerran2", 50.0, 2);
            AIAttackWaveSend(14, 0, false);
        }
        Wait(5.0, c_timeReal);
    }
    Wait(12.0, c_timeReal);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
    TriggerExecute(gt_ACW5HeadtotheLab, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW4MindlessHordes_Init () {
    gt_ACW4MindlessHordes = TriggerCreate("gt_ACW4MindlessHordes_Func");
    TriggerEnable(gt_ACW4MindlessHordes, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW5 - Head to the Lab
//--------------------------------------------------------------------------------------------------
bool gt_ACW5HeadtotheLab_Func (bool testConds, bool runActions) {
    int auto6080DD9E_n;
    int auto6080DD9E_i;
    int auto2CF64351_n;
    int auto2CF64351_i;
    int auto6B0DEB28_n;
    int auto6B0DEB28_i;
    int auto513F9B0C_n;
    int auto513F9B0C_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 5;
    gv_hitPar = 45;
    gf_AwardPlayerXPNOTD(2);
    TriggerEnable(gt_ACBoss2SpawnCronus, true);
    UnitAbilityEnable(UnitFromId(1857), "ShopShare", false);
    UnitRemove(UnitFromId(2505));
    UnitRemove(UnitFromId(2502));
    UnitRemove(UnitFromId(2504));
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/F70ACB5B"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(91)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(24)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
    ObjectiveCreate(StringExternal("Param/Value/79D4897B"), StringExternal("Param/Value/42D8E88F"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/E9CE8414"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/9E25ED5C"));
    SoundPlay(SoundLink("UI_Horner05sTerminalButton", -1), PlayerGroupAll(), 250.0, 0.0);
    TriggerEnable(gt_ACEnterLabNorthGate, true);
    TriggerEnable(gt_ACEnterScrapyardGate, true);
    TriggerEnable(gt_ACEnterSiteAlphaGate, true);
    TriggerEnable(gt_ACEnterApolloDockGate, true);
    TriggerEnable(gt_ACEnterApolloReactorGate, true);
    TriggerEnable(gt_Wave4EnterAirlockNorthGate, true);
    TriggerEnable(gt_Wave4EnterAirlockBackupGate, true);
    auto6080DD9E_n = 3;
    for (auto6080DD9E_i = 1; auto6080DD9E_i <= auto6080DD9E_n; auto6080DD9E_i += 1) {
        auto2CF64351_n = (gv_spawnFactor * 2);
        for (auto2CF64351_i = 1; auto2CF64351_i <= auto2CF64351_n; auto2CF64351_i += 1) {
            gf_SmartSpawnNOTD("Immortal22", 35.0);
            Wait(0.1, c_timeReal);
        }
        Wait(3.0, c_timeReal);
    }
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/53B8381E"));
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 5.0))), c_orderQueueReplace);
    auto6B0DEB28_n = gv_spawnFactor;
    for (auto6B0DEB28_i = 1; auto6B0DEB28_i <= auto6B0DEB28_n; auto6B0DEB28_i += 1) {
        gf_SmartSpawnNOTD("Slasher2", 60.0);
        Wait(0.1, c_timeReal);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DA815637"));
    Wait(5.9, c_timeReal);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/E3A8B054"));
    auto513F9B0C_n = 750;
    for (auto513F9B0C_i = 1; auto513F9B0C_i <= auto513F9B0C_n; auto513F9B0C_i += 1) {
        Wait(3.0, c_timeReal);
        UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 5.0))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW5HeadtotheLab_Init () {
    gt_ACW5HeadtotheLab = TriggerCreate("gt_ACW5HeadtotheLab_Func");
    TriggerEnable(gt_ACW5HeadtotheLab, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Enter Scrapyard Gate
//--------------------------------------------------------------------------------------------------
bool gt_ACEnterScrapyardGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(197), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(24), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_MarineSpeechNOTD(EventUnit(), StringExternal("Param/Value/6C371B25"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACEnterScrapyardGate_Init () {
    gt_ACEnterScrapyardGate = TriggerCreate("gt_ACEnterScrapyardGate_Func");
    TriggerEnable(gt_ACEnterScrapyardGate, false);
    TriggerAddEventUnitRegion(gt_ACEnterScrapyardGate, null, RegionFromId(24), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Enter Lab North Gate
//--------------------------------------------------------------------------------------------------
bool gt_ACEnterLabNorthGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(828), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(91), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACEnterLabNorthGate_Init () {
    gt_ACEnterLabNorthGate = TriggerCreate("gt_ACEnterLabNorthGate_Func");
    TriggerEnable(gt_ACEnterLabNorthGate, false);
    TriggerAddEventUnitRegion(gt_ACEnterLabNorthGate, null, RegionFromId(91), true);
    TriggerAddEventUnitRegion(gt_ACEnterLabNorthGate, null, RegionFromId(91), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Enter Site Alpha Gate
//--------------------------------------------------------------------------------------------------
bool gt_ACEnterSiteAlphaGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(29), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACEnterSiteAlphaGate_Init () {
    gt_ACEnterSiteAlphaGate = TriggerCreate("gt_ACEnterSiteAlphaGate_Func");
    TriggerEnable(gt_ACEnterSiteAlphaGate, false);
    TriggerAddEventUnitRegion(gt_ACEnterSiteAlphaGate, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_ACEnterSiteAlphaGate, null, RegionFromId(45), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Enter Apollo Dock Gate
//--------------------------------------------------------------------------------------------------
bool gt_ACEnterApolloDockGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(620), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACEnterApolloDockGate_Init () {
    gt_ACEnterApolloDockGate = TriggerCreate("gt_ACEnterApolloDockGate_Func");
    TriggerEnable(gt_ACEnterApolloDockGate, false);
    TriggerAddEventUnitRegion(gt_ACEnterApolloDockGate, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_ACEnterApolloDockGate, null, RegionFromId(11), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Enter Apollo Reactor Gate
//--------------------------------------------------------------------------------------------------
bool gt_ACEnterApolloReactorGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(827), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(90), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACEnterApolloReactorGate_Init () {
    gt_ACEnterApolloReactorGate = TriggerCreate("gt_ACEnterApolloReactorGate_Func");
    TriggerEnable(gt_ACEnterApolloReactorGate, false);
    TriggerAddEventUnitRegion(gt_ACEnterApolloReactorGate, null, RegionFromId(90), true);
    TriggerAddEventUnitRegion(gt_ACEnterApolloReactorGate, null, RegionFromId(90), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Boss 2 Spawn (Cronus)
//--------------------------------------------------------------------------------------------------
bool gt_ACBoss2SpawnCronus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomNum;
    point lv_gunjanPoint;

    // Variable Initialization
    lv_randomNum = RandomInt(0, 1);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardPlayerXPNOTD(3);
    gv_aCSpawnHalt = true;
    UnitFlashSelection(EventUnit(), 0.5);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/A5023862"), 3.5, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_ghostCompany, UnitGroupLoopCurrent());
        UnitGroupRemove(gv_secTeamAMarines, UnitGroupLoopCurrent());
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), true);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(81))), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    Wait(5.5, c_timeReal);
    gf_ClearZombieWave();
    UnitGroupLoopBegin(gv_ghostCompany);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), false);
    }
    UnitGroupLoopEnd();
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_drTanaka, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterDrTanaka, StringExternal("Param/Value/5DABC5A9"), 2.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.5, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_drGunjan, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/7AC63ABC"), StringExternal("Param/Value/1E19C195"), 3.9, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_drTanaka, StringExternal("Param/Value/D7FA3092"));
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_drGunjan, StringExternal("Param/Value/F6BC82F1"));
    UnitIssueOrder(gv_drGunjan, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionFromId(67))), c_orderQueueReplace);
    SoundPlay(SoundLink("InfestationSpire_What", -1), PlayerGroupAll(), 100.0, 0.0);
    ActorSend(libNtve_gf_MainActorofUnit(gv_drGunjan), "Signal Grow");
    Wait(1.0, c_timeReal);
    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("TTychus01Raynor00012", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("THorner05SRaynor00051", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    Wait(1.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/ED84D1E8"));
    SoundPlay(SoundLink("InfestationPit_What", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_drTanaka, StringExternal("Param/Value/A8040132"));
    UnitBehaviorAddPlayer(gv_drTanaka, "Scared", 0, 1);
    UnitIssueOrder(gv_drTanaka, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(177))), c_orderQueueReplace);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(gv_drGunjan));
    lv_gunjanPoint = UnitGetPosition(gv_drGunjan);
    gv_bossFight = true;
    Wait(0.5, c_timeGame);
    UnitKill(gv_drGunjan);
    UnitRemove(gv_drGunjan);
    UnitCreate(1, "Cronus", 0, 14, lv_gunjanPoint, libNtve_gf_RandomAngle());
    gv_cronus = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, gv_cronus);
    if ((gv_alivePlayers < 5)) {
        UnitSetPropertyFixed(gv_cronus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_cronus, c_unitPropLifeMax, c_unitPropCurrent) * 0.5));
    }
    else if ((gv_alivePlayers < 3)) {
        UnitSetPropertyFixed(gv_cronus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_cronus, c_unitPropLifeMax, c_unitPropCurrent) * 0.35));
    }
    libNtve_gf_ChangeUnitDamage(gv_cronus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    ObjectiveDestroy(gv_primaryObjective);
    TriggerEnable(gt_ACCronusKilled, true);
    gv_currentBoss = "Cronus";
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_cronus, ge_Ping_Enabled);
    Wait(3.9, c_timeReal);
    libNtve_gf_ChangeUnitDamage(gv_cronus, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/586C0FCE"));
    Wait(5.0, c_timeReal);
    gf_TipNOTD(10000, StringExternal("Param/Value/275382AF"));
    Wait(5.0, c_timeGame);
    gf_MarineSpeechNOTD(gv_drTanaka, StringExternal("Param/Value/29BCFD8F"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/0535EF66"));
    while ((UnitIsAlive(gv_cronus) == true)) {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/C7813FD7"));
        if ((gv_nightmare == false)) {
            if ((RandomInt(0, 1) == 1)) {
                UnitCreateEffectUnit(gv_cronus, "CronusInitial", gv_cronus);
            }
            else {
                UnitCreateEffectUnit(gv_cronus, "CronusInitialAnticlockwise", gv_cronus);
            }
        }
        else {
            if ((RandomInt(0, 1) == 1)) {
                UnitCreateEffectUnit(gv_cronus, "CronusInitial", gv_cronus);
                Wait(7.0, c_timeGame);
                UnitCreateEffectUnit(gv_cronus, "CronusInitialAnticlockwise", gv_cronus);
            }
            else {
                UnitCreateEffectUnit(gv_cronus, "CronusInitialAnticlockwise", gv_cronus);
                Wait(7.0, c_timeGame);
                UnitCreateEffectUnit(gv_cronus, "CronusInitial", gv_cronus);
            }
        }
        Wait(30.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACBoss2SpawnCronus_Init () {
    gt_ACBoss2SpawnCronus = TriggerCreate("gt_ACBoss2SpawnCronus_Func");
    TriggerEnable(gt_ACBoss2SpawnCronus, false);
    TriggerAddEventUnitRegion(gt_ACBoss2SpawnCronus, null, RegionFromId(67), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Cronus Killed
//--------------------------------------------------------------------------------------------------
bool gt_ACCronusKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_possibleEscorts;
    unit lv_escortUnit;

    // Variable Initialization
    lv_possibleEscorts = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossAfterAction();
    gf_UnifiedAwards(7, 300.0, libNtve_gf_DifficultyValueInt(0, 50, 150, 0), 0, 1);
    UnitIssueOrder(gv_drTanaka, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(168))), c_orderQueueReplace);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
    gv_aCSpawnHalt = false;
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/F32B148A"));
    Wait(5.0, c_timeReal);
    UnitBehaviorRemove(gv_drTanaka, "Scared", 1);
    gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/DC7774F5"));
    Wait(5.0, c_timeReal);
    while (!((DistanceBetweenPoints(libNtve_gf_CenterOfUnitGroup(gv_marines), RegionGetCenter(RegionFromId(164))) < 18.0))) {
        Wait(1.0, c_timeGame);
    }
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/5291F0C6"));
    UnitGroupLoopBegin(gv_ghostCompany);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        libNtve_gf_ShowHideUnit(UnitGroupLoopCurrent(), true);
        libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), false);
        UnitGroupAdd(gv_secTeamAMarines, UnitGroupLoopCurrent());
        UnitGroupRemove(gv_ghostCompany, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    AIAttackWaveSetTargetEscort(9, gv_marines, 2);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "Marksman") && (UnitGetType(UnitGroupLoopCurrent()) != "Spectre")) {
            UnitGroupAdd(lv_possibleEscorts, UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        AISetUnitScriptControlled(UnitGroupLoopCurrent(), false);
        if ((UnitGroupCount(lv_possibleEscorts, c_unitCountAlive) > 0)) {
            lv_escortUnit = UnitGroupRandomUnit(lv_possibleEscorts, c_unitCountAlive);
        }
        else {
            lv_escortUnit = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
        }
        AIAttackWaveAddEscortUnit(9, UnitGroupLoopCurrent(), lv_escortUnit, RandomFixed(2.0, 3.0), libNtve_gf_RandomAngle());
    }
    UnitGroupLoopEnd();
    AIAttackWaveSend(9, 0, false);
    Wait(3.5, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/99C9601E"));
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ACC2Initialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACCronusKilled_Init () {
    gt_ACCronusKilled = TriggerCreate("gt_ACCronusKilled_Func");
    TriggerEnable(gt_ACCronusKilled, false);
    TriggerAddEventUnitDied(gt_ACCronusKilled, UnitRefFromVariable("gv_cronus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACC2 Initialize
//--------------------------------------------------------------------------------------------------
bool gt_ACC2Initialize_Func (bool testConds, bool runActions) {
    // Variable Declarations
    revealer[10] lv_localRevealer;
    unitgroup lv_windowZombies;
    unit lv_mysteryZombie;

    // Variable Initialization
    lv_windowZombies = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_drTanakaLabWorkPoints[1] = PointFromId(2392);
    gv_drTanakaLabWorkPoints[2] = PointFromId(2393);
    gv_drTanakaLabWorkPoints[3] = PointFromId(2394);
    gv_drTanakaLabWorkPoints[4] = PointFromId(2395);
    gv_drTanakaLabWorkPoints[5] = PointFromId(2396);
    gv_drTanakaLabWorkPoints[6] = PointFromId(2397);
    UnitSetScale(gv_tartarusCocoon, 300.0, 300.0, 300.0);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue005", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerExecute(gt_ChapterEndMedicRatingBonus, true, false);
    TriggerExecute(gt_VetPugGameBonus, true, false);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2214)), c_orderQueueReplace);
    Wait(5.5, c_timeReal);
    TriggerExecute(gt_NightmareBonus, true, false);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2214)), c_orderQueueReplace);
    Wait(2.5, c_timeReal);
    UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1069)), c_orderQueueReplace);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/D0B0D033"), StringExternal("Param/Value/CC834827"));
    Wait(5.9, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B278CAA4"));
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaAll);
    Wait(1.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/94308139"));
    Wait(4.0, c_timeReal);
    SoundPlay(SoundLink("Event_Hanson02ZombieHowl", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(0.8, c_timeReal);
    gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/6211EBBF"));
    Wait(5.5, c_timeReal);
    UnitCreate(1, "LaserRifle", 0, 0, RegionRandomPoint(RegionFromId(168)), libNtve_gf_RandomAngle());
    Wait(0.1, c_timeReal);
    UnitCreate(1, "M5PulseRifle", 0, 0, RegionRandomPoint(RegionFromId(168)), libNtve_gf_RandomAngle());
    TriggerExecute(gt_ACC2ItemSpawn, true, false);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/781216FF"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_drTanaka, StringExternal("Param/Value/DD87059E"));
    TriggerExecute(gt_ACW6GuardDrTanakaatLab, true, false);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/1DEADE8E"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_drTanaka, StringExternal("Param/Value/F9A1B8C3"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACC2Initialize_Init () {
    gt_ACC2Initialize = TriggerCreate("gt_ACC2Initialize_Func");
    TriggerEnable(gt_ACC2Initialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACC2 - Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_ACC2ItemSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_magazineSpawn;

    // Variable Initialization
    lv_magazineSpawn = 15;

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/2DCF8FF4"));
    if ((gv_nightmare == true)) {
        lv_magazineSpawn = 21;
        gf_CreateItemNOTD("Helium3Canister", 2);
    }

    gf_CreateItemNOTD("Magazine", lv_magazineSpawn);
    gf_CreateItemNOTD("AmmoBox", 2);
    if ((gv_navyCrossMode == false)) {
        gf_CreateItemNOTD("Medpack", 8);
    }

    if ((gv_noNewbie == true)) {
        gf_CreateItemNOTD("LaserRifle", 1);
        gf_CreateItemNOTD("BarrettM112", 1);
        gf_CreateItemNOTD("Chaingun", 1);
        gf_CreateItemNOTD("Helium3Canister", 3);
        gf_CreateItemNOTD("StingerMK3", 2);
    }
    else {
        gf_CreateItemNOTD("LaserRifle", 3);
        gf_CreateItemNOTD("Helium3Canister", 2);
    }
    gf_CreateItemNOTD("OccularImplants", 2);
    gf_CreateItemNOTD("ThermalSight", 1);
    gf_CreateItemNOTD("PersonnelArcReactor", 2);
    gf_CreateItemNOTD("CombatMobilityAugment", 1);
    gf_CreateItemNOTD("C4Armor", 1);
    gf_CreateItemNOTD("C6Armor", 1);
    gf_CreateItemNOTD("XS4Armor", 1);
    gf_CreateItemNOTD("Shotgun", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACC2ItemSpawn_Init () {
    gt_ACC2ItemSpawn = TriggerCreate("gt_ACC2ItemSpawn_Func");
    TriggerEnable(gt_ACC2ItemSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tanaka Terminal Speech
//--------------------------------------------------------------------------------------------------
bool gt_TanakaTerminalSpeech_Func (bool testConds, bool runActions) {
    int auto646BD0C5_val;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitFlashSelection(gv_drTanaka, 12.0);
    auto646BD0C5_val = RandomInt(1, 5);
    if (auto646BD0C5_val == 1) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/DFA29CF3"));

    }
    else if (auto646BD0C5_val == 2) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/DBE3712C"));

    }
    else if (auto646BD0C5_val == 3) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/3F4AD3BB"));

    }
    else if (auto646BD0C5_val == 4) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/9EA748D6"));

    }
    else if (auto646BD0C5_val == 5) {
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/65AAB098"));

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TanakaTerminalSpeech_Init () {
    gt_TanakaTerminalSpeech = TriggerCreate("gt_TanakaTerminalSpeech_Func");
    TriggerEnable(gt_TanakaTerminalSpeech, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW6 - Guard Dr Tanaka at Lab
//--------------------------------------------------------------------------------------------------
bool gt_ACW6GuardDrTanakaatLab_Func (bool testConds, bool runActions) {
    int autoBEA7991A_n;
    int autoBEA7991A_i;
    int auto88AFF1EB_n;
    int auto88AFF1EB_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 6;
    gv_hitPar = 50;
    TriggerEnable(gt_ACDrTanakaDeath, true);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/C9FB5942"), StringExternal("Param/Value/3205EB83"), 18.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/9190998C"), StringExternal("Param/Value/C945191D"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    UnitSetOwner(gv_drTanaka, 9, false);
    libNtve_gf_ChangeUnitDamage(gv_drTanaka, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    libNtve_gf_MakeUnitInvulnerable(gv_drTanaka, false);
    UnitSetState(gv_drTanaka, c_unitStateStoppable, false);
    TriggerEnable(gt_TanakaInjured, true);
    Wait(9.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E01AD6B0"));
    UnitBehaviorAdd(gv_drTanaka, "TalkAnimation", gv_drTanaka, 1);
    Wait(9.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/B89563E2"));
    gf_TipNOTD(5000, StringExternal("Param/Value/EAE4AD6B"));
    Wait(5.0, c_timeReal);
    autoBEA7991A_n = 3;
    for (autoBEA7991A_i = 1; autoBEA7991A_i <= autoBEA7991A_n; autoBEA7991A_i += 1) {
        auto88AFF1EB_n = (gv_spawnFactor * 2);
        for (auto88AFF1EB_i = 1; auto88AFF1EB_i <= auto88AFF1EB_n; auto88AFF1EB_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Stalker2", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
            if ((RandomInt(0, 6) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            }

        }
        Wait(4.0, c_timeReal);
        if ((RandomInt(0, 2) != 1)) {
            gf_TanakaTerminalSpeech();
            UnitBehaviorRemove(gv_drTanaka, "TalkAnimation", 1);
            Wait(2.0, c_timeReal);
            UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), gv_drTanakaLabWorkPoints[RandomInt(1, 6)]), c_orderQueueReplace);
        }

    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/CF795EB0"));
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_ACW7GuardDrTanakaatLabPart2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW6GuardDrTanakaatLab_Init () {
    gt_ACW6GuardDrTanakaatLab = TriggerCreate("gt_ACW6GuardDrTanakaatLab_Func");
    TriggerEnable(gt_ACW6GuardDrTanakaatLab, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW7 - Guard Dr Tanaka at Lab Part 2
//--------------------------------------------------------------------------------------------------
bool gt_ACW7GuardDrTanakaatLabPart2_Func (bool testConds, bool runActions) {
    int auto343F7E1C_n;
    int auto343F7E1C_i;
    int autoA2F99201_n;
    int autoA2F99201_i;
    int auto729C1216_n;
    int auto729C1216_i;
    int auto1BE43FDD_n;
    int auto1BE43FDD_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 7;
    gv_hitPar = 50;
    gf_AwardPlayerXPNOTD(3);
    TriggerExecute(gt_AutoSave, true, false);
    Wait(10.0, c_timeReal);
    UnitBehaviorAdd(gv_drTanaka, "TalkAnimation", gv_drTanaka, 1);
    gf_MarineSpeechNOTD(gv_drTanaka, StringExternal("Param/Value/8B3F7459"));
    if ((RandomInt(0, 7) == 1)) {
        auto343F7E1C_n = 4;
        for (auto343F7E1C_i = 1; auto343F7E1C_i <= auto343F7E1C_n; auto343F7E1C_i += 1) {
            autoA2F99201_n = (gv_spawnFactor * 1);
            for (autoA2F99201_i = 1; autoA2F99201_i <= autoA2F99201_n; autoA2F99201_i += 1) {
                if ((RandomInt(0, 2) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "BrainBug2", 0, 14, RegionRandomPoint(gv_labSpawn[RandomInt(1, 5)]), RegionRandomPoint(RegionFromId(29)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBrainBug", 0)), c_orderQueueReplace);
                    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                }

                Wait(0.5, c_timeReal);
                if ((RandomInt(0, 5) == 1) && ((gv_noNewbie == true) && (gv_alivePlayers > 1))) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Hugger2", 0, 13, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(2, "HulkBurrowed", 0, 14, RegionRandomPoint(gv_labSpawn[RandomInt(1, 5)]), RegionRandomPoint(RegionFromId(29)));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
                }
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.2, c_timeReal);
            }
            Wait(12.0, c_timeReal);
            if ((RandomInt(0, 2) != 1)) {
                gf_TanakaTerminalSpeech();
                UnitBehaviorRemove(gv_drTanaka, "TalkAnimation", 1);
                Wait(2.0, c_timeReal);
                UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), gv_drTanakaLabWorkPoints[RandomInt(1, 6)]), c_orderQueueReplace);
            }

        }
    }
    else if (true) {
        auto729C1216_n = 4;
        for (auto729C1216_i = 1; auto729C1216_i <= auto729C1216_n; auto729C1216_i += 1) {
            auto1BE43FDD_n = (gv_spawnFactor * 2);
            for (auto1BE43FDD_i = 1; auto1BE43FDD_i <= auto1BE43FDD_n; auto1BE43FDD_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel22", 0, 14, RegionRandomPoint(gv_labSpawn[RandomInt(1, 5)]), RegionRandomPoint(RegionFromId(29)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.2, c_timeReal);
                if (((gv_noNewbie == true) && (gv_alivePlayers > 1)) && (RandomInt(0, 10) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Hugger2", 0, 13, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
                }
                else {
                    libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel22", 0, 14, RegionRandomPoint(gv_labSpawn[RandomInt(1, 5)]), RegionRandomPoint(RegionFromId(29)));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
                }
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.2, c_timeReal);
            }
            Wait(12.0, c_timeReal);
            if ((RandomInt(0, 1) == 1)) {
                gf_TanakaTerminalSpeech();
                UnitBehaviorRemove(gv_drTanaka, "TalkAnimation", 1);
                Wait(2.0, c_timeReal);
                UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), gv_drTanakaLabWorkPoints[RandomInt(1, 6)]), c_orderQueueReplace);
            }

        }
    }
    Wait(10.0, c_timeReal);
    TriggerExecute(gt_ACW8ZombieInvasion, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW7GuardDrTanakaatLabPart2_Init () {
    gt_ACW7GuardDrTanakaatLabPart2 = TriggerCreate("gt_ACW7GuardDrTanakaatLabPart2_Func");
    TriggerEnable(gt_ACW7GuardDrTanakaatLabPart2, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW8 - Zombie Invasion!
//--------------------------------------------------------------------------------------------------
bool gt_ACW8ZombieInvasion_Func (bool testConds, bool runActions) {
    int autoB5FC285D_n;
    int autoB5FC285D_i;
    int autoFB29BFC1_n;
    int autoFB29BFC1_i;
    int autoF25BCD88_n;
    int autoF25BCD88_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 8;
    gv_hitPar = 55;
    gf_AwardPlayerXPNOTD(3);
    gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/CB734693"));
    UnitBehaviorAdd(gv_drTanaka, "TalkAnimation", gv_drTanaka, 1);
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/04F0C35D"));
    Wait(3.0, c_timeReal);
    autoB5FC285D_n = (gv_spawnFactor * 3);
    for (autoB5FC285D_i = 1; autoB5FC285D_i <= autoB5FC285D_n; autoB5FC285D_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Blindling2", 0, 14, RegionRandomPoint(gv_labSpawn[RandomInt(1, 5)]), RegionRandomPoint(RegionFromId(29)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBlindling", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeReal);
    }
    autoFB29BFC1_n = 3;
    for (autoFB29BFC1_i = 1; autoFB29BFC1_i <= autoFB29BFC1_n; autoFB29BFC1_i += 1) {
        autoF25BCD88_n = (gv_spawnFactor * 3);
        for (autoF25BCD88_i = 1; autoF25BCD88_i <= autoF25BCD88_n; autoF25BCD88_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "SeekerBurrowed", 0, 14, RegionRandomPoint(gv_labSpawn[RandomInt(1, 5)]), RegionRandomPoint(RegionFromId(29)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, "HulkBurrowed", 0, 14, RegionRandomPoint(gv_labSpawn[RandomInt(1, 5)]), RegionRandomPoint(RegionFromId(29)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
        }
        Wait(12.0, c_timeReal);
        if ((RandomInt(0, 1) == 1)) {
            gf_TanakaTerminalSpeech();
            UnitBehaviorRemove(gv_drTanaka, "TalkAnimation", 1);
            Wait(2.0, c_timeReal);
            UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), gv_drTanakaLabWorkPoints[RandomInt(1, 6)]), c_orderQueueReplace);
        }

    }
    gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/22C15AFE"));
    gv_aCSpawnRespite = true;
    UnitBehaviorAdd(gv_drTanaka, "TalkAnimation", gv_drTanaka, 1);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ACW9ChaseDrTanakaPoisonGas, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW8ZombieInvasion_Init () {
    gt_ACW8ZombieInvasion = TriggerCreate("gt_ACW8ZombieInvasion_Func");
    TriggerEnable(gt_ACW8ZombieInvasion, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW9 - Chase Dr Tanaka (Poison Gas)
//--------------------------------------------------------------------------------------------------
bool gt_ACW9ChaseDrTanakaPoisonGas_Func (bool testConds, bool runActions) {
    int auto6058E8C6_n;
    int auto6058E8C6_i;
    int autoD7DCD782_n;
    int autoD7DCD782_i;
    int auto7F6A7DE6_n;
    int auto7F6A7DE6_i;
    int autoDF0D0E25_n;
    int autoDF0D0E25_i;
    int autoCC03668F_n;
    int autoCC03668F_i;
    int auto795AE7DE_n;
    int auto795AE7DE_i;
    int auto8C21FA9B_n;
    int auto8C21FA9B_i;

    // Variable Declarations
    unit lv_unittoFollow;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_TanakaInjured, false);
    TriggerEnable(gt_ACDrTanakaDeath, false);
    TriggerStop(gt_TanakaInjured);
    gv_wave = 9;
    gv_hitPar = 60;
    gf_AwardPlayerXPNOTD(2);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_CenterOfUnitGroup(gv_marines)), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/C15230BC"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(4.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_ltSheng, StringExternal("Param/Value/54524404"));
    UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), gv_drTanakaLabWorkPoints[1]), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(gv_drTanaka, true);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(gv_drTanaka, StringExternal("Param/Value/05848868"));
    Wait(3.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/CC1A343B"));
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B9AE8010"));
    Wait(5.5, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/7314D1E2"));
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/FD389ACD"));
    SoundPlay(SoundLink("TUI_ArmoryConsolePurchase", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitSetOwner(gv_drTanaka, 0, false);
    Wait(4.5, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/454C01B2"));
    UnitBehaviorRemove(gv_drTanaka, "TalkAnimation", 1);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)])), c_orderQueueReplace);
    gf_RadioNOTD(gv_characterLieutenantSheng, StringExternal("Param/Value/90DC517F"));
    libNtve_gf_MakeUnitInvulnerable(gv_ltSheng, false);
    UnitBehaviorAddPlayer(gv_drTanaka, "Run", 0, 1);
    UnitBehaviorAddPlayer(gv_drTanaka, "SpeedBuff35", 0, 1);
    UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)])), c_orderQueueReplace);
    SoundPlay(SoundLink("Raven_AutoTurretReleaseImpact", -1), PlayerGroupActive(), 100.0, 0.0);
    GameSetLighting("NOTDPoisonGas", 5.0);
    gf_ClearZombieWave();
    Wait(2.0, c_timeReal);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            lv_unittoFollow = gv_marineHero[IntLoopCurrent()];
        }
        else if ((UnitIsAlive(gv_playerPet[IntLoopCurrent()]) == true)) {
            lv_unittoFollow = gv_playerPet[IntLoopCurrent()];
        }
        UnitSetPosition(lv_unittoFollow, RegionRandomPoint(gv_cityRescue[RandomInt(1, 9)]), false);
        if ((gv_x1Guardian[IntLoopCurrent()] != null)) {
            UnitSetPosition(gv_x1Guardian[IntLoopCurrent()], RegionRandomPoint(RegionCircle(UnitGetPosition(lv_unittoFollow), 2.2)), false);
        }

        UnitGroupLoopBegin(gv_mobileInfantryGroup[IntLoopCurrent()]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_unittoFollow), 2.2)), false);
        }
        UnitGroupLoopEnd();
        CameraFollowUnitGroup(IntLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(lv_unittoFollow), true, false);
        CameraLockInput(IntLoopCurrent(), true);
        gv_fPS[IntLoopCurrent()] = true;
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionXY, 0.03, 2.0, 100.0, 3.0);
    }
    IntLoopEnd();
    SoundPlay(SoundLink("TScene11Warfield008", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeGame);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/12972B90"));
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_fPS[IntLoopCurrent()] == true)) {
            CameraSetValue(IntLoopCurrent(), c_cameraValueDistance, 7.8, 3.0, -1, 10);
            CameraSetValue(IntLoopCurrent(), c_cameraValuePitch, 45.0, 3.0, -1, 10);
            CameraSetValue(IntLoopCurrent(), c_cameraValueFieldOfView, 75.0, 3.0, -1, 10);
            CameraSetValue(IntLoopCurrent(), c_cameraValueFarClip, 45.0, 0.0, -1, 10);
            UnitSetState(gv_marineHero[IntLoopCurrent()], c_unitStateStatusBar, false);
            if ((gv_x1Guardian[IntLoopCurrent()] != null)) {
                UnitSetState(gv_x1Guardian[IntLoopCurrent()], c_unitStateStatusBar, false);
            }

            if ((gv_playerPet[IntLoopCurrent()] != null)) {
                UnitSetState(gv_playerPet[IntLoopCurrent()], c_unitStateStatusBar, false);
            }

            if ((gv_reaperMK13[IntLoopCurrent()] != null)) {
                UnitSetState(gv_reaperMK13[IntLoopCurrent()], c_unitStateStatusBar, false);
            }

        }

    }
    IntLoopEnd();
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ForwardObserver")) {
            UnitAbilityEnable(UnitGroupLoopCurrent(), "TX179Asgard", false);
        }

    }
    UnitGroupLoopEnd();
    gf_GasCameraCycle();
    Wait(5.0, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/A3EF6D27"));
    SoundPlay(SoundLink("TScene11Marine001", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/A62AD186"));
    UnitGroupLoopBegin(gv_secTeamAMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    auto6058E8C6_n = 3;
    for (auto6058E8C6_i = 1; auto6058E8C6_i <= auto6058E8C6_n; auto6058E8C6_i += 1) {
        autoD7DCD782_n = (gv_spawnFactor * 2);
        for (autoD7DCD782_i = 1; autoD7DCD782_i <= autoD7DCD782_n; autoD7DCD782_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel1", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            UnitSetState(UnitGroupLoopCurrent(), c_unitStateStatusBar, false);
            Wait(0.2, c_timeReal);
            UnitCreate(1, "Parasite", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), libNtve_gf_RandomAngle());
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
        }
        Wait(2.8, c_timeReal);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/3A87B2C9"));
    auto7F6A7DE6_n = 2;
    for (auto7F6A7DE6_i = 1; auto7F6A7DE6_i <= auto7F6A7DE6_n; auto7F6A7DE6_i += 1) {
        autoDF0D0E25_n = (gv_spawnFactor * 1);
        for (autoDF0D0E25_i = 1; autoDF0D0E25_i <= autoDF0D0E25_n; autoDF0D0E25_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            Wait(0.2, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
            Wait(0.2, c_timeReal);
        }
        Wait(4.7, c_timeReal);
    }
    autoCC03668F_n = 3;
    for (autoCC03668F_i = 1; autoCC03668F_i <= autoCC03668F_n; autoCC03668F_i += 1) {
        auto795AE7DE_n = (gv_spawnFactor * 2);
        for (auto795AE7DE_i = 1; auto795AE7DE_i <= auto795AE7DE_n; auto795AE7DE_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionRandomPoint(RegionFromId(29)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
            libNtve_gf_UnitCreateFacingPoint(1, "Parasite", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionRandomPoint(RegionFromId(29)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeReal);
        }
        Wait(2.8, c_timeReal);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/25A13A94"));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/A37105E0"), StringExternal("Param/Value/56A9AA5D"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/81FAFE7F"));
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_ACW10ShowdownatEvacPoint, true, false);
    auto8C21FA9B_n = gv_spawnFactor;
    for (auto8C21FA9B_i = 1; auto8C21FA9B_i <= auto8C21FA9B_n; auto8C21FA9B_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        Wait(0.3, c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        Wait(0.3, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW9ChaseDrTanakaPoisonGas_Init () {
    gt_ACW9ChaseDrTanakaPoisonGas = TriggerCreate("gt_ACW9ChaseDrTanakaPoisonGas_Func");
    TriggerEnable(gt_ACW9ChaseDrTanakaPoisonGas, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tanaka Injured
//--------------------------------------------------------------------------------------------------
bool gt_TanakaInjured_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) < 15.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/CEEBC8A4"));
    SoundPlay(SoundLink("Heartbeat", -1), PlayerGroupAll(), 200.0, 0.0);
    gf_AwardRatingNOTD(-4);
    gf_AwardKarmaNOTD(-2);
    TriggerExecute(gt_AutoSave, true, false);
    libNtve_gf_MakeUnitInvulnerable(gv_drTanaka, true);
    UnitSetPropertyFixed(gv_drTanaka, c_unitPropLifeRegen, 15.0);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionCircle(UnitGetPosition(gv_drTanaka), 3.5), 5.0, false);
    }
    IntLoopEnd();
    Wait(5.9, c_timeReal);
    UnitSetPropertyFixed(gv_drTanaka, c_unitPropLifeRegen, 0.3);
    libNtve_gf_MakeUnitInvulnerable(gv_drTanaka, false);
    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TanakaInjured_Init () {
    gt_TanakaInjured = TriggerCreate("gt_TanakaInjured_Func");
    TriggerEnable(gt_TanakaInjured, false);
    TriggerAddEventUnitDamaged(gt_TanakaInjured, UnitRefFromVariable("gv_drTanaka"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW10 - Showdown at Evac Point
//--------------------------------------------------------------------------------------------------
bool gt_ACW10ShowdownatEvacPoint_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tanakasExitChoice;
    fixed lv_eVACTime;

    // Variable Initialization
    lv_tanakasExitChoice = RandomInt(1, 3);
    lv_eVACTime = 90.0;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 10;
    gv_hitPar = 70;
    gf_AwardPlayerXPNOTD(1);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/281EC738"));
    Wait(10.0, c_timeReal);
    if ((lv_tanakasExitChoice == 1)) {
        UnitSetPosition(gv_drTanaka, PointFromId(2026), false);
    }
    else if ((lv_tanakasExitChoice == 2)) {
        UnitSetPosition(gv_drTanaka, PointFromId(2405), false);
    }
    else if ((lv_tanakasExitChoice == 3)) {
        UnitSetPosition(gv_drTanaka, PointFromId(2406), false);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B0F6BFF3"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(2026), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(2405), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(2406), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
    UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_drTanaka), 5.5))), c_orderQueueReplace);
    UnitBehaviorAddPlayer(gv_drTanaka, "SpeedDebuff", 0, 2);
    Wait(1.0, c_timeReal);
    if (((gv_noNewbie == false) || (gv_squadRating < 1650) || (gv_alivePlayers < 5))) {
        lv_eVACTime = 120.0;
    }
    TimerStart(gv_bergmannEVACTimer, lv_eVACTime, false, c_timeReal);
    TimerWindowCreate(gv_bergmannEVACTimer, StringExternal("Param/Value/3A96425B"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    gv_globalTimerWindow = TimerWindowLastCreated();
    TriggerEnable(gt_ACW10TanakaIntercepted, true);
    Wait(lv_eVACTime, c_timeReal);
    TriggerEnable(gt_ACW10TanakaIntercepted, false);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    if ((gv_bergmannIntercepted == false)) {
        gf_AwardRatingNOTD(-3);
        TriggerExecute(gt_AutoSave, true, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/6A18E0FE"));
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateFailed);
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/354C27AF"));
        Wait(5.0, c_timeReal);
        gv_gameOver = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW10ShowdownatEvacPoint_Init () {
    gt_ACW10ShowdownatEvacPoint = TriggerCreate("gt_ACW10ShowdownatEvacPoint_Func");
    TriggerEnable(gt_ACW10ShowdownatEvacPoint, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW10 - Tanaka Intercepted
//--------------------------------------------------------------------------------------------------
bool gt_ACW10TanakaIntercepted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_capturer;

    // Variable Initialization
    lv_capturer = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_bergmannIntercepted = true;
    TimerPause(gv_bergmannEVACTimer, true);
    gf_RadioNOTD(PlayerName(UnitGetOwner(EventUnit())), StringExternal("Param/Value/372C3780"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitIssueOrder(gv_drTanaka, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitBehaviorRemove(gv_drTanaka, "SpeedDebuff", 2);
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/C006A89F"));
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupAll(), false);
    TimerWindowDestroy(gv_globalTimerWindow);
    TriggerExecute(gt_ACBoss3SpawnCerberus, true, false);
    while ((UnitIsAlive(gv_drTanaka) == true)) {
        Wait(2.5, c_timeReal);
        UnitIssueOrder(gv_drTanaka, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(lv_capturer), 2.0))), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW10TanakaIntercepted_Init () {
    gt_ACW10TanakaIntercepted = TriggerCreate("gt_ACW10TanakaIntercepted_Func");
    TriggerEnable(gt_ACW10TanakaIntercepted, false);
    TriggerAddEventUnitRange(gt_ACW10TanakaIntercepted, null, UnitFromId(2625), 2.5, true);
    TriggerAddEventUnitRange(gt_ACW10TanakaIntercepted, null, UnitFromId(2625), 2.5, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Boss 3 Spawn (Cerberus)
//--------------------------------------------------------------------------------------------------
bool gt_ACBoss3SpawnCerberus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/510E7564"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/9BC52B06"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TZeratul04DarkVoice00029", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "Cerberus", 0, 14, RegionRandomPoint(gv_cityRescue[RandomInt(1, 9)]), 270.0);
    gv_cerberus = UnitLastCreated();
    gv_currentBoss = "Cerberus";
    UnitGroupAdd(gv_zombieWave, gv_cerberus);
    if ((gv_alivePlayers < 5)) {
        UnitSetPropertyFixed(gv_cerberus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_cerberus, c_unitPropLifeMax, c_unitPropCurrent) * 0.55));
    }
    else if ((gv_alivePlayers < 3)) {
        UnitSetPropertyFixed(gv_cerberus, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_cerberus, c_unitPropLifeMax, c_unitPropCurrent) * 0.4));
    }
    TriggerEnable(gt_ACBoss3Killed, true);
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_cerberus, ge_Ping_Disabled);
    Wait(12.0, c_timeReal);
    SoundPlay(SoundLink("TScene11Marine005", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(25.0, c_timeGame);
    while ((UnitIsAlive(gv_cerberus) == true) && (gv_gameOver == false)) {
        UnitBehaviorAddPlayer(gv_cerberus, "CerberusPrepareChew", 14, 1);
        SoundPlay(SoundLink("Archon_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/25A58BB6"));
        Wait(5.0, c_timeGame);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/7BB52C15"));
        Wait(1.5, c_timeGame);
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            UnitBehaviorAddPlayer(gv_marineHero[IntLoopCurrent()], "ChewNonTarget", 0, 1);
            UnitBehaviorAddPlayer(gv_playerPet[IntLoopCurrent()], "ChewNonTarget", 0, 1);
        }
        IntLoopEnd();
        Wait(1.0, c_timeGame);
        UnitIssueOrder(gv_cerberus, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        while (!((UnitHasBehavior(gv_cerberus, "CerberusCharging") == false))) {
            Wait(0.5, c_timeGame);
        }
        UnitIssueOrder(gv_cerberus, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        SoundPlay(SoundLink("Archon_Explode", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0B40286E"));
        Wait(30.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACBoss3SpawnCerberus_Init () {
    gt_ACBoss3SpawnCerberus = TriggerCreate("gt_ACBoss3SpawnCerberus_Func");
    TriggerEnable(gt_ACBoss3SpawnCerberus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Boss 3 Killed
//--------------------------------------------------------------------------------------------------
bool gt_ACBoss3Killed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossAfterAction();
    gv_wave = 11;
    gf_UnifiedAwards(8, 300.0, libNtve_gf_DifficultyValueInt(0, 50, 100, 0), 0, 2);
    gv_aCSpawnRespite = false;
    GameSetLighting(gv_defaultLighting, 3.0);
    Wait(2.0, c_timeGame);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraLookAtUnit(IntLoopCurrent(), null);
        CameraLockInput(IntLoopCurrent(), false);
        CameraFollowUnitGroup(IntLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_marineHero[IntLoopCurrent()]), false, false);
        CameraFollowUnitGroup(IntLoopCurrent(), libNtve_gf_ConvertUnitToUnitGroup(gv_playerPet[IntLoopCurrent()]), false, false);
        CameraApplyInfo(IntLoopCurrent(), CameraInfoDefault(), 2.0, -1, 10, true);
        UnitSetState(gv_marineHero[IntLoopCurrent()], c_unitStateStatusBar, true);
        UnitSetState(gv_x1Guardian[IntLoopCurrent()], c_unitStateStatusBar, true);
        UnitSetState(gv_playerPet[IntLoopCurrent()], c_unitStateStatusBar, true);
        UnitSetState(gv_reaperMK13[IntLoopCurrent()], c_unitStateStatusBar, true);
        gv_fPS[IntLoopCurrent()] = false;
        if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            CameraPan(IntLoopCurrent(), UnitGetPosition(gv_marineHero[IntLoopCurrent()]), 0.0, -1, 10, false);
        }
        else if ((UnitIsAlive(gv_playerPet[IntLoopCurrent()]) == true)) {
            CameraPan(IntLoopCurrent(), UnitGetPosition(gv_playerPet[IntLoopCurrent()]), 0.0, -1, 10, false);
        }
        else if (true) {
            CameraPan(IntLoopCurrent(), UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 0.0, -1, 10, false);
        }
    }
    IntLoopEnd();
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "ForwardObserver")) {
            UnitAbilityEnable(UnitGroupLoopCurrent(), "TX179Asgard", true);
        }

    }
    UnitGroupLoopEnd();
    Wait(7.0, c_timeReal);
    TriggerExecute(gt_ACC3Initialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACBoss3Killed_Init () {
    gt_ACBoss3Killed = TriggerCreate("gt_ACBoss3Killed_Func");
    TriggerEnable(gt_ACBoss3Killed, false);
    TriggerAddEventUnitDied(gt_ACBoss3Killed, UnitRefFromVariable("gv_cerberus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACC3 Initialize
//--------------------------------------------------------------------------------------------------
bool gt_ACC3Initialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetScale(gv_tartarusCocoon, 330.0, 330.0, 330.0);
    TriggerExecute(gt_ChapterEndMedicRatingBonus, true, false);
    TriggerExecute(gt_NightmareBonus, true, false);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/B89887A7"), StringExternal("Param/Value/360E1356"), 15.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    gf_AutoSaveLong();
    gv_ventSpawnArea[1] = RegionFromId(93);
    gv_ventSpawnArea[2] = RegionFromId(94);
    gv_ventSpawnArea[3] = RegionFromId(24);
    Wait(10.0, c_timeGame);
    TriggerExecute(gt_ACW11EntertheAirlock, true, false);
    Wait(5.0, c_timeGame);
    UIHideTextCrawl(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACC3Initialize_Init () {
    gt_ACC3Initialize = TriggerCreate("gt_ACC3Initialize_Func");
    TriggerEnable(gt_ACC3Initialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW11 - Enter the Airlock
//--------------------------------------------------------------------------------------------------
bool gt_ACW11EntertheAirlock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_renegadeDialogRoll;

    // Variable Initialization
    lv_renegadeDialogRoll = RandomInt(1, 3);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 11;
    gv_hitPar = 70;
    gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/2A6A71C1"));
    Wait(4.0, c_timeReal);
    SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/3CAC2690"));
    TriggerEnable(gt_ACW11TanakaChoiceDialog, true);
    while (!((gv_tanakaDecisionMade == true))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_tanakaParagonPath == true)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E1703520"));
        Wait(6.0, c_timeReal);
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/C043C3BF"));
        Wait(6.0, c_timeReal);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", PointFromId(2480), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 60.0, 270.0);
        ObjectiveDestroy(gv_primaryObjective);
        ObjectiveCreate(StringExternal("Param/Value/C461F1E6"), StringExternal("Param/Value/17CD3B24"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
        SoundPlay(SoundLink("TValerian02BHorner00021", -1), PlayerGroupActive(), 100.0, 0.0);
        while (!((DistanceBetweenPoints(libNtve_gf_CenterOfUnitGroup(gv_marines), PointFromId(2480)) < 5.0))) {
            Wait(1.0, c_timeGame);
        }
        TriggerExecute(gt_ACW12aVentilationShaft, true, false);
    }
    else if (true) {
        if ((lv_renegadeDialogRoll == 1)) {
            gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/4A4CFC07"));
        }
        else if ((lv_renegadeDialogRoll == 2)) {
            gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/4782E35D"));
        }
        else if ((lv_renegadeDialogRoll == 3)) {
            gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B6ED2E30"));
        }
        UnitSetOwner(gv_drTanaka, 13, false);
        Wait(3.0, c_timeReal);
        libNtve_gf_MakeUnitInvulnerable(gv_drTanaka, false);
        Wait(3.0, c_timeReal);
        gf_RadioNOTD(gv_characterDrTanaka, StringExternal("Param/Value/9D226B1A"));
        Wait(3.0, c_timeReal);
        UnitKill(gv_drTanaka);
        SoundPlay(SoundLink("Stetmann_Death", -1), PlayerGroupActive(), 100.0, 0.0);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/1063A4AB"));
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/9E7BFF45"));
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C0EF7F9B"));
        TriggerExecute(gt_ACW12bComplianceNexus, true, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW11EntertheAirlock_Init () {
    gt_ACW11EntertheAirlock = TriggerCreate("gt_ACW11EntertheAirlock_Func");
    TriggerEnable(gt_ACW11EntertheAirlock, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW11 - Tanaka Choice (Dialog)
//--------------------------------------------------------------------------------------------------
bool gt_ACW11TanakaChoiceDialog_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_marineHero[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_tanakaDecisionMade = true;
    if (((EventChatMessage(false) == "a") || (EventChatMessage(false) == "A"))) {
        return true;
    }
    else if (((EventChatMessage(false) == "b") || (EventChatMessage(false) == "B"))) {
        gv_tanakaParagonPath = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW11TanakaChoiceDialog_Init () {
    gt_ACW11TanakaChoiceDialog = TriggerCreate("gt_ACW11TanakaChoiceDialog_Func");
    TriggerEnable(gt_ACW11TanakaChoiceDialog, false);
    TriggerAddEventChatMessage(gt_ACW11TanakaChoiceDialog, c_playerAny, "A", true);
    TriggerAddEventChatMessage(gt_ACW11TanakaChoiceDialog, c_playerAny, "a", true);
    TriggerAddEventChatMessage(gt_ACW11TanakaChoiceDialog, c_playerAny, "B", true);
    TriggerAddEventChatMessage(gt_ACW11TanakaChoiceDialog, c_playerAny, "b", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW12a - Ventilation Shaft
//--------------------------------------------------------------------------------------------------
bool gt_ACW12aVentilationShaft_Func (bool testConds, bool runActions) {
    int auto6C0809E5_n;
    int auto6C0809E5_i;
    int autoB0B0DFAF_n;
    int autoB0B0DFAF_i;
    int auto76997A7C_n;
    int auto76997A7C_i;
    int autoE2F3F1CC_n;
    int autoE2F3F1CC_i;
    int auto66345253_n;
    int auto66345253_i;
    int auto059C2B0A_n;
    int auto059C2B0A_i;

    // Variable Declarations
    region lv_ventArea;

    // Variable Initialization
    lv_ventArea = RegionCircle(PointFromId(2480), 9.0);

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 12;
    gv_hitPar = 70;
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C04B2617"));
    SoundPlay(SoundLink("Raven_AutoTurretReleaseLaunch", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("Raven_AutoTurretReleaseImpact", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_DisplayBossBar(7, "Assets\\Textures\\btn-tips-lab.dds", StringExternal("Param/Value/275E16C1"), 300, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(7, 0, true);
    libNtve_gf_SetBossBarRace(7, libNtve_ge_BossBarRace_Protoss, true);
    TriggerEnable(gt_ACW12aVentControlCycle, true);
    auto6C0809E5_n = 5;
    for (auto6C0809E5_i = 1; auto6C0809E5_i <= auto6C0809E5_n; auto6C0809E5_i += 1) {
        autoB0B0DFAF_n = gv_spawnFactor;
        for (autoB0B0DFAF_i = 1; autoB0B0DFAF_i <= autoB0B0DFAF_n; autoB0B0DFAF_i += 1) {
            UnitCreate(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(gv_ventSpawnArea[RandomInt(1, 3)]), libNtve_gf_RandomAngle());
            UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", UnitLastCreated(), 1);
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            Wait(0.15, c_timeReal);
        }
        Wait(RandomFixed(3.0, 4.0), c_timeReal);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/711360DA"));
    auto76997A7C_n = 300;
    for (auto76997A7C_i = 1; auto76997A7C_i <= auto76997A7C_n; auto76997A7C_i += 1) {
        if ((gv_wave == 12)) {
            Wait(RandomFixed(2.0, 6.0), c_timeReal);
            autoE2F3F1CC_n = gv_spawnFactor;
            for (autoE2F3F1CC_i = 1; autoE2F3F1CC_i <= autoE2F3F1CC_n; autoE2F3F1CC_i += 1) {
                UnitCreate(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(gv_ventSpawnArea[RandomInt(1, 3)]), libNtve_gf_RandomAngle());
                UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", UnitLastCreated(), 1);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(0.15, c_timeReal);
            }
            auto66345253_n = gv_spawnFactor;
            for (auto66345253_i = 1; auto66345253_i <= auto66345253_n; auto66345253_i += 1) {
                UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(gv_ventSpawnArea[RandomInt(1, 3)]), libNtve_gf_RandomAngle());
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
                Wait(0.2, c_timeReal);
                if ((RandomInt(0, 4) == 1)) {
                    UnitCreate(1, "BanelingBurrowed", 0, 14, RegionRandomPoint(gv_ventSpawnArea[RandomInt(1, 3)]), libNtve_gf_RandomAngle());
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
                    Wait(0.2, c_timeReal);
                }

            }
            auto059C2B0A_n = gv_spawnFactor;
            for (auto059C2B0A_i = 1; auto059C2B0A_i <= auto059C2B0A_n; auto059C2B0A_i += 1) {
                UnitCreate(1, "RoachBurrowed", 0, 14, RegionRandomPoint(gv_ventSpawnArea[RandomInt(1, 3)]), libNtve_gf_RandomAngle());
                UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", UnitLastCreated(), 1);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(0.15, c_timeReal);
            }
        }
        else {
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW12aVentilationShaft_Init () {
    gt_ACW12aVentilationShaft = TriggerCreate("gt_ACW12aVentilationShaft_Func");
    TriggerEnable(gt_ACW12aVentilationShaft, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW12a - Vent Control Cycle
//--------------------------------------------------------------------------------------------------
bool gt_ACW12aVentControlCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;
    bool lv_uploadCheck;
    bool lv_messageE;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_oMPerformanceTimer += 1;
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(183), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(183), 0), c_unitCountAlive), 0.75);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(184), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(184), 0), c_unitCountAlive), 0.75);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(185), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(185), 0), c_unitCountAlive), 0.75);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        lv_dataPoints -= 1;
    }
    if ((gv_alivePlayers < 3)) {
        lv_dataPoints += 1;
    }

    if ((gv_alivePlayers < 2)) {
        lv_dataPoints += 1;
    }

    if ((lv_uploadCheck == true)) {
        if ((lv_messageE == false) && (gv_antiToxinCount == 3)) {
            lv_messageE = true;
            SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 80.0, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/665883B6"));
        }
    }

    gv_antiToxinCount += lv_dataPoints;
    if ((gv_antiToxinCount > 300)) {
        gv_antiToxinCount = 300;
    }
    else if ((gv_antiToxinCount < 0)) {
        gv_antiToxinCount = 0;
    }
    libNtve_gf_SetBossBarCurrentValue(7, gv_antiToxinCount, true);
    if ((gv_antiToxinCount >= 300)) {
        libNtve_gf_ShowHideBossBar(false, 7);
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
        TriggerEnable(gt_ACW12aVentControlCycle, false);
        gf_AwardPlayerXPNOTD(4);
        TriggerExecute(gt_ACW13AhiveRun, true, false);
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(183), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(184), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(185), "DecalProtoss");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW12aVentControlCycle_Init () {
    gt_ACW12aVentControlCycle = TriggerCreate("gt_ACW12aVentControlCycle_Func");
    TriggerEnable(gt_ACW12aVentControlCycle, false);
    TriggerAddEventTimePeriodic(gt_ACW12aVentControlCycle, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW12b - Compliance Nexus
//--------------------------------------------------------------------------------------------------
bool gt_ACW12bComplianceNexus_Func (bool testConds, bool runActions) {
    int auto3F77D137_n;
    int auto3F77D137_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 12;
    gv_hitPar = 70;
    Wait(2.5, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/1DF504FF"));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/C38A69BF"), StringExternal("Param/Value/8194ED27"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    gf_TipNOTD(5000, StringExternal("Param/Value/2A6E68C4"));
    TriggerEnable(gt_NexusKillTracking, true);
    UnitGroupLoopBegin(gv_complianceNexusGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(UnitGroupLoopCurrent(), false);
        if ((gv_nightmare == false)) {
            libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", UnitGetPosition(UnitGroupLoopCurrent()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 60.0, 270.0);
        }

    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/29A05D77"));
    Wait(7.0, c_timeReal);
    SoundPlay(SoundLink("BridgeHornerRaynor00007", -1), PlayerGroupAll(), 200.0, 0.0);
    if ((gv_noNewbie == true)) {
        auto3F77D137_n = (gv_spawnFactor * 2);
        for (auto3F77D137_i = 1; auto3F77D137_i <= auto3F77D137_n; auto3F77D137_i += 1) {
            UnitCreate(1, "Hugger2", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_complianceNexusGroup, c_unitCountAlive)), 15.0)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
            Wait(0.1, c_timeGame);
        }
    }

    while (!((gv_nexusDestroyed == 3))) {
        Wait(1.0, c_timeGame);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/4DA6AE6B"));
    Wait(2.0, c_timeReal);
    while (!((gv_nexusDestroyed >= 4))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(gt_NexusKillTracking, false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_AwardPlayerXPNOTD(3);
    Wait(2.0, c_timeReal);
    TriggerExecute(gt_ACW13AhiveRun, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW12bComplianceNexus_Init () {
    gt_ACW12bComplianceNexus = TriggerCreate("gt_ACW12bComplianceNexus_Func");
    TriggerEnable(gt_ACW12bComplianceNexus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Nexus Kill Tracking
//--------------------------------------------------------------------------------------------------
bool gt_NexusKillTracking_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ComplianceNexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_nexusDestroyed += 1;
    ObjectiveSetName(gv_primaryObjective, (StringExternal("Param/Value/E2D10094") + (IntToText(gv_nexusDestroyed) + StringExternal("Param/Value/08FC9F9B"))));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NexusKillTracking_Init () {
    gt_NexusKillTracking = TriggerCreate("gt_NexusKillTracking_Func");
    TriggerEnable(gt_NexusKillTracking, false);
    TriggerAddEventUnitDied(gt_NexusKillTracking, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW13 - A hive! Run!
//--------------------------------------------------------------------------------------------------
bool gt_ACW13AhiveRun_Func (bool testConds, bool runActions) {
    int autoF194C757_n;
    int autoF194C757_i;
    int auto9FC84675_n;
    int auto9FC84675_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 13;
    gv_hitPar = 75;
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    autoF194C757_n = 5;
    for (autoF194C757_i = 1; autoF194C757_i <= autoF194C757_n; autoF194C757_i += 1) {
        auto9FC84675_n = (gv_spawnFactor * 2);
        for (auto9FC84675_i = 1; auto9FC84675_i <= auto9FC84675_n; auto9FC84675_i += 1) {
            gf_SmartSpawnNOTD("ZombieLevel22", 75.0);
            gf_SmartSpawnNOTD("ZombieLevel22", 75.0);
            Wait(0.2, c_timeReal);
            if ((RandomInt(0, 4) == 1) && (gv_alivePlayers > 1)) {
                gf_SmartSpawnNOTD("Strangler", 90.0);
                Wait(0.2, c_timeReal);
            }

        }
        Wait(5.0, c_timeReal);
    }
    TriggerExecute(gt_ACW14Delta1EVAC, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW13AhiveRun_Init () {
    gt_ACW13AhiveRun = TriggerCreate("gt_ACW13AhiveRun_Func");
    TriggerEnable(gt_ACW13AhiveRun, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW14 - Delta-1 EVAC
//--------------------------------------------------------------------------------------------------
bool gt_ACW14Delta1EVAC_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 14;
    gv_hitPar = 75;
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(gv_characterPriyanka, StringExternal("Param/Value/5002828A"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/4D1D277F"));
    Wait(3.5, c_timeReal);
    gf_RadioNOTD(gv_characterPriyanka, StringExternal("Param/Value/78336162"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/EA0D34CA"));
    ObjectiveCreate(StringExternal("Param/Value/4C3994F3"), StringToText(""), c_objectiveStateActive, false);
    gv_rescueObjective = ObjectiveLastCreated();
    TriggerEnable(gt_ACNakagawaRescueErin, true);
    TriggerEnable(gt_ACNakagawaRescueKenny, true);
    TriggerEnable(gt_ACNakagawaRescueNgoc, true);
    TriggerEnable(gt_ACNakagawaRescueSteph, true);
    TriggerEnable(gt_ACDelta1Onboarding, true);
    Wait(3.5, c_timeReal);
    gf_RadioNOTD(gv_characterPriyanka, StringExternal("Param/Value/D0ED6BE1"));
    Wait(3.5, c_timeReal);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(200)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 60.0, 270.0);
    Wait(15.0, c_timeReal);
    gf_RadioNOTD(gv_characterPriyanka, StringExternal("Param/Value/3CD09D38"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(40)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 90.0, 270.0);
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/EC6EB324"));
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/4B31A45D"));
    Wait(9.0, c_timeReal);
    gf_RadioNOTD(gv_characterPriyanka, StringExternal("Param/Value/D5043314"));
    Wait(130.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/DE5F080F"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/FF63624E"));
    Wait(25.0, c_timeReal);
    if ((gv_rescuedApolloCivs >= 15)) {
        ObjectiveSetState(gv_rescueObjective, c_objectiveStateCompleted);
    }
    else if ((gv_rescuedApolloCivs <= 0)) {
        ObjectiveSetState(gv_rescueObjective, c_objectiveStateFailed);
    }
    TriggerEnable(gt_ACNakagawaRescueErin, false);
    TriggerEnable(gt_ACNakagawaRescueKenny, false);
    TriggerEnable(gt_ACNakagawaRescueNgoc, false);
    TriggerEnable(gt_ACNakagawaRescueSteph, false);
    TriggerExecute(gt_ACIVAXSpawn, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW14Delta1EVAC_Init () {
    gt_ACW14Delta1EVAC = TriggerCreate("gt_ACW14Delta1EVAC_Func");
    TriggerEnable(gt_ACW14Delta1EVAC, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Nakagawa Rescue - Kenny
//--------------------------------------------------------------------------------------------------
bool gt_ACNakagawaRescueKenny_Func (bool testConds, bool runActions) {
    int autoD0F1A20E_n;
    int autoD0F1A20E_i;

    // Variable Declarations
    int lv_rescuePlayer;

    // Variable Initialization
    lv_rescuePlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ACRescueSharedEventsAction(EventUnit());
    autoD0F1A20E_n = 6;
    for (autoD0F1A20E_i = 1; autoD0F1A20E_i <= autoD0F1A20E_n; autoD0F1A20E_i += 1) {
        UnitCreate(2, gv_civPool[RandomInt(0, 1)], c_unitCreateIgnorePlacement, lv_rescuePlayer, RegionRandomPoint(RegionFromId(197)), libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(gv_colonists, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "SpeedBuff35", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
        if ((RandomInt(0, 5) == 1)) {
            UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(197)), 10.0)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACNakagawaRescueKenny_Init () {
    gt_ACNakagawaRescueKenny = TriggerCreate("gt_ACNakagawaRescueKenny_Func");
    TriggerEnable(gt_ACNakagawaRescueKenny, false);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueKenny, null, RegionFromId(197), true);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueKenny, null, RegionFromId(197), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Nakagawa Rescue - Erin
//--------------------------------------------------------------------------------------------------
bool gt_ACNakagawaRescueErin_Func (bool testConds, bool runActions) {
    int auto004594D2_n;
    int auto004594D2_i;

    // Variable Declarations
    int lv_rescuePlayer;

    // Variable Initialization
    lv_rescuePlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ACRescueSharedEventsAction(EventUnit());
    auto004594D2_n = 6;
    for (auto004594D2_i = 1; auto004594D2_i <= auto004594D2_n; auto004594D2_i += 1) {
        UnitCreate(2, gv_civPool[RandomInt(0, 1)], c_unitCreateIgnorePlacement, lv_rescuePlayer, RegionRandomPoint(RegionFromId(201)), libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(gv_colonists, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "SpeedBuff35", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
        if ((RandomInt(0, 5) == 1)) {
            UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(201)), 10.0)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACNakagawaRescueErin_Init () {
    gt_ACNakagawaRescueErin = TriggerCreate("gt_ACNakagawaRescueErin_Func");
    TriggerEnable(gt_ACNakagawaRescueErin, false);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueErin, null, RegionFromId(201), true);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueErin, null, RegionFromId(201), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Nakagawa Rescue - Ngoc
//--------------------------------------------------------------------------------------------------
bool gt_ACNakagawaRescueNgoc_Func (bool testConds, bool runActions) {
    int autoDA78E406_n;
    int autoDA78E406_i;

    // Variable Declarations
    int lv_rescuePlayer;

    // Variable Initialization
    lv_rescuePlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ACRescueSharedEventsAction(EventUnit());
    autoDA78E406_n = 7;
    for (autoDA78E406_i = 1; autoDA78E406_i <= autoDA78E406_n; autoDA78E406_i += 1) {
        UnitCreate(2, gv_civPool[RandomInt(0, 1)], c_unitCreateIgnorePlacement, lv_rescuePlayer, RegionRandomPoint(RegionFromId(202)), libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(gv_colonists, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "SpeedBuff35", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
        if ((RandomInt(0, 5) == 1)) {
            UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(202)), 10.0)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACNakagawaRescueNgoc_Init () {
    gt_ACNakagawaRescueNgoc = TriggerCreate("gt_ACNakagawaRescueNgoc_Func");
    TriggerEnable(gt_ACNakagawaRescueNgoc, false);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueNgoc, null, RegionFromId(202), true);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueNgoc, null, RegionFromId(202), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Nakagawa Rescue - Steph
//--------------------------------------------------------------------------------------------------
bool gt_ACNakagawaRescueSteph_Func (bool testConds, bool runActions) {
    int autoC5F4D0E7_n;
    int autoC5F4D0E7_i;

    // Variable Declarations
    int lv_rescuePlayer;

    // Variable Initialization
    lv_rescuePlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_ACRescueSharedEventsAction(EventUnit());
    autoC5F4D0E7_n = 7;
    for (autoC5F4D0E7_i = 1; autoC5F4D0E7_i <= autoC5F4D0E7_n; autoC5F4D0E7_i += 1) {
        UnitCreate(2, gv_civPool[RandomInt(0, 1)], c_unitCreateIgnorePlacement, lv_rescuePlayer, RegionRandomPoint(RegionFromId(203)), libNtve_gf_RandomAngle());
        UnitGroupLoopBegin(UnitLastCreatedGroup());
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitGroupAdd(gv_colonists, UnitGroupLoopCurrent());
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "SpeedBuff35", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
        if ((RandomInt(0, 5) == 1)) {
            UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(RegionCircle(RegionGetCenter(RegionFromId(203)), 10.0)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACNakagawaRescueSteph_Init () {
    gt_ACNakagawaRescueSteph = TriggerCreate("gt_ACNakagawaRescueSteph_Func");
    TriggerEnable(gt_ACNakagawaRescueSteph, false);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueSteph, null, RegionFromId(203), true);
    TriggerAddEventUnitRegion(gt_ACNakagawaRescueSteph, null, RegionFromId(203), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Delta-1 Onboarding
//--------------------------------------------------------------------------------------------------
bool gt_ACDelta1Onboarding_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_colonists, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    gv_rescuedApolloCivs += 1;
    gv_legionOfMeritCivsRescued += 1;
    if ((ModI(gv_rescuedApolloCivs, 10) == 0)) {
        gf_AwardPlayerXPNOTD(2);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/FD7B4E49"));
        SoundPlay(SoundLink("UI_TerranRescueUnit", -1), PlayerGroupActive(), 100.0, 0.0);
    }

    if ((gv_rescuedApolloCivs >= 50) && (gv_colonistRescueMissionComplete == false)) {
        gv_colonistRescueMissionComplete = true;
        ObjectiveSetState(gv_rescueObjective, c_objectiveStateCompleted);
        gf_AwardPlayerXPNOTD(3);
        gf_AwardRatingNOTD(1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/A1E10F66"));
        SoundPlay(SoundLink("Alert_UniObjectiveCompleted", -1), PlayerGroupActive(), 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACDelta1Onboarding_Init () {
    gt_ACDelta1Onboarding = TriggerCreate("gt_ACDelta1Onboarding_Func");
    TriggerEnable(gt_ACDelta1Onboarding, false);
    TriggerAddEventUnitRegion(gt_ACDelta1Onboarding, null, RegionFromId(39), true);
    TriggerAddEventUnitRegion(gt_ACDelta1Onboarding, null, RegionFromId(39), false);
    TriggerAddEventUnitRegion(gt_ACDelta1Onboarding, null, RegionFromId(167), true);
    TriggerAddEventUnitRegion(gt_ACDelta1Onboarding, null, RegionFromId(167), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Spawn
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rageCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/42C54EE7"));
    Wait(6.5, c_timeReal);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/AEC7D830"));
    Wait(2.5, c_timeReal);
    ObjectiveDestroy(gv_rescueObjective);
    SoundPlay(SoundLink("Thor_Build", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitCreate(1, "Ivax", 0, 13, RegionRandomPoint(gv_cityRescue[RandomInt(1, 9)]), libNtve_gf_RandomAngle());
    gv_currentBoss = "IVAX";
    if ((gv_nightmare == true)) {
        gv_iVAXLifePercentage = UnitGetPropertyFixed(gv_iVAX, c_unitPropLifePercent, c_unitPropCurrent);
        TriggerEnable(gt_ACIVAXCloak, true);
        TriggerEnable(gt_ACIVAXCloakedMovement, true);
    }

    AIAttackWaveUseUnit(13, UnitLastCreated());
    AIAttackWaveSetTargetUnitGroup(13, gv_marines);
    AIAttackWaveSend(13, 0, false);
    gv_iVAX = UnitLastCreated();
    TriggerEnable(gt_ACIVAXMissleVision, true);
    TriggerEnable(gt_ACIVAXSatchelUpgrade, true);
    TriggerEnable(gt_ACIVAXSatchelVisual, true);
    TriggerEnable(gt_ACIVAXStunImmunity, true);
    TriggerEnable(gt_ACIVAXKilled, true);
    gv_aCSpawnRespite = true;
    if ((gv_alivePlayers < 5)) {
        UnitSetPropertyFixed(gv_iVAX, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_iVAX, c_unitPropLifeMax, c_unitPropCurrent) * 0.5));
    }
    else if ((gv_alivePlayers < 3)) {
        UnitSetPropertyFixed(gv_iVAX, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_iVAX, c_unitPropLifeMax, c_unitPropCurrent) * 0.35));
    }
    libNtve_gf_SetAlliance(13, 14, libNtve_ge_AllianceSetting_Enemy);
    Wait(0.1, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/95E7C9F4"));
    gv_bossFight = true;
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterIVAX, StringExternal("Param/Value/30A09D44"));
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_iVAX, ge_Ping_Disabled);
    gf_TipNOTD(5000, StringExternal("Param/Value/45AD6BBF"));
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(40.0, c_timeReal);
    if ((UnitIsAlive(gv_iVAX) == true)) {
        gf_RadioNOTD(gv_characterIVAX, StringExternal("Param/Value/C0110C87"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXSpawn_Init () {
    gt_ACIVAXSpawn = TriggerCreate("gt_ACIVAXSpawn_Func");
    TriggerEnable(gt_ACIVAXSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Missle Vision
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXMissleVision_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealArea(13, RegionEntireMap(), 30.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXMissleVision_Init () {
    gt_ACIVAXMissleVision = TriggerCreate("gt_ACIVAXMissleVision_Func");
    TriggerEnable(gt_ACIVAXMissleVision, false);
    TriggerAddEventUnitBehaviorChange(gt_ACIVAXMissleVision, UnitRefFromVariable("gv_iVAX"), "IVAXLongRange", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Satchel Visual
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXSatchelVisual_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitCreatedUnit(), RegionRandomPoint(RegionCircle(UnitGetPosition(EventUnitCreatedUnit()), 3.0)), false);
    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXSatchelVisual_Init () {
    gt_ACIVAXSatchelVisual = TriggerCreate("gt_ACIVAXSatchelVisual_Func");
    TriggerEnable(gt_ACIVAXSatchelVisual, false);
    TriggerAddEventUnitCreated(gt_ACIVAXSatchelVisual, UnitRefFromVariable("gv_iVAX"), "SatchelDeployment", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Satchel Upgrade
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXSatchelUpgrade_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) <= 80.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(13, "SatchelDeployment", ((100 - FixedToInt(UnitGetPropertyFixed(gv_iVAX, c_unitPropLifePercent, c_unitPropCurrent))) / 20));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXSatchelUpgrade_Init () {
    gt_ACIVAXSatchelUpgrade = TriggerCreate("gt_ACIVAXSatchelUpgrade_Func");
    TriggerEnable(gt_ACIVAXSatchelUpgrade, false);
    TriggerAddEventUnitProperty(gt_ACIVAXSatchelUpgrade, UnitRefFromVariable("gv_iVAX"), c_unitPropLifePercent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Cloak
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXCloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_iVAXPreviousHP;

    // Variable Initialization
    lv_iVAXPreviousHP = gv_iVAXLifePercentage;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_iVAXLifePercentage = UnitGetPropertyFixed(gv_iVAX, c_unitPropLifePercent, c_unitPropCurrent);
    Wait(2.0, c_timeGame);
    if (((lv_iVAXPreviousHP - UnitGetPropertyFixed(gv_iVAX, c_unitPropLifePercent, c_unitPropCurrent)) >= 6.0)) {
        libNtve_gf_AICast(gv_iVAX, Order(AbilityCommand("StealthIvax", 0)));
        Wait(2.0, c_timeAI);
        libNtve_gf_AICast(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 5.0))));
        TriggerEnable(TriggerGetCurrent(), false);
        while (!((UnitBehaviorEnabled(gv_iVAX, "IVAXCloak") == false))) {
            Wait(1.0, c_timeGame);
        }
        Wait(15.0, c_timeGame);
        TriggerEnable(TriggerGetCurrent(), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXCloak_Init () {
    gt_ACIVAXCloak = TriggerCreate("gt_ACIVAXCloak_Func");
    TriggerEnable(gt_ACIVAXCloak, false);
    TriggerAddEventUnitProperty(gt_ACIVAXCloak, UnitRefFromVariable("gv_iVAX"), c_unitPropLifePercent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Cloaked Movement
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXCloakedMovement_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(gv_iVAX, "HeightenedSensesDebuff", 1);
    UnitBehaviorRemove(gv_iVAX, "LaserDesignatorLevel1", 1);
    UnitBehaviorRemove(gv_iVAX, "LaserDesignatorLevel2", 1);
    UnitBehaviorRemove(gv_iVAX, "LaserDesignatorLevel3", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXCloakedMovement_Init () {
    gt_ACIVAXCloakedMovement = TriggerCreate("gt_ACIVAXCloakedMovement_Func");
    TriggerEnable(gt_ACIVAXCloakedMovement, false);
    TriggerAddEventUnitAbility(gt_ACIVAXCloakedMovement, UnitRefFromVariable("gv_iVAX"), AbilityCommand("StealthIvax", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Stun Immunity
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXStunImmunity_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_iVAX;

    // Variable Initialization
    lv_iVAX = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(1, UnitBehaviorCountAll(lv_iVAX));
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, UnitBehaviorGet(lv_iVAX, IntLoopCurrent()), "Modification.StateFlags[" + IntToString(9) + "]", c_playerAny) == 1)) {
            UnitBehaviorRemove(lv_iVAX, UnitBehaviorGet(lv_iVAX, IntLoopCurrent()), 1);
        }

    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXStunImmunity_Init () {
    gt_ACIVAXStunImmunity = TriggerCreate("gt_ACIVAXStunImmunity_Func");
    TriggerEnable(gt_ACIVAXStunImmunity, false);
    TriggerAddEventUnitBehaviorChange(gt_ACIVAXStunImmunity, null, "IVAXStunImmunity", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - IVAX Killed
//--------------------------------------------------------------------------------------------------
bool gt_ACIVAXKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ACDelta1Onboarding, false);
    TriggerEnable(gt_ACIVAXMissleVision, false);
    TriggerEnable(gt_ACIVAXSatchelUpgrade, false);
    TriggerEnable(gt_ACIVAXSatchelVisual, false);
    TriggerEnable(gt_ACIVAXCloak, false);
    TriggerEnable(gt_ACIVAXCloakedMovement, false);
    TriggerEnable(gt_ACIVAXStunImmunity, false);
    gf_BossAfterAction();
    libNtve_gf_SetAlliance(13, 14, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    gv_aCSpawnRespite = false;
    if ((RandomInt(0, 1) == 1)) {
        gf_RadioNOTD(gv_characterIVAX, StringExternal("Param/Value/D19D47AE"));
    }
    else {
        gf_RadioNOTD(gv_characterIVAX, StringExternal("Param/Value/54E03E28"));
    }
    gf_UnifiedAwards(25, 1000.0, libNtve_gf_DifficultyValueInt(0, 80, 215, 0), 0, 2);
    Wait(5.0, c_timeReal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/2F9E53FC"));
    TriggerExecute(gt_ACW15HoldOut, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACIVAXKilled_Init () {
    gt_ACIVAXKilled = TriggerCreate("gt_ACIVAXKilled_Func");
    TriggerEnable(gt_ACIVAXKilled, false);
    TriggerAddEventUnitDied(gt_ACIVAXKilled, UnitRefFromVariable("gv_iVAX"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW15 - Hold Out
//--------------------------------------------------------------------------------------------------
bool gt_ACW15HoldOut_Func (bool testConds, bool runActions) {
    int autoD1149E5A_n;
    int autoD1149E5A_i;
    int auto625610DF_n;
    int auto625610DF_i;
    int auto3B0E4B09_n;
    int auto3B0E4B09_i;
    int autoC56C6403_n;
    int autoC56C6403_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 15;
    gv_hitPar = 75;
    Wait(5.0, c_timeReal);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, true);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F1A23B08"));
    Wait(5.0, c_timeReal);
    autoD1149E5A_n = (gv_spawnFactor * 3);
    for (autoD1149E5A_i = 1; autoD1149E5A_i <= autoD1149E5A_n; autoD1149E5A_i += 1) {
        Wait(RandomFixed(1.0, 7.0), c_timeGame);
        if (((gv_noNewbie == true) && (gv_alivePlayers > 1))) {
            gf_SmartSpawnNOTD("Hugger2", 80.0);
        }

    }
    auto625610DF_n = (gv_spawnFactor * 3);
    for (auto625610DF_i = 1; auto625610DF_i <= auto625610DF_n; auto625610DF_i += 1) {
        Wait(0.2, c_timeGame);
        gf_SmartSpawnNOTD("ZombieLevel22", 80.0);
        Wait(0.2, c_timeGame);
        gf_SmartSpawnNOTD("HulkBurrowed", 80.0);
    }
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    if ((RandomInt(0, 1) == 1)) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/0D7605AA"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(3)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0, 270.0);
        ObjectiveCreate(StringExternal("Param/Value/A21263F3"), StringExternal("Param/Value/80A649EA"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
        gv_persesFightRegion = RegionFromId(3);
    }
    else if ((RandomInt(0, 1) == 1)) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/A0A23961"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(1)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0, 270.0);
        ObjectiveCreate(StringExternal("Param/Value/018D8BCF"), StringExternal("Param/Value/6D6D3BA3"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
        gv_persesFightRegion = RegionFromId(1);
    }
    else if (true) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/05C9C370"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(211)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0, 270.0);
        ObjectiveCreate(StringExternal("Param/Value/6015481C"), StringExternal("Param/Value/386B4E98"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
        gv_persesFightRegion = RegionFromId(211);
    }
    auto3B0E4B09_n = (gv_spawnFactor * 1);
    for (auto3B0E4B09_i = 1; auto3B0E4B09_i <= auto3B0E4B09_n; auto3B0E4B09_i += 1) {
        Wait(0.2, c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, 9, RegionRandomPoint(RegionCircle(RegionGetCenter(gv_persesFightRegion), 7.0)), RegionRandomPoint(RegionPlayableMap()));
        UnitSetTeamColorIndex(UnitLastCreated(), 14);
    }
    Wait(0.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Flamethrower2", 0, 9, RegionRandomPoint(RegionCircle(RegionGetCenter(gv_persesFightRegion), 7.0)), RegionRandomPoint(RegionPlayableMap()));
    UnitSetTeamColorIndex(UnitLastCreated(), 14);
    Wait(0.5, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Sniper", 0, 9, RegionRandomPoint(RegionCircle(RegionGetCenter(gv_persesFightRegion), 7.0)), RegionRandomPoint(RegionPlayableMap()));
    UnitSetTeamColorIndex(UnitLastCreated(), 14);
    autoC56C6403_n = 2;
    for (autoC56C6403_i = 1; autoC56C6403_i <= autoC56C6403_n; autoC56C6403_i += 1) {
        Wait(0.2, c_timeReal);
        libNtve_gf_UnitCreateFacingPoint(1, "Corpsman", 0, 9, RegionRandomPoint(RegionCircle(RegionGetCenter(gv_persesFightRegion), 7.0)), RegionRandomPoint(RegionPlayableMap()));
        UnitSetTeamColorIndex(UnitLastCreated(), 14);
    }
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[PlayerGroupLoopCurrent()]) == false) && (PlayerType(PlayerGroupLoopCurrent()) == c_playerTypeUser)) {
            libNtve_gf_UnitCreateFacingPoint(1, "Marine", 0, PlayerGroupLoopCurrent(), RegionRandomPoint(RegionCircle(RegionGetCenter(gv_persesFightRegion), 7.0)), RegionRandomPoint(RegionPlayableMap()));
        }

        Wait(0.2, c_timeGame);
    }
    PlayerGroupLoopEnd();
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/DE5AD556"));
    while (!((DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_marines), RegionGetCenter(gv_persesFightRegion)) < 25.0))) {
        Wait(1.0, c_timeGame);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/2BAC080B"));
    UnitGroupLoopBegin(UnitGroup(null, 9, gv_persesFightRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_secTeamAMarines, UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerExecute(gt_ACW16HoldOutPart2, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW15HoldOut_Init () {
    gt_ACW15HoldOut = TriggerCreate("gt_ACW15HoldOut_Func");
    TriggerEnable(gt_ACW15HoldOut, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ACW16 - Hold Out Part 2
//--------------------------------------------------------------------------------------------------
bool gt_ACW16HoldOutPart2_Func (bool testConds, bool runActions) {
    int auto1432C07D_n;
    int auto1432C07D_i;
    int auto889B66FC_n;
    int auto889B66FC_i;
    int autoBDA534D5_n;
    int autoBDA534D5_i;

    // Variable Declarations
    point lv_titanSpawnLoc;
    unit lv_localTitan;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 16;
    gv_hitPar = 75;
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(10.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/43DD0D71"));
    Wait(3.0, c_timeReal);
    auto1432C07D_n = (gv_spawnFactor - 1);
    for (auto1432C07D_i = 1; auto1432C07D_i <= auto1432C07D_n; auto1432C07D_i += 1) {
        Wait(RandomFixed(1.0, 5.0), c_timeReal);
        lv_titanSpawnLoc = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 70.0));
        while ((DistanceBetweenPoints(lv_titanSpawnLoc, UnitGroupCenterOfGroup(gv_marines)) < 15.0)) {
            lv_titanSpawnLoc = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 70.0));
        }
        UnitCreate(1, "TitanBurrowed", 0, 14, lv_titanSpawnLoc, libNtve_gf_RandomAngle());
        if ((gv_nightmare == false)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "Weakness", 9, 1);
        }

        lv_localTitan = UnitLastCreated();
        Wait(1.5, c_timeGame);
        UnitIssueOrder(lv_localTitan, Order(AbilityCommand("UnburrowTitan", 0)), c_orderQueueReplace);
        UnitGroupAdd(gv_zombieWave, lv_localTitan);
    }
    auto889B66FC_n = (gv_spawnFactor * 5);
    for (auto889B66FC_i = 1; auto889B66FC_i <= auto889B66FC_n; auto889B66FC_i += 1) {
        if ((gv_noNewbie == true)) {
            Wait(RandomFixed(1.0, 5.0), c_timeGame);
            UnitCreate(1, "SeekerBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 35.0)), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
            UnitBehaviorAddPlayer(UnitLastCreated(), "PersonalCloakingFree", 14, 1);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        else {
            UnitCreate(1, "SeekerBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 35.0)), libNtve_gf_RandomAngle());
            UnitBehaviorAddPlayer(UnitLastCreated(), "PersonalCloakingFree", 14, 1);
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
    }
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("LabFidgetsAdjutantConfederateAdjutant00002", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.5, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/16DD4057"));
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_ACBoss4SpawnPerses, true, false);
    autoBDA534D5_n = (gv_spawnFactor * 5);
    for (autoBDA534D5_i = 1; autoBDA534D5_i <= autoBDA534D5_n; autoBDA534D5_i += 1) {
        if ((gv_nightmare == true)) {
            Wait(RandomFixed(8.0, 15.0), c_timeGame);
        }
        else {
            Wait(18.0, c_timeGame);
        }
        gf_SmartSpawnNOTD("UltraliskBurrowed", 65.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACW16HoldOutPart2_Init () {
    gt_ACW16HoldOutPart2 = TriggerCreate("gt_ACW16HoldOutPart2_Func");
    TriggerEnable(gt_ACW16HoldOutPart2, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Boss 4 Spawn (Perses)
//--------------------------------------------------------------------------------------------------
bool gt_ACBoss4SpawnPerses_Func (bool testConds, bool runActions) {
    int auto322FF8D1_n;
    int auto322FF8D1_i;

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/6C5FF689"), StringExternal("Param/Value/A450A312"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    UnitCreate(1, "Perses", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(1, 6)]), libNtve_gf_RandomAngle());
    gv_perses = UnitLastCreated();
    gv_currentBoss = "Perses";
    TriggerEnable(gt_ACBoss4AI, true);
    TriggerEnable(gt_ACBoss4PersesAI, true);
    TriggerEnable(gt_ACBoss4Killed, true);
    if ((gv_nightmare == false)) {
        gv_aCSpawnHalt = true;
        gv_aCSpawnRespite = true;
    }

    if ((gv_alivePlayers < 5)) {
        UnitSetPropertyFixed(gv_perses, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_perses, c_unitPropLifeMax, c_unitPropCurrent) * 0.5));
    }
    else if ((gv_alivePlayers < 3)) {
        UnitSetPropertyFixed(gv_perses, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_perses, c_unitPropLifeMax, c_unitPropCurrent) * 0.35));
    }
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_perses, ge_Ping_Disabled);
    auto322FF8D1_n = (gv_spawnFactor * 5);
    for (auto322FF8D1_i = 1; auto322FF8D1_i <= auto322FF8D1_n; auto322FF8D1_i += 1) {
        Wait(RandomFixed(3.0, 20.0), c_timeGame);
        if ((RandomInt(0, 1) == 1)) {
            gf_SmartSpawnNOTD("Hugger2", 30.0);
        }
        else {
            gf_SmartSpawnNOTD("Wraith2", 65.0);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACBoss4SpawnPerses_Init () {
    gt_ACBoss4SpawnPerses = TriggerCreate("gt_ACBoss4SpawnPerses_Func");
    TriggerEnable(gt_ACBoss4SpawnPerses, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Boss 4 AI
//--------------------------------------------------------------------------------------------------
bool gt_ACBoss4AI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_perses, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 7.0))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACBoss4AI_Init () {
    gt_ACBoss4AI = TriggerCreate("gt_ACBoss4AI_Func");
    TriggerEnable(gt_ACBoss4AI, false);
    TriggerAddEventTimePeriodic(gt_ACBoss4AI, 3.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Boss 4 Perses AI
//--------------------------------------------------------------------------------------------------
bool gt_ACBoss4PersesAI_Func (bool testConds, bool runActions) {
    int auto6B90193C_n;
    int auto6B90193C_i;
    int autoA66F3827_n;
    int autoA66F3827_i;

    // Variable Declarations
    int lv_cycleCount;
    fixed lv_energyFieldRadius;
    unitgroup lv_energyFieldGroup;
    point lv_energyFieldSpawnPoint;

    // Variable Initialization
    lv_cycleCount = 1;
    lv_energyFieldRadius = 7.0;
    lv_energyFieldGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_perses) == true))) {
            return false;
        }

        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/52FFD027"));
    gf_TipNOTD(5000, StringExternal("Param/Value/3445B423"));
    Wait(5.5, c_timeGame);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/C559CDD3"));
    auto6B90193C_n = 4;
    for (auto6B90193C_i = 1; auto6B90193C_i <= auto6B90193C_n; auto6B90193C_i += 1) {
        lv_energyFieldSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_perses), 15.0));
        while ((!((((PointGetX(lv_energyFieldSpawnPoint) >= 15) && (PointGetX(lv_energyFieldSpawnPoint) <= 241)) && ((PointGetY(lv_energyFieldSpawnPoint) >= 15) && (PointGetY(lv_energyFieldSpawnPoint) <= 241)))))) {
            lv_energyFieldSpawnPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_perses), 15.0));
        }
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "EnergyField", 0, 0, lv_energyFieldSpawnPoint);
        UnitGroupAdd(lv_energyFieldGroup, UnitLastCreated());
        IntLoopBegin(1, 8);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            VisRevealArea(IntLoopCurrent(), RegionCircle(UnitGetPosition(UnitLastCreated()), 7.0), 5.0, false);
        }
        IntLoopEnd();
        Wait(0.01, c_timeGame);
    }
    autoA66F3827_n = 24;
    for (autoA66F3827_i = 1; autoA66F3827_i <= autoA66F3827_n; autoA66F3827_i += 1) {
        Wait(0.5, c_timeGame);
        if ((gv_inceptionOn == true)) {
            Wait(0.6, c_timeGame);
        }

        if ((ModI(lv_cycleCount, 2) == 1)) {
            lv_energyFieldRadius -= 0.5;
            CatalogFieldValueSet(c_gameCatalogEffect, "EnergyFieldSearch", "AreaArray[" + IntToString(0) + "].Radius", 0, FixedToString(lv_energyFieldRadius, c_fixedPrecisionAny));
        }

        if ((gv_nightmare == true) && (ModI(lv_cycleCount, 7) == 1)) {
            UnitGroupLoopBegin(lv_energyFieldGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_perses), 20.0))), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
        }

        lv_cycleCount += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACBoss4PersesAI_Init () {
    gt_ACBoss4PersesAI = TriggerCreate("gt_ACBoss4PersesAI_Func");
    TriggerEnable(gt_ACBoss4PersesAI, false);
    TriggerAddEventUnitBehaviorChange(gt_ACBoss4PersesAI, UnitRefFromVariable("gv_perses"), "PersesSelfDisableFirewave", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AC - Boss 4 Killed
//--------------------------------------------------------------------------------------------------
bool gt_ACBoss4Killed_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_ACBoss4AI, false);
    TriggerEnable(gt_ACBoss4PersesAI, false);
    TriggerEnable(gt_ACBoss4AI, false);
    gf_BossAfterAction();
    gv_gameVictoryTime = TimerGetElapsed(gv_gameTime);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_UnifiedAwards(18, 350.0, libNtve_gf_DifficultyValueInt(0, 100, 200, 0), 0, 1);
    gf_ACClosingCinematic();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ACBoss4Killed_Init () {
    gt_ACBoss4Killed = TriggerCreate("gt_ACBoss4Killed_Func");
    TriggerEnable(gt_ACBoss4Killed, false);
    TriggerAddEventUnitDied(gt_ACBoss4Killed, UnitRefFromVariable("gv_perses"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST Initialize
//--------------------------------------------------------------------------------------------------
bool gt_STInitialize_Func (bool testConds, bool runActions) {
    int autoD367C985_n;
    int autoD367C985_i;
    int autoDDD16A91_n;
    int autoDDD16A91_i;
    int auto137492A3_n;
    int auto137492A3_i;

    // Variable Declarations
    bool lv_teamSorting;
    region lv_huggerSpawnArea;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ECW4AirlockRoadAmbush, false);
    TriggerEnable(gt_ECW2ScrapyardAmbush, false);
    TriggerEnable(gt_STTeam2DeathTraps, true);
    TriggerEnable(gt_STW1AgronWarning, true);
    TriggerEnable(gt_STW1EnterAirlockColonyGate, true);
    TriggerEnable(gt_STW1EnterAirlockEastGate, true);
    TriggerEnable(gt_STW1EnterAirlockNorthGate, true);
    TriggerEnable(gt_STW1EnterEastWingGateRESCUE, true);
    TriggerEnable(gt_ACEnterSiteAlphaGate, true);
    TriggerExecute(gt_STW1HarassMobCycle, true, false);
    gf_ZombieAIWorldEvents();
    gf_BlackMaskApplication();
    TriggerEnable(gt_OM2aOgilvyFound, false);
    TriggerEnable(gt_OM2bIvanFound, true);
    TriggerEnable(gt_OM7CharlieSecTeam, true);
    TriggerEnable(gt_OM12Prisoner1JohnAnderton, true);
    gf_STEnvironmentalChanges();
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((lv_teamSorting == false)) {
            lv_teamSorting = true;
            VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(118), true, false);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(118), 120.0, false);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1835), 0.0, -1, 10, true);
            PlayerGroupAdd(gv_secTeamA, PlayerGroupLoopCurrent());
        }
        else {
            lv_teamSorting = false;
            VisExploreArea(PlayerGroupLoopCurrent(), RegionFromId(117), true, false);
            VisRevealArea(PlayerGroupLoopCurrent(), RegionFromId(117), 120.0, false);
            CameraApplyInfo(PlayerGroupLoopCurrent(), CameraInfoFromId(1833), 0.0, -1, 10, true);
            PlayerGroupAdd(gv_secTeamB, PlayerGroupLoopCurrent());
        }
    }
    PlayerGroupLoopEnd();
    CameraSetBounds(gv_secTeamB, RegionFromId(161), true);
    autoD367C985_n = gv_spawnFactor;
    for (autoD367C985_i = 1; autoD367C985_i <= autoD367C985_n; autoD367C985_i += 1) {
        UnitCreate(1, gv_civPool[RandomInt(0, 1)], c_unitCreateIgnorePlacement, 9, RegionRandomPoint(RegionFromId(117)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_civilianPopulation, UnitLastCreated());
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "Infection", 14, 1);
        }

        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Wounded", UnitGroupLoopCurrent(), 1);
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scared", UnitGroupLoopCurrent(), 1);
        }
        Wait(0.1, c_timeGame);
    }
    autoDDD16A91_n = 5;
    for (autoDDD16A91_i = 1; autoDDD16A91_i <= autoDDD16A91_n; autoDDD16A91_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionFromId(234)), RegionRandomPoint(RegionFromId(102)));
        AISetUnitScriptControlled(UnitLastCreated(), true);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
        libNtve_gf_UnitCreateFacingPoint(2, "Parasite", 0, 14, RegionRandomPoint(RegionFromId(48)), RegionRandomPoint(RegionFromId(102)));
        AISetUnitScriptControlled(UnitLastCreated(), true);
    }
    TriggerExecute(gt_STW1ApolloFinalHoldoutDeaths, true, false);
    Wait(12.0, c_timeReal);
    UnitCreate(1, "LargeZombieCocoon", 0, 14, RegionRandomPoint(RegionFromId(119)), libNtve_gf_RandomAngle());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_tartarusEggs[0] = UnitLastCreated();
    UnitCreate(1, "LargeZombieCocoon", 0, 14, RegionRandomPoint(RegionFromId(120)), libNtve_gf_RandomAngle());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_tartarusEggs[1] = UnitLastCreated();
    UnitCreate(1, "LargeZombieCocoon", 0, 14, RegionRandomPoint(RegionFromId(121)), libNtve_gf_RandomAngle());
    libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
    gv_tartarusEggs[2] = UnitLastCreated();
    SoundPlay(SoundLink("TValerian01BriefingMarine00017", -1), PlayerGroupActive(), 100.0, 0.0);
    auto137492A3_n = 2;
    for (auto137492A3_i = 1; auto137492A3_i <= auto137492A3_n; auto137492A3_i += 1) {
        UnitCreate(1, "Marine", 0, 9, RegionRandomPoint(RegionFromId(165)), libNtve_gf_RandomAngle());
        Wait(0.3, c_timeReal);
    }
    Wait(7.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive))), StringExternal("Param/Value/723F3D0D"));
    Wait(5.0, c_timeReal);
    if ((gv_totalPlayers > 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_secTeamBMarines, c_unitCountAlive))), StringExternal("Param/Value/A4DCEB1A"));
    }

    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/0A295215"), StringExternal("Param/Value/A388A277"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(4.0, c_timeReal);
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/3196E350"), 6.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive))), StringExternal("Param/Value/6497D85A"));
    ObjectiveCreate(StringExternal("Param/Value/0F90DB7F"), StringExternal("Param/Value/3678048A"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerExecute(gt_STW1HereWeGo, true, false);
    Wait(5.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/0EDEDB03"), StringExternal("Param/Value/086B1B18"), 18.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(9.0, c_timeReal);
    if ((gv_totalPlayers > 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_secTeamBMarines, c_unitCountAlive))), StringExternal("Param/Value/BB83B49E"));
    }

    if ((RandomInt(0, 1) == 1)) {
        lv_huggerSpawnArea = RegionFromId(98);
    }
    else {
        lv_huggerSpawnArea = RegionFromId(99);
    }
    if ((gv_noNewbie == true)) {
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(lv_huggerSpawnArea), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 30.0, 270.0);
        UnitCreate(3, "Hugger2", 0, 13, RegionRandomPoint(lv_huggerSpawnArea), libNtve_gf_RandomAngle());
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
    }

    Wait(9.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/9DAEEBF7"));
    UIHideTextCrawl(PlayerGroupAll());
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    if ((RandomInt(0, 1) == 1)) {
        UnitCreate(1, "Tartarus", 0, 14, RegionRandomPoint(RegionFromId(119)), libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, "Tartarus", 0, 14, RegionRandomPoint(RegionFromId(121)), libNtve_gf_RandomAngle());
    }
    gf_TipNOTD(8000, StringExternal("Param/Value/8BFF1855"));
    Wait(7.0, c_timeReal);
    TransmissionSend(gv_secTeamB, TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/23F354E0"), 3.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(20.0, c_timeReal);
    TransmissionSend(gv_secTeamB, TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/F33999D5"), 3.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(33.0, c_timeReal);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    libNtve_gf_ChangeUnitDamage(gv_incompleteIVAX, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STInitialize_Init () {
    gt_STInitialize = TriggerCreate("gt_STInitialize_Func");
    TriggerEnable(gt_STInitialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST Team 2 Death Traps
//--------------------------------------------------------------------------------------------------
bool gt_STTeam2DeathTraps_Func (bool testConds, bool runActions) {
    int autoB835E122_n;
    int autoB835E122_i;

    // Variable Declarations
    region lv_localRegion;
    region lv_localRegionA;
    int lv_ghoulWave;

    // Variable Initialization
    lv_localRegion = EventUnitRegion();
    lv_localRegionA = RegionCircle(UnitGetPosition(EventUnit()), 6.0);
    lv_ghoulWave = 5;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 75))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_noNewbie == true)) {
        lv_ghoulWave = 7;
    }

    autoB835E122_n = (gv_spawnFactor * lv_ghoulWave);
    for (autoB835E122_i = 1; autoB835E122_i <= autoB835E122_n; autoB835E122_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(lv_localRegionA), RegionRandomPoint(lv_localRegionA));
        UnitGroupIssueOrder(UnitGroup(null, 14, lv_localRegionA, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(RandomFixed(0.1, 0.3), c_timeGame);
    }
    UnitGroupIssueOrder(UnitGroup(null, 14, lv_localRegionA, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STTeam2DeathTraps_Init () {
    gt_STTeam2DeathTraps = TriggerCreate("gt_STTeam2DeathTraps_Func");
    TriggerEnable(gt_STTeam2DeathTraps, false);
    TriggerAddEventUnitRegion(gt_STTeam2DeathTraps, null, RegionFromId(119), true);
    TriggerAddEventUnitRegion(gt_STTeam2DeathTraps, null, RegionFromId(120), true);
    TriggerAddEventUnitRegion(gt_STTeam2DeathTraps, null, RegionFromId(121), true);
    TriggerAddEventUnitRegion(gt_STTeam2DeathTraps, null, RegionFromId(119), false);
    TriggerAddEventUnitRegion(gt_STTeam2DeathTraps, null, RegionFromId(120), false);
    TriggerAddEventUnitRegion(gt_STTeam2DeathTraps, null, RegionFromId(121), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC1 - Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_STC1ItemSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_magazineSpawn;

    // Variable Initialization
    lv_magazineSpawn = 19;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nightmare == true)) {
        lv_magazineSpawn = 24;
        gf_CreateItemNOTD("Helium3Canister", 2);
        gf_CreateItemNOTD("StingerMK3", 1);
    }

    gf_CreateItemNOTD("Helium3Canister", 1);
    gf_CreateItemNOTD("Magazine", lv_magazineSpawn);
    gf_CreateItemNOTD("AmmoBox", 3);
    if ((gv_navyCrossMode == false)) {
        gf_CreateItemNOTD("Medpack", 8);
        gf_CreateItemNOTD("Bandage", 5);
    }

    gf_CreateItemNOTD("AntiVenom", 5);
    gf_CreateItemNOTD("HighCapacityClip", 2);
    gf_CreateItemNOTD("NanoHealthAugment", 2);
    gf_CreateItemNOTD("OccularImplants", 3);
    gf_CreateItemNOTD("RoadFlare", 10);
    if ((gv_survivalMode == false)) {
        gf_CreateItemNOTD("GaussRifle", 2);
    }

    if ((gv_noNewbie == true)) {
        gf_CreateItemNOTD("KineticArmor", 2);
        gf_CreateItemNOTD("UA420AssaultRifle", 2);
        gf_CreateItemNOTD("SniperRifle", 2);
        gf_CreateItemNOTD("BarrettM112", 1);
        gf_CreateItemNOTD("Chaingun", 1);
        gf_CreateItemNOTD("L3GrenadeLauncher", 1);
        gf_CreateItemNOTD("MP9A2SubMachineGun", 2);
    }
    else {
        gf_CreateItemNOTD("SniperRifle", 3);
        gf_CreateItemNOTD("UA420AssaultRifle", 3);
        gf_CreateItemNOTD("KineticArmor", 1);
    }
    gf_CreateItemNOTD("Flamethrower", 2);
    gf_CreateItemNOTD("ThermalSight", 2);
    gf_CreateItemNOTD("CombatMobilityAugment", 1);
    gf_CreateItemNOTD("C2Armor", 3);
    gf_CreateItemNOTD("C4Armor", 2);
    gf_CreateItemNOTD("C6Armor", 1);
    gf_CreateItemNOTD("XS4Armor", 1);
    gf_CreateItemNOTD("ReactiveArmor", 2);
    gf_CreateItemNOTD("HEAmmo", 2);
    gf_CreateItemNOTD("HPAmmo", 1);
    gf_CreateItemNOTD("APAmmo", 2);
    gf_CreateItemNOTD("FMJAmmo", 2);
    if ((gv_alivePlayers >= 7)) {
        gf_CreateItemLocalNOTD("Shotgun", 1, RegionFromId(122));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC1ItemSpawn_Init () {
    gt_STC1ItemSpawn = TriggerCreate("gt_STC1ItemSpawn_Func");
    TriggerEnable(gt_STC1ItemSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Apollo Final Holdout Deaths
//--------------------------------------------------------------------------------------------------
bool gt_STW1ApolloFinalHoldoutDeaths_Func (bool testConds, bool runActions) {
    int autoC938E242_n;
    int autoC938E242_i;
    int auto17706233_n;
    int auto17706233_i;
    int auto8EF9A982_n;
    int auto8EF9A982_i;
    int autoB233F51E_n;
    int autoB233F51E_i;
    int autoDDCB22B2_n;
    int autoDDCB22B2_i;
    int auto8167E233_n;
    int auto8167E233_i;

    // Variable Declarations
    unitgroup lv_ambientZombiesDevs;
    unitgroup lv_ambientZombiesInfestedMarines;
    unitgroup lv_ambientCivilians;

    // Variable Initialization
    lv_ambientZombiesDevs = UnitGroupEmpty();
    lv_ambientZombiesInfestedMarines = UnitGroupEmpty();
    lv_ambientCivilians = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoC938E242_n = 3;
    for (autoC938E242_i = 1; autoC938E242_i <= autoC938E242_n; autoC938E242_i += 1) {
        UnitCreate(1, "Marine", 0, 9, RegionRandomPoint(RegionFromId(171)), libNtve_gf_RandomAngle());
        UnitSetTeamColorIndex(UnitLastCreated(), 0);
        UnitCreate(1, "ColonistFemale2", 0, 9, RegionRandomPoint(RegionFromId(171)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_ambientCivilians, UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    auto17706233_n = 3;
    for (auto17706233_i = 1; auto17706233_i <= auto17706233_n; auto17706233_i += 1) {
        UnitCreate(1, "Marine", 0, 9, RegionRandomPoint(RegionFromId(172)), libNtve_gf_RandomAngle());
        UnitSetTeamColorIndex(UnitLastCreated(), 0);
        UnitCreate(1, "Colonist2", 0, 9, RegionRandomPoint(RegionFromId(172)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_ambientCivilians, UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    auto8EF9A982_n = 2;
    for (auto8EF9A982_i = 1; auto8EF9A982_i <= auto8EF9A982_n; auto8EF9A982_i += 1) {
        UnitCreate(1, "Marine", 0, 9, RegionRandomPoint(RegionFromId(126)), libNtve_gf_RandomAngle());
        UnitSetTeamColorIndex(UnitLastCreated(), 0);
        UnitCreate(1, "ColonistFemale2", 0, 9, RegionRandomPoint(RegionFromId(126)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_ambientCivilians, UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    autoB233F51E_n = 4;
    for (autoB233F51E_i = 1; autoB233F51E_i <= autoB233F51E_n; autoB233F51E_i += 1) {
        UnitCreate(1, "Marine", 0, 9, RegionRandomPoint(RegionFromId(122)), libNtve_gf_RandomAngle());
        UnitSetTeamColorIndex(UnitLastCreated(), 0);
        UnitCreate(1, "Colonist2", 0, 9, RegionRandomPoint(RegionFromId(122)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_ambientCivilians, UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    autoDDCB22B2_n = 3;
    for (autoDDCB22B2_i = 1; autoDDCB22B2_i <= autoDDCB22B2_n; autoDDCB22B2_i += 1) {
        UnitCreate(1, "Marine", 0, 9, RegionRandomPoint(RegionFromId(72)), libNtve_gf_RandomAngle());
        UnitSetTeamColorIndex(UnitLastCreated(), 0);
        UnitCreate(1, "ColonistFemale2", 0, 9, RegionRandomPoint(RegionFromId(72)), libNtve_gf_RandomAngle());
        UnitGroupAdd(lv_ambientCivilians, UnitLastCreated());
        Wait(0.5, c_timeGame);
    }
    UnitGroupLoopBegin(lv_ambientCivilians);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((RandomInt(0, 1) == 1)) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Run", UnitGroupLoopCurrent(), 1);
        }
        else {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scared", UnitGroupLoopCurrent(), 1);
        }
    }
    UnitGroupLoopEnd();
    SoundPlay(SoundLink("TRaynor01Civilian200049", -1), PlayerGroupAll(), 50.0, 0.0);
    Wait(RandomFixed(5.0, 60.0), c_timeGame);
    auto8167E233_n = 2;
    for (auto8167E233_i = 1; auto8167E233_i <= auto8167E233_n; auto8167E233_i += 1) {
        UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(RegionFromId(171)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesDevs, UnitLastCreated());
        UnitCreate(1, "InfestorTerran2", 0, 14, RegionRandomPoint(RegionFromId(171)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesInfestedMarines, UnitLastCreated());
        Wait(0.1, c_timeGame);
        UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(RegionFromId(172)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesDevs, UnitLastCreated());
        UnitCreate(1, "InfestorTerran2", 0, 14, RegionRandomPoint(RegionFromId(172)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesInfestedMarines, UnitLastCreated());
        Wait(0.1, c_timeGame);
        UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(RegionFromId(126)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesDevs, UnitLastCreated());
        UnitCreate(1, "InfestorTerran2", 0, 14, RegionRandomPoint(RegionFromId(126)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesInfestedMarines, UnitLastCreated());
        Wait(0.1, c_timeGame);
        UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(RegionFromId(122)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesDevs, UnitLastCreated());
        UnitCreate(1, "InfestorTerran2", 0, 14, RegionRandomPoint(RegionFromId(122)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesInfestedMarines, UnitLastCreated());
        Wait(0.1, c_timeGame);
        UnitCreate(1, "Devourer2", 0, 14, RegionRandomPoint(RegionFromId(72)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesDevs, UnitLastCreated());
        UnitCreate(1, "InfestorTerran2", 0, 14, RegionRandomPoint(RegionFromId(72)), libNtve_gf_RandomAngle());
        AISetUnitNotUsableInWaves(UnitLastCreated(), true);
        UnitGroupAdd(lv_ambientZombiesInfestedMarines, UnitLastCreated());
        Wait(0.1, c_timeGame);
    }
    UnitGroupIssueOrder(lv_ambientZombiesDevs, Order(AbilityCommand("UnburrowDevourer", 0)), c_orderQueueReplace);
    UnitGroupIssueOrder(lv_ambientZombiesInfestedMarines, Order(AbilityCommand("UnburrowInfestedMarine", 0)), c_orderQueueReplace);
    AISetGroupScriptControlled(lv_ambientZombiesDevs, true);
    SoundPlay(SoundLink("Emitter_CrowdPanic", -1), PlayerGroupAll(), 75.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1ApolloFinalHoldoutDeaths_Init () {
    gt_STW1ApolloFinalHoldoutDeaths = TriggerCreate("gt_STW1ApolloFinalHoldoutDeaths_Func");
    TriggerEnable(gt_STW1ApolloFinalHoldoutDeaths, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Harass Mob Cycle
//--------------------------------------------------------------------------------------------------
bool gt_STW1HarassMobCycle_Func (bool testConds, bool runActions) {
    int auto96F00A27_n;
    int auto96F00A27_i;
    int auto23585BC5_n;
    int auto23585BC5_i;
    int auto574718D3_n;
    int auto574718D3_i;
    int autoAA488C89_n;
    int autoAA488C89_i;
    int auto588B8CF1_n;
    int auto588B8CF1_i;
    int autoEB525B10_n;
    int autoEB525B10_i;
    int autoF1C5E6C3_n;
    int autoF1C5E6C3_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto96F00A27_n = 12;
    for (auto96F00A27_i = 1; auto96F00A27_i <= auto96F00A27_n; auto96F00A27_i += 1) {
        Wait(15.0, c_timeReal);
        auto23585BC5_n = gv_spawnFactor;
        for (auto23585BC5_i = 1; auto23585BC5_i <= auto23585BC5_n; auto23585BC5_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(119)), RegionRandomPoint(RegionFromId(115)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
        }
        Wait(RandomFixed(0.01, 3.0), c_timeGame);
        auto574718D3_n = gv_spawnFactor;
        for (auto574718D3_i = 1; auto574718D3_i <= auto574718D3_n; auto574718D3_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(120)), RegionRandomPoint(RegionFromId(115)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
        }
        Wait(RandomFixed(0.01, 3.0), c_timeGame);
        autoAA488C89_n = gv_spawnFactor;
        for (autoAA488C89_i = 1; autoAA488C89_i <= autoAA488C89_n; autoAA488C89_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(121)), RegionRandomPoint(RegionFromId(115)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
        }
    }
    auto588B8CF1_n = gv_spawnFactor;
    for (auto588B8CF1_i = 1; auto588B8CF1_i <= auto588B8CF1_n; auto588B8CF1_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(2, "Stalker2", 0, 14, RegionRandomPoint(RegionFromId(119)), RegionRandomPoint(RegionFromId(115)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeGame);
    }
    Wait(RandomFixed(0.01, 1.2), c_timeGame);
    autoEB525B10_n = gv_spawnFactor;
    for (autoEB525B10_i = 1; autoEB525B10_i <= autoEB525B10_n; autoEB525B10_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(2, "Stalker2", 0, 14, RegionRandomPoint(RegionFromId(120)), RegionRandomPoint(RegionFromId(115)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeGame);
    }
    Wait(RandomFixed(0.01, 1.2), c_timeGame);
    autoF1C5E6C3_n = gv_spawnFactor;
    for (autoF1C5E6C3_i = 1; autoF1C5E6C3_i <= autoF1C5E6C3_n; autoF1C5E6C3_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(2, "Stalker2", 0, 14, RegionRandomPoint(RegionFromId(121)), RegionRandomPoint(RegionFromId(115)));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1HarassMobCycle_Init () {
    gt_STW1HarassMobCycle = TriggerCreate("gt_STW1HarassMobCycle_Func");
    TriggerEnable(gt_STW1HarassMobCycle, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Agron Warning
//--------------------------------------------------------------------------------------------------
bool gt_STW1AgronWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(1.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/6AB98424"));
    if ((gv_nightmare == false) && (gv_squadRating < 1800)) {
        UnitGroupLoopBegin(UnitGroup("Ultralisk", 14, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
        }
        UnitGroupLoopEnd();
    }

    Wait(15.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamAMarines, c_unitCountAlive), StringExternal("Param/Value/537C6F26"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_secTeamBMarines, c_unitCountAlive), StringExternal("Param/Value/B278011F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1AgronWarning_Init () {
    gt_STW1AgronWarning = TriggerCreate("gt_STW1AgronWarning_Func");
    TriggerEnable(gt_STW1AgronWarning, false);
    TriggerAddEventUnitRegion(gt_STW1AgronWarning, null, RegionFromId(162), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Enter Airlock Colony Gate
//--------------------------------------------------------------------------------------------------
bool gt_STW1EnterAirlockColonyGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(620), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(11), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1EnterAirlockColonyGate_Init () {
    gt_STW1EnterAirlockColonyGate = TriggerCreate("gt_STW1EnterAirlockColonyGate_Func");
    TriggerEnable(gt_STW1EnterAirlockColonyGate, false);
    TriggerAddEventUnitRegion(gt_STW1EnterAirlockColonyGate, null, RegionFromId(100), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Enter Airlock East Gate
//--------------------------------------------------------------------------------------------------
bool gt_STW1EnterAirlockEastGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(229), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(23), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1EnterAirlockEastGate_Init () {
    gt_STW1EnterAirlockEastGate = TriggerCreate("gt_STW1EnterAirlockEastGate_Func");
    TriggerEnable(gt_STW1EnterAirlockEastGate, false);
    TriggerAddEventUnitRegion(gt_STW1EnterAirlockEastGate, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_STW1EnterAirlockEastGate, null, RegionFromId(23), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW2 - Enter Armory + Deimos
//--------------------------------------------------------------------------------------------------
bool gt_STW2EnterArmoryDeimos_Func (bool testConds, bool runActions) {
    int autoCECA3866_n;
    int autoCECA3866_i;
    int auto1FED7992_n;
    int auto1FED7992_i;
    int autoC1CA840A_n;
    int autoC1CA840A_i;
    int autoAE624B38_n;
    int autoAE624B38_i;
    int auto406356C7_n;
    int auto406356C7_i;
    int auto831F12B3_n;
    int auto831F12B3_i;
    int autoF623BCA2_n;
    int autoF623BCA2_i;
    int autoBB9F65DC_n;
    int autoBB9F65DC_i;
    int auto32AF6B59_n;
    int auto32AF6B59_i;

    // Variable Declarations
    int lv_infestedCivLoop;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((gv_noNewbie == true)) {
        UnitRemove(UnitFromId(1857));
        UnitRemove(UnitFromId(2505));
        UnitSetState(UnitFromId(2502), c_unitStateSelectable, true);
        UnitSetState(UnitFromId(2504), c_unitStateSelectable, true);
    }
    else {
        UnitRemove(UnitFromId(1857));
        UnitRemove(UnitFromId(2505));
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gv_wave = 2;
    gv_hitPar = 20;
    gv_armoryFired = true;
    gf_MarineSpeechNOTD(EventUnit(), StringExternal("Param/Value/940C1170"));
    gf_CreateItemLocalNOTD("GaussRifle", 1, RegionFromId(208));
    gf_CreateItemLocalNOTD("GaussRifle", 1, RegionFromId(209));
    gf_CreateItemLocalNOTD("SniperRifle", 1, RegionFromId(208));
    gf_CreateItemLocalNOTD("Flamethrower", 1, RegionFromId(209));
    gf_CreateItemLocalNOTD("Magazine", 12, RegionFromId(208));
    gf_CreateItemLocalNOTD("Magazine", 11, RegionFromId(209));
    UnitIssueOrder(gv_ltSheng, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_ltSheng, OrderTargetingPoint(AbilityCommand("move", 0), UnitGroupCenterOfGroup(gv_marines)), c_orderQueueReplace);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/3DC9679C"));
    Wait(4.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/604C0CF6"));
    TriggerExecute(gt_LtShengAI, true, false);
    Wait(11.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_TipNOTD(8000, StringExternal("Param/Value/994123F6"));
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TRaynor03Marine100008", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Colonist2", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_infectedCivilians);
    TriggerExecute(gt_STInfectedCiviliansPeriodic, true, false);
    autoCECA3866_n = 12;
    for (autoCECA3866_i = 1; autoCECA3866_i <= autoCECA3866_n; autoCECA3866_i += 1) {
        lv_infestedCivLoop += 1;
        if ((lv_infestedCivLoop == 4)) {
        }
        else if ((lv_infestedCivLoop == 3)) {
            SoundPlay(SoundLink("THanson03BHorner00008", -1), PlayerGroupActive(), 100.0, 0.0);
        }
        auto1FED7992_n = gv_spawnFactor;
        for (auto1FED7992_i = 1; auto1FED7992_i <= auto1FED7992_n; auto1FED7992_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Colonist2", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(1, "ColonistFemale2", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
            }
            if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "Wounded", UnitLastCreated(), 1);
            }
            else if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "Scared", UnitLastCreated(), 1);
            }
            else if (true) {
                UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
            }
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, RandomFixed(1.6, 2.4));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_infectedCivilians);
            Wait(0.1, c_timeGame);
        }
        Wait(RandomFixed(0.01, 1.2), c_timeGame);
        autoC1CA840A_n = gv_spawnFactor;
        for (autoC1CA840A_i = 1; autoC1CA840A_i <= autoC1CA840A_n; autoC1CA840A_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Colonist2", 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(1, "ColonistFemale2", 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
            }
            if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "Wounded", UnitLastCreated(), 1);
            }
            else if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "Scared", UnitLastCreated(), 1);
            }
            else if (true) {
                UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
            }
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, RandomFixed(1.6, 2.4));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_infectedCivilians);
            Wait(0.1, c_timeGame);
        }
        Wait(RandomFixed(0.01, 1.2), c_timeGame);
        autoAE624B38_n = gv_spawnFactor;
        for (autoAE624B38_i = 1; autoAE624B38_i <= autoAE624B38_n; autoAE624B38_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Colonist2", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(1, "ColonistFemale2", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
            }
            if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "Wounded", UnitLastCreated(), 1);
            }
            else if ((RandomInt(0, 2) == 1)) {
                UnitBehaviorAdd(UnitLastCreated(), "Scared", UnitLastCreated(), 1);
            }
            else if (true) {
                UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
            }
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, RandomFixed(1.6, 2.4));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_infectedCivilians);
            Wait(0.1, c_timeGame);
        }
        Wait(2.5, c_timeReal);
    }
    SoundPlay(SoundLink("CharAmbientMarine300003", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DB6F4B62"));
    auto406356C7_n = 5;
    for (auto406356C7_i = 1; auto406356C7_i <= auto406356C7_n; auto406356C7_i += 1) {
        auto831F12B3_n = gv_spawnFactor;
        for (auto831F12B3_i = 1; auto831F12B3_i <= auto831F12B3_n; auto831F12B3_i += 1) {
            if ((RandomInt(0, 2) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(2, "InfestorTerran", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((RandomInt(0, 6) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Beastling", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            }

            Wait(0.1, c_timeGame);
        }
        Wait(RandomFixed(0.1, 1.2), c_timeGame);
        autoF623BCA2_n = gv_spawnFactor;
        for (autoF623BCA2_i = 1; autoF623BCA2_i <= autoF623BCA2_n; autoF623BCA2_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel2", 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((RandomInt(0, 6) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Beastling", 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            }

            Wait(0.1, c_timeGame);
        }
        Wait(RandomFixed(0.1, 1.2), c_timeGame);
        autoBB9F65DC_n = gv_spawnFactor;
        for (autoBB9F65DC_i = 1; autoBB9F65DC_i <= autoBB9F65DC_n; autoBB9F65DC_i += 1) {
            if ((RandomInt(0, 2) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(2, "InfestorTerran", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            if ((RandomInt(0, 6) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Beastling", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            }

            Wait(0.1, c_timeGame);
        }
        Wait(5.0, c_timeReal);
    }
    SoundPlay(SoundLink("CharAmbientMarine500005", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(45.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/9B65341E"));
    Wait(15.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/8CE89820"));
    gf_AwardPlayerXPNOTD(3);
    Wait(15.0, c_timeReal);
    if ((gv_gameOver == true)) {

    }

    if ((RandomInt(0, 1) == 1)) {
        UnitCreate(1, "Deimos", 0, 14, RegionRandomPoint(RegionFromId(235)), libNtve_gf_RandomAngle());
    }
    else {
        UnitCreate(1, "Deimos", 0, 14, RegionRandomPoint(RegionFromId(64)), libNtve_gf_RandomAngle());
    }
    gv_deimos = UnitLastCreated();
    gv_currentBoss = "Deimos";
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_deimos, ge_Ping_Enabled);
    gv_queenBossPing = PingLastCreated();
    TriggerEnable(gt_STBoss1DeimosAttackShock, true);
    TriggerEnable(gt_STBoss1DeimosKilled, true);
    TriggerEnable(gt_STBoss1DeimosEngaged, true);
    ObjectiveCreate(StringExternal("Param/Value/FD3063C2"), StringExternal("Param/Value/6EE123F8"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("Changeling_MarineReady", -1), PlayerGroupActive(), 100.0, 0.0);
    gv_deimosMission = RandomInt(1, 3);
    if ((gv_deimosMission == 1)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/C83FDCE3"), 5.0, c_transmissionDurationAdd, false);
        SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitIssueOrder(gv_deimos, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(9))), c_orderQueueReplace);
    }
    else if ((gv_deimosMission == 2)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/02F43D30"), 5.0, c_transmissionDurationAdd, false);
        SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitIssueOrder(gv_deimos, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(3))), c_orderQueueReplace);
    }
    else if ((gv_deimosMission == 3)) {
        TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/A1B2CCD2"), 5.0, c_transmissionDurationAdd, false);
        SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitIssueOrder(gv_deimos, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(219))), c_orderQueueReplace);
    }
    Wait(6.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/32F197EC"), 5.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(6.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/C2F1C418"));
    while (!(((gv_deimosEngaged == true) || ((gv_deimosMission == 1) && (libNtve_gf_UnitInRegion(gv_deimos, RegionFromId(9)) == true)) || ((gv_deimosMission == 2) && (libNtve_gf_UnitInRegion(gv_deimos, RegionFromId(3)) == true)) || ((gv_deimosMission == 3) && (libNtve_gf_UnitInRegion(gv_deimos, RegionFromId(219)) == true))))) {
        Wait(1.0, c_timeGame);
    }
    if ((gv_deimosEngaged == false) && (gv_gameOver == false)) {
        if ((gv_deimosMission == 1)) {
            TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/7BA34065"), 5.0, c_transmissionDurationAdd, false);
            SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
            UnitIssueOrder(gv_deimos, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(9))), c_orderQueueReplace);
            gv_devastatorsDestroyed = true;
            UnitGroupLoopBegin(UnitGroup("InactiveDevastator", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitKill(UnitGroupLoopCurrent());
                Wait(2.0, c_timeGame);
            }
            UnitGroupLoopEnd();
        }
        else if ((gv_deimosMission == 2)) {
            TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/AF0709C0"), 5.0, c_transmissionDurationAdd, false);
            SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
            UnitIssueOrder(gv_deimos, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(3))), c_orderQueueReplace);
            UnitBehaviorAdd(UnitFromId(590), "DamagedIVAX", gv_boss, 1);
        }
        else if ((gv_deimosMission == 3)) {
            TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/970BB720"), 5.0, c_transmissionDurationAdd, false);
            SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
            UnitIssueOrder(gv_deimos, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(219))), c_orderQueueReplace);
            auto32AF6B59_n = gv_spawnFactor;
            for (auto32AF6B59_i = 1; auto32AF6B59_i <= auto32AF6B59_n; auto32AF6B59_i += 1) {
                UnitCreate(1, "Titan", 0, 14, RegionRandomPoint(RegionFromId(225)), libNtve_gf_RandomAngle());
                UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", UnitLastCreated(), 1);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(2.0, c_timeGame);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW2EnterArmoryDeimos_Init () {
    gt_STW2EnterArmoryDeimos = TriggerCreate("gt_STW2EnterArmoryDeimos_Func");
    TriggerEnable(gt_STW2EnterArmoryDeimos, false);
    TriggerAddEventUnitRegion(gt_STW2EnterArmoryDeimos, null, RegionFromId(122), true);
    TriggerAddEventUnitRegion(gt_STW2EnterArmoryDeimos, null, RegionFromId(122), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Enter Airlock North Gate
//--------------------------------------------------------------------------------------------------
bool gt_STW1EnterAirlockNorthGate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(UnitFromId(168), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(38), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1EnterAirlockNorthGate_Init () {
    gt_STW1EnterAirlockNorthGate = TriggerCreate("gt_STW1EnterAirlockNorthGate_Func");
    TriggerEnable(gt_STW1EnterAirlockNorthGate, false);
    TriggerAddEventUnitRegion(gt_STW1EnterAirlockNorthGate, null, RegionFromId(38), true);
    TriggerAddEventUnitRegion(gt_STW1EnterAirlockNorthGate, null, RegionFromId(38), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Here We Go
//--------------------------------------------------------------------------------------------------
bool gt_STW1HereWeGo_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 1;
    TriggerEnable(gt_ManualSave, true);
    TriggerExecute(gt_STC1ItemSpawn, true, false);
    Wait(8.0, c_timeReal);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(gv_secTeamA, c_messageAreaSubtitle, StringExternal("Param/Value/C32DFC91"));
    UIDisplayMessage(gv_secTeamB, c_messageAreaSubtitle, StringExternal("Param/Value/87732B84"));
    Wait(10.0, c_timeReal);
    SoundPlay(SoundLink("TUIWarningPing", -1), gv_secTeamB, 100.0, 0.0);
    PingCreate(gv_secTeamB, "PingWarning", RegionGetCenter(RegionFromId(119)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0);
    PingCreate(gv_secTeamB, "PingWarning", RegionGetCenter(RegionFromId(120)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0);
    PingCreate(gv_secTeamB, "PingWarning", RegionGetCenter(RegionFromId(121)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0);
    UIDisplayMessage(gv_secTeamB, c_messageAreaSubtitle, StringExternal("Param/Value/E939CB1C"));
    Wait(10.0, c_timeReal);
    if ((gv_totalPlayers > 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_secTeamBMarines, c_unitCountAlive))), StringExternal("Param/Value/AB645118"));
    }

    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(88)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0);
    Wait(10.0, c_timeReal);
    if ((gv_totalPlayers > 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_secTeamBMarines, c_unitCountAlive))), StringExternal("Param/Value/C853061A"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1HereWeGo_Init () {
    gt_STW1HereWeGo = TriggerCreate("gt_STW1HereWeGo_Func");
    TriggerEnable(gt_STW1HereWeGo, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW1 - Enter East Wing Gate (RESCUE)
//--------------------------------------------------------------------------------------------------
bool gt_STW1EnterEastWingGateRESCUE_Func (bool testConds, bool runActions) {
    int autoEF50AC6D_n;
    int autoEF50AC6D_i;

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_secTeamAMarines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_STW1HarassMobCycle);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_RadioNOTD(PlayerName(UnitGetOwner(EventUnit())), StringExternal("Param/Value/83366C0C"));
    UnitIssueOrder(UnitFromId(825), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(88), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if ((UnitGroupCount(gv_secTeamBMarines, c_unitCountAlive) > 0)) {
        gf_AwardPlayerXPNOTD(3);
        Wait(3.0, c_timeReal);
        SoundPlay(SoundLink("TRaynor03Marine800002", -1), PlayerGroupActive(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("TValerian02AInfestedMarine00022", -1), PlayerGroupActive(), 100.0, 0.0);
        autoEF50AC6D_n = (gv_spawnFactor * 2);
        for (autoEF50AC6D_i = 1; autoEF50AC6D_i <= autoEF50AC6D_n; autoEF50AC6D_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran2", 0, 14, RegionRandomPoint(RegionFromId(79)), RegionRandomPoint(RegionFromId(115)));
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowInfestedMarine", 0)), c_orderQueueReplace);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeGame);
        }
    }
    CameraSetBounds(gv_secTeamB, RegionPlayableMap(), true);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/526A2347"), 7.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/F3E4787B"));
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(122)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0);
    TriggerEnable(gt_STW2EnterArmoryDeimos, true);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/C226EB8D"), StringExternal("Param/Value/CD5B26BE"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    Wait(20.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/8EC89155"));
    Wait(7.0, c_timeReal);
    UnitIssueOrder(gv_charlie, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/F22F3EB3"));
    Wait(48.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/AC1D32C7"));
    Wait(35.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/81584031"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/373E7CF8"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/30437D71"));
    TriggerEnable(gt_STTeam2DeathTraps, false);
    Wait(28.0, c_timeReal);
    if ((gv_armoryFired == false)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/28477055"));
    }
    else {
        return true;
    }
    Wait(140.0, c_timeReal);
    if ((gv_armoryFired == false)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/5C0EEB17"));
    }
    else {
        return true;
    }
    Wait(60.0, c_timeReal);
    if ((gv_armoryFired == false)) {
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_AwardRatingNOTD(-1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/BD76034D"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW1EnterEastWingGateRESCUE_Init () {
    gt_STW1EnterEastWingGateRESCUE = TriggerCreate("gt_STW1EnterEastWingGateRESCUE_Func");
    TriggerEnable(gt_STW1EnterEastWingGateRESCUE, false);
    TriggerAddEventUnitRegion(gt_STW1EnterEastWingGateRESCUE, null, RegionFromId(88), true);
    TriggerAddEventUnitRegion(gt_STW1EnterEastWingGateRESCUE, null, RegionFromId(88), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST - Infected Civilians Periodic
//--------------------------------------------------------------------------------------------------
bool gt_STInfectedCiviliansPeriodic_Func (bool testConds, bool runActions) {
    int auto874B9744_n;
    int auto874B9744_i;
    int auto4F34FABF_n;
    int auto4F34FABF_i;

    // Variable Declarations
    int lv_numberOfCiviliansTurned;
    unit lv_poorCiv;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto874B9744_n = 30;
    for (auto874B9744_i = 1; auto874B9744_i <= auto874B9744_n; auto874B9744_i += 1) {
        Wait(7.0, c_timeReal);
        if ((UnitGroupCount(gv_infectedCivilians, c_unitCountAlive) <= 0)) {
        }
        else {
            lv_numberOfCiviliansTurned = RandomInt(0, 3);
            auto4F34FABF_n = lv_numberOfCiviliansTurned;
            for (auto4F34FABF_i = 1; auto4F34FABF_i <= auto4F34FABF_n; auto4F34FABF_i += 1) {
                lv_poorCiv = UnitGroupRandomUnit(gv_infectedCivilians, c_unitCountAlive);
                UnitKill(lv_poorCiv);
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_poorCiv));
                if ((RandomInt(0, 5) == 1)) {
                    UnitCreate(1, "Immortal2", 0, 14, UnitGetPosition(lv_poorCiv), libNtve_gf_RandomAngle());
                }
                else {
                    UnitCreate(1, "ZombieLevel2", 0, 14, UnitGetPosition(lv_poorCiv), libNtve_gf_RandomAngle());
                }
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(RandomFixed(0.01, 3.0), c_timeGame);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STInfectedCiviliansPeriodic_Init () {
    gt_STInfectedCiviliansPeriodic = TriggerCreate("gt_STInfectedCiviliansPeriodic_Func");
    TriggerEnable(gt_STInfectedCiviliansPeriodic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lt Sheng AI
//--------------------------------------------------------------------------------------------------
bool gt_LtShengAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(gv_ltSheng) == true) && (gv_shengAIShutdown == false)) {
        Wait(3.0, c_timeReal);
        if ((DistanceBetweenPoints(UnitGetPosition(gv_ltSheng), UnitGroupCenterOfGroup(gv_marines)) > 9.0)) {
            UnitIssueOrder(gv_ltSheng, Order(AbilityCommand("Stimpack", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_ltSheng, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
            UnitIssueOrder(gv_ltSheng, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 3.1))), c_orderQueueReplace);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(gv_ltSheng), UnitGroupCenterOfGroup(gv_marines)) < 2.9)) {
        }
        else if (true) {
            UnitIssueOrder(gv_ltSheng, OrderTargetingPoint(AbilityCommand("attack", 0), RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 2.5))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LtShengAI_Init () {
    gt_LtShengAI = TriggerCreate("gt_LtShengAI_Func");
    TriggerEnable(gt_LtShengAI, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST Boss 1 - Deimos Engaged
//--------------------------------------------------------------------------------------------------
bool gt_STBoss1DeimosEngaged_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(gv_deimos, c_unitPropLifePercent, c_unitPropCurrent) <= 85.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gv_bossFight = true;
    gv_deimosEngaged = true;
    UnitIssueOrder(gv_deimos, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitGroupAdd(gv_zombieWave, gv_deimos);
    gf_RadioNOTD(StringExternal("Param/Value/7D9EFC22"), StringExternal("Param/Value/7D24C342"));
    gf_TipNOTD(10000, StringExternal("Param/Value/02B65806"));
    Wait(3.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/91B75E77"), 3.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_boss, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, StringExternal("Param/Value/5C5E1120"), StringExternal("Param/Value/F9EE4AE7"), 3.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_DeimosMinionAI();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STBoss1DeimosEngaged_Init () {
    gt_STBoss1DeimosEngaged = TriggerCreate("gt_STBoss1DeimosEngaged_Func");
    TriggerEnable(gt_STBoss1DeimosEngaged, false);
    TriggerAddEventUnitDamaged(gt_STBoss1DeimosEngaged, UnitRefFromVariable("gv_deimos"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST Boss 1 (Deimos) - Attack Shock
//--------------------------------------------------------------------------------------------------
bool gt_STBoss1DeimosAttackShock_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CameraShakeStart(UnitGetOwner(EventUnit()), c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 2.0, 100.0, 0.2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STBoss1DeimosAttackShock_Init () {
    gt_STBoss1DeimosAttackShock = TriggerCreate("gt_STBoss1DeimosAttackShock_Func");
    TriggerEnable(gt_STBoss1DeimosAttackShock, false);
    TriggerAddEventUnitBehaviorChange(gt_STBoss1DeimosAttackShock, null, "Shocked", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_STBoss1DeimosAttackShock, null, "Shocked", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST Boss 1 (Deimos) - Killed
//--------------------------------------------------------------------------------------------------
bool gt_STBoss1DeimosKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_STBoss1DeimosAttackShock, false);
    gf_BossAfterAction();
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gv_shengAIShutdown = true;
    Wait(1.0, c_timeGame);
    gf_UnifiedAwards(4, 275.0, libNtve_gf_DifficultyValueInt(0, 30, 50, 0), 0, 1);
    Wait(1.0, c_timeGame);
    TriggerExecute(gt_AutoSave, true, false);
    Wait(3.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/2C2D4F03"), 3.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/358DDE20"));
    Wait(5.9, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/831531A0"));
    Wait(3.0, c_timeReal);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(gv_ltSheng, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, gv_characterLieutenantSheng, StringExternal("Param/Value/FC238DA8"), 3.0, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(gv_ltSheng, Order(AbilityCommand("Sprint", 0)), c_orderQueueReplace);
    UnitIssueOrder(gv_ltSheng, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(80))), c_orderQueueReplace);
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(126)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 30.0);
    ObjectiveCreate(StringExternal("Param/Value/E94E0C6A"), StringExternal("Param/Value/7BABE330"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_OM6CommTowerTransmission, false);
    TriggerEnable(gt_STW3ToTheCommTower, true);
    TriggerExecute(gt_AFKCheck, true, false);
    Wait(12.0, c_timeReal);
    UnitRemove(gv_ltSheng);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STBoss1DeimosKilled_Init () {
    gt_STBoss1DeimosKilled = TriggerCreate("gt_STBoss1DeimosKilled_Func");
    TriggerEnable(gt_STBoss1DeimosKilled, false);
    TriggerAddEventUnitDied(gt_STBoss1DeimosKilled, UnitRefFromVariable("gv_deimos"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW3 - North West Cocoon Surprise
//--------------------------------------------------------------------------------------------------
bool gt_STW3NorthWestCocoonSurprise_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    Wait(RandomFixed(2.0, 10.0), c_timeReal);
    UnitGroupLoopBegin(UnitGroup("InfestedCocoon", c_playerAny, RegionFromId(127), UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel2", 0, 14, UnitGetPosition(UnitGroupLoopCurrent()), RegionRandomPoint(RegionPlayableMap()));
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(UnitGroupLoopCurrent()));
        UnitKill(UnitGroupLoopCurrent());
        Wait(RandomFixed(0.3, 1.0), c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW3NorthWestCocoonSurprise_Init () {
    gt_STW3NorthWestCocoonSurprise = TriggerCreate("gt_STW3NorthWestCocoonSurprise_Func");
    TriggerEnable(gt_STW3NorthWestCocoonSurprise, false);
    TriggerAddEventUnitRegion(gt_STW3NorthWestCocoonSurprise, null, RegionFromId(127), true);
    TriggerAddEventUnitRegion(gt_STW3NorthWestCocoonSurprise, null, RegionFromId(127), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW3 - To The Comm Tower
//--------------------------------------------------------------------------------------------------
bool gt_STW3ToTheCommTower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;

    // Variable Initialization
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gv_wave = 3;
    gv_hitPar = 30;
    gf_AwardPlayerXPNOTD(3);
    UnitFlashSelection(lv_localUnitA, 2.5);
    PingCreate(PlayerGroupActive(), "PingWarning", UnitGetPosition(lv_localUnitA), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 5.0);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/EF2860EA"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/862ECA66"));
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/D24EB28A"));
    Wait(10.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    PingCreate(PlayerGroupActive(), "PingObjective", RegionGetCenter(RegionFromId(67)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0);
    ObjectiveCreate(StringExternal("Param/Value/19F20F0D"), StringExternal("Param/Value/D2FE60DD"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_STW4TotheScienceLab, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW3ToTheCommTower_Init () {
    gt_STW3ToTheCommTower = TriggerCreate("gt_STW3ToTheCommTower_Func");
    TriggerEnable(gt_STW3ToTheCommTower, false);
    TriggerAddEventUnitRegion(gt_STW3ToTheCommTower, null, RegionFromId(126), true);
    TriggerAddEventUnitRegion(gt_STW3ToTheCommTower, null, RegionFromId(126), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW4 - To the Science Lab
//--------------------------------------------------------------------------------------------------
bool gt_STW4TotheScienceLab_Func (bool testConds, bool runActions) {
    int auto894F633D_n;
    int auto894F633D_i;
    int auto7DCC9CCA_n;
    int auto7DCC9CCA_i;
    int auto89128F57_n;
    int auto89128F57_i;
    int auto60E95C6F_n;
    int auto60E95C6F_i;
    int auto2469B686_n;
    int auto2469B686_i;

    // Variable Declarations
    string lv_waveMobType;

    // Variable Initialization
    lv_waveMobType = "InfestorTerran2";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_STTeam2DeathTraps, false);
    TriggerEnable(gt_STW4EnterLab, true);
    gv_wave = 4;
    if ((RandomInt(0, 10) == 1)) {
        lv_waveMobType = "SeekerBurrowed";
    }
    IntLoopBegin(0, 2);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_UnitCreateFacingPoint(1, "Tartarus", 0, 14, UnitGetPosition(gv_tartarusEggs[IntLoopCurrent()]), RegionRandomPoint(RegionPlayableMap()));
        UnitKill(gv_tartarusEggs[IntLoopCurrent()]);
        Wait(0.1, c_timeReal);
    }
    IntLoopEnd();
    auto894F633D_n = 5;
    for (auto894F633D_i = 1; auto894F633D_i <= auto894F633D_n; auto894F633D_i += 1) {
        auto7DCC9CCA_n = gv_spawnFactor;
        for (auto7DCC9CCA_i = 1; auto7DCC9CCA_i <= auto7DCC9CCA_n; auto7DCC9CCA_i += 1) {
            if ((RandomInt(0, 9) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
            }
            else {
                if ((gv_squadRating >= 1850) && (RandomInt(0, 7) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                }

                libNtve_gf_UnitCreateFacingPoint(1, lv_waveMobType, 0, 14, RegionRandomPoint(RegionFromId(124)), RegionRandomPoint(RegionFromId(115)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
        }
        Wait(RandomFixed(0.2, 2.0), c_timeGame);
        auto89128F57_n = gv_spawnFactor;
        for (auto89128F57_i = 1; auto89128F57_i <= auto89128F57_n; auto89128F57_i += 1) {
            auto60E95C6F_n = gv_spawnFactor;
            for (auto60E95C6F_i = 1; auto60E95C6F_i <= auto60E95C6F_n; auto60E95C6F_i += 1) {
                if ((RandomInt(0, 9) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
                }
                else {
                    if ((gv_squadRating >= 1850) && (RandomInt(0, 7) == 1)) {
                        libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
                        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    }

                    libNtve_gf_UnitCreateFacingPoint(1, lv_waveMobType, 0, 14, RegionRandomPoint(RegionFromId(123)), RegionRandomPoint(RegionFromId(115)));
                    UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
                }
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.1, c_timeGame);
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeGame);
        }
        Wait(RandomFixed(0.2, 2.0), c_timeGame);
        auto2469B686_n = gv_spawnFactor;
        for (auto2469B686_i = 1; auto2469B686_i <= auto2469B686_n; auto2469B686_i += 1) {
            if ((RandomInt(0, 9) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
            }
            else {
                if ((gv_squadRating >= 1850) && (RandomInt(0, 7) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                }

                libNtve_gf_UnitCreateFacingPoint(1, lv_waveMobType, 0, 14, RegionRandomPoint(RegionFromId(125)), RegionRandomPoint(RegionFromId(115)));
                UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("UnburrowZombieLevel1", 0)), c_orderQueueReplace);
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.2, c_timeGame);
        }
        Wait(3.5, c_timeReal);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/DF882DB6"));
    Wait(RandomFixed(0.0, 180.0), c_timeReal);
    UnitGroupLoopBegin(UnitGroup("Tartarus", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitGroupAdd(gv_zombieWave, UnitGroupLoopCurrent());
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "SpeedBuff20", 14, 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW4TotheScienceLab_Init () {
    gt_STW4TotheScienceLab = TriggerCreate("gt_STW4TotheScienceLab_Func");
    TriggerEnable(gt_STW4TotheScienceLab, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW4 - Enter Lab
//--------------------------------------------------------------------------------------------------
bool gt_STW4EnterLab_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gv_hitPar = 40;
    gf_AwardPlayerXPNOTD(3);
    TriggerExecute(gt_AutoSave, true, false);
    UnitSetScale(gv_tartarusCocoon, 205.0, 205.0, 205.0);
    UnitFlashSelection(EventUnit(), 0.5);
    gf_MarineSpeechNOTD(EventUnit(), StringExternal("Param/Value/085CC1A1"));
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    TriggerExecute(gt_STW5LabCinematic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW4EnterLab_Init () {
    gt_STW4EnterLab = TriggerCreate("gt_STW4EnterLab_Func");
    TriggerEnable(gt_STW4EnterLab, false);
    TriggerAddEventUnitRegion(gt_STW4EnterLab, null, RegionFromId(67), true);
    TriggerAddEventUnitRegion(gt_STW4EnterLab, null, RegionFromId(67), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW5 - Lab Cinematic
//--------------------------------------------------------------------------------------------------
bool gt_STW5LabCinematic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("MissionpitchesHanson00017", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/75315112"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("THorner01ConfederateAdjutant00004", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/2FBBC3C6"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("LabFidgetsAdjutantConfederateAdjutant00011", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TTychus02BriefingAdjutant00001", -1), PlayerGroupActive(), 100.0, 0.0);
    TriggerExecute(gt_STBoss2SpawnNazara, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW5LabCinematic_Init () {
    gt_STW5LabCinematic = TriggerCreate("gt_STW5LabCinematic_Func");
    TriggerEnable(gt_STW5LabCinematic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST - Boss 2 Spawn (Nazara)
//--------------------------------------------------------------------------------------------------
bool gt_STBoss2SpawnNazara_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_nazaraPing;

    // Variable Initialization
    lv_nazaraPing = c_invalidPingId;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 5;
    gv_hitPar = 45;
    libNtve_gf_UnitCreateFacingPoint(1, "Nazara", 0, 13, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
    gv_nazara = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, gv_nazara);
    gv_bossFight = true;
    if ((gv_alivePlayers <= 3)) {
        UnitSetPropertyFixed(gv_nazara, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_nazara, c_unitPropLifeMax, c_unitPropCurrent) * 0.6));
        UnitSetPropertyFixed(gv_nazara, c_unitPropLife, (UnitGetPropertyFixed(gv_nazara, c_unitPropLife, c_unitPropCurrent) * 0.6));
    }

    PingCreate(PlayerGroupActive(), "PingBoss", UnitGetPosition(gv_nazara), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 120.0);
    PingSetUnit(PingLastCreated(), gv_nazara);
    gv_currentBoss = "Nazara";
    lv_nazaraPing = PingLastCreated();
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_nazara, ge_Ping_Enabled);
    TriggerEnable(gt_STBoss2Killed, true);
    TriggerEnable(gt_STBoss2Clone, true);
    TriggerExecute(gt_STBoss2AI, true, false);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/A14F7CAB"));
    Wait(2.0, c_timeReal);
    SoundPlay(SoundLink("TRaynor01Raynor00042", -1), PlayerGroupAll(), 100.0, 0.0);
    while (!((UnitIsAlive(gv_nazara) == false))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(lv_nazaraPing);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STBoss2SpawnNazara_Init () {
    gt_STBoss2SpawnNazara = TriggerCreate("gt_STBoss2SpawnNazara_Func");
    TriggerEnable(gt_STBoss2SpawnNazara, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST - Boss 2 AI
//--------------------------------------------------------------------------------------------------
bool gt_STBoss2AI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_harbingerUnit;
    unitgroup lv_harbingerConsiderationSet;

    // Variable Initialization
    lv_harbingerConsiderationSet = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(gv_nazara) == true)) {
        if ((gv_alivePlayers <= 3)) {
            Wait(14.0, c_timeReal);
        }
        else {
            Wait(7.0, c_timeReal);
        }
        if ((gv_nightmare == true)) {
            libNtve_gf_UnitCreateFacingPoint(1, "X1GuardianLevel2", 0, 13, UnitGetPosition(gv_nazara), RegionRandomPoint(RegionPlayableMap()));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "X1GuardianLevel1", 0, 13, UnitGetPosition(gv_nazara), RegionRandomPoint(RegionPlayableMap()));
        }
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        if ((RandomInt(1, 2) == 1)) {
            UnitGroupLoopBegin(gv_zombieWave);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), libNtve_gf_CenterOfUnitGroup(gv_marines)) < 20.0) && (UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == false)) {
                    UnitGroupAdd(lv_harbingerConsiderationSet, UnitGroupLoopCurrent());
                }

            }
            UnitGroupLoopEnd();
            SoundPlay(SoundLink("Harbinger", -1), PlayerGroupAll(), 100.0, 0.0);
            lv_harbingerUnit = UnitGroupRandomUnit(lv_harbingerConsiderationSet, c_unitCountAlive);
            UnitBehaviorAddPlayer(lv_harbingerUnit, "HeightenedSensesDebuff", 1, 1);
            Wait(5.0, c_timeReal);
            UnitSetPropertyFixed(lv_harbingerUnit, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_harbingerUnit, c_unitPropLifeMax, c_unitPropCurrent) + 3500.0));
            UnitSetPropertyFixed(lv_harbingerUnit, c_unitPropLifePercent, 100.0);
            UnitBehaviorAddPlayer(lv_harbingerUnit, "Rampage", 14, 2);
            UnitBehaviorAddPlayer(lv_harbingerUnit, "Detector5", 14, 1);
            UnitBehaviorAddPlayer(lv_harbingerUnit, "WarbotFate", 14, 1);
            UnitGroupLoopBegin(lv_harbingerConsiderationSet);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitGroupRemove(lv_harbingerConsiderationSet, UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STBoss2AI_Init () {
    gt_STBoss2AI = TriggerCreate("gt_STBoss2AI_Func");
    TriggerEnable(gt_STBoss2AI, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST - Boss 2 Clone
//--------------------------------------------------------------------------------------------------
bool gt_STBoss2Clone_Func (bool testConds, bool runActions) {
    int auto6B2508B8_n;
    int auto6B2508B8_i;

    // Conditions
    if (testConds) {
        if (!((UnitGetPropertyFixed(gv_nazara, c_unitPropLifePercent, c_unitPropCurrent) < 51.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    SoundPlay(SoundLink("Hybrid_Blink", -1), PlayerGroupAll(), 100.0, 0.0);
    GameSetLighting("AdsiPistol", 0.5);
    Wait(0.2, c_timeGame);
    libNtve_gf_ChangeUnitDamage(gv_nazara, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
    UnitBehaviorRemove(gv_nazara, "LaserDesignatorLevel1", 3);
    UnitBehaviorRemove(gv_nazara, "LaserDesignatorLevel2", 3);
    UnitBehaviorRemove(gv_nazara, "LaserDesignatorLevel3", 3);
    UnitSetPosition(gv_nazara, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_nazara), 9.0)), false);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Blind", 14, 1);
    }
    UnitGroupLoopEnd();
    auto6B2508B8_n = gv_spawnFactor;
    for (auto6B2508B8_i = 1; auto6B2508B8_i <= auto6B2508B8_n; auto6B2508B8_i += 1) {
        UnitCreate(1, "Nazara", 0, 13, RegionRandomPoint(RegionCircle(UnitGetPosition(gv_nazara), 9.0)), libNtve_gf_RandomAngle());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 50.0);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Minimal);
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitGroupAdd(gv_nazaraImages, UnitLastCreated());
        if ((gv_nightmare == false)) {
            libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Minimal);
        }

    }
    Wait(1.0, c_timeGame);
    UnitBehaviorRemove(gv_nazara, "LaserDesignatorLevel1", 3);
    UnitBehaviorRemove(gv_nazara, "LaserDesignatorLevel2", 3);
    UnitBehaviorRemove(gv_nazara, "LaserDesignatorLevel3", 3);
    GameSetLighting("NOTDSecTeamLight", 0.5);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/B88C671E"));
    Wait(3.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/45C27368"));
    Wait(3.0, c_timeReal);
    libNtve_gf_ChangeUnitDamage(gv_nazara, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
    UnitGroupLoopBegin(gv_nazaraImages);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ChangeUnitDamage(UnitGroupLoopCurrent(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STBoss2Clone_Init () {
    gt_STBoss2Clone = TriggerCreate("gt_STBoss2Clone_Func");
    TriggerEnable(gt_STBoss2Clone, false);
    TriggerAddEventUnitDamaged(gt_STBoss2Clone, UnitRefFromVariable("gv_nazara"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ST - Boss 2 Killed
//--------------------------------------------------------------------------------------------------
bool gt_STBoss2Killed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossAfterAction();
    UnitGroupLoopBegin(gv_nazaraImages);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_UnifiedAwards(7, 275.0, libNtve_gf_DifficultyValueInt(0, 50, 110, 0), 0, 2);
    if ((gv_nightmare == true)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/2D9A3D5E"));
        SoundPlay(SoundLink("EMPBurstSound", -1), PlayerGroupAll(), 100.0, 0.0);
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropEnergyPercent, 0.0);
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropShieldsPercent, 0.0);
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, UnitGetPosition(UnitGroupLoopCurrent()));
        }
        UnitGroupLoopEnd();
        Wait(3.0, c_timeReal);
    }

    SoundPlay(SoundLink("THorner04Marine00020", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/338A4C58"));
    TriggerExecute(gt_STW6LaserTime, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STBoss2Killed_Init () {
    gt_STBoss2Killed = TriggerCreate("gt_STBoss2Killed_Func");
    TriggerEnable(gt_STBoss2Killed, false);
    TriggerAddEventUnitDied(gt_STBoss2Killed, UnitRefFromVariable("gv_nazara"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW6 - Laser Time
//--------------------------------------------------------------------------------------------------
bool gt_STW6LaserTime_Func (bool testConds, bool runActions) {
    int auto27F284E9_n;
    int auto27F284E9_i;
    int auto18FBCCB1_n;
    int auto18FBCCB1_i;
    int auto8A95B51C_n;
    int auto8A95B51C_i;
    int auto3036D578_n;
    int auto3036D578_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 6;
    gv_hitPar = 45;
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/C68BF08E"));
    Wait(3.9, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/2757CF11"));
    SoundPlay(SoundLink("Purifier_PowerUp", -1), PlayerGroupAll(), 100.0, 0.0);
    libNtve_gf_UnitCreateFacingPoint(1, "IonCannon", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 20.0)), RegionRandomPoint(RegionPlayableMap()));
    gv_ionCannonA = UnitLastCreated();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    UnitBehaviorAdd(gv_ionCannonA, "CritterWander", gv_ionCannonA, 1);
    auto27F284E9_n = gv_spawnFactor;
    for (auto27F284E9_i = 1; auto27F284E9_i <= auto27F284E9_n; auto27F284E9_i += 1) {
        gf_SmartSpawnNOTD("Immortal22", 30.0);
        Wait(0.1, c_timeGame);
    }
    Wait(5.0, c_timeReal);
    auto18FBCCB1_n = gv_spawnFactor;
    for (auto18FBCCB1_i = 1; auto18FBCCB1_i <= auto18FBCCB1_n; auto18FBCCB1_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran", 0, 14, RegionRandomPoint(RegionFromId(78)), RegionRandomPoint(RegionPlayableMap()));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.01, c_timeGame);
    }
    Wait(5.0, c_timeReal);
    auto8A95B51C_n = gv_spawnFactor;
    for (auto8A95B51C_i = 1; auto8A95B51C_i <= auto8A95B51C_n; auto8A95B51C_i += 1) {
        gf_SmartSpawnNOTD("Immortal22", 30.0);
        Wait(0.1, c_timeGame);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/A2C6FC3F"));
    Wait(10.0, c_timeReal);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/F3A5AC8E"));
    auto3036D578_n = gv_spawnFactor;
    for (auto3036D578_i = 1; auto3036D578_i <= auto3036D578_n; auto3036D578_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran", 0, 14, RegionRandomPoint(RegionFromId(81)), RegionRandomPoint(RegionPlayableMap()));
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.01, c_timeGame);
    }
    Wait(12.0, c_timeReal);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/07C1794C"));
    Wait(12.0, c_timeReal);
    TriggerExecute(gt_STW7LaserEscalates, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW6LaserTime_Init () {
    gt_STW6LaserTime = TriggerCreate("gt_STW6LaserTime_Func");
    TriggerEnable(gt_STW6LaserTime, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW7 - Laser Escalates
//--------------------------------------------------------------------------------------------------
bool gt_STW7LaserEscalates_Func (bool testConds, bool runActions) {
    int autoF98C30F8_n;
    int autoF98C30F8_i;
    int autoD0314B4E_n;
    int autoD0314B4E_i;
    int auto91BD0505_n;
    int auto91BD0505_i;
    int auto59C26097_n;
    int auto59C26097_i;
    int autoB44FF889_n;
    int autoB44FF889_i;
    int auto4F5665B4_n;
    int auto4F5665B4_i;
    int autoF98BA208_n;
    int autoF98BA208_i;
    int auto31D297D3_n;
    int auto31D297D3_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 7;
    gv_hitPar = 50;
    gf_AwardPlayerXPNOTD(3);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/77CE5292"));
    Wait(5.0, c_timeReal);
    if ((gv_noNewbie == true) && (gv_alivePlayers > 4)) {
        libNtve_gf_UnitCreateFacingPoint(1, "IonCannon", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 20.0)), RegionRandomPoint(RegionPlayableMap()));
        gv_ionCannonB = UnitLastCreated();
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        UnitBehaviorAdd(gv_ionCannonB, "CritterWander", gv_ionCannonB, 1);
    }

    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/3ACC4148"));
    if ((gv_nightmare == true) && (gv_alivePlayers > 5)) {
        libNtve_gf_UnitCreateFacingPoint(1, "IonCannon", 0, 14, RegionRandomPoint(RegionFromId(68)), RegionRandomPoint(RegionPlayableMap()));
        gv_ionCannonC = UnitLastCreated();
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        UnitBehaviorAdd(gv_ionCannonC, "CritterWander", gv_ionCannonC, 1);
    }

    UnitGroupLoopBegin(UnitGroup("SentryGunUnderground", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 13, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SentryGun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 13, false);
    }
    UnitGroupLoopEnd();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/3258859A"));
    autoF98C30F8_n = gv_spawnFactor;
    for (autoF98C30F8_i = 1; autoF98C30F8_i <= autoF98C30F8_n; autoF98C30F8_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(2, "UltraliskBurrowed", 0, 14, RegionRandomPoint(gv_bioDomeSpawn[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
        UnitGroupIssueOrder(UnitLastCreatedGroup(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.01, c_timeGame);
    }
    Wait(5.0, c_timeReal);
    autoD0314B4E_n = gv_spawnFactor;
    for (autoD0314B4E_i = 1; autoD0314B4E_i <= autoD0314B4E_n; autoD0314B4E_i += 1) {
        gf_SmartSpawnNOTD("ZombieLevel22", 80.0);
        Wait(0.01, c_timeGame);
    }
    Wait(5.0, c_timeReal);
    auto91BD0505_n = gv_spawnFactor;
    for (auto91BD0505_i = 1; auto91BD0505_i <= auto91BD0505_n; auto91BD0505_i += 1) {
        auto59C26097_n = gv_spawnFactor;
        for (auto59C26097_i = 1; auto59C26097_i <= auto59C26097_n; auto59C26097_i += 1) {
            gf_SmartSpawnNOTD("ZombieLevel22", 80.0);
            Wait(0.01, c_timeGame);
        }
        Wait(0.1, c_timeGame);
    }
    if ((RandomInt(0, 1) == 1)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/37082E92"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(192)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
        gv_mainframeSite = RegionFromId(192);
        gv_mainframeTerminals[1] = RegionFromId(193);
        gv_mainframeTerminals[2] = RegionFromId(194);
        gv_mainframeTerminals[3] = RegionFromId(195);
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(18), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(19), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(20), "DecalProtoss");
    }
    else {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/FA88ACEF"));
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(1)), ColorWithAlpha(0.00, 50.20, 100.00, 0.00), 60.0, 270.0);
        gv_mainframeSite = RegionFromId(1);
        gv_mainframeTerminals[1] = RegionFromId(18);
        gv_mainframeTerminals[2] = RegionFromId(19);
        gv_mainframeTerminals[3] = RegionFromId(20);
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(193), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(194), "DecalProtoss");
        libNtve_gf_RemoveDoodadsinRegion(RegionFromId(195), "DecalProtoss");
    }
    TriggerExecute(gt_STW7HALShutdownInitiate, true, false);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/D63C42F0"), StringExternal("Param/Value/2B3C2461"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(4.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/DAD3C239"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/55FF76F7"));
    Wait(3.0, c_timeReal);
    SoundPlay(SoundLink("PsiDisruptor_What", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorAdd(gv_ionCannonA, "Frenzy35", gv_ionCannonA, 1);
    UnitBehaviorAdd(gv_ionCannonB, "Frenzy35", gv_ionCannonB, 1);
    UnitBehaviorAdd(gv_ionCannonC, "Frenzy35", gv_ionCannonC, 1);
    autoB44FF889_n = gv_spawnFactor;
    for (autoB44FF889_i = 1; autoB44FF889_i <= autoB44FF889_n; autoB44FF889_i += 1) {
        auto4F5665B4_n = gv_spawnFactor;
        for (auto4F5665B4_i = 1; auto4F5665B4_i <= auto4F5665B4_n; auto4F5665B4_i += 1) {
            gf_SmartSpawnNOTD("ZombieLevel22", 80.0);
            Wait(0.01, c_timeGame);
        }
        Wait(0.1, c_timeGame);
    }
    Wait(20.0, c_timeReal);
    autoF98BA208_n = gv_spawnFactor;
    for (autoF98BA208_i = 1; autoF98BA208_i <= autoF98BA208_n; autoF98BA208_i += 1) {
        auto31D297D3_n = gv_spawnFactor;
        for (auto31D297D3_i = 1; auto31D297D3_i <= auto31D297D3_n; auto31D297D3_i += 1) {
            gf_SmartSpawnNOTD("ZombieLevel22", 80.0);
            Wait(0.01, c_timeGame);
        }
        Wait(0.1, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW7LaserEscalates_Init () {
    gt_STW7LaserEscalates = TriggerCreate("gt_STW7LaserEscalates_Func");
    TriggerEnable(gt_STW7LaserEscalates, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW7 - HAL Shutdown Initiate
//--------------------------------------------------------------------------------------------------
bool gt_STW7HALShutdownInitiate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while (!((DistanceBetweenPoints(libNtve_gf_CenterOfUnitGroup(gv_marines), RegionGetCenter(gv_mainframeSite)) < 15.0))) {
        Wait(1.0, c_timeGame);
    }
    gv_globalIntA = 0;
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/7052DA1E"));
    libNtve_gf_DisplayBossBar(4, "Assets\\Textures\\btn-tips-computerterminals.dds", StringExternal("Param/Value/1134BED8"), 100, PlayerGroupActive());
    libNtve_gf_SetBossBarCurrentValue(4, 0, true);
    libNtve_gf_SetBossBarRace(4, libNtve_ge_BossBarRace_Protoss, true);
    TriggerEnable(gt_STW7HALShutdownCycle, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW7HALShutdownInitiate_Init () {
    gt_STW7HALShutdownInitiate = TriggerCreate("gt_STW7HALShutdownInitiate_Func");
    TriggerEnable(gt_STW7HALShutdownInitiate, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW7 - HAL Shutdown Cycle
//--------------------------------------------------------------------------------------------------
bool gt_STW7HALShutdownCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;
    bool lv_uploadCheck;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_performanceTimer += 1;
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, gv_mainframeTerminals[1], 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, gv_mainframeTerminals[1], 0), c_unitCountAlive), 0.75);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        if ((gv_alivePlayers > 2)) {
            lv_dataPoints -= 1;
        }

    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, gv_mainframeTerminals[2], 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, gv_mainframeTerminals[2], 0), c_unitCountAlive), 0.75);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        if ((gv_alivePlayers > 2)) {
            lv_dataPoints -= 1;
        }

    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, gv_mainframeTerminals[3], 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, gv_mainframeTerminals[3], 0), c_unitCountAlive), 0.75);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        if ((gv_alivePlayers > 2)) {
            lv_dataPoints -= 1;
        }

    }
    if ((lv_uploadCheck == true)) {
        if ((gv_globalIntA == 89) && (gv_hALPleas[5] == false)) {
            gv_hALPleas[5] = true;
            gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/62A60735"));
        }
        else if ((gv_globalIntA == 74) && (gv_hALPleas[4] == false)) {
            gv_hALPleas[4] = true;
            gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/FB33F781"));
            UnitBehaviorRemove(gv_ionCannonA, "Frenzy35", 1);
            UnitBehaviorRemove(gv_ionCannonB, "Frenzy35", 1);
            UnitBehaviorRemove(gv_ionCannonC, "Frenzy35", 1);
        }
        else if ((gv_globalIntA == 51) && (gv_hALPleas[3] == false)) {
            gv_hALPleas[3] = true;
            gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/2984D23E"));
        }
        else if ((gv_globalIntA == 29) && (gv_hALPleas[2] == false)) {
            gv_hALPleas[2] = true;
            gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/D96BF6CE"));
        }
        else if ((gv_globalIntA == 3) && (gv_hALPleas[1] == false)) {
            gv_hALPleas[1] = true;
            gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/CDBBA6C1"));
        }
    }

    gv_globalIntA += lv_dataPoints;
    if ((gv_globalIntA > 100)) {
        gv_globalIntA = 100;
    }

    if ((gv_globalIntA < 0)) {
        gv_globalIntA = 0;
    }

    libNtve_gf_SetBossBarCurrentValue(4, gv_globalIntA, true);
    if ((gv_globalIntA >= 100)) {
        TriggerExecute(gt_STW7HALShutdownComplete, true, false);
        TriggerEnable(gt_STW7HALShutdownCycle, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW7HALShutdownCycle_Init () {
    gt_STW7HALShutdownCycle = TriggerCreate("gt_STW7HALShutdownCycle_Func");
    TriggerEnable(gt_STW7HALShutdownCycle, false);
    TriggerAddEventTimePeriodic(gt_STW7HALShutdownCycle, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW7 - HAL Shutdown Complete
//--------------------------------------------------------------------------------------------------
bool gt_STW7HALShutdownComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localIntA;

    // Variable Initialization
    lv_localIntA = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_STC2AmbientSpawns();
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/71327501"));
    UnitSetScale(gv_tartarusCocoon, 220.0, 220.0, 220.0);
    SoundPlay(SoundLink("LabFidgetsAdjutantConfederateAdjutant00003", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.5, c_timeReal);
    SoundPlay(SoundLink("Purifier_PowerDown", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitRemove(gv_ionCannonA);
    Wait(0.5, c_timeReal);
    UnitRemove(gv_ionCannonB);
    Wait(0.5, c_timeReal);
    UnitRemove(gv_ionCannonC);
    Wait(0.8, c_timeReal);
    libNtve_gf_RemoveDoodadsinRegion(gv_mainframeSite, "DecalProtoss");
    gf_AwardPlayerXPNOTD(5);
    gv_hitPar = 30;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/64870BB9"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UnitGroupLoopBegin(UnitGroup("SentryGunUnderground", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 0, false);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SentryGun", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 0, false);
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_OM3ArmoryTurrets, true);
    gf_AwardRatingNOTD(1);
    gf_AwardCreditsNOTD(20);
    if ((gv_performanceTimer <= 39)) {
        gf_AwardPlayerXPNOTD(3);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/9263B5DE"));
        gf_AwardRatingNOTD(2);
    }

    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    libNtve_gf_ShowHideBossBar(false, 4);
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/186567B9"));
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/7ED7EB38"));
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_STC2Initialize, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW7HALShutdownComplete_Init () {
    gt_STW7HALShutdownComplete = TriggerCreate("gt_STW7HALShutdownComplete_Func");
    TriggerEnable(gt_STW7HALShutdownComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC2 - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_STC2Initialize_Func (bool testConds, bool runActions) {
    int autoDDB5831C_n;
    int autoDDB5831C_i;

    // Variable Declarations
    int lv_randominteger;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_john, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    TriggerEnable(gt_ACEnterScrapyardGate, true);
    TriggerExecute(gt_ACEnterLabNorthGate, false, false);
    TriggerEnable(gt_ACEnterApolloDockGate, true);
    TriggerEnable(gt_ACEnterApolloReactorGate, true);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/C96DA3DC"));
    Wait(5.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/3943838A"));
    Wait(3.5, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/EC92B6ED"));
    Wait(3.5, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/C38A84FC"));
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_ChapterEndMedicRatingBonus, true, false);
    TriggerExecute(gt_VetPugGameBonus, true, false);
    TriggerExecute(gt_NightmareBonus, true, false);
    TriggerExecute(gt_STC2ItemSpawn, true, false);
    gv_drBergmannEscapeZones[1] = RegionFromId(122);
    gv_drBergmannEscapeZones[2] = RegionFromId(136);
    gv_drBergmannEscapeZones[3] = RegionFromId(1);
    gv_drBergmannEscapeZones[4] = RegionFromId(3);
    gv_drBergmannEscapeZones[5] = RegionFromId(135);
    gv_drBergmannEscapeZones[6] = RegionFromId(103);
    gv_drBergmannEscapeZones[7] = RegionFromId(14);
    gv_drBergmannEscapeZonesHeight[1] = 20.0;
    gv_drBergmannEscapeZonesHeight[2] = 24.0;
    gv_drBergmannEscapeZonesHeight[3] = 20.0;
    gv_drBergmannEscapeZonesHeight[4] = 20.5;
    gv_drBergmannEscapeZonesHeight[5] = 20.5;
    gv_drBergmannEscapeZonesHeight[6] = 20.5;
    gv_drBergmannEscapeZonesHeight[7] = 21.0;
    libNtve_gf_UnitCreateFacingPoint(1, "DrBergmann", 0, 13, RegionRandomPoint(RegionFromId(168)), RegionRandomPoint(RegionPlayableMap()));
    gv_drBergmann = UnitLastCreated();
    libNtve_gf_MakeUnitInvulnerable(gv_drBergmann, true);
    Wait(1.0, c_timeReal);
    UnitIssueOrder(UnitFromId(29), Order(AbilityCommand("SecurityGateStraightHorizontalBFLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup(null, 0, RegionFromId(45), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PathingBlocker1x1")) {
            UnitRemove(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/6346A37F"));
    Wait(5.0, c_timeReal);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionFromId(137), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "DisruptionTowerLevel1") || (UnitGetType(UnitGroupLoopCurrent()) == "DisruptionTowerLevel2"))) {
            UnitKill(UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E820F84B"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterDrBergmann, StringExternal("Param/Value/5E6F0326"));
    UnitSetPropertyFixed(gv_drBergmann, c_unitPropMovementSpeed, 3.5);
    UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(55))), c_orderQueueReplace);
    Wait(5.0, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/0997B617"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/1655273D"));
    Wait(5.0, c_timeReal);
    lv_randominteger = RandomInt(1, 7);
    gv_drBergmannHidePoint = gf_RandomPointatGroundHeight(gv_drBergmannEscapeZones[lv_randominteger], gv_drBergmannEscapeZonesHeight[lv_randominteger]);
    UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("move", 0), gv_drBergmannHidePoint), c_orderQueueReplace);
    TriggerExecute(gt_STW8ChaseBergmann, true, false);
    autoDDB5831C_n = gv_spawnFactor;
    for (autoDDB5831C_i = 1; autoDDB5831C_i <= autoDDB5831C_n; autoDDB5831C_i += 1) {
        libNtve_gf_UnitCreateFacingPoint(1, "Slasher2", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 60.0)), RegionRandomPoint(RegionFromId(3)));
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSlasher", 0)), c_orderQueueReplace);
        libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
        Wait(0.1, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC2Initialize_Init () {
    gt_STC2Initialize = TriggerCreate("gt_STC2Initialize_Func");
    TriggerEnable(gt_STC2Initialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC2 - Item Spawn
//--------------------------------------------------------------------------------------------------
bool gt_STC2ItemSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_magazineSpawn;

    // Variable Initialization
    lv_magazineSpawn = 13;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_nightmare == true)) {
        lv_magazineSpawn = 19;
        gf_CreateItemNOTD("Helium3Canister", 2);
    }

    gf_CreateItemNOTD("Magazine", lv_magazineSpawn);
    gf_CreateItemNOTD("AmmoBox", 2);
    gf_CreateItemNOTD("Helium3Canister", 3);
    if ((gv_navyCrossMode == false)) {
        gf_CreateItemNOTD("Medpack", 8);
    }

    if ((gv_noNewbie == true)) {
        gf_CreateItemNOTD("BarrettM112", 1);
        gf_CreateItemNOTD("Shotgun", 1);
        gf_CreateItemNOTD("Chaingun", 1);
        gf_CreateItemNOTD("LaserRifle", 2);
    }
    else {
        gf_CreateItemNOTD("Shotgun", 2);
        gf_CreateItemNOTD("LaserRifle", 3);
    }
    gf_CreateItemNOTD("OccularImplants", 2);
    gf_CreateItemNOTD("ThermalSight", 1);
    gf_CreateItemNOTD("PersonnelArcReactor", 2);
    gf_CreateItemNOTD("CombatMobilityAugment", 1);
    gf_CreateItemNOTD("C4Armor", 2);
    gf_CreateItemNOTD("XS4Armor", 1);
    gf_CreateItemNOTD("HighCapacityClip", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC2ItemSpawn_Init () {
    gt_STC2ItemSpawn = TriggerCreate("gt_STC2ItemSpawn_Func");
    TriggerEnable(gt_STC2ItemSpawn, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW8 - Chase Bergmann
//--------------------------------------------------------------------------------------------------
bool gt_STW8ChaseBergmann_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randominteger;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 8;
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/88B3D376"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/A1177322"), StringExternal("Param/Value/CE2E2FF6"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerExecute(gt_STW8DrBergmannSearchPeriodic, true, false);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/823C2E42"), StringExternal("Param/Value/D1282F00"), 12.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    Wait(12.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    if ((DistanceBetweenPoints(UnitGetPosition(gv_drBergmann), gv_drBergmannHidePoint) >= 10.0) && (gv_drBergmannFound == false) && (UnitIsAlive(gv_drBergmann) == true)) {
        UnitSetPosition(gv_drBergmann, gv_drBergmannHidePoint, true);
    }

    Wait(15.0, c_timeReal);
    if ((RandomInt(0, 2) == 1) && (gv_drBergmannFound == false) && (UnitIsAlive(gv_drBergmann) == true)) {
        lv_randominteger = RandomInt(1, 7);
        gv_drBergmannHidePoint = gf_RandomPointatGroundHeight(gv_drBergmannEscapeZones[lv_randominteger], gv_drBergmannEscapeZonesHeight[lv_randominteger]);
        UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("move", 0), gv_drBergmannHidePoint), c_orderQueueReplace);
    }

    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/50837EF6"));
    Wait(15.0, c_timeReal);
    if ((DistanceBetweenPoints(UnitGetPosition(gv_drBergmann), gv_drBergmannHidePoint) >= 10.0) && (gv_drBergmannFound == false)) {
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/6D589165"));
        UnitSetPosition(gv_drBergmann, gv_drBergmannHidePoint, true);
    }

    Wait(15.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/ECD77C36"));
    if ((RandomInt(0, 2) == 1) && (gv_drBergmannFound == false) && (UnitIsAlive(gv_drBergmann) == true)) {
        lv_randominteger = RandomInt(1, 7);
        gv_drBergmannHidePoint = gf_RandomPointatGroundHeight(gv_drBergmannEscapeZones[lv_randominteger], gv_drBergmannEscapeZonesHeight[lv_randominteger]);
        UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("move", 0), gv_drBergmannHidePoint), c_orderQueueReplace);
    }

    Wait(15.0, c_timeReal);
    if ((DistanceBetweenPoints(UnitGetPosition(gv_drBergmann), gv_drBergmannHidePoint) >= 10.0) && (gv_drBergmannFound == false) && (UnitIsAlive(gv_drBergmann) == true)) {
        UnitSetPosition(gv_drBergmann, gv_drBergmannHidePoint, true);
    }

    Wait(30.0, c_timeReal);
    if ((gv_drBergmannFound == false) && (UnitIsAlive(gv_drBergmann) == true)) {
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/6C897E06"));
        UnitIssueOrder(gv_drBergmann, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_drBergmann), 6.0))), c_orderQueueReplace);
        UnitBehaviorAddPlayer(gv_drBergmann, "SpeedDebuff", 0, 2);
        Wait(3.0, c_timeReal);
        PingCreate(gv_marineSquad, "PingObjective", RegionGetCenter(gv_drBergmannEscapeZones[1]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 30.0);
        PingCreate(gv_marineSquad, "PingObjective", RegionGetCenter(gv_drBergmannEscapeZones[2]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 30.0);
        PingCreate(gv_marineSquad, "PingObjective", RegionGetCenter(gv_drBergmannEscapeZones[3]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 30.0);
        PingCreate(gv_marineSquad, "PingObjective", RegionGetCenter(gv_drBergmannEscapeZones[4]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 30.0);
        PingCreate(gv_marineSquad, "PingObjective", RegionGetCenter(gv_drBergmannEscapeZones[5]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 30.0);
        PingCreate(gv_marineSquad, "PingObjective", RegionGetCenter(gv_drBergmannEscapeZones[6]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 30.0);
        PingCreate(gv_marineSquad, "PingObjective", RegionGetCenter(gv_drBergmannEscapeZones[7]), ColorWithAlpha(95.69, 84.31, 16.86, 0.00), 30.0);
    }

    Wait(45.0, c_timeReal);
    if ((gv_drBergmannFound == false) && (UnitIsAlive(gv_drBergmann) == true)) {
        gf_AwardRatingNOTD(-1);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/2D013564"));
        Wait(1.5, c_timeReal);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_drBergmann), ColorWithAlpha(20.00, 60.00, 100.00, 0.00), 10.0, 270.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW8ChaseBergmann_Init () {
    gt_STW8ChaseBergmann = TriggerCreate("gt_STW8ChaseBergmann_Func");
    TriggerEnable(gt_STW8ChaseBergmann, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW8 - Dr Bergmann Search Periodic
//--------------------------------------------------------------------------------------------------
bool gt_STW8DrBergmannSearchPeriodic_Func (bool testConds, bool runActions) {
    int auto2CA307CC_n;
    int auto2CA307CC_i;
    int auto89A61452_n;
    int auto89A61452_i;
    int auto2D8C5165_n;
    int auto2D8C5165_i;
    int auto5FE00698_n;
    int auto5FE00698_i;

    // Actions
    if (!runActions) {
        return true;
    }

    auto2CA307CC_n = 500;
    for (auto2CA307CC_i = 1; auto2CA307CC_i <= auto2CA307CC_n; auto2CA307CC_i += 1) {
        Wait(5.0, c_timeReal);
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(gv_drBergmann), UnitGetPosition(gv_marineHero[IntLoopCurrent()])) <= 2.0) && (gv_drBergmannFound == false)) {
                gv_drBergmannFound = true;
                gf_BergmannFound(gv_marineHero[IntLoopCurrent()]);
                break;
            }

        }
        IntLoopEnd();
        if ((RandomInt(0, 7) == 1) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 100)) {
            auto89A61452_n = (gv_spawnFactor * 1);
            for (auto89A61452_i = 1; auto89A61452_i <= auto89A61452_n; auto89A61452_i += 1) {
                if ((RandomInt(0, 5) == 1) && (gv_alivePlayers >= 4)) {
                    gf_SmartSpawnNOTD("Wraith2", 80.0);
                }
                else {
                    gf_SmartSpawnNOTD("Mutalisk", 80.0);
                }
                Wait(RandomFixed(0.1, 1.2), c_timeGame);
            }
        }
        else if ((RandomInt(0, 5) == 1) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 100)) {
            auto2D8C5165_n = (gv_spawnFactor * 1);
            for (auto2D8C5165_i = 1; auto2D8C5165_i <= auto2D8C5165_n; auto2D8C5165_i += 1) {
                if ((RandomInt(0, 2) == 1)) {
                    gf_SmartSpawnNOTD("Devourer2", 80.0);
                }
                else {
                    gf_SmartSpawnNOTD("UltraliskBurrowed", 80.0);
                }
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(RandomFixed(0.1, 1.2), c_timeGame);
            }
        }
        else if ((RandomInt(0, 2) == 1) && (PlayerGetPropertyInt(14, c_playerPropSuppliesUsed) < 100)) {
            auto5FE00698_n = (gv_spawnFactor * 2);
            for (auto5FE00698_i = 1; auto5FE00698_i <= auto5FE00698_n; auto5FE00698_i += 1) {
                gf_SmartSpawnNOTD("ZombieLevel22", 60.0);
                Wait(RandomFixed(0.1, 1.2), c_timeGame);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW8DrBergmannSearchPeriodic_Init () {
    gt_STW8DrBergmannSearchPeriodic = TriggerCreate("gt_STW8DrBergmannSearchPeriodic_Func");
    TriggerEnable(gt_STW8DrBergmannSearchPeriodic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW10 - Boss Spawn (Apoptosis)
//--------------------------------------------------------------------------------------------------
bool gt_STW10BossSpawnApoptosis_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 10;
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/A811CC29"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/51ACBD60"));
    libNtve_gf_UnitCreateFacingPoint(1, "Apoptosis", 0, 14, RegionRandomPoint(RegionPlayableMap()), UnitGetPosition(gv_drBergmann));
    gv_apoptosis = UnitLastCreated();
    gv_currentBoss = "Apoptosis";
    if ((gv_alivePlayers < 5)) {
        UnitSetPropertyFixed(gv_apoptosis, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_apoptosis, c_unitPropLifeMax, c_unitPropCurrent) * 0.5));
    }
    else if ((gv_alivePlayers < 3)) {
        UnitSetPropertyFixed(gv_apoptosis, c_unitPropLifeMax, (UnitGetPropertyFixed(gv_apoptosis, c_unitPropLifeMax, c_unitPropCurrent) * 0.35));
    }
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_apoptosis, ge_Ping_Enabled);
    TriggerEnable(gt_STW10ApoptosisAttacked, true);
    TriggerEnable(gt_STW10ApoptosisKilled, true);
    TriggerEnable(gt_STW10ApotosisBloodWave, true);
    SoundPlay(SoundLink("Mutalisk_Ready", -1), PlayerGroupActive(), 100.0, 0.0);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.3, 1.0, 100.0, 1.5);
    }
    IntLoopEnd();
    GameSetLighting("NOTDApoptosisLighting", 0.1);
    Wait(RandomFixed(0.3, 1.0), c_timeReal);
    GameSetLighting("UnknownLight", 0.1);
    Wait(RandomFixed(0.3, 1.0), c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/30F0E2B0"));
    GameSetLighting("NOTDApoptosisLighting", 0.1);
    Wait(RandomFixed(0.3, 1.0), c_timeReal);
    GameSetLighting("UnknownLight", 0.1);
    Wait(RandomFixed(0.3, 1.0), c_timeReal);
    GameSetLighting("NOTDApoptosisLighting", 0.1);
    SoundPlay(SoundLink("TScene11Marine001", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B9079527"));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/1CA9E01E"), StringExternal("Param/Value/4D2D7134"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW10BossSpawnApoptosis_Init () {
    gt_STW10BossSpawnApoptosis = TriggerCreate("gt_STW10BossSpawnApoptosis_Func");
    TriggerEnable(gt_STW10BossSpawnApoptosis, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW10 - Apotosis Blood Wave
//--------------------------------------------------------------------------------------------------
bool gt_STW10ApotosisBloodWave_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(gv_apoptosis, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 5.0))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW10ApotosisBloodWave_Init () {
    gt_STW10ApotosisBloodWave = TriggerCreate("gt_STW10ApotosisBloodWave_Func");
    TriggerEnable(gt_STW10ApotosisBloodWave, false);
    TriggerAddEventPlayerEffectUsed(gt_STW10ApotosisBloodWave, 14, "ApoptosisBloodWave");
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW10 - Apoptosis Attacked
//--------------------------------------------------------------------------------------------------
bool gt_STW10ApoptosisAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_apoptosisDamager;
    fixed lv_apoptosisDamageTaken;

    // Variable Initialization
    lv_apoptosisDamager = EventUnitDamageSourceUnit();
    lv_apoptosisDamageTaken = EventUnitDamageAbsorbed();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() != "ApoptosisBloodDamage"))) {
            return false;
        }

        if (!((UnitHasBehavior(lv_apoptosisDamager, "OpenWound") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitDamage(lv_apoptosisDamager, "ApoptosisBloodDamage", EventUnit(), (lv_apoptosisDamageTaken * libNtve_gf_DifficultyValueFixed(0.9, 0.9, 0.95, 0.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW10ApoptosisAttacked_Init () {
    gt_STW10ApoptosisAttacked = TriggerCreate("gt_STW10ApoptosisAttacked_Func");
    TriggerEnable(gt_STW10ApoptosisAttacked, false);
    TriggerAddEventUnitDamaged(gt_STW10ApoptosisAttacked, UnitRefFromVariable("gv_apoptosis"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW10 - Apoptosis Killed
//--------------------------------------------------------------------------------------------------
bool gt_STW10ApoptosisKilled_Func (bool testConds, bool runActions) {
    int autoDF487DFB_n;
    int autoDF487DFB_i;

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_STW10ApoptosisAttacked, false);
    TriggerEnable(gt_STW10ApotosisBloodWave, false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_BossAfterAction();
    SoundPlay(SoundLink("Mutalisk_Pissed", -1), PlayerGroupActive(), 100.0, 0.0);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraShakeStart(PlayerGroupLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.25, 1.0, 100.0, 1.5);
    }
    PlayerGroupLoopEnd();
    autoDF487DFB_n = 2;
    for (autoDF487DFB_i = 1; autoDF487DFB_i <= autoDF487DFB_n; autoDF487DFB_i += 1) {
        GameSetLighting("NOTDSecTeamLight", 0.1);
        Wait(RandomFixed(0.3, 1.0), c_timeReal);
        GameSetLighting("NOTDApoptosisLighting", 0.1);
        Wait(RandomFixed(0.3, 1.0), c_timeReal);
    }
    GameSetLighting("NOTDSecTeamLight", 0.1);
    gf_UnifiedAwards(10, 265.0, libNtve_gf_DifficultyValueInt(0, 50, 160, 0), 0, 3);
    Wait(3.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/A95F9F3A"));
    Wait(3.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/AF9FAF8F"));
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/838A6F01"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/3C629772"));
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/72600180"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/6A64E79E"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/F547F0EC"));
    Wait(3.0, c_timeReal);
    TriggerExecute(gt_STW10IVAXMission, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW10ApoptosisKilled_Init () {
    gt_STW10ApoptosisKilled = TriggerCreate("gt_STW10ApoptosisKilled_Func");
    TriggerEnable(gt_STW10ApoptosisKilled, false);
    TriggerAddEventUnitDied(gt_STW10ApoptosisKilled, UnitRefFromVariable("gv_apoptosis"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW10 - IVAX Mission
//--------------------------------------------------------------------------------------------------
bool gt_STW10IVAXMission_Func (bool testConds, bool runActions) {
    int auto9EB44215_n;
    int auto9EB44215_i;
    int autoBE1FEB56_n;
    int autoBE1FEB56_i;

    // Variable Declarations
    point lv_iVAXPoint;
    unit lv_iVAXFriendly;
    unit lv_localUnitA;
    int lv_iVAXMissionPath;

    // Variable Initialization
    lv_iVAXPoint = UnitGetPosition(gv_incompleteIVAX);
    lv_iVAXMissionPath = RandomInt(1, 2);

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/F3FA7E20"), StringExternal("Param/Value/89DE7F2D"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(198)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0, 270.0);
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/CBC10B72"));
    lv_iVAXFriendly = UnitFromId(590);
    while (!((((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(198), 0), c_unitCountAlive) >= 1) && (UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(199), 0), c_unitCountAlive) >= 1) && (DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_marines), RegionGetCenter(RegionFromId(199))) < 15.0)) || ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(198), 0), c_unitCountAlive) >= 1) && (UnitGroupCount(gv_marines, c_unitCountAlive) == 1))))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(198), "DecalProtoss");
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(199), "DecalProtoss");
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/6A1B8E3B"));
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2933)), c_animNameDefault, "Stand Work End", c_animFlagFullMatch | c_animFlagNonLooping, c_animTimeDefault);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/53829972"));
    Wait(7.0, c_timeGame);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/F65784AB"));
    Wait(5.45, c_timeGame);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitFromId(2933)), c_animNameDefault, "Stand", c_animFlagPlayForever, c_animTimeDefault);
    libNtve_gf_MakeUnitInvulnerable(UnitFromId(590), false);
    libNtve_gf_PauseUnit(UnitFromId(590), false);
    libNtve_gf_ShowHideUnit(UnitFromId(590), true);
    UnitSetOwner(lv_iVAXFriendly, 9, false);
    libNtve_gf_ChangeUnitDamage(lv_iVAXFriendly, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    UnitBehaviorAddPlayer(lv_iVAXFriendly, "AttackRangeBuff", 9, 1);
    UnitBehaviorAddPlayer(lv_iVAXFriendly, "SensorTowerRadar", 9, 1);
    UnitGroupAdd(gv_secTeamAMarines, lv_iVAXFriendly);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/1F8DE977"));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/3B326EDC"));
    UnitIssueOrder(lv_iVAXFriendly, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2000)), c_orderQueueReplace);
    SoundPlay(SoundLink("SensorTower_What", -1), PlayerGroupAll(), 50.0, 0.0);
    Wait(3.5, c_timeReal);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, StringExternal("Param/Value/40784A13"));
    SoundPlay(SoundLink("Tychus04BriefingAlarm", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitIssueOrder(lv_iVAXFriendly, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(2274)), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/0E2788A5"));
    Wait(3.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    auto9EB44215_n = (gv_spawnFactor * 5);
    for (auto9EB44215_i = 1; auto9EB44215_i <= auto9EB44215_n; auto9EB44215_i += 1) {
        gf_SmartSpawnNOTD("UltraliskBurrowed", 35.0);
        Wait(0.2, c_timeReal);
        gf_SmartSpawnNOTD("HulkBurrowed", 35.0);
        Wait(1.5, c_timeReal);
    }
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/E461E750"));
    Wait(15.0, c_timeReal);
    if ((lv_iVAXMissionPath == 1)) {
        UnitIssueOrder(lv_iVAXFriendly, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(1989)), c_orderQueueReplace);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B14B8D33"));
    }
    else {
        UnitIssueOrder(lv_iVAXFriendly, OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(3194)), c_orderQueueReplace);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/27BB3E98"));
    }
    Wait(15.0, c_timeReal);
    if ((lv_iVAXMissionPath == 1)) {
        UnitIssueOrder(lv_iVAXFriendly, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(1989)), c_orderQueueReplace);
        while (!((DistanceBetweenPoints(UnitGetPosition(lv_iVAXFriendly), PointFromId(1989)) < 5.0))) {
            Wait(1.0, c_timeGame);
        }
    }
    else {
        UnitIssueOrder(lv_iVAXFriendly, OrderTargetingPoint(AbilityCommand("move", 0), PointFromId(3194)), c_orderQueueReplace);
        while (!((DistanceBetweenPoints(UnitGetPosition(lv_iVAXFriendly), PointFromId(3194)) < 5.0))) {
            Wait(1.0, c_timeGame);
        }
    }
    Wait(3.0, c_timeReal);
    lv_localUnitA = UnitGroupRandomUnit(gv_marines, c_unitCountAlive);
    TransmissionSend(PlayerGroupAll(), TransmissionSourceFromUnit(lv_localUnitA, true, true, "Talk"), libNtve_gf_CinematicPortrait(libNtve_ge_CinematicPortraitPosition_CenterLeft), "Talk", null, (StringExternal("Param/Value/E65AD898") + PlayerName(UnitGetOwner(lv_localUnitA))), StringExternal("Param/Value/296F9AA7"), 3.7, c_transmissionDurationAdd, false);
    SoundPlay(SoundLink("Transmission", -1), PlayerGroupAll(), 100.0, 0.0);
    autoBE1FEB56_n = (gv_spawnFactor * 3);
    for (autoBE1FEB56_i = 1; autoBE1FEB56_i <= autoBE1FEB56_n; autoBE1FEB56_i += 1) {
        gf_SmartSpawnNOTD("Slasher2", 30.0);
        Wait(0.2, c_timeReal);
        gf_SmartSpawnNOTD("SeekerBurrowed", 30.0);
        Wait(1.5, c_timeReal);
    }
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/D33799C1"));
    Wait(2.2, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/62C73F80"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("Thor_Build", -1), PlayerGroupActive(), 100.0, 0.0);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/36CF9868"));
    Wait(3.0, c_timeReal);
    UnitBehaviorRemove(lv_iVAXFriendly, "AttackRangeBuff", 1);
    UnitBehaviorRemove(lv_iVAXFriendly, "SensorTowerRadar", 1);
    UnitGroupRemove(gv_secTeamAMarines, lv_iVAXFriendly);
    UnitGroupAdd(gv_zombieWave, lv_iVAXFriendly);
    UnitBehaviorAddPlayer(lv_iVAXFriendly, "SpeedDebuff", 9, 1);
    UnitSetOwner(lv_iVAXFriendly, 14, false);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/860157CA"));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/67AE4653"));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/D8E2D657"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/B4CBD119"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/409F0FCD"));
    UnitGroupRemove(gv_zombieWave, lv_iVAXFriendly);
    UnitIssueOrder(lv_iVAXFriendly, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(4))), c_orderQueueReplace);
    Wait(3.0, c_timeReal);
    UnitRemove(lv_iVAXFriendly);
    TriggerExecute(gt_STW11HiddenHandRevealed, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW10IVAXMission_Init () {
    gt_STW10IVAXMission = TriggerCreate("gt_STW10IVAXMission_Func");
    TriggerEnable(gt_STW10IVAXMission, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW11 - Hidden Hand Revealed
//--------------------------------------------------------------------------------------------------
bool gt_STW11HiddenHandRevealed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_randomRoll;

    // Variable Initialization
    lv_randomRoll = RandomInt(1, 2);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 11;
    gv_hitPar = 55;
    gf_AwardPlayerXPNOTD(3);
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_NightmareBonus, true, false);
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("IncomingTransmission", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice, StringExternal("Param/Value/6D8E73AB"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/5254D5F0"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice, StringExternal("Param/Value/52E03D70"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/33B6A5BE"));
    Wait(6.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/A0CC7D6C"));
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/E7C7632E"));
    Wait(8.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalLee, StringExternal("Param/Value/8937B730"));
    Wait(2.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/FE4E7695"));
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalLee, StringExternal("Param/Value/7E2DE1DC"));
    Wait(7.0, c_timeReal);
    SoundPlay(SoundLink("UI_ObjectiveUpdate", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/9A8995D6"));
    TriggerEnable(gt_SecTeamChoice, true);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/F403A291"));
    TimerStart(gv_chapterSelectionTimer, 30.0, false, c_timeReal);
    TimerWindowCreate(gv_chapterSelectionTimer, StringExternal("Param/Value/2D25FC8C"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), true);
    gf_AutoSaveLong();
    Wait(30.0, c_timeReal);
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    if ((gv_wave == 11)) {
        TriggerEnable(gt_SecTeamChoice, false);
        if ((lv_randomRoll == 1)) {
            TriggerExecute(gt_STC3aInitialize, true, false);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/B261101F"));
        }
        else if ((lv_randomRoll == 2)) {
            TriggerExecute(gt_STC3bInitialize, true, false);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/F909DF9B"));
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW11HiddenHandRevealed_Init () {
    gt_STW11HiddenHandRevealed = TriggerCreate("gt_STW11HiddenHandRevealed_Func");
    TriggerEnable(gt_STW11HiddenHandRevealed, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sec Team Choice
//--------------------------------------------------------------------------------------------------
bool gt_SecTeamChoice_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_marineHero[EventPlayer()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    UnitIssueOrder(gv_john, OrderTargetingPoint(AbilityCommand("move", 1), RegionRandomPoint(RegionPlayableMap())), c_orderQueueReplace);
    TimerPause(gv_chapterSelectionTimer, true);
    gv_wave = 12;
    TriggerExecute(gt_ChapterEndMedicRatingBonus, true, false);
    UnitGroupLoopBegin(UnitGroup("Egg", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    if (((EventChatMessage(false) == "a") || (EventChatMessage(false) == "A"))) {
        TriggerExecute(gt_STC3aInitialize, true, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/16CA7FA0"));
    }
    else if (((EventChatMessage(false) == "b") || (EventChatMessage(false) == "B"))) {
        TriggerExecute(gt_STC3bInitialize, true, false);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/4A0869ED"));
    }
    TimerWindowShow(TimerWindowLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SecTeamChoice_Init () {
    gt_SecTeamChoice = TriggerCreate("gt_SecTeamChoice_Func");
    TriggerEnable(gt_SecTeamChoice, false);
    TriggerAddEventChatMessage(gt_SecTeamChoice, c_playerAny, "A", true);
    TriggerAddEventChatMessage(gt_SecTeamChoice, c_playerAny, "a", true);
    TriggerAddEventChatMessage(gt_SecTeamChoice, c_playerAny, "B", true);
    TriggerAddEventChatMessage(gt_SecTeamChoice, c_playerAny, "b", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3a - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_STC3aInitialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_undergroundQuarters[1] = RegionFromId(142);
    gv_undergroundQuarters[2] = RegionFromId(143);
    gv_undergroundQuarters[3] = RegionFromId(144);
    gv_undergroundQuarters[4] = RegionFromId(145);
    gf_RadioNOTD(gv_characterFieldMarshalLee, StringExternal("Param/Value/7BCC56D3"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", RegionGetCenter(RegionFromId(146)), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 15.0, 270.0);
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalLee, StringExternal("Param/Value/F8AA7F3F"));
    ObjectiveCreate(StringExternal("Param/Value/6E129DCA"), StringExternal("Param/Value/95989DA8"), c_objectiveStateActive, true);
    TriggerEnable(gt_STC3aEngageCommunicationLines, true);
    gv_primaryObjective = ObjectiveLastCreated();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/6311462F"), StringExternal("Param/Value/F4FD9381"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalLee, StringExternal("Param/Value/34A0856D"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(StringExternal("Param/Value/209B52FF"), StringExternal("Param/Value/667F6B4A"));
    Wait(5.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/1C988643"), StringExternal("Param/Value/F32ED3E3"), 12.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    TriggerExecute(gt_STW13CiviliansGoWild, true, false);
    Wait(12.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3aInitialize_Init () {
    gt_STC3aInitialize = TriggerCreate("gt_STC3aInitialize_Func");
    TriggerEnable(gt_STC3aInitialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW13 - Civilians Go Wild
//--------------------------------------------------------------------------------------------------
bool gt_STW13CiviliansGoWild_Func (bool testConds, bool runActions) {
    int auto77FCB9A1_n;
    int auto77FCB9A1_i;
    int autoF0A85AF4_n;
    int autoF0A85AF4_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 13;
    gv_hitPar = 55;
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalLee, StringExternal("Param/Value/0286289B"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", RegionGetCenter(RegionFromId(142)), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 30.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", RegionGetCenter(RegionFromId(143)), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 30.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", RegionGetCenter(RegionFromId(144)), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 30.0, 270.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingBaseAttack", RegionGetCenter(RegionFromId(145)), ColorWithAlpha(0.00, 0.00, 0.00, 0.00), 30.0, 270.0);
    Wait(7.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalLee, StringExternal("Param/Value/9B06E633"));
    TriggerEnable(gt_STC3aInfectedCiviliansPeriodic, true);
    auto77FCB9A1_n = 25;
    for (auto77FCB9A1_i = 1; auto77FCB9A1_i <= auto77FCB9A1_n; auto77FCB9A1_i += 1) {
        autoF0A85AF4_n = gv_spawnFactor;
        for (autoF0A85AF4_i = 1; autoF0A85AF4_i <= autoF0A85AF4_n; autoF0A85AF4_i += 1) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZombieLevel1", 0, 14, RegionRandomPoint(gv_undergroundQuarters[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
            if ((RandomInt(0, 1) == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Colonist2", 0, 0, RegionRandomPoint(gv_undergroundQuarters[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(1, "ColonistFemale2", 0, 0, RegionRandomPoint(gv_undergroundQuarters[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            UnitBehaviorAdd(UnitLastCreated(), "Run", UnitLastCreated(), 1);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, RandomFixed(1.6, 2.4));
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_infectedCivilians);
            Wait(0.1, c_timeGame);
        }
        Wait(3.0, c_timeReal);
    }
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/ACBFAED5"));
    TriggerExecute(gt_STW15Random3, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW13CiviliansGoWild_Init () {
    gt_STW13CiviliansGoWild = TriggerCreate("gt_STW13CiviliansGoWild_Func");
    TriggerEnable(gt_STW13CiviliansGoWild, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3a - Infected Civilians Periodic
//--------------------------------------------------------------------------------------------------
bool gt_STC3aInfectedCiviliansPeriodic_Func (bool testConds, bool runActions) {
    int auto74550506_n;
    int auto74550506_i;

    // Variable Declarations
    int lv_numberOfCiviliansTurned;
    unit lv_poorCiv;

    // Variable Initialization
    lv_numberOfCiviliansTurned = RandomInt(0, 3);

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(gv_infectedCivilians, c_unitCountAlive) > lv_numberOfCiviliansTurned))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto74550506_n = lv_numberOfCiviliansTurned;
    for (auto74550506_i = 1; auto74550506_i <= auto74550506_n; auto74550506_i += 1) {
        lv_poorCiv = UnitGroupRandomUnit(gv_infectedCivilians, c_unitCountAlive);
        UnitKill(lv_poorCiv);
        libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(lv_poorCiv));
        if ((RandomInt(0, 5) == 1)) {
            UnitCreate(1, "Immortal2", 0, 14, UnitGetPosition(lv_poorCiv), libNtve_gf_RandomAngle());
            UnitBehaviorAddPlayer(UnitLastCreated(), "DetectorRange3", 14, 1);
        }
        else {
            UnitCreate(1, "ZombieLevel2", 0, 14, UnitGetPosition(lv_poorCiv), libNtve_gf_RandomAngle());
        }
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(RandomFixed(0.1, 2.0), c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3aInfectedCiviliansPeriodic_Init () {
    gt_STC3aInfectedCiviliansPeriodic = TriggerCreate("gt_STC3aInfectedCiviliansPeriodic_Func");
    TriggerEnable(gt_STC3aInfectedCiviliansPeriodic, false);
    TriggerAddEventTimePeriodic(gt_STC3aInfectedCiviliansPeriodic, 7.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3a - Engage Communication Lines
//--------------------------------------------------------------------------------------------------
bool gt_STC3aEngageCommunicationLines_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localUnitA;

    // Variable Initialization
    lv_localUnitA = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gv_clearanceCodesReceived = true;
    gf_AwardPlayerXPNOTD(3);
    UnitFlashSelection(lv_localUnitA, 2.5);
    Wait(1.0, c_timeReal);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/A6F1ECEA"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalKim, StringExternal("Param/Value/DFDEDD0B"));
    ObjectiveDestroy(gv_primaryObjective);
    ObjectiveCreate(StringExternal("Param/Value/4CB312AF"), StringExternal("Param/Value/9B7C6D50"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_STC3aReactorCoreTerminalsReached, true);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(lv_localUnitA, StringExternal("Param/Value/244B2E38"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3aEngageCommunicationLines_Init () {
    gt_STC3aEngageCommunicationLines = TriggerCreate("gt_STC3aEngageCommunicationLines_Func");
    TriggerEnable(gt_STC3aEngageCommunicationLines, false);
    TriggerAddEventUnitRegion(gt_STC3aEngageCommunicationLines, null, RegionFromId(126), true);
    TriggerAddEventUnitRegion(gt_STC3aEngageCommunicationLines, null, RegionFromId(126), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW14 - Boss Spawn (Hephaestus)
//--------------------------------------------------------------------------------------------------
bool gt_STW14BossSpawnHephaestus_Func (bool testConds, bool runActions) {
    int auto5424E90B_n;
    int auto5424E90B_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 14;
    gv_hitPar = 60;
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/2424A5F7"));
    Wait(5.0, c_timeReal);
    TriggerExecute(gt_STW1EnterAirlockEastGate, false, false);
    TriggerExecute(gt_STW1EnterAirlockNorthGate, false, false);
    TriggerExecute(gt_STW1EnterAirlockColonyGate, false, false);
    SoundPlay(SoundLink("TZeratul04DarkVoice00018", -1), PlayerGroupActive(), 100.0, 0.0);
    UnitCreate(1, "Hephaestus", 0, 13, RegionRandomPoint(RegionFromId(1)), libNtve_gf_RandomAngle());
    gv_hephasteus = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, gv_hephasteus);
    TriggerEnable(gt_STW14BossKilled, true);
    auto5424E90B_n = gv_spawnFactor;
    for (auto5424E90B_i = 1; auto5424E90B_i <= auto5424E90B_n; auto5424E90B_i += 1) {
        gf_SmartSpawnNOTD("SeekerBurrowed", 45.0);
        Wait(2.0, c_timeReal);
        gf_SmartSpawnNOTD("Beastling2", 45.0);
    }
    Wait(5.0, c_timeReal);
    TriggerEnable(gt_STW14BossAI, true);
    Wait(15.0, c_timeReal);
    SoundPlay(SoundLink("TZeratul04DarkVoice00019", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(20.0, c_timeReal);
    SoundPlay(SoundLink("TZeratul04DarkVoice00021", -1), PlayerGroupActive(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW14BossSpawnHephaestus_Init () {
    gt_STW14BossSpawnHephaestus = TriggerCreate("gt_STW14BossSpawnHephaestus_Func");
    TriggerEnable(gt_STW14BossSpawnHephaestus, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW14 - Boss AI
//--------------------------------------------------------------------------------------------------
bool gt_STW14BossAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_lonerMarines;
    bool lv_loner;
    unit lv_hephsMeal;

    // Variable Initialization
    lv_lonerMarines = UnitGroupEmpty();
    lv_loner = true;

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_loner = true;
        IntLoopBegin(1, 8);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_marineHero[IntLoopCurrent()])) <= 7.0) && (UnitGroupLoopCurrent() != gv_marineHero[IntLoopCurrent()])) {
                lv_loner = false;
            }

        }
        IntLoopEnd();
        if ((lv_loner == true)) {
            UnitGroupAdd(lv_lonerMarines, UnitGroupLoopCurrent());
            libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), true, 13);
        }

    }
    UnitGroupLoopEnd();
    if ((libNtve_gf_UnitGroupIsDead(lv_lonerMarines) == false) && (gv_alivePlayers > 1)) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/C54C6CDC"));
        if ((RandomInt(0, 2) == 1)) {
            SoundPlay(SoundLink("TZeratul04DarkVoice00017", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            SoundPlay(SoundLink("HybridF_ConsumeDNAImpact", -1), PlayerGroupAll(), 100.0, 0.0);
        }
        lv_hephsMeal = libNtve_gf_ClosestUnitToPoint(UnitGetPosition(gv_hephasteus), lv_lonerMarines);
        UnitIssueOrder(gv_hephasteus, OrderTargetingUnit(AbilityCommand("attack", 0), lv_hephsMeal), c_orderQueueReplace);
        UnitBehaviorAddPlayer(gv_hephasteus, "Rampage", 13, 3);
    }

    Wait(4.9, c_timeReal);
    UnitGroupLoopBegin(lv_lonerMarines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitGroupLoopCurrent(), false, 13);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW14BossAI_Init () {
    gt_STW14BossAI = TriggerCreate("gt_STW14BossAI_Func");
    TriggerEnable(gt_STW14BossAI, false);
    TriggerAddEventTimePeriodic(gt_STW14BossAI, 7.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW14 - Boss Killed
//--------------------------------------------------------------------------------------------------
bool gt_STW14BossKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(gt_STW14BossAI, false);
    gf_UnifiedAwards(5, 250.0, libNtve_gf_DifficultyValueInt(60, 60, 130, 0), 0, 0);
    SoundPlay(SoundLink("TZeratul04DarkVoice00015", -1), PlayerGroupAll(), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW14BossKilled_Init () {
    gt_STW14BossKilled = TriggerCreate("gt_STW14BossKilled_Func");
    TriggerEnable(gt_STW14BossKilled, false);
    TriggerAddEventUnitDied(gt_STW14BossKilled, UnitRefFromVariable("gv_hephasteus"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3a - Reactor Core Terminals Reached
//--------------------------------------------------------------------------------------------------
bool gt_STC3aReactorCoreTerminalsReached_Func (bool testConds, bool runActions) {
    int auto14B8C848_n;
    int auto14B8C848_i;

    // Variable Declarations
    bool lv_terminal1Present;
    bool lv_terminal2Present;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(140), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(140), 0), c_unitCountAlive), 1.0);
        lv_terminal1Present = true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(141), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(141), 0), c_unitCountAlive), 1.0);
        lv_terminal2Present = true;
    }

    if ((((gv_alivePlayers == 1) && (gv_clearanceCodesReceived == true) && ((lv_terminal1Present == true) || (lv_terminal2Present == true))) || ((gv_alivePlayers > 1) && (lv_terminal1Present == true) && (lv_terminal2Present == true) && (gv_clearanceCodesReceived == true)))) {
        TriggerEnable(TriggerGetCurrent(), false);
        gf_RadioNOTD(gv_characterFieldMarshalKim, StringExternal("Param/Value/97B4CF43"));
        libNtve_gf_DisplayBossBar(5, "Assets\\Textures\\btn-tips-missioncase.dds", StringExternal("Param/Value/51092044"), 500, PlayerGroupActive());
        libNtve_gf_SetBossBarCurrentValue(5, 0, true);
        libNtve_gf_SetBossBarRace(5, libNtve_ge_BossBarRace_Protoss, true);
        TriggerEnable(gt_STC3aReactorDLCycle, true);
        Wait(RandomFixed(0.0, 15.0), c_timeReal);
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/90136EEF"));
        while ((gv_wave < 16)) {
            Wait(5.0, c_timeReal);
            auto14B8C848_n = (gv_spawnFactor * 2);
            for (auto14B8C848_i = 1; auto14B8C848_i <= auto14B8C848_n; auto14B8C848_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(2, "ZombieLevel1", 0, 14, RegionRandomPoint(gv_undergroundQuarters[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.2, c_timeReal);
                libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran", 0, 14, RegionRandomPoint(gv_undergroundQuarters[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.2, c_timeReal);
                if ((RandomInt(0, 6) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "Hulk", 0, 14, RegionRandomPoint(gv_undergroundQuarters[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                }
                else if ((RandomInt(0, 6) == 1)) {
                    libNtve_gf_UnitCreateFacingPoint(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(gv_undergroundQuarters[RandomInt(1, 4)]), RegionRandomPoint(RegionFromId(29)));
                    UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
                    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                }
            }
        }
    }
    else {
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/5D91964B"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3aReactorCoreTerminalsReached_Init () {
    gt_STC3aReactorCoreTerminalsReached = TriggerCreate("gt_STC3aReactorCoreTerminalsReached_Func");
    TriggerEnable(gt_STC3aReactorCoreTerminalsReached, false);
    TriggerAddEventUnitRegion(gt_STC3aReactorCoreTerminalsReached, null, RegionFromId(140), true);
    TriggerAddEventUnitRegion(gt_STC3aReactorCoreTerminalsReached, null, RegionFromId(140), false);
    TriggerAddEventUnitRegion(gt_STC3aReactorCoreTerminalsReached, null, RegionFromId(141), true);
    TriggerAddEventUnitRegion(gt_STC3aReactorCoreTerminalsReached, null, RegionFromId(141), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3a - Reactor DL Cycle
//--------------------------------------------------------------------------------------------------
bool gt_STC3aReactorDLCycle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_dataPoints;
    bool lv_uploadCheck;
    bool lv_messageE;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(140), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(140), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        if ((gv_alivePlayers > 2)) {
            lv_dataPoints -= 1;
        }

    }
    if ((UnitGroupCount(UnitGroupFilterRegion(gv_marines, RegionFromId(141), 0), c_unitCountAlive) >= 1)) {
        UnitFlashSelection(UnitGroupRandomUnit(UnitGroupFilterRegion(gv_marines, RegionFromId(141), 0), c_unitCountAlive), 1.0);
        lv_dataPoints += 1;
        lv_uploadCheck = true;
    }
    else {
        if ((gv_alivePlayers > 2)) {
            lv_dataPoints -= 1;
        }

    }
    if ((lv_uploadCheck == true)) {
        if ((gv_oMCount == 3) && (lv_messageE == false)) {
            lv_messageE = true;
            SoundPlay(SoundLink("UI_TextPrintout", -1), PlayerGroupActive(), 80.0, 0.0);
            UIDisplayMessage(PlayerGroupActive(), c_messageAreaSubtitle, StringExternal("Param/Value/EC4A31C7"));
        }
    }

    gv_oMCount += lv_dataPoints;
    if ((gv_oMCount > 500)) {
        gv_oMCount = 500;
    }
    else if ((gv_oMCount < 0)) {
        gv_oMCount = 0;
    }
    libNtve_gf_SetBossBarCurrentValue(5, gv_oMCount, true);
    if ((gv_oMCount >= 500)) {
        TriggerExecute(gt_STC3aReactorDLComplete, true, false);
        TriggerEnable(gt_STC3aReactorDLCycle, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3aReactorDLCycle_Init () {
    gt_STC3aReactorDLCycle = TriggerCreate("gt_STC3aReactorDLCycle_Func");
    TriggerEnable(gt_STC3aReactorDLCycle, false);
    TriggerAddEventTimePeriodic(gt_STC3aReactorDLCycle, AbsF(gv_hexCycle), c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3a - Reactor DL Complete
//--------------------------------------------------------------------------------------------------
bool gt_STC3aReactorDLComplete_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 16;
    libNtve_gf_RemoveDoodadsinRegion(RegionFromId(146), "DecalProtoss");
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/A8828B40"));
    Wait(2.0, c_timeReal);
    gv_hitPar = 30;
    UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/21C5CF46"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    if ((gv_performanceTimer <= 100)) {
        gf_UnifiedAwards(10, 0.0, 0, 0, 3);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDirective, StringExternal("Param/Value/FE5121B3"));
    }
    else {
        gf_UnifiedAwards(7, 0.0, 0, 0, 2);
    }
    TriggerExecute(gt_STW16ReactorSelfDestructBeginsESCAPE, true, false);
    Wait(5.0, c_timeReal);
    UIClearMessages(PlayerGroupActive(), c_messageAreaDirective);
    libNtve_gf_ShowHideBossBar(false, 5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3aReactorDLComplete_Init () {
    gt_STC3aReactorDLComplete = TriggerCreate("gt_STC3aReactorDLComplete_Func");
    TriggerEnable(gt_STC3aReactorDLComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW15 - Random 3
//--------------------------------------------------------------------------------------------------
bool gt_STW15Random3_Func (bool testConds, bool runActions) {
    int auto4024C349_n;
    int auto4024C349_i;
    int auto9AD71FB8_n;
    int auto9AD71FB8_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 15;
    gv_hitPar = 60;
    Wait(2.0, c_timeReal);
    auto4024C349_n = 7;
    for (auto4024C349_i = 1; auto4024C349_i <= auto4024C349_n; auto4024C349_i += 1) {
        auto9AD71FB8_n = (gv_spawnFactor * 2);
        for (auto9AD71FB8_i = 1; auto9AD71FB8_i <= auto9AD71FB8_n; auto9AD71FB8_i += 1) {
            gf_SmartSpawnNOTD("ZombieLevel22", 50.0);
            Wait(0.2, c_timeReal);
            if ((RandomInt(0, 5) == 1) && (gv_alivePlayers > 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Strangler", 0, 14, RegionRandomPoint(RegionPlayableMap()), RegionRandomPoint(RegionFromId(29)));
                libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
                Wait(0.2, c_timeReal);
            }

        }
        Wait(5.0, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW15Random3_Init () {
    gt_STW15Random3 = TriggerCreate("gt_STW15Random3_Func");
    TriggerEnable(gt_STW15Random3, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW16 - Reactor Self-Destruct Begins - ESCAPE!
//--------------------------------------------------------------------------------------------------
bool gt_STW16ReactorSelfDestructBeginsESCAPE_Func (bool testConds, bool runActions) {
    int autoD5B0E64D_n;
    int autoD5B0E64D_i;
    int auto592B0B5B_n;
    int auto592B0B5B_i;
    int auto3C27EEE2_n;
    int auto3C27EEE2_i;
    int autoD187BB93_n;
    int autoD187BB93_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hitPar = 60;
    TriggerExecute(gt_STW14BossSpawnHephaestus, true, false);
    ObjectiveDestroy(gv_primaryObjective);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterFieldMarshalKim, StringExternal("Param/Value/9DAA9819"));
    Wait(2.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "Medivac", 0, 9, RegionGetCenter(RegionFromId(14)), PointFromId(212));
    gv_dropship = UnitLastCreated();
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingAlert", UnitGetPosition(gv_dropship), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 90.0, 270.0);
    Wait(1.5, c_timeReal);
    SoundPlay(SoundLink("TValerian02BRaynor00010", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.7, c_timeReal);
    SoundPlay(SoundLink("TValerian02ARaynor00047", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/6E4D72AD"));
    TimerStart(gv_globalTimer, 240.0, false, c_timeReal);
    TimerWindowCreate(gv_globalTimer, StringExternal("Param/Value/B69E136F"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    gv_globalTimerWindow = TimerWindowLastCreated();
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), true);
    ObjectiveCreate(StringExternal("Param/Value/66EDD69C"), StringExternal("Param/Value/7CFBC0B6"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_STW17EVAC, true);
    gf_ReactorMeltdownAmbience();
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMinimapPanel, false);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/D0639662"));
    UnitCreate(1, "SentryGunUnderground", 0, 13, RegionRandomPoint(RegionFromId(44)), libNtve_gf_RandomAngle());
    UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 13, 2);
    autoD5B0E64D_n = 4;
    for (autoD5B0E64D_i = 1; autoD5B0E64D_i <= autoD5B0E64D_n; autoD5B0E64D_i += 1) {
        SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupActive(), 100.0, 0.0);
        Wait(59.5, c_timeReal);
        if ((gv_nightmare == true)) {
            auto592B0B5B_n = (gv_spawnFactor / 2);
            for (auto592B0B5B_i = 1; auto592B0B5B_i <= auto592B0B5B_n; auto592B0B5B_i += 1) {
                UnitCreate(1, "Slasher2", 0, 14, RegionRandomPoint(RegionFromId(44)), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSlasher", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(0.2, c_timeReal);
            }
        }
        else if (((gv_alivePlayers > 1) && (gv_noNewbie == true))) {
            auto3C27EEE2_n = gv_spawnFactor;
            for (auto3C27EEE2_i = 1; auto3C27EEE2_i <= auto3C27EEE2_n; auto3C27EEE2_i += 1) {
                UnitCreate(1, "Hugger2", 0, 14, RegionRandomPoint(RegionFromId(44)), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHugger", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(0.2, c_timeReal);
            }
        }
        else if (true) {
            autoD187BB93_n = gv_spawnFactor;
            for (autoD187BB93_i = 1; autoD187BB93_i <= autoD187BB93_n; autoD187BB93_i += 1) {
                UnitCreate(1, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionFromId(44)), libNtve_gf_RandomAngle());
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                Wait(0.2, c_timeReal);
            }
        }
    }
    TimerWindowShow(gv_globalTimerWindow, PlayerGroupActive(), false);
    TimerWindowDestroy(gv_globalTimerWindow);
    SoundPlay(SoundLink("Odin_NukeExplode", -1), PlayerGroupActive(), 100.0, 0.0);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 3.0, 2.0, 100.0, 3.0);
    }
    IntLoopEnd();
    TriggerEnable(gt_STW17EVAC, false);
    gv_gameOver = true;
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
        Wait(0.1, c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW16ReactorSelfDestructBeginsESCAPE_Init () {
    gt_STW16ReactorSelfDestructBeginsESCAPE = TriggerCreate("gt_STW16ReactorSelfDestructBeginsESCAPE_Func");
    TriggerEnable(gt_STW16ReactorSelfDestructBeginsESCAPE, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW17 - EVAC
//--------------------------------------------------------------------------------------------------
bool gt_STW17EVAC_Func (bool testConds, bool runActions) {
    int autoD505007F_n;
    int autoD505007F_i;

    // Variable Declarations
    unitgroup lv_blackOpsTeam;

    // Variable Initialization
    lv_blackOpsTeam = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(libNtve_gf_CenterOfUnitGroup(gv_marines), RegionGetCenter(RegionFromId(45))) < 11.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_STW16ReactorSelfDestructBeginsESCAPE);
    gv_wave = 17;
    gv_hitPar = 65;
    gv_gameVictoryTime = TimerGetElapsed(gv_gameTime);
    TriggerExecute(gt_NightmareBonus, true, false);
    gf_UnifiedAwards(22, 0.0, libNtve_gf_DifficultyValueInt(80, 80, 120, 0), 0, 5);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/55074174"));
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    Wait(2.0, c_timeReal);
    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("HyperionfidgetsRaynorRaynor00010", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else {
        SoundPlay(SoundLink("CantinafidgetsTrophyTHanson03BRaynor00004", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("LabFidgetsAdjutantConfederateAdjutant00003", -1), PlayerGroupActive(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/942A1A2C"));
    TriggerEnable(gt_STW14BossKilled, false);
    UnitKill(gv_hephasteus);
    gf_ClearZombieWave();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice, StringExternal("Param/Value/9072A8A4"));
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
            gv_cPAwardException[IntLoopCurrent()] = true;
        }

    }
    IntLoopEnd();
    if ((UnitGroupCount(gv_marines, c_unitCountAlive) >= 1)) {
        gv_victory = true;
        if ((gv_alivePlayers == gv_totalPlayers)) {
            gv_mOHAwardException = true;
        }

    }

    gv_gameOver = true;
    while (!(((TriggerGetExecCount(gt_VictoryBonus) == 1) || (gv_totalPlayers == 1)))) {
        Wait(1.0, c_timeGame);
    }
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_MakeUnitInvulnerable(gv_playerPet[IntLoopCurrent()], true);
    }
    IntLoopEnd();
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterUnknownVoice, StringExternal("Param/Value/90E09824"));
    Wait(4.0, c_timeReal);
    VisRevealArea(13, RegionPlayableMap(), 20.0, false);
    autoD505007F_n = 7;
    for (autoD505007F_i = 1; autoD505007F_i <= autoD505007F_n; autoD505007F_i += 1) {
        UnitCreate(1, "BlackOps", 0, 13, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 12.0)), libNtve_gf_RandomAngle());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeRegen, 200.0);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        libNtve_gf_ChangeUnitDamage(UnitLastCreated(), libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_Mega);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("GhostCloak", 0)), c_orderQueueReplace);
        UnitGroupAdd(lv_blackOpsTeam, UnitLastCreated());
        Wait(0.2, c_timeReal);
    }
    UnitIssueOrder(gv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), RegionGetCenter(RegionFromId(179))), c_orderQueueReplace);
    Wait(0.5, c_timeReal);
    UnitKill(gv_dropship);
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(UnitGroupRandomUnit(lv_blackOpsTeam, c_unitCountAlive), "BlackOpsSniperRifle", UnitGroupLoopCurrent(), 275.0);
        Wait(RandomFixed(1.0, 3.0), c_timeGame);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW17EVAC_Init () {
    gt_STW17EVAC = TriggerCreate("gt_STW17EVAC_Func");
    TriggerEnable(gt_STW17EVAC, false);
    TriggerAddEventUnitRegion(gt_STW17EVAC, null, RegionFromId(45), true);
    TriggerAddEventUnitRegion(gt_STW17EVAC, null, RegionFromId(45), false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3b - Initialize
//--------------------------------------------------------------------------------------------------
bool gt_STC3bInitialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_powerGenerators = 0;
    gv_bioDomeArea[1] = RegionFromId(79);
    gv_bioDomeArea[2] = RegionFromId(78);
    gv_bioDomeArea[3] = RegionFromId(80);
    gv_bioDomeArea[4] = RegionFromId(81);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/694F4581"));
    ObjectiveCreate(StringExternal("Param/Value/B7E5D8DF"), StringToText(""), c_objectiveStateActive, false);
    gv_secondaryObjective = ObjectiveLastCreated();
    TriggerEnable(gt_STC3bPowerGeneratorRestart, true);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/FDC4E24A"));
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/4666C8A0"), StringExternal("Param/Value/0417696E"), 12.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    TriggerExecute(gt_STW13GetToTheThors, true, false);
    Wait(12.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3bInitialize_Init () {
    gt_STC3bInitialize = TriggerCreate("gt_STC3bInitialize_Func");
    TriggerEnable(gt_STC3bInitialize, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW13 - Get To The Thors!
//--------------------------------------------------------------------------------------------------
bool gt_STW13GetToTheThors_Func (bool testConds, bool runActions) {
    int auto1550DB9C_n;
    int auto1550DB9C_i;
    int auto60F52578_n;
    int auto60F52578_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 13;
    gv_hitPar = 55;
    Wait(2.0, c_timeReal);
    ObjectiveDestroy(gv_primaryObjective);
    if ((gv_devastatorsDestroyed == false)) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/80F5FFAE"));
        ObjectiveCreate(StringExternal("Param/Value/0358704F"), StringExternal("Param/Value/8B17FA99"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
        Wait(2.0, c_timeReal);
        TriggerEnable(gt_STC3bThorPilot, true);
        Wait(10.0, c_timeReal);
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/394F04E1"));
    }

    auto1550DB9C_n = gv_spawnFactor;
    for (auto1550DB9C_i = 1; auto1550DB9C_i <= auto1550DB9C_n; auto1550DB9C_i += 1) {
        auto60F52578_n = gv_spawnFactor;
        for (auto60F52578_i = 1; auto60F52578_i <= auto60F52578_n; auto60F52578_i += 1) {
            gf_SmartSpawnNOTD("HulkBurrowed", 60.0);
            Wait(0.2, c_timeGame);
            gf_SmartSpawnNOTD("Immortal22", 80.0);
            Wait(0.2, c_timeGame);
            gf_SmartSpawnNOTD("RoachBurrowed", 60.0);
            Wait(0.5, c_timeGame);
            if ((gv_noNewbie == true) && (RandomInt(0, 1) == 1) && (gv_alivePlayers > 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Strangler", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            else {
                libNtve_gf_UnitCreateFacingPoint(1, "Mutalisk", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        }
        Wait(15.0, c_timeReal);
        if ((RandomInt(0, 1) == 1)) {
            gf_SmartSpawnNOTD("Lelantos", 150.0);
        }
        else {
            gf_SmartSpawnNOTD("TitanBurrowed", 90.0);
        }
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/D16F32A4"));
    Wait(7.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/ECA03751"));
    Wait(13.0, c_timeReal);
    TriggerExecute(gt_STW14bBossSpawnAthena, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW13GetToTheThors_Init () {
    gt_STW13GetToTheThors = TriggerCreate("gt_STW13GetToTheThors_Func");
    TriggerEnable(gt_STW13GetToTheThors, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3b - Thor Pilot
//--------------------------------------------------------------------------------------------------
bool gt_STC3bThorPilot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_thor;
    int lv_rescuePlayer;

    // Variable Initialization
    lv_thor = UnitGroupUnit(UnitGroup("InactiveDevastator", 0, RegionCircle(RegionGetCenter(EventUnitRegion()), 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    lv_rescuePlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_thor != null))) {
            return false;
        }

        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TechTreeUnitCount(EventPlayer(), "Devastator", c_techCountCompleteOnly) == 0)) {
        gv_thorsActivated += 1;
        TriggerExecute(gt_STC3bThorActivation, true, false);
        UnitFlashSelection(EventUnit(), 2.5);
        PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 10.0);
        libNtve_gf_RescueUnit(lv_thor, lv_rescuePlayer, true);
        UnitIssueOrder(lv_thor, Order(AbilityCommand("ThorReborn2", 0)), c_orderQueueReplace);
        UnitCreate(1, "Devastator", 0, lv_rescuePlayer, UnitGetPosition(lv_thor), 270.0);
        SoundPlay(SoundLink("Thor_ImmortalityProtocolBirth", -1), PlayerGroupAll(), 50.0, 0.0);
        UnitRemove(lv_thor);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lv_rescuePlayer), c_messageAreaSubtitle, StringExternal("Param/Value/4DF03C45"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3bThorPilot_Init () {
    gt_STC3bThorPilot = TriggerCreate("gt_STC3bThorPilot_Func");
    TriggerEnable(gt_STC3bThorPilot, false);
    TriggerAddEventUnitRegion(gt_STC3bThorPilot, null, RegionFromId(147), true);
    TriggerAddEventUnitRegion(gt_STC3bThorPilot, null, RegionFromId(148), true);
    TriggerAddEventUnitRegion(gt_STC3bThorPilot, null, RegionFromId(151), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3b - Thor Activation
//--------------------------------------------------------------------------------------------------
bool gt_STC3bThorActivation_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("Thor_ImmortalityProtocolBirth", -1), PlayerGroupActive(), 250.0, 0.0);
    ObjectiveSetName(gv_primaryObjective, (StringExternal("Param/Value/DDCFE19A") + (IntToText(gv_thorsActivated) + StringExternal("Param/Value/24EDA089"))));
    if ((gv_thorsActivated == 3)) {
        TriggerEnable(gt_STC3bThorPilot, false);
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
        SoundPlay(SoundLink("THanson02Raynor00022", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(7.0, c_timeReal);
        ObjectiveDestroy(gv_primaryObjective);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3bThorActivation_Init () {
    gt_STC3bThorActivation = TriggerCreate("gt_STC3bThorActivation_Func");
    TriggerEnable(gt_STC3bThorActivation, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3b - Power Generator Restart
//--------------------------------------------------------------------------------------------------
bool gt_STC3bPowerGeneratorRestart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_localRegionA;

    // Variable Initialization
    lv_localRegionA = RegionCircle(UnitGetPosition(EventUnit()), 5.0);

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(RegionGetCenter(EventUnitRegion()), PointFromId(14)) > 10.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("PowerGeneratorPowerUp", -1), PlayerGroupActive(), 100.0, 0.0);
    PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(EventUnit()), ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 10.0);
    RegionSetCenter(EventUnitRegion(), PointFromId(14));
    gv_powerGenerators += 1;
    if ((gv_powerGenerators >= 5)) {
        TriggerEnable(TriggerGetCurrent(), false);
        Wait(5.0, c_timeReal);
        TriggerExecute(gt_STC3bPowerGeneratorComplete, true, false);
    }
    else {
        Wait(5.0, c_timeReal);
        UIDisplayMessage(PlayerGroupActive(), c_messageAreaDebug, (StringExternal("Param/Value/9B6E03E9") + (IntToText((20 * gv_powerGenerators)) + StringExternal("Param/Value/1DFFC3EB"))));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3bPowerGeneratorRestart_Init () {
    gt_STC3bPowerGeneratorRestart = TriggerCreate("gt_STC3bPowerGeneratorRestart_Func");
    TriggerEnable(gt_STC3bPowerGeneratorRestart, false);
    TriggerAddEventUnitRegion(gt_STC3bPowerGeneratorRestart, null, RegionFromId(83), true);
    TriggerAddEventUnitRegion(gt_STC3bPowerGeneratorRestart, null, RegionFromId(84), true);
    TriggerAddEventUnitRegion(gt_STC3bPowerGeneratorRestart, null, RegionFromId(85), true);
    TriggerAddEventUnitRegion(gt_STC3bPowerGeneratorRestart, null, RegionFromId(86), true);
    TriggerAddEventUnitRegion(gt_STC3bPowerGeneratorRestart, null, RegionFromId(87), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STC3b - Power Generator Complete
//--------------------------------------------------------------------------------------------------
bool gt_STC3bPowerGeneratorComplete_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ObjectiveSetState(gv_secondaryObjective, c_objectiveStateCompleted);
    gf_AwardPlayerXPNOTD(5);
    if ((gv_nightmare == true)) {
        gf_AwardCreditsNOTD(50);
    }
    else {
        gf_AwardCreditsNOTD(30);
    }
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("TTosh01Adjutant00037", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    ObjectiveDestroy(gv_secondaryObjective);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/60837DF9"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STC3bPowerGeneratorComplete_Init () {
    gt_STC3bPowerGeneratorComplete = TriggerCreate("gt_STC3bPowerGeneratorComplete_Func");
    TriggerEnable(gt_STC3bPowerGeneratorComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW14b - Boss Spawn (Athena)
//--------------------------------------------------------------------------------------------------
bool gt_STW14bBossSpawnAthena_Func (bool testConds, bool runActions) {
    int auto026AA09C_n;
    int auto026AA09C_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 14;
    gv_hitPar = 60;
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionCircle(RegionGetCenter(RegionFromId(225)), 7.0), 20.0, false);
    }
    IntLoopEnd();
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/73EA90C2"));
    Wait(5.0, c_timeReal);
    gf_RadioNOTD(gv_characterHAL, StringExternal("Param/Value/0FAEAC02"));
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingWarning", RegionGetCenter(RegionFromId(225)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0, 270.0);
    Wait(3.5, c_timeReal);
    ActorSend(ActorFromDoodad(DoodadFromId(3095)), "AnimBracketStart Work Stand,Work,Start Stand,Work IGNORE");
    Wait(2.25, c_timeGame);
    SoundPlay(SoundLink("Ultralisk_Ready", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(0.1, c_timeGame);
    SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(2.7, c_timeGame);
    UnitCreate(1, "Athena", 0, 14, RegionGetCenter(RegionFromId(225)), 220.0);
    gv_athena = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, gv_athena);
    gv_currentBoss = "Athena";
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_athena, ge_Ping_Enabled);
    TriggerEnable(gt_STW14bBossKilled, true);
    auto026AA09C_n = gv_spawnFactor;
    for (auto026AA09C_i = 1; auto026AA09C_i <= auto026AA09C_n; auto026AA09C_i += 1) {
        Wait(2.0, c_timeReal);
        gf_SmartSpawnNOTD("Slasher2", 70.0);
    }
    gf_TipNOTD(10000, StringExternal("Param/Value/A94A1617"));
    Wait(30.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/99B5F70D"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW14bBossSpawnAthena_Init () {
    gt_STW14bBossSpawnAthena = TriggerCreate("gt_STW14bBossSpawnAthena_Func");
    TriggerEnable(gt_STW14bBossSpawnAthena, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW14b - Boss Killed
//--------------------------------------------------------------------------------------------------
bool gt_STW14bBossKilled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    gf_BossAfterAction();
    gf_UnifiedAwards(7, 350.0, libNtve_gf_DifficultyValueInt(0, 50, 100, 0), 0, 2);
    TriggerExecute(gt_STW15bBioDomeThreat, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW14bBossKilled_Init () {
    gt_STW14bBossKilled = TriggerCreate("gt_STW14bBossKilled_Func");
    TriggerEnable(gt_STW14bBossKilled, false);
    TriggerAddEventUnitDied(gt_STW14bBossKilled, UnitRefFromVariable("gv_athena"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW15b - Bio-Dome Threat
//--------------------------------------------------------------------------------------------------
bool gt_STW15bBioDomeThreat_Func (bool testConds, bool runActions) {
    int auto335D55A6_n;
    int auto335D55A6_i;
    int auto0082E064_n;
    int auto0082E064_i;

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave = 15;
    gv_hitPar = 60;
    Wait(2.0, c_timeReal);
    TriggerEnable(gt_SealDomeA, true);
    TriggerEnable(gt_SealDomeB, true);
    TriggerEnable(gt_SealDomeC, true);
    TriggerEnable(gt_SealDomeD, true);
    ObjectiveDestroy(gv_primaryObjective);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/C24E98F7"));
    ObjectiveCreate(StringExternal("Param/Value/289F9ABF"), StringExternal("Param/Value/F5DDB35D"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    UnitIssueOrder(UnitFromId(829), Order(AbilityCommand("DestructibleGateStraightHorizontalLowered", 0)), c_orderQueueReplace);
    UnitGroupLoopBegin(UnitGroup("PathingBlocker1x1", 0, RegionFromId(89), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    auto335D55A6_n = 25;
    for (auto335D55A6_i = 1; auto335D55A6_i <= auto335D55A6_n; auto335D55A6_i += 1) {
        if ((gv_wave == 16)) {
            break;
        }

        auto0082E064_n = gv_spawnFactor;
        for (auto0082E064_i = 1; auto0082E064_i <= auto0082E064_n; auto0082E064_i += 1) {
            if ((RandomInt(0, 4) != 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Hulk", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            else if (true) {
                libNtve_gf_UnitCreateFacingPoint(1, "Beastling", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
            if ((RandomInt(0, 4) != 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Immortal2", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            else if (true) {
                libNtve_gf_UnitCreateFacingPoint(1, "InfestorTerran", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
                if ((gv_nightmare == true)) {
                    UnitBehaviorAdd(UnitLastCreated(), "Frenzy35", UnitLastCreated(), 1);
                }

            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.1, c_timeGame);
            if ((RandomInt(0, 4) != 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "Devourer", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            else if (true) {
                libNtve_gf_UnitCreateFacingPoint(1, "Ultralisk", 0, 14, RegionRandomPoint(gv_bioDomeArea[RandomInt(1, 4)]), RegionRandomPoint(RegionPlayableMap()));
            }
            libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
            Wait(0.5, c_timeGame);
        }
        Wait(5.0, c_timeReal);
    }
    if ((gv_wave == 15)) {
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/19F124CA"));
    }

    Wait(30.0, c_timeReal);
    if ((gv_wave == 15)) {
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_AwardRatingNOTD(-1);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/FBBC0ECA"));
    }

    Wait(60.0, c_timeReal);
    if ((gv_wave == 15)) {
        SoundPlay(SoundLink("UI_ObjectiveFailed", -1), PlayerGroupAll(), 100.0, 0.0);
        gf_AwardRatingNOTD(-2);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/50147A2B"));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW15bBioDomeThreat_Init () {
    gt_STW15bBioDomeThreat = TriggerCreate("gt_STW15bBioDomeThreat_Func");
    TriggerEnable(gt_STW15bBioDomeThreat, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seal Dome A
//--------------------------------------------------------------------------------------------------
bool gt_SealDomeA_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DomeTrigger(RegionFromId(226), RegionFromId(227), TriggerGetCurrent(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SealDomeA_Init () {
    gt_SealDomeA = TriggerCreate("gt_SealDomeA_Func");
    TriggerEnable(gt_SealDomeA, false);
    TriggerAddEventUnitRegion(gt_SealDomeA, null, RegionFromId(226), true);
    TriggerAddEventUnitRegion(gt_SealDomeA, null, RegionFromId(227), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seal Dome B
//--------------------------------------------------------------------------------------------------
bool gt_SealDomeB_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DomeTrigger(RegionFromId(243), RegionFromId(244), TriggerGetCurrent(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SealDomeB_Init () {
    gt_SealDomeB = TriggerCreate("gt_SealDomeB_Func");
    TriggerEnable(gt_SealDomeB, false);
    TriggerAddEventUnitRegion(gt_SealDomeB, null, RegionFromId(243), true);
    TriggerAddEventUnitRegion(gt_SealDomeB, null, RegionFromId(244), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seal Dome C
//--------------------------------------------------------------------------------------------------
bool gt_SealDomeC_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DomeTrigger(RegionFromId(240), RegionFromId(239), TriggerGetCurrent(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SealDomeC_Init () {
    gt_SealDomeC = TriggerCreate("gt_SealDomeC_Func");
    TriggerEnable(gt_SealDomeC, false);
    TriggerAddEventUnitRegion(gt_SealDomeC, null, RegionFromId(240), true);
    TriggerAddEventUnitRegion(gt_SealDomeC, null, RegionFromId(239), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Seal Dome D
//--------------------------------------------------------------------------------------------------
bool gt_SealDomeD_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_DomeTrigger(RegionFromId(241), RegionFromId(242), TriggerGetCurrent(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SealDomeD_Init () {
    gt_SealDomeD = TriggerCreate("gt_SealDomeD_Func");
    TriggerEnable(gt_SealDomeD, false);
    TriggerAddEventUnitRegion(gt_SealDomeD, null, RegionFromId(241), true);
    TriggerAddEventUnitRegion(gt_SealDomeD, null, RegionFromId(242), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Domes Sealed and Hades Located
//--------------------------------------------------------------------------------------------------
bool gt_DomesSealedandHadesLocated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_wave != 16))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_bioDomesDestroyed += 1;
    ObjectiveSetName(gv_primaryObjective, (StringExternal("Param/Value/7527BA88") + (IntToText(gv_bioDomesDestroyed) + StringExternal("Param/Value/DE3D427B"))));
    SoundPlay(SoundLink("ColonistBiodome_Unload", -1), PlayerGroupAll(), 200.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/7C044AC0"));
    if ((gv_bioDomesDestroyed >= 4) && (gv_wave != 16)) {
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
        gv_wave = 16;
        gf_AwardPlayerXPNOTD(3);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/86D3CE3C"));
        gv_hitPar = 110;
        Wait(5.0, c_timeReal);
        gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/C905D8E7"));
        Wait(4.0, c_timeReal);
        gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/C5DB6F8C"));
        Wait(4.0, c_timeReal);
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/2262CEDA"));
        ObjectiveDestroy(gv_primaryObjective);
        libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingObjective", RegionGetCenter(RegionFromId(196)), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 30.0, 270.0);
        ObjectiveCreate(StringExternal("Param/Value/3065AE95"), StringExternal("Param/Value/DA7A513D"), c_objectiveStateActive, true);
        gv_primaryObjective = ObjectiveLastCreated();
        while (!((DistanceBetweenPoints(UnitGroupCenterOfGroup(gv_marines), RegionGetCenter(RegionFromId(196))) < 20.0))) {
            Wait(1.0, c_timeGame);
        }
        gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/0193DE09"));
        Wait(2.0, c_timeReal);
        ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F6A30B5F"));
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, 3.5);
        }
        IntLoopEnd();
        Wait(2.0, c_timeReal);
        SoundPlay(SoundLink("TValerian02ATychus00005", -1), PlayerGroupAll(), 100.0, 0.0);
        Wait(5.0, c_timeReal);
        TriggerExecute(gt_STW16bBossFightHades, true, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DomesSealedandHadesLocated_Init () {
    gt_DomesSealedandHadesLocated = TriggerCreate("gt_DomesSealedandHadesLocated_Func");
    TriggerEnable(gt_DomesSealedandHadesLocated, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW16b - Boss Fight (Hades)
//--------------------------------------------------------------------------------------------------
bool gt_STW16bBossFightHades_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_randomPoint;
    unitgroup lv_tentacleGroup;
    bool lv_enraged;
    int lv_cycle;
    int lv_localInt;
    timer lv_hadesPhase1Timer;
    int lv_hadesP1TimerWindow;
    actor lv_localActorRumble;
    bool lv_blackhole;
    point lv_targetMovePoint;
    region lv_tentacleSpawnRegion;

    // Variable Initialization
    lv_tentacleGroup = UnitGroupEmpty();
    lv_cycle = 1;
    lv_localInt = 1;
    lv_hadesPhase1Timer = TimerCreate();
    lv_hadesP1TimerWindow = c_timerWindowNone;
    lv_targetMovePoint = RegionRandomPoint(RegionCircle(gv_finalBossPoint, 10.0));
    lv_tentacleSpawnRegion = RegionCircle(gv_finalBossPoint, 18.0);

    // Actions
    if (!runActions) {
        return true;
    }

    RegionAddCircle(lv_tentacleSpawnRegion, false, RegionGetCenter(lv_tentacleSpawnRegion), 3.5);
    UnitGroupLoopBegin(gv_zombieWave);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagHero) == false)) {
            UnitKill(UnitGroupLoopCurrent());
        }

        Wait(0.01, c_timeGame);
    }
    UnitGroupLoopEnd();
    Wait(1.0, c_timeReal);
    gv_bossFight = true;
    CameraSetBounds(PlayerGroupActive(), RegionFromId(196), true);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitGroupLoopBegin(UnitGroupSearch(null, IntLoopCurrent(), UnitGetPosition(gv_marineHero[IntLoopCurrent()]), 500.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterUnderConstruction - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            while ((PointPathingPassable(lv_targetMovePoint) == false)) {
                lv_targetMovePoint = RegionRandomPoint(RegionCircle(gv_finalBossPoint, 10.0));
            }
            if ((libNtve_gf_UnitInRegion(UnitGroupLoopCurrent(), RegionFromId(196)) == false)) {
                UnitSetPosition(UnitGroupLoopCurrent(), lv_targetMovePoint, false);
            }

        }
        UnitGroupLoopEnd();
    }
    IntLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SpiderMine", c_playerAny, RegionFromId(196), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/9730548F"));
    ObjectiveDestroy(gv_primaryObjective);
    Wait(2.0, c_timeReal);
    libNtve_gf_CreateModelAtPoint("NydusRumble", gv_finalBossPoint);
    lv_localActorRumble = libNtve_gf_ActorLastCreated();
    SoundPlay(SoundLink("StoneZealot_Birth", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraShakeStart(1, c_cameraPositionTarget, c_cameraDirectionZ, 0.15, 2.0, 100.0, 5.0);
    Wait(5.0, c_timeReal);
    libNtve_gf_KillModel(lv_localActorRumble);
    UnitCreate(1, "Hatchery", c_unitCreateIgnorePlacement, 14, gv_finalBossPoint, libNtve_gf_RandomAngle());
    gv_finalBoss = UnitLastCreated();
    Wait(1.0, c_timeReal);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionCircle(gv_finalBossPoint, 9.0), 15.0, false);
    }
    IntLoopEnd();
    Wait(3.0, c_timeReal);
    UnitIssueOrder(gv_finalBoss, Order(AbilityCommand("UpgradeToLair", 0)), c_orderQueueReplace);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/79F7232F"));
    Wait(5.0, c_timeReal);
    UnitIssueOrder(gv_finalBoss, Order(AbilityCommand("UpgradeToHive", 0)), c_orderQueueReplace);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/12947B75"));
    SoundPlay(SoundLink("AICommunication_TerranAICommand_260", -1), PlayerGroupActive(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_HadesSporeDrops();
    UnitGroupAdd(gv_zombieWave, gv_finalBoss);
    gv_currentBoss = "Hades Phase 1";
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_finalBoss, ge_Ping_Disabled);
    ObjectiveCreate(StringExternal("Param/Value/99F117F0"), StringExternal("Param/Value/40865F64"), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TimerStart(lv_hadesPhase1Timer, 180.0, false, c_timeGame);
    TimerWindowCreate(lv_hadesPhase1Timer, StringExternal("Param/Value/BB802F85"), true, false);
    gf_NOTDFormatTimerWindow(TimerWindowLastCreated());
    lv_hadesP1TimerWindow = TimerWindowLastCreated();
    TimerWindowShow(lv_hadesP1TimerWindow, PlayerGroupAll(), true);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/23E8984F"));
    TriggerEnable(gt_HadesTentaclesInfection, true);
    libNtve_gf_MakeUnitInvulnerable(gv_finalBoss, false);
    while (true) {
        if ((lv_cycle == 37)) {
            lv_enraged = true;
            TimerWindowShow(lv_hadesP1TimerWindow, PlayerGroupAll(), false);
            TimerWindowDestroy(lv_hadesP1TimerWindow);
            UnitBehaviorAddPlayer(gv_finalBoss, "Enraged", 14, 1);
            UnitGroupLoopBegin(lv_tentacleGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "Enraged", 14, 1);
            }
            UnitGroupLoopEnd();
        }

        if ((ModI(lv_cycle, 5) == 0)) {
            if ((RandomInt(0, 1) == 1)) {
                UnitIssueOrder(gv_finalBoss, Order(AbilityCommand("Beams2", 0)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(gv_finalBoss, Order(AbilityCommand("BeamsAntiClockwise2", 0)), c_orderQueueReplace);
            }
        }

        if ((ModI(lv_cycle, 3) == 0)) {
            UnitCreateEffectUnit(gv_finalBoss, "VenomousAlgaeLaunchMissile", UnitGroupRandomUnit(gv_marines, c_unitCountAlive));
        }

        if ((UnitIsAlive(gv_finalBoss) == true)) {
            lv_randomPoint = RegionRandomPoint(lv_tentacleSpawnRegion);
            PlayerCreateEffectPoint(14, "HadesCreateTentacleRumble", lv_randomPoint);
            Wait(2.0, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "HadesTentacle", 0, 14, lv_randomPoint);
            UnitGroupAdd(lv_tentacleGroup, UnitLastCreated());
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            if ((lv_blackhole == false)) {
                lv_blackhole = true;
                TriggerEnable(gt_STW16bBossBlackholePeriodic, true);
                TriggerExecute(gt_STW16bBossBlackholePeriodic, true, false);
            }

            if ((lv_enraged == true)) {
                UnitBehaviorAddPlayer(UnitLastCreated(), "Enraged", 14, 1);
            }

        }
        else {
            TimerWindowShow(lv_hadesP1TimerWindow, PlayerGroupAll(), false);
            TimerWindowDestroy(lv_hadesP1TimerWindow);
            TriggerExecute(gt_STW16bBossPhase1Death, true, false);
            break;
        }
        Wait(3.0, c_timeReal);
        lv_cycle += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW16bBossFightHades_Init () {
    gt_STW16bBossFightHades = TriggerCreate("gt_STW16bBossFightHades_Func");
    TriggerEnable(gt_STW16bBossFightHades, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hades Tentacles - Infection
//--------------------------------------------------------------------------------------------------
bool gt_HadesTentaclesInfection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTarget()) == "HadesTentacle"))) {
            return false;
        }

        if (!((RandomInt(1, 10) == 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((EventUnit() != gv_finalBoss))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 1.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, UnitGetPosition(EventUnit()));
    UnitBehaviorAdd(EventUnit(), "Infection", EventUnitTarget(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HadesTentaclesInfection_Init () {
    gt_HadesTentaclesInfection = TriggerCreate("gt_HadesTentaclesInfection_Func");
    TriggerEnable(gt_HadesTentaclesInfection, false);
    TriggerAddEventUnitAttacked(gt_HadesTentaclesInfection, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW16b - Boss Blackhole Periodic
//--------------------------------------------------------------------------------------------------
bool gt_STW16bBossBlackholePeriodic_Func (bool testConds, bool runActions) {
    int auto071771DA_n;
    int auto071771DA_i;

    // Variable Declarations
    unit lv_blackHoleHarass;
    point lv_localPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitIsAlive(gv_finalBoss) == true) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(gv_finalBoss)) > 20.0) && (UnitGetType(gv_finalBoss) == "Hive")) {
                lv_localPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.0));
                libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, lv_localPoint);
                Wait(1.0, c_timeGame);
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blackhole", 0, 14, lv_localPoint);
            }
        }
        UnitGroupLoopEnd();
        if ((UnitIsAlive(gv_finalBoss) == true) && (UnitGetType(gv_finalBoss) == "Hive")) {
            lv_localPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_finalBoss), 25.0));
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Protoss, lv_localPoint);
            libNtve_gf_MakeUnitInvulnerable(gv_finalBoss, false);
            Wait(1.0, c_timeGame);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "Blackhole", 0, 14, lv_localPoint);
        }
        else {
            break;
        }
        Wait(2.5, c_timeReal);
        if ((gv_nightmare == true) && (UnitIsAlive(gv_finalBoss) == true) && (UnitGetType(gv_finalBoss) == "Hive")) {
            auto071771DA_n = gv_spawnFactor;
            for (auto071771DA_i = 1; auto071771DA_i <= auto071771DA_n; auto071771DA_i += 1) {
                libNtve_gf_CreateUnitsWithDefaultFacing(1, "ZerglingBurrowed", 0, 14, RegionRandomPoint(RegionFromId(196)));
                UnitBehaviorAdd(UnitLastCreated(), "AdvancedMutation", UnitLastCreated(), 1);
                UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowZerglingUp", 0)), c_orderQueueReplace);
                UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            }
        }

        Wait(2.5, c_timeReal);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW16bBossBlackholePeriodic_Init () {
    gt_STW16bBossBlackholePeriodic = TriggerCreate("gt_STW16bBossBlackholePeriodic_Func");
    TriggerEnable(gt_STW16bBossBlackholePeriodic, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW16b - Boss Phase 1 Death
//--------------------------------------------------------------------------------------------------
bool gt_STW16bBossPhase1Death_Func (bool testConds, bool runActions) {
    int auto8A136823_n;
    int auto8A136823_i;
    int autoA9A76270_n;
    int autoA9A76270_i;
    int auto6879C672_n;
    int auto6879C672_i;

    // Variable Declarations
    int lv_localInt;
    revealer[9] lv_localRevealer;
    int lv_cycle;
    point lv_randomPoint;

    // Variable Initialization
    lv_cycle = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideBossBar(false, 1);
    UnitGroupLoopBegin(UnitGroup("HadesTentacle", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerEnable(gt_HadesTentaclesInfection, false);
    auto8A136823_n = 10;
    for (auto8A136823_i = 1; auto8A136823_i <= auto8A136823_n; auto8A136823_i += 1) {
        Wait(0.5, c_timeReal);
        if ((RandomInt(0, 1) == 1)) {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Large, libNtve_ge_ExplosionType_Zerg, gv_finalBossPoint);
        }
        else {
            libNtve_gf_CreateExplosionAtPoint(libNtve_ge_ExplosionSize_Small, libNtve_ge_ExplosionType_Zerg, gv_finalBossPoint);
        }
    }
    UnitGroupLoopBegin(UnitGroup("Blackhole", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionCircle(gv_finalBossPoint, 7.0), 10.0, false);
    }
    IntLoopEnd();
    UnitCreate(1, "Hades", 0, 14, gv_finalBossPoint, 270.0);
    gv_finalBoss = UnitLastCreated();
    libNtve_gf_PauseUnit(gv_finalBoss, true);
    UnitGroupAdd(gv_zombieWave, gv_finalBoss);
    Wait(2.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/3A0BC089"));
    Wait(3.0, c_timeGame);
    gv_currentBoss = "Hades Phase 2";
    gf_BossBarCreation(libNtve_ge_BossBarRace_Protoss, gv_finalBoss, ge_Ping_Disabled);
    TriggerEnable(gt_STW16bBossExecuted, true);
    gf_CreateItemLocalNOTD("Medpack", 5, RegionFromId(196));
    Wait(3.0, c_timeReal);
    gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/ACB8A4E6"));
    libNtve_gf_PauseUnit(gv_finalBoss, false);
    while (true) {
        Wait(5.0, c_timeGame);
        if ((UnitIsAlive(gv_finalBoss) == true)) {
            libNtve_gf_MakeUnitInvulnerable(gv_finalBoss, false);
            if ((UnitGroupCount(gv_laserDrones, c_unitCountAlive) > 0)) {
                UnitGroupLoopBegin(gv_laserDrones);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_finalBoss), c_orderQueueReplace);
                }
                UnitGroupLoopEnd();
            }

            if ((lv_cycle == 4)) {
                gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/76BF7456"));
                Wait(3.3, c_timeReal);
                gf_RadioNOTD(gv_characterGeneralKoller, StringExternal("Param/Value/3014E2CA"));
                autoA9A76270_n = 2;
                for (autoA9A76270_i = 1; autoA9A76270_i <= autoA9A76270_n; autoA9A76270_i += 1) {
                    lv_randomPoint = RegionRandomPoint(RegionCircle(UnitGetPosition(gv_finalBoss), 15.0));
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "TerranDropPod", 0, 1, lv_randomPoint);
                    PingCreate(PlayerGroupActive(), "PingWarning", lv_randomPoint, ColorWithAlpha(76.86, 85.88, 99.22, 49.80), 1.0);
                    Wait(3.0, c_timeGame);
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LaserDrillDrone", 0, 9, lv_randomPoint);
                    UnitGroupAdd(gv_laserDrones, UnitLastCreated());
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_finalBoss), 10.0))), c_orderQueueReplace);
                    Wait(0.1, c_timeGame);
                }
            }

            if ((ModI(lv_cycle, 4) == 0)) {
                UnitGroupLoopBegin(gv_laserDrones);
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_finalBoss), 10.0))), c_orderQueueReplace);
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), gv_finalBoss), c_orderQueueAddToEnd);
                }
                UnitGroupLoopEnd();
                auto6879C672_n = 5;
                for (auto6879C672_i = 1; auto6879C672_i <= auto6879C672_n; auto6879C672_i += 1) {
                    libNtve_gf_CreateUnitsWithDefaultFacing(1, "Parasite", 0, 14, UnitGetPosition(gv_finalBoss));
                    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
                    Wait(0.01, c_timeGame);
                }
            }

            if ((ModI(lv_cycle, 3) == 0)) {
                UnitCreateEffectUnit(gv_finalBoss, "VenomousAlgaeLaunchMissile", UnitGroupRandomUnit(gv_marines, c_unitCountAlive));
            }

        }
        else {
            return true;
        }
        lv_cycle += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW16bBossPhase1Death_Init () {
    gt_STW16bBossPhase1Death = TriggerCreate("gt_STW16bBossPhase1Death_Func");
    TriggerEnable(gt_STW16bBossPhase1Death, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: STW16b - Boss Executed
//--------------------------------------------------------------------------------------------------
bool gt_STW16bBossExecuted_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerStop(gt_STW16bBossBlackholePeriodic);
    gf_BossAfterAction();
    gv_gameVictoryTime = TimerGetElapsed(gv_gameTime);
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    gf_UnifiedAwards(libNtve_gf_DifficultyValueInt(0, 80, 135, 0), 500.0, libNtve_gf_DifficultyValueInt(0, 250, 650, 0), 0, 5);
    if ((RandomInt(0, 1) == 1)) {
        SoundPlay(SoundLink("TValerian02ARaynor00049", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    else if (true) {
        SoundPlay(SoundLink("TValerian02ARaynor00048", -1), PlayerGroupAll(), 100.0, 0.0);
    }
    gf_SecTeamBEnding();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_STW16bBossExecuted_Init () {
    gt_STW16bBossExecuted = TriggerCreate("gt_STW16bBossExecuted_Func");
    TriggerEnable(gt_STW16bBossExecuted, false);
    TriggerAddEventUnitDied(gt_STW16bBossExecuted, UnitRefFromVariable("gv_finalBoss"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Init
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalInit_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gv_survivalMode = true;
    gv_hitPar = 20;
    if ((gv_totalPlayers < 5)) {
        gv_spawnFactor += 1;
        gv_difficultyHPScaling += 0.2;
        CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyScalingHP", "Modification.VitalMaxFractionArray[" + IntToString(0) + "]", 13, FixedToString(gv_difficultyHPScaling, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DifficultyScalingHP", "Modification.VitalMaxFractionArray[" + IntToString(0) + "]", 14, FixedToString(gv_difficultyHPScaling, c_fixedPrecisionAny));
    }
    SoundPlay(SoundLink("UI_TerranKlaxonAlert", -1), PlayerGroupAll(), 100.0, 0.0);
    CameraSetBounds(PlayerGroupActive(), RegionPlayableMap(), true);
    SoundtrackStop(PlayerGroupActive(), c_soundtrackCategoryMusic, true);
    SoundtrackPlay(PlayerGroupActive(), c_soundtrackCategoryMusic, "Mission_MusicCue001", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    TriggerEnable(gt_Wave4EnterAirlockBackupGate, true);
    TriggerEnable(gt_STW1EnterAirlockColonyGate, true);
    TriggerExecute(gt_ACEnterSiteAlphaGate, false, false);
    TriggerEnable(gt_OM11Delta2, true);
    TriggerEnable(gt_OM3ArmoryTurrets, false);
    gv_survivalSpawnPoints[1].lv_region = RegionFromId(221);
    gv_survivalSpawnPoints[2].lv_region = RegionFromId(222);
    gv_survivalSpawnPoints[3].lv_region = RegionFromId(223);
    gv_survivalSpawnPoints[4].lv_region = RegionFromId(224);
    gv_survivalSpawnPoints[5].lv_region = RegionFromId(220);
    gv_survivalSpawnPoints[1].lv_startCamera = CameraInfoFromId(2219);
    gv_survivalSpawnPoints[2].lv_startCamera = CameraInfoFromId(2220);
    gv_survivalSpawnPoints[3].lv_startCamera = CameraInfoFromId(2221);
    gv_survivalSpawnPoints[4].lv_startCamera = CameraInfoFromId(2222);
    gv_survivalSpawnPoints[5].lv_startCamera = CameraInfoFromId(2223);
    gf_SurvivalEnvironmentalChanges();
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisExploreArea(PlayerGroupLoopCurrent(), RegionCircle(RegionGetCenter(gv_survivalSpawnPoints[gv_survivalSpawn].lv_region), 12.0), true, false);
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(RegionGetCenter(gv_survivalSpawnPoints[gv_survivalSpawn].lv_region), 12.0), 120.0, false);
        CameraApplyInfo(PlayerGroupLoopCurrent(), gv_survivalSpawnPoints[gv_survivalSpawn].lv_startCamera, 0.0, -1, 10, true);
    }
    PlayerGroupLoopEnd();
    Wait(15.0, c_timeReal);
    UnitGroupLoopBegin(UnitGroupFromId(2));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    gf_TipNOTD(10000, StringExternal("Param/Value/A7D911D8"));
    Wait(5.0, c_timeReal);
    UIShowTextCrawl(PlayerGroupAll(), StringExternal("Param/Value/643656F9"), StringExternal("Param/Value/B7EB263B"), 10.0, SoundLink("UI_BnetDropdownClose", -1), gv_dummySound);
    gf_ZombieAIWorldEvents();
    gf_BlackMaskApplication();
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/1E2E9027"));
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("UI_ChatMessageReceived", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/9479BE0C"));
    TriggerExecute(gt_STC1ItemSpawn, true, false);
    gf_CreateItemNOTD("RoadFlare", 3);
    Wait(5.0, c_timeReal);
    UIHideTextCrawl(PlayerGroupAll());
    Wait(5.0, c_timeReal);
    gf_TipNOTD(5000, StringExternal("Param/Value/2B3BC3C6"));
    Wait(35.0, c_timeReal);
    ObjectiveCreate(StringExternal("Param/Value/BB6ABEBB"), StringToText(""), c_objectiveStateActive, true);
    gv_primaryObjective = ObjectiveLastCreated();
    TriggerExecute(gt_SurvivalW15, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalInit_Init () {
    gt_SurvivalInit = TriggerCreate("gt_SurvivalInit_Func");
    TriggerEnable(gt_SurvivalInit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W1-5
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW15_Func (bool testConds, bool runActions) {
    int auto0E5B260F_n;
    int auto0E5B260F_i;
    int autoB486C779_n;
    int autoB486C779_i;
    int autoAC4073FA_n;
    int autoAC4073FA_i;
    int auto708A9C2F_n;
    int auto708A9C2F_i;
    int autoF6C069CB_n;
    int autoF6C069CB_i;

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlay(SoundLink("ChallengescombinedExecutor00117", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/E8B12632"));
    Wait(2.0, c_timeReal);
    gv_wave = 1;
    TriggerEnable(gt_ManualSave, true);
    gf_TipNOTD(5000, StringExternal("Param/Value/0D9EE0AB"));
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto0E5B260F_n = (gv_spawnFactor * 8);
    for (auto0E5B260F_i = 1; auto0E5B260F_i <= auto0E5B260F_n; auto0E5B260F_i += 1) {
        gf_SmartSpawnNOTD("ZombieLevel12", 30.0);
        Wait(0.5, c_timeReal);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/CCAD1762"));
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_TipNOTD(5000, StringExternal("Param/Value/D1E6E23E"));
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoB486C779_n = (gv_spawnFactor * 8);
    for (autoB486C779_i = 1; autoB486C779_i <= autoB486C779_n; autoB486C779_i += 1) {
        gf_SmartSpawnNOTD("ZombieLevel12", 18.0);
        Wait(0.3, c_timeReal);
        if ((RandomInt(0, 5) == 1)) {
            gf_SmartSpawnNOTD("Parasite", 22.0);
        }

    }
    Wait(30.0, c_timeReal);
    TriggerEnable(gt_NightmareMode, false);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoAC4073FA_n = (gv_spawnFactor * 8);
    for (autoAC4073FA_i = 1; autoAC4073FA_i <= autoAC4073FA_n; autoAC4073FA_i += 1) {
        gf_SmartSpawnNOTD("ZombieLevel22", 18.0);
        if ((RandomInt(0, 9) == 1)) {
            gf_SmartSpawnNOTD("UltraliskBurrowed", 45.0);
        }

        Wait(0.5, c_timeReal);
    }
    Wait(30.0, c_timeReal);
    gv_wave += 1;
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/6187C54A"));
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto708A9C2F_n = (gv_spawnFactor * 8);
    for (auto708A9C2F_i = 1; auto708A9C2F_i <= auto708A9C2F_n; auto708A9C2F_i += 1) {
        gf_SmartSpawnNOTD("ZombieLevel22", 18.0);
        if ((RandomInt(0, 5) == 1)) {
            gf_SmartSpawnNOTD("Hugger2", 45.0);
            PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(UnitLastCreated()), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0);
        }

        Wait(0.8, c_timeReal);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/0A03D515"));
    Wait(30.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    if ((gv_nightmare == true)) {
        gf_SurvivalCreepDeposit();
    }

    autoF6C069CB_n = (gv_spawnFactor * 7);
    for (autoF6C069CB_i = 1; autoF6C069CB_i <= autoF6C069CB_n; autoF6C069CB_i += 1) {
        gf_SmartSpawnNOTD("ZombieLevel22", 18.0);
        if ((RandomInt(0, 2) == 1)) {
            gf_SmartSpawnNOTD("UltraliskBurrowed", 35.0);
        }

        Wait(0.8, c_timeReal);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/335ED149"));
    Wait(20.0, c_timeReal);
    gf_AwardPlayerXPNOTD(5);
    if ((gv_alivePlayers > 1)) {
        gf_UnifiedAwards(0, 0.0, libNtve_gf_DifficultyValueInt(0, 20, 40, 0), 0, 1);
    }

    TriggerExecute(gt_SurvivalW610, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW15_Init () {
    gt_SurvivalW15 = TriggerCreate("gt_SurvivalW15_Func");
    TriggerEnable(gt_SurvivalW15, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W6-10
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW610_Func (bool testConds, bool runActions) {
    int autoC960C2AD_n;
    int autoC960C2AD_i;
    int autoC694B5E6_n;
    int autoC694B5E6_i;
    int auto07AED26A_n;
    int auto07AED26A_i;
    int autoBA297442_n;
    int autoBA297442_i;
    int autoA7387585_n;
    int autoA7387585_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateItemNOTD("Magazine", 5);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/C6B04A5B"));
    autoC960C2AD_n = (gv_spawnFactor * 5);
    for (autoC960C2AD_i = 1; autoC960C2AD_i <= autoC960C2AD_n; autoC960C2AD_i += 1) {
        gf_SmartSpawnNOTD("Mutalisk", 45.0);
        Wait(0.55, c_timeReal);
    }
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoC694B5E6_n = (gv_spawnFactor * 5);
    for (autoC694B5E6_i = 1; autoC694B5E6_i <= autoC694B5E6_n; autoC694B5E6_i += 1) {
        gf_SmartSpawnNOTD("RoachBurrowed", 45.0);
        Wait(0.5, c_timeReal);
    }
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/1657D975"));
    auto07AED26A_n = (gv_spawnFactor * 5);
    for (auto07AED26A_i = 1; auto07AED26A_i <= auto07AED26A_n; auto07AED26A_i += 1) {
        UnitCreate(1, "HulkBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 20.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowHulk", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.5, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/94F0E7E3"));
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoBA297442_n = (gv_spawnFactor * 5);
    for (autoBA297442_i = 1; autoBA297442_i <= autoBA297442_n; autoBA297442_i += 1) {
        gf_SmartSpawnNOTD("Wraith2", 70.0);
        Wait(0.2, c_timeReal);
    }
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    SoundPlay(SoundLink("TTychus05TaldarimExecutor00046", -1), PlayerGroupAll(), 100.0, 0.0);
    gf_SurvivalCreepDeposit();
    Wait(15.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/97B832BE"));
    UnitCreate(1, "Tartarus", 0, 14, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(2, 6)]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitCreate(1, "Eileithyia", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 35.0)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    gv_eilethyia = UnitLastCreated();
    TriggerEnable(gt_Boss1bFightMobs, true);
    autoA7387585_n = 150;
    for (autoA7387585_i = 1; autoA7387585_i <= autoA7387585_n; autoA7387585_i += 1) {
        Wait(2.0, c_timeReal);
        if ((UnitIsAlive(gv_eilethyia) == false)) {
            TriggerEnable(gt_Boss1bFightMobs, false);
        }

    }
    TriggerEnable(gt_Boss1bFightMobs, false);
    if ((UnitIsAlive(gv_eilethyia) == true)) {
        UnitCreate(1, "Eos", 0, 14, UnitGetPosition(gv_boss), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Frenzy2", 14, 1);
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitKill(gv_eilethyia);
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/6EF75B71"));
    }
    Wait(30.0, c_timeReal);
    gf_AwardPlayerXPNOTD(5);
    if ((gv_alivePlayers > 1)) {
        gf_UnifiedAwards(0, 0.0, libNtve_gf_DifficultyValueInt(0, 40, 80, 0), 0, 2);
    }

    TriggerExecute(gt_AutoSave, true, false);
    TriggerExecute(gt_SurvivalW1115, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW610_Init () {
    gt_SurvivalW610 = TriggerCreate("gt_SurvivalW610_Func");
    TriggerEnable(gt_SurvivalW610, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W11-15
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW1115_Func (bool testConds, bool runActions) {
    int auto8AB9B399_n;
    int auto8AB9B399_i;
    int auto0BABB158_n;
    int auto0BABB158_i;
    int autoA418A838_n;
    int autoA418A838_i;
    int auto475D9F6C_n;
    int auto475D9F6C_i;
    int auto8E12658B_n;
    int auto8E12658B_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateItemNOTD("Magazine", 5);
    SoundPlay(SoundLink("ChallengescombinedExecutor00014", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(5.0, c_timeReal);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/645466D6"));
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    SoundPlay(SoundLink("UI_ChatMessageReceived", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/94570FE3"));
    TriggerExecute(gt_STC2ItemSpawn, true, false);
    auto8AB9B399_n = (gv_spawnFactor * 5);
    for (auto8AB9B399_i = 1; auto8AB9B399_i <= auto8AB9B399_n; auto8AB9B399_i += 1) {
        UnitCreate(1, "BanelingBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 35.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowBanelingUp", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.2, c_timeReal);
    }
    Wait(15.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/3549F488"));
    SoundPlay(SoundLink("PerditionTurret_MorphOpen", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(3.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "IonCannon", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 30.0)), RegionRandomPoint(RegionPlayableMap()));
    gv_ionCannonA = UnitLastCreated();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/4F506EF4"));
    Wait(2.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "IonCannon", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 45.0)), RegionRandomPoint(RegionPlayableMap()));
    gv_ionCannonB = UnitLastCreated();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    Wait(2.0, c_timeReal);
    libNtve_gf_UnitCreateFacingPoint(1, "IonCannon", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 45.0)), RegionRandomPoint(RegionPlayableMap()));
    gv_ionCannonC = UnitLastCreated();
    libNtve_gf_AddUnitGroupToUnitGroup(UnitLastCreatedGroup(), gv_zombieWave);
    auto0BABB158_n = (gv_spawnFactor * 2);
    for (auto0BABB158_i = 1; auto0BABB158_i <= auto0BABB158_n; auto0BABB158_i += 1) {
        gf_SmartSpawnNOTD("Hugger2", 70.0);
        Wait(3.0, c_timeReal);
    }
    Wait(15.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/37825E7E"));
    SoundPlay(SoundLink("PerditionTurret_MorphOpen", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorAdd(gv_ionCannonA, "NanoHasteLevel3", gv_ionCannonA, 1);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/39E78B90"));
    Wait(10.0, c_timeReal);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F6633EE7"));
    SoundPlay(SoundLink("PerditionTurret_MorphOpen", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitBehaviorAdd(gv_ionCannonB, "NanoHasteLevel3", gv_ionCannonB, 1);
    Wait(12.0, c_timeReal);
    UnitRemove(gv_ionCannonA);
    UnitRemove(gv_ionCannonB);
    UnitRemove(gv_ionCannonC);
    Wait(2.0, c_timeReal);
    gf_AwardMarineXPNOTD(100.0);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/A86CF95E"));
    autoA418A838_n = (gv_spawnFactor * 2);
    for (autoA418A838_i = 1; autoA418A838_i <= autoA418A838_n; autoA418A838_i += 1) {
        UnitCreate(1, "Lelantos", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 90.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        if ((gv_squadRating < 1800)) {
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
        }

        Wait(0.2, c_timeReal);
    }
    Wait(60.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto475D9F6C_n = (gv_spawnFactor * 5);
    for (auto475D9F6C_i = 1; auto475D9F6C_i <= auto475D9F6C_n; auto475D9F6C_i += 1) {
        gf_SmartSpawnNOTD("InfestorTerran2", 75.0);
        Wait(0.7, c_timeReal);
    }
    SoundPlay(SoundLink("THanson02Tychus00006", -1), PlayerGroupAll(), 100.0, 0.0);
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto8E12658B_n = (gv_spawnFactor * 5);
    for (auto8E12658B_i = 1; auto8E12658B_i <= auto8E12658B_n; auto8E12658B_i += 1) {
        UnitCreate(1, "Immortal22", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 30.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowImmortal", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.2, c_timeReal);
    }
    Wait(30.0, c_timeReal);
    gf_AwardPlayerXPNOTD(7);
    if ((gv_alivePlayers > 1)) {
        gf_UnifiedAwards(0, 0.0, libNtve_gf_DifficultyValueInt(0, 40, 80, 0), 0, 2);
    }

    TriggerExecute(gt_SurvivalW1620, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW1115_Init () {
    gt_SurvivalW1115 = TriggerCreate("gt_SurvivalW1115_Func");
    TriggerEnable(gt_SurvivalW1115, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W16-20
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW1620_Func (bool testConds, bool runActions) {
    int auto44138A37_n;
    int auto44138A37_i;
    int auto8EC517FE_n;
    int auto8EC517FE_i;
    int autoF6CF1D26_n;
    int autoF6CF1D26_i;
    int autoD4112944_n;
    int autoD4112944_i;

    // Variable Declarations
    unit lv_iVAX;
    unit lv_seth;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto44138A37_n = (gv_spawnFactor * 7);
    for (auto44138A37_i = 1; auto44138A37_i <= auto44138A37_n; auto44138A37_i += 1) {
        UnitCreate(1, "Blindling2", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 20.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBlindling", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        UnitCreate(1, "Parasite", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 20.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Detector2", 14, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.2, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto8EC517FE_n = (gv_spawnFactor * 5);
    for (auto8EC517FE_i = 1; auto8EC517FE_i <= auto8EC517FE_n; auto8EC517FE_i += 1) {
        gf_SmartSpawnNOTD("Devourer2", 45.0);
        Wait(1.0, c_timeReal);
    }
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoF6CF1D26_n = (gv_spawnFactor * 5);
    for (autoF6CF1D26_i = 1; autoF6CF1D26_i <= autoF6CF1D26_n; autoF6CF1D26_i += 1) {
        gf_SmartSpawnNOTD("SeekerBurrowed", 45.0);
        Wait(0.35, c_timeReal);
    }
    Wait(30.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoD4112944_n = (gv_spawnFactor * 5);
    for (autoD4112944_i = 1; autoD4112944_i <= autoD4112944_n; autoD4112944_i += 1) {
        gf_SmartSpawnNOTD("Slasher2", 45.0);
        Wait(1.0, c_timeReal);
    }
    Wait(40.0, c_timeReal);
    SoundPlay(SoundLink("TTychus05TaldarimExecutor00040", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_SurvivalCreepDeposit();
    UnitCreate(1, "Seth", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(2, 6)]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 7000.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 7000.0);
    lv_iVAX = UnitLastCreated();
    UnitCreate(1, "Ivax", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(2, 6)]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 7000.0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 7000.0);
    lv_seth = UnitLastCreated();
    gv_boss = UnitLastCreated();
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/1314AC76"));
    libNtve_gf_PauseUnit(lv_iVAX, true);
    libNtve_gf_PauseUnit(lv_seth, true);
    libNtve_gf_MakeUnitInvulnerable(lv_iVAX, true);
    libNtve_gf_MakeUnitInvulnerable(lv_seth, true);
    Wait(5.0, c_timeReal);
    libNtve_gf_PauseUnit(lv_iVAX, false);
    libNtve_gf_PauseUnit(lv_seth, false);
    libNtve_gf_MakeUnitInvulnerable(lv_iVAX, false);
    libNtve_gf_MakeUnitInvulnerable(lv_seth, false);
    while (!((UnitIsAlive(gv_boss) == false))) {
        Wait(3.0, c_timeGame);
    }
    gf_AwardPlayerXPNOTD(10);
    if ((gv_alivePlayers > 1)) {
        gf_UnifiedAwards(0, 0.0, libNtve_gf_DifficultyValueInt(0, 80, 120, 0), 0, 2);
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        gv_playerKarma[IntLoopCurrent()] += 1;
    }
    IntLoopEnd();
    Wait(20.0, c_timeReal);
    gv_survivalMedal20Waves = true;
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) && (gv_alivePlayers > 1)) {
            gv_superiorServiceMedal[IntLoopCurrent()] += 1;
            UIDisplayMessage(PlayerGroupSingle(IntLoopCurrent()), c_messageAreaDebug, StringExternal("Param/Value/3277B085"));
            gf_SetMedalVariables(IntLoopCurrent(), 9);
        }

    }
    IntLoopEnd();
    TriggerExecute(gt_AutoSave, true, false);
    if ((gv_noNewbie == false)) {
        gv_gameOver = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/73B68D3A"));
    }
    else {
        if ((gv_alivePlayers <= 1)) {
            gv_gameOver = true;
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/4826ECBA"));
        }
        else {
            TriggerExecute(gt_SurvivalW2125, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW1620_Init () {
    gt_SurvivalW1620 = TriggerCreate("gt_SurvivalW1620_Func");
    TriggerEnable(gt_SurvivalW1620, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W21-25
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW2125_Func (bool testConds, bool runActions) {
    int auto6DA4E8D0_n;
    int auto6DA4E8D0_i;
    int auto6C27A6C4_n;
    int auto6C27A6C4_i;
    int auto5ECB4DF0_n;
    int auto5ECB4DF0_i;
    int auto180808F6_n;
    int auto180808F6_i;
    int auto10007FE5_n;
    int auto10007FE5_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hitPar = 50;
    Wait(5.0, c_timeReal);
    SoundPlay(SoundLink("UI_ChatMessageReceived", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/0F55C9CA"));
    TriggerExecute(gt_STC1ItemSpawn, true, false);
    Wait(30.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto6DA4E8D0_n = (gv_spawnFactor * 10);
    for (auto6DA4E8D0_i = 1; auto6DA4E8D0_i <= auto6DA4E8D0_n; auto6DA4E8D0_i += 1) {
        UnitCreate(1, "SeekerBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 35.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.35, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto6C27A6C4_n = (gv_spawnFactor * 2);
    for (auto6C27A6C4_i = 1; auto6C27A6C4_i <= auto6C27A6C4_n; auto6C27A6C4_i += 1) {
        UnitCreate(1, "InfestedAbominationBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 55.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowInfestedAbominationUp", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "DetectorRange3", 14, 1);
        UnitBehaviorAdd(UnitLastCreated(), "SpeedDebuff", UnitLastCreated(), 1);
        Wait(5.0, c_timeReal);
    }
    Wait(50.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto5ECB4DF0_n = (gv_spawnFactor * 2);
    for (auto5ECB4DF0_i = 1; auto5ECB4DF0_i <= auto5ECB4DF0_n; auto5ECB4DF0_i += 1) {
        gf_SmartSpawnNOTD("Hugger2", 30.0);
        Wait(0.35, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_SurvivalCreepDeposit();
    auto180808F6_n = (gv_spawnFactor * 7);
    for (auto180808F6_i = 1; auto180808F6_i <= auto180808F6_n; auto180808F6_i += 1) {
        UnitCreate(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 50.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Rampage", 14, 1);
        Wait(0.5, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto10007FE5_n = (gv_spawnFactor * 8);
    for (auto10007FE5_i = 1; auto10007FE5_i <= auto10007FE5_n; auto10007FE5_i += 1) {
        UnitCreate(1, "ZombieLevel22", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 35.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
        if ((RandomInt(0, 20) == 1)) {
            UnitBehaviorAddPlayer(UnitLastCreated(), "HeightenedSensesDebuff", 1, 1);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, (UnitGetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, c_unitPropCurrent) + 2500.0));
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifePercent, 100.0);
            UnitBehaviorAddPlayer(UnitLastCreated(), "Rampage", 14, 1);
            UnitBehaviorAddPlayer(UnitLastCreated(), "Detector2", 14, 1);
        }

        Wait(0.5, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gf_UnifiedAwards(15, 0.0, 80, 0, 2);
    TriggerExecute(gt_SurvivalW2630, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW2125_Init () {
    gt_SurvivalW2125 = TriggerCreate("gt_SurvivalW2125_Func");
    TriggerEnable(gt_SurvivalW2125, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W26-30
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW2630_Func (bool testConds, bool runActions) {
    int auto1C5F7B28_n;
    int auto1C5F7B28_i;
    int auto788720E3_n;
    int auto788720E3_i;
    int autoE6AC8940_n;
    int autoE6AC8940_i;
    int auto74324083_n;
    int auto74324083_i;
    int auto4C709E04_n;
    int auto4C709E04_i;

    // Variable Declarations
    point lv_airstrikePoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateItemNOTD("Magazine", 5);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto1C5F7B28_n = (gv_spawnFactor * 5);
    for (auto1C5F7B28_i = 1; auto1C5F7B28_i <= auto1C5F7B28_n; auto1C5F7B28_i += 1) {
        gf_SmartSpawnNOTD("Mutalisk", 90.0);
        Wait(0.5, c_timeReal);
        gf_SmartSpawnNOTD("Wraith2", 90.0);
        Wait(0.5, c_timeReal);
        if ((RandomInt(0, 3) == 1)) {
            UnitCreate(1, "Strangler", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 90.0)), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            UnitBehaviorAddPlayer(UnitLastCreated(), "Detector2", 14, 1);
        }

        Wait(0.5, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto788720E3_n = (gv_spawnFactor * 2);
    for (auto788720E3_i = 1; auto788720E3_i <= auto788720E3_n; auto788720E3_i += 1) {
        UnitCreate(1, "ZombieBroodMother2", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 90.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBroodmother", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(1.5, c_timeReal);
    }
    autoE6AC8940_n = 15;
    for (autoE6AC8940_i = 1; autoE6AC8940_i <= autoE6AC8940_n; autoE6AC8940_i += 1) {
        Wait(RandomFixed(1.0, 5.0), c_timeReal);
        lv_airstrikePoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 15.0));
        while ((!((((PointGetX(lv_airstrikePoint) >= 10) && (PointGetX(lv_airstrikePoint) <= 246)) && ((PointGetY(lv_airstrikePoint) >= 10) && (PointGetY(lv_airstrikePoint) <= 246)))))) {
            lv_airstrikePoint = RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 15.0));
        }
        PlayerCreateEffectPoint(9, "NukePersistent", lv_airstrikePoint);
    }
    Wait(35.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_SurvivalCreepDeposit();
    auto74324083_n = (gv_spawnFactor * 4);
    for (auto74324083_i = 1; auto74324083_i <= auto74324083_n; auto74324083_i += 1) {
        UnitCreate(1, "SeekerBurrowed", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 90.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowSeeker", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(1.0, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    auto4C709E04_n = (gv_spawnFactor * 5);
    for (auto4C709E04_i = 1; auto4C709E04_i <= auto4C709E04_n; auto4C709E04_i += 1) {
        UnitCreate(1, "RoachBurrowed", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 90.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowRoachUp", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.5, c_timeReal);
    }
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    SoundPlay(SoundLink("TTychus05TaldarimExecutor00041", -1), PlayerGroupAll(), 100.0, 0.0);
    UnitCreate(1, "Cronus", 0, 14, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(2, 6)]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitBehaviorAddPlayer(UnitLastCreated(), "UnstableMutation", 14, 1);
    gv_survivalCronusA = UnitLastCreated();
    Wait(0.1, c_timeReal);
    UnitCreate(1, "Cronus", 0, 14, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(2, 6)]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitBehaviorAddPlayer(UnitLastCreated(), "UnstableMutation", 14, 1);
    gv_survivalCronusB = UnitLastCreated();
    Wait(1.0, c_timeReal);
    TriggerExecute(gt_SurvivalCronusAAI, true, false);
    TriggerExecute(gt_SurvivalCronusBAI, true, false);
    while (!(((UnitIsAlive(gv_survivalCronusA) == false) && (UnitIsAlive(gv_survivalCronusB) == false)))) {
        Wait(3.0, c_timeGame);
    }
    gf_UnifiedAwards(25, 0.0, libNtve_gf_DifficultyValueInt(0, 80, 160, 0), 0, 2);
    TriggerStop(gt_SurvivalCronusAAI);
    TriggerStop(gt_SurvivalCronusBAI);
    TriggerExecute(gt_AutoSave, true, false);
    Wait(20.0, c_timeReal);
    TriggerExecute(gt_SurvivalW3135, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW2630_Init () {
    gt_SurvivalW2630 = TriggerCreate("gt_SurvivalW2630_Func");
    TriggerEnable(gt_SurvivalW2630, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Cronus A AI
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalCronusAAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(gv_survivalCronusA) == true) && (gv_gameOver == false)) {
        gf_SurvivalCronusAI(gv_survivalCronusA);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalCronusAAI_Init () {
    gt_SurvivalCronusAAI = TriggerCreate("gt_SurvivalCronusAAI_Func");
    TriggerEnable(gt_SurvivalCronusAAI, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival Cronus B AI
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalCronusBAI_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(gv_survivalCronusB) == true) && (gv_gameOver == false)) {
        gf_SurvivalCronusAI(gv_survivalCronusB);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalCronusBAI_Init () {
    gt_SurvivalCronusBAI = TriggerCreate("gt_SurvivalCronusBAI_Func");
    TriggerEnable(gt_SurvivalCronusBAI, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W31-35
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW3135_Func (bool testConds, bool runActions) {
    int auto61FD287A_n;
    int auto61FD287A_i;
    int autoF33E36B1_n;
    int autoF33E36B1_i;
    int auto6BCA4EFB_n;
    int auto6BCA4EFB_i;
    int autoE29E0B24_n;
    int autoE29E0B24_i;
    int autoA6E935BB_n;
    int autoA6E935BB_i;
    int autoA9D0332C_n;
    int autoA9D0332C_i;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_CreateItemNOTD("Magazine", 5);
    SoundPlay(SoundLink("UI_ChatMessageReceived", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/53207B04"));
    TriggerExecute(gt_STC2ItemSpawn, true, false);
    UIHideTextCrawl(PlayerGroupAll());
    auto61FD287A_n = (gv_spawnFactor * 7);
    for (auto61FD287A_i = 1; auto61FD287A_i <= auto61FD287A_n; auto61FD287A_i += 1) {
        gf_SmartSpawnNOTD("BanelingBurrowed", 80.0);
        gf_SmartSpawnNOTD("Blindling2", 80.0);
        Wait(0.5, c_timeReal);
    }
    Wait(25.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_SurvivalCreepDeposit();
    autoF33E36B1_n = (gv_spawnFactor * 5);
    for (autoF33E36B1_i = 1; autoF33E36B1_i <= autoF33E36B1_n; autoF33E36B1_i += 1) {
        UnitCreate(1, "Beastling2", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 70.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowBeastling", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(1.0, c_timeReal);
    }
    Wait(30.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_RadioNOTD(PlayerName(UnitGetOwner(UnitGroupRandomUnit(gv_marines, c_unitCountAlive))), StringExternal("Param/Value/116239BA"));
    auto6BCA4EFB_n = (gv_spawnFactor * 5);
    for (auto6BCA4EFB_i = 1; auto6BCA4EFB_i <= auto6BCA4EFB_n; auto6BCA4EFB_i += 1) {
        UnitCreate(1, "Marine", 0, 13, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 75.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 13, 1);
        Wait(0.35, c_timeReal);
        UnitCreate(1, "Sniper", 0, 13, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 75.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 13, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "Detector2", 13, 1);
        Wait(0.35, c_timeReal);
    }
    Wait(30.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoE29E0B24_n = (gv_spawnFactor * 7);
    for (autoE29E0B24_i = 1; autoE29E0B24_i <= autoE29E0B24_n; autoE29E0B24_i += 1) {
        UnitCreate(1, "ZombieLevel22", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 90.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Detector5", 14, 1);
        UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("UnburrowZombieLevel2", 0)), c_orderQueueReplace);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.3, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoA6E935BB_n = 10;
    for (autoA6E935BB_i = 1; autoA6E935BB_i <= autoA6E935BB_n; autoA6E935BB_i += 1) {
        if ((gv_alivePlayers < 3) && (RandomInt(0, 1) == 1)) {
        }
        else {
            UnitBehaviorAddPlayer(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), "ZEffect", 14, 1);
        }
        autoA9D0332C_n = gv_spawnFactor;
        for (autoA9D0332C_i = 1; autoA9D0332C_i <= autoA9D0332C_n; autoA9D0332C_i += 1) {
            UnitCreate(1, "UltraliskBurrowed", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 90.0)), libNtve_gf_RandomAngle());
            UnitGroupAdd(gv_zombieWave, UnitLastCreated());
            UnitIssueOrder(UnitLastCreated(), Order(AbilityCommand("BurrowUltraliskUp", 0)), c_orderQueueReplace);
            UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
            Wait(0.1, c_timeGame);
        }
        Wait(7.0, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gf_UnifiedAwards(30, 0.0, 120, 0, 3);
    TriggerExecute(gt_SurvivalW3640, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW3135_Init () {
    gt_SurvivalW3135 = TriggerCreate("gt_SurvivalW3135_Func");
    TriggerEnable(gt_SurvivalW3135, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Survival W36-40
//--------------------------------------------------------------------------------------------------
bool gt_SurvivalW3640_Func (bool testConds, bool runActions) {
    int auto0793144F_n;
    int auto0793144F_i;
    int autoC4BAA258_n;
    int autoC4BAA258_i;
    int auto9BC4682E_n;
    int auto9BC4682E_i;
    int autoD0D79160_n;
    int autoD0D79160_i;
    int autoBC9AEA32_n;
    int autoBC9AEA32_i;

    // Variable Declarations
    int lv_localIntA;
    unit lv_localPerses;
    unit lv_localDevastator;

    // Variable Initialization
    lv_localIntA = 1;

    // Conditions
    if (testConds) {
        if (!((gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_hitPar = 75;
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_SurvivalCreepDeposit();
    gf_CreateItemNOTD("Magazine", 5);
    UnitCreate(1, "Perses", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 125.0)), libNtve_gf_RandomAngle());
    lv_localPerses = UnitLastCreated();
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitSetPropertyFixed(lv_localPerses, c_unitPropLifeMax, (UnitGetPropertyFixed(lv_localPerses, c_unitPropLifeMax, c_unitPropCurrent) * 0.3));
    Wait(0.25, c_timeReal);
    if ((gv_alivePlayers <= 3)) {
        libNtve_gf_ChangeUnitDamage(lv_localPerses, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Mega);
    }

    Wait(0.25, c_timeReal);
    auto0793144F_n = (gv_spawnFactor * 5);
    for (auto0793144F_i = 1; auto0793144F_i <= auto0793144F_n; auto0793144F_i += 1) {
        UnitCreate(1, "Mutalisk", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 135.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Detector5", 14, 1);
        UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
        Wait(0.5, c_timeReal);
    }
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/EA2FA3C7"));
    Wait(90.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    autoC4BAA258_n = gv_spawnFactor;
    for (autoC4BAA258_i = 1; autoC4BAA258_i <= autoC4BAA258_n; autoC4BAA258_i += 1) {
        UnitCreate(1, "Devastator", 0, 14, RegionRandomPoint(RegionCircle(libNtve_gf_CenterOfUnitGroup(gv_marines), 90.0)), libNtve_gf_RandomAngle());
        lv_localDevastator = UnitLastCreated();
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        libNtve_gf_PauseUnit(lv_localDevastator, true);
        libNtve_gf_ChangeUnitDamage(lv_localDevastator, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        if ((gv_nightmare == false)) {
            libNtve_gf_AttachActorToUnit(UnitLastCreated(), "NewbieWarning", "Ref_Center");
        }

        Wait(3.0, c_timeReal);
        libNtve_gf_PauseUnit(lv_localDevastator, false);
        libNtve_gf_ChangeUnitDamage(lv_localDevastator, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_Full);
        if ((gv_squadRating < 1800)) {
            IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                libNtve_gf_ShareVisionofUnit(lv_localDevastator, true, IntLoopCurrent());
            }
            IntLoopEnd();
        }

        Wait(0.1, c_timeReal);
    }
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    auto9BC4682E_n = (gv_spawnFactor * 6);
    for (auto9BC4682E_i = 1; auto9BC4682E_i <= auto9BC4682E_n; auto9BC4682E_i += 1) {
        gf_SmartSpawnNOTD("X1GuardianLevel2", 90.0);
        Wait(0.2, c_timeReal);
        UnitCreate(1, "CrawlerDroneLevel2", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 90.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Detector5", 14, 1);
        UnitBehaviorAdd(UnitLastCreated(), "PersonalCloakingFree", UnitLastCreated(), 1);
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(0.2, c_timeReal);
        gf_SmartSpawnNOTD("FieldProbe", 90.0);
        Wait(2.0, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gf_SmartSpawnNOTD("Nazara", 90.0);
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    if ((gv_nightmare == true)) {
        gf_SurvivalCreepDeposit();
    }

    UnitCreate(1, "Demeter", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 110.0)), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    UnitBehaviorAddPlayer(UnitLastCreated(), "AdvancedMutation", 14, 1);
    autoD0D79160_n = (gv_spawnFactor * 4);
    for (autoD0D79160_i = 1; autoD0D79160_i <= autoD0D79160_n; autoD0D79160_i += 1) {
        UnitCreate(1, "DemetersCocoon", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 110.0)), libNtve_gf_RandomAngle());
        UnitBehaviorAddPlayer(UnitLastCreated(), "Detector2", 14, 1);
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        Wait(3.0, c_timeReal);
    }
    Wait(20.0, c_timeReal);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    if ((gv_nightmare == true)) {
        gf_SurvivalCreepDeposit();
    }

    autoBC9AEA32_n = (gv_spawnFactor * 2);
    for (autoBC9AEA32_i = 1; autoBC9AEA32_i <= autoBC9AEA32_n; autoBC9AEA32_i += 1) {
        UnitCreate(1, "NydusCanal", 0, 14, RegionRandomPoint(RegionCircle(UnitGetPosition(UnitGroupRandomUnit(gv_marines, c_unitCountAlive)), 25.0)), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_zombieWave, UnitLastCreated());
        UnitGroupAdd(gv_survivalNydusGroup, UnitLastCreated());
        Wait(2.0, c_timeReal);
    }
    gf_SurvivalNydusSpawn();
    Wait(40.0, c_timeReal);
    SoundPlay(SoundLink("TTosh02TaldarimExecutor00007", -1), PlayerGroupAll(), 100.0, 0.0);
    gv_wave += 1;
    gf_SurvivalWaveTitleDisplay(gv_wave);
    gf_SurvivalCreepDeposit();
    gf_CreateItemNOTD("Magazine", 5);
    gf_MarineSpeechNOTD(UnitGroupRandomUnit(gv_marines, c_unitCountAlive), StringExternal("Param/Value/39018B47"));
    libNtve_gf_ShowHideBossBar(false, 1);
    Wait(5.0, c_timeReal);
    UnitCreate(1, "GuardianoftheBeta", 0, 13, RegionRandomPoint(gv_reinforcementSpawn[RandomInt(2, 6)]), libNtve_gf_RandomAngle());
    UnitGroupAdd(gv_zombieWave, UnitLastCreated());
    if ((gv_nightmare == true)) {
        UnitBehaviorAdd(UnitLastCreated(), "PersonalCloakingFree", UnitLastCreated(), 1);
        UnitBehaviorAdd(UnitLastCreated(), "Frenzy35", UnitLastCreated(), 1);
    }

    gv_boss = UnitLastCreated();
    libNtve_gf_DisplayBossBar(1, "Assets\\Textures\\zealotportrait_static.dds", StringExternal("Param/Value/F77C7E37"), 100, PlayerGroupActive());
    libNtve_gf_SetBossBarBoss(1, gv_boss, true);
    libNtve_gf_SetBossBarRace(1, libNtve_ge_BossBarRace_Terran, true);
    SoundPlay(SoundLink("TZeratul04DarkVoice00020", -1), PlayerGroupAll(), 100.0, 0.0);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 5.5);
    }
    IntLoopEnd();
    while (!((UnitIsAlive(gv_boss) == false))) {
        Wait(2.0, c_timeGame);
    }
    libNtve_gf_ShowHideBossBar(false, 1);
    if ((gv_nightmare == true)) {
        gf_UnifiedAwards(120, 0.0, libNtve_gf_DifficultyValueInt(0, 200, 400, 0), 1, 10);
    }
    else {
        gf_UnifiedAwards(60, 0.0, libNtve_gf_DifficultyValueInt(0, 200, 400, 0), 1, 5);
    }
    ObjectiveSetState(gv_primaryObjective, c_objectiveStateCompleted);
    SoundPlay(SoundLink("UI_MissionComplete", -1), PlayerGroupAll(), 100.0, 0.0);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/891CBD67"));
    TriggerExecute(gt_AutoSave, true, false);
    gv_victory = true;
    Wait(7.0, c_timeReal);
    UIClearMessages(PlayerGroupAll(), c_messageAreaDirective);
    Wait(7.0, c_timeReal);
    gv_gameOver = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurvivalW3640_Init () {
    gt_SurvivalW3640 = TriggerCreate("gt_SurvivalW3640_Func");
    TriggerEnable(gt_SurvivalW3640, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Show Inventory
//--------------------------------------------------------------------------------------------------
bool gt_ShowInventory_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        DialogSetVisible(gv_ammoCounterDialog[PlayerGroupLoopCurrent()], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_equipmentButton[PlayerGroupLoopCurrent()], PlayerGroupSingle(EventPlayer()), false);
    }
    PlayerGroupLoopEnd();
    DialogControlSetVisible(gv_equipmentButton[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), true);
    DialogSetVisible(gv_ammoCounterDialog[UnitGetOwner(EventUnit())], PlayerGroupSingle(EventPlayer()), true);
    UnitInventoryContainerOpen(PlayerGroupActive(), EventUnit(), 1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShowInventory_Init () {
    gt_ShowInventory = TriggerCreate("gt_ShowInventory_Func");
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[1]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[2]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[3]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[4]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[5]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[6]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[7]"), c_playerAny, true);
    TriggerAddEventUnitSelected(gt_ShowInventory, UnitRefFromVariable("gv_marineHero[8]"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open Equipment
//--------------------------------------------------------------------------------------------------
bool gt_OpenEquipment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_usedDialogItem;

    // Variable Initialization
    lv_usedDialogItem = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialogItem == gv_equipmentButton[1]) || (lv_usedDialogItem == gv_equipmentButton[2]) || (lv_usedDialogItem == gv_equipmentButton[3]) || (lv_usedDialogItem == gv_equipmentButton[4]) || (lv_usedDialogItem == gv_equipmentButton[5]) || (lv_usedDialogItem == gv_equipmentButton[6]) || (lv_usedDialogItem == gv_equipmentButton[7]) || (lv_usedDialogItem == gv_equipmentButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_equipmentOpen == true)) {
        gv_equipmentOpen = false;
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), gv_marineHero[EventPlayer()], 2, false);
    }
    else {
        gv_equipmentOpen = true;
        UnitInventoryContainerOpen(PlayerGroupSingle(EventPlayer()), gv_marineHero[EventPlayer()], 2, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_OpenEquipment_Init () {
    gt_OpenEquipment = TriggerCreate("gt_OpenEquipment_Func");
    TriggerAddEventDialogControl(gt_OpenEquipment, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Weapon Swap Disable
//--------------------------------------------------------------------------------------------------
bool gt_WeaponSwapDisable_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitInventoryContainer(EventUnitInventoryItem()) == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Weapons"))) {
        gf_DisableAttackEquippingWeapons(UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem())), UnitGetType(EventUnitInventoryItem()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_WeaponSwapDisable_Init () {
    gt_WeaponSwapDisable = TriggerCreate("gt_WeaponSwapDisable_Func");
    TriggerAddEventUnitInventoryChange(gt_WeaponSwapDisable, null, c_unitInventoryChangeMoves, null);
    TriggerAddEventUnitInventoryChange(gt_WeaponSwapDisable, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Update Weight - Items
//--------------------------------------------------------------------------------------------------
bool gt_UpdateWeightItems_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Variable Initialization
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(gv_marineHero[lv_triggeringPlayer]) == true))) {
            return false;
        }

        if (!(((EventUnitInventoryItemContainer() == 1) || (UnitInventoryContainer(EventUnitInventoryItem()) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_EquipmentUpdateMarineWeight(lv_triggeringPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UpdateWeightItems_Init () {
    gt_UpdateWeightItems = TriggerCreate("gt_UpdateWeightItems_Func");
    TriggerAddEventUnitInventoryChange(gt_UpdateWeightItems, null, c_unitInventoryChangeGains, null);
    TriggerAddEventUnitInventoryChange(gt_UpdateWeightItems, null, c_unitInventoryChangeLoses, null);
    TriggerAddEventUnitInventoryChange(gt_UpdateWeightItems, null, c_unitInventoryChangeMoves, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Transfer Block
//--------------------------------------------------------------------------------------------------
bool gt_ItemTransferBlock_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(UnitInventoryUnit(EventUnitInventoryItem()), "InventoryTransferBlock") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(EventUnit()), false);
    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("InventoryRifleman", 2), EventUnitInventoryItem()), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemTransferBlock_Init () {
    gt_ItemTransferBlock = TriggerCreate("gt_ItemTransferBlock_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemTransferBlock, null, c_unitInventoryChangeGives, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unequip Item
//--------------------------------------------------------------------------------------------------
bool gt_UnequipItem_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_inventorySize;
    bool[8] lv_openInventorySlot;
    int lv_destinationSlot;
    int lv_triggeringPlayer;

    // Variable Initialization
    lv_inventorySize = gf_GetInventorySlots(EventUnit());
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_openInventorySlot[init_i] = true;
    }
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((EventUnitInventoryItemContainer() == 2))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitInventoryItemSlot() == 6)) {
        UnitAbilityEnable(EventUnit(), "Reload", false);
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
            lv_openInventorySlot[(UnitInventorySlot(UnitGroupLoopCurrent()) - 1)] = false;
        }

    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, lv_inventorySize);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((lv_openInventorySlot[IntLoopCurrent()] == true)) {
            lv_destinationSlot = (IntLoopCurrent() + 1);
        }

    }
    IntLoopEnd();
    if ((lv_destinationSlot != 0)) {
        UnitInventoryMove(EventUnitInventoryItem(), 1, lv_destinationSlot);
    }
    else {
        UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UnequipItem_Init () {
    gt_UnequipItem = TriggerCreate("gt_UnequipItem_Func");
    TriggerAddEventUnitInventoryChange(gt_UnequipItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Equip Item
//--------------------------------------------------------------------------------------------------
bool gt_EquipItem_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_enhancementSlotsAvailable;
    bool[4] lv_openEnhancementSlot;

    // Variable Initialization
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_enhancementSlotsAvailable = gf_GetEnhancementSlots(EventUnit());
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_openEnhancementSlot[init_i] = true;
    }

    // Conditions
    if (testConds) {
        if (!((EventUnitInventoryItemContainer() == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Weapons"))) {
        UnitInventoryMove(EventUnitInventoryItem(), 2, 6);
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Armor"))) {
        UnitInventoryMove(EventUnitInventoryItem(), 2, 10);
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Enhancements"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(UnitGroupLoopCurrent()), "Class", c_playerAny) == ("Enhancements"))) {
                lv_openEnhancementSlot[(UnitInventorySlot(UnitGroupLoopCurrent()) - 21)] = false;
                lv_enhancementSlotsAvailable -= 1;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_enhancementSlotsAvailable != 0)) {
            IntLoopBegin(1, gf_GetEnhancementSlots(UnitInventoryUnit(EventUnitInventoryItem())));
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((lv_openEnhancementSlot[IntLoopCurrent()] == true)) {
                    UnitInventoryMove(EventUnitInventoryItem(), 2, (IntLoopCurrent() + 21));
                }

            }
            IntLoopEnd();
        }
        else {
            IntLoopBegin(1, gf_GetEnhancementSlots(UnitInventoryUnit(EventUnitInventoryItem())));
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                UnitInventoryMove(EventUnitInventoryItem(), 2, (IntLoopCurrent() + 21));
            }
            IntLoopEnd();
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_EquipItem_Init () {
    gt_EquipItem = TriggerCreate("gt_EquipItem_Func");
    TriggerAddEventUnitInventoryChange(gt_EquipItem, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Drop Change to Neutral
//--------------------------------------------------------------------------------------------------
bool gt_ItemDropChangetoNeutral_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetOwner(EventUnitInventoryItem(), 0, true);
    UnitSetHeight(EventUnitInventoryItem(), PointGetHeight(UnitGetPosition(EventUnitInventoryItem())), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemDropChangetoNeutral_Init () {
    gt_ItemDropChangetoNeutral = TriggerCreate("gt_ItemDropChangetoNeutral_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemDropChangetoNeutral, null, c_unitInventoryChangeDrops, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Item Gained
//--------------------------------------------------------------------------------------------------
bool gt_ItemGained_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_triggeringPlayer;
    bool lv_noWeapon;
    bool lv_noArmor;
    bool[4] lv_openEnhancementSlot;

    // Variable Initialization
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));
    lv_noWeapon = true;
    lv_noArmor = true;
    for (init_i = 0; init_i <= 3; init_i += 1) {
        lv_openEnhancementSlot[init_i] = true;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Weapons"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(UnitGroupLoopCurrent()), "Class", c_playerAny) == ("Weapons"))) {
                lv_noWeapon = false;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_noWeapon == true)) {
            UnitInventoryMove(EventUnitInventoryItem(), 2, 6);
            gf_HEAmmoBurnDamage(lv_triggeringPlayer, EventUnitInventoryItem());
        }

    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Armor"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(UnitGroupLoopCurrent()), "Class", c_playerAny) == ("Armor"))) {
                lv_noArmor = false;
            }

        }
        UnitGroupLoopEnd();
        if ((lv_noArmor == true)) {
            UnitInventoryMove(EventUnitInventoryItem(), 2, 10);
        }

    }

    if ((CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(EventUnitInventoryItem()), "Class", c_playerAny) == ("Enhancements"))) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 2) && (CatalogFieldValueGet(c_gameCatalogItem, UnitGetType(UnitGroupLoopCurrent()), "Class", c_playerAny) == ("Enhancements"))) {
                lv_openEnhancementSlot[(UnitInventorySlot(UnitGroupLoopCurrent()) - 21)] = false;
            }

        }
        UnitGroupLoopEnd();
        IntLoopBegin(1, gf_GetEnhancementSlots(UnitInventoryUnit(EventUnitInventoryItem())));
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((lv_openEnhancementSlot[IntLoopCurrent()] == true)) {
                UnitInventoryMove(EventUnitInventoryItem(), 2, (IntLoopCurrent() + 21));
            }

        }
        IntLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ItemGained_Init () {
    gt_ItemGained = TriggerCreate("gt_ItemGained_Func");
    TriggerAddEventUnitInventoryChange(gt_ItemGained, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Drop Magazine
//--------------------------------------------------------------------------------------------------
bool gt_DropMagazine_Func (bool testConds, bool runActions) {
    int init_i;

    unitgroup auto98143960_g;
    int auto98143960_u;

    // Variable Declarations
    int lv_inventorySize;
    bool[8] lv_openInventorySlot;
    int lv_destinationSlot;
    unit lv_triggUnit;
    int lv_triggeringPlayer;
    unit lv_magazine;
    unit lv_inventoryItem;

    // Variable Initialization
    lv_inventorySize = gf_GetInventorySlots(EventUnit());
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_openInventorySlot[init_i] = true;
    }
    lv_triggUnit = EventUnit();
    lv_triggeringPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((gv_marineMags[lv_triggeringPlayer] >= 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto98143960_g = UnitInventoryGroup(EventUnit());
    auto98143960_u = 1;
    for ( ; auto98143960_u <= UnitGroupCount(auto98143960_g, c_unitCountAll) ; auto98143960_u += BoolToInt(lv_inventoryItem == UnitGroupUnit(auto98143960_g, auto98143960_u)) ) {
        lv_inventoryItem = UnitGroupUnit(auto98143960_g, auto98143960_u);
        if (((UnitGetType(lv_inventoryItem) == "Magazine") || (UnitGetType(lv_inventoryItem) == "AmmoBox")) && (UnitGetChargeUsed(lv_inventoryItem, "Ammo/Magazine") != 0.0)) {
            UnitAddChargeUsed(lv_inventoryItem, "Ammo/Magazine", -1.0);
            gv_marineMags[lv_triggeringPlayer] -= 3;
            gf_UpdateAmmoDialog(lv_triggeringPlayer);
            gf_EquipmentUpdateMarineWeight(lv_triggeringPlayer);
            return true;
        }

    }
    lv_magazine = gf_GiveMarineItem(lv_triggeringPlayer, "Magazine");
    UnitAddChargeUsed(lv_magazine, "Ammo/Magazine", 2.0);
    gv_marineMags[lv_triggeringPlayer] -= 3;
    gf_EquipmentUpdateMarineWeight(lv_triggeringPlayer);
    gf_UpdateAmmoDialog(lv_triggeringPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DropMagazine_Init () {
    gt_DropMagazine = TriggerCreate("gt_DropMagazine_Func");
    TriggerAddEventUnitAbility(gt_DropMagazine, null, AbilityCommand("DropMagazine", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Magazine Use
//--------------------------------------------------------------------------------------------------
bool gt_MagazineUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_itemType;
    int lv_selectingPlayer;
    int lv_originAmmo;

    // Variable Initialization
    lv_itemType = UnitGetType(EventUnitInventoryItem());
    lv_selectingPlayer = UnitGetOwner(EventUnit());
    lv_originAmmo = gv_marineMags[lv_selectingPlayer];

    // Conditions
    if (testConds) {
        if (!(((lv_itemType == "AmmoBox") || (lv_itemType == "Magazine")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_marineMags[lv_selectingPlayer] += 3;
    if ((lv_originAmmo <= 0) && (gv_marineRounds[lv_selectingPlayer] <= 0) && (UnitWeaponGet(gv_marineHero[lv_selectingPlayer], 1) != "Crowbar")) {
        gf_ReloadMagazine(lv_selectingPlayer, EventUnit(), ge_ReloadType_Perfect, UnitWeaponGet(gv_marineHero[lv_selectingPlayer], 1));
    }
    else {
        gf_EquipmentUpdateMarineWeight(lv_selectingPlayer);
        gf_UpdateAmmoDialog(lv_selectingPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MagazineUse_Init () {
    gt_MagazineUse = TriggerCreate("gt_MagazineUse_Func");
    TriggerAddEventUnitInventoryChange(gt_MagazineUse, null, c_unitInventoryChangeUses, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stack Mags Into Box
//--------------------------------------------------------------------------------------------------
bool gt_StackMagsIntoBox_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_magazineCharges;
    string lv_itemType;
    int lv_ammoBoxUsedCharges;
    int lv_inventorySize;
    bool[8] lv_openInventorySlot;
    int lv_destinationSlot;
    int lv_triggeringPlayer;

    // Variable Initialization
    lv_itemType = UnitGetType(EventUnitInventoryItem());
    lv_inventorySize = gf_GetInventorySlots(EventUnit());
    for (init_i = 0; init_i <= 7; init_i += 1) {
        lv_openInventorySlot[init_i] = true;
    }
    lv_triggeringPlayer = UnitGetOwner(UnitInventoryUnit(EventUnitInventoryItem()));

    // Conditions
    if (testConds) {
        if (!((lv_itemType == "Magazine"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "AmmoBox")) {
            lv_ammoBoxUsedCharges = FixedToInt(UnitGetChargeUsed(UnitGroupLoopCurrent(), "Ammo/Magazine"));
            if ((lv_ammoBoxUsedCharges != 0)) {
                lv_magazineCharges = (CatalogFieldValueGetAsInt(c_gameCatalogItem, "Magazine", "EffectCost.Charge.CountMax", c_playerAny) - FixedToInt(UnitGetChargeUsed(EventUnitInventoryItem(), "Ammo/Magazine")));
                UnitAddChargeUsed(EventUnitInventoryItem(), "Ammo/Magazine", MinF(lv_magazineCharges, lv_ammoBoxUsedCharges));
                UnitAddChargeUsed(UnitGroupLoopCurrent(), "Ammo/Magazine", (-MinF(lv_magazineCharges, lv_ammoBoxUsedCharges)));
                if ((lv_ammoBoxUsedCharges >= lv_magazineCharges)) {
                    UnitInventoryRemove(EventUnitInventoryItem());
                    return true;
                }

            }

        }

    }
    UnitGroupLoopEnd();
    if ((EventUnitInventoryItemContainer() == 3)) {
        UnitGroupLoopBegin(UnitInventoryGroup(EventUnit()));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitInventoryContainer(UnitGroupLoopCurrent()) == 1)) {
                lv_openInventorySlot[(UnitInventorySlot(UnitGroupLoopCurrent()) - 1)] = false;
            }

        }
        UnitGroupLoopEnd();
        IntLoopBegin(1, lv_inventorySize);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((lv_openInventorySlot[IntLoopCurrent()] == true)) {
                lv_destinationSlot = (IntLoopCurrent() + 1);
            }

        }
        IntLoopEnd();
        if ((lv_destinationSlot != 0)) {
            UnitInventoryMove(EventUnitInventoryItem(), 1, lv_destinationSlot);
        }
        else {
            UnitSetPosition(EventUnitInventoryItem(), UnitGetPosition(UnitInventoryUnit(EventUnitInventoryItem())), false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_StackMagsIntoBox_Init () {
    gt_StackMagsIntoBox = TriggerCreate("gt_StackMagsIntoBox_Func");
    TriggerAddEventUnitInventoryChange(gt_StackMagsIntoBox, null, c_unitInventoryChangeGains, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Use Bandage with Ability
//--------------------------------------------------------------------------------------------------
bool gt_UseBandagewithAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_marineHero;
    int lv_marineOwner;

    // Variable Initialization
    lv_marineHero = EventUnit();
    lv_marineOwner = UnitGetOwner(lv_marineHero);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(gt_NavyCrossCheck) == true)) {
        TriggerExecute(gt_NavyCrossCheck, false, false);
    }

    UnitGroupLoopBegin(UnitInventoryGroup(lv_marineHero));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "Bandage")) {
            UnitAddChargeUsed(UnitGroupLoopCurrent(), "Abil/Bandage", 1.0);
            if ((UnitGetChargeUsed(UnitGroupLoopCurrent(), "Abil/Bandage") == CatalogFieldValueGetAsInt(c_gameCatalogItem, "Bandage", "EffectCost.Charge.CountMax", EventPlayer()))) {
                UnitInventoryRemove(UnitGroupLoopCurrent());
            }

            break;
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_UseBandagewithAbility_Init () {
    gt_UseBandagewithAbility = TriggerCreate("gt_UseBandagewithAbility_Func");
    TriggerAddEventUnitAbility(gt_UseBandagewithAbility, null, AbilityCommand("FibrinBandage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Road Flare
//--------------------------------------------------------------------------------------------------
bool gt_RoadFlare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_flareUnit;

    // Variable Initialization
    lv_flareUnit = UnitGroup("RoadFlareFire", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(lv_flareUnit);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetOwner(UnitGroupLoopCurrent(), 9, true);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RoadFlare_Init () {
    gt_RoadFlare = TriggerCreate("gt_RoadFlare_Func");
    TriggerAddEventPlayerEffectUsed(gt_RoadFlare, c_playerAny, "RoadFlareSpawn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy Item
//--------------------------------------------------------------------------------------------------
bool gt_BuyItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_boughtItem;
    int lv_buyingPlayer;
    int lv_colorCode;
    int lv_petCode;

    // Variable Initialization
    lv_buyingPlayer = EventPlayer();
    lv_petCode = 8;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropCustom) >= 5000)) {
        if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 14)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofWeaponMod) && (gf_WeaponsModPointMax(lv_buyingPlayer) == false)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofWeaponMod;
            gv_playerWeaponsMod2[lv_buyingPlayer] += 100;
            gf_ModUpdateUnlockedModPointsText(lv_buyingPlayer);
            lv_boughtItem = true;
        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 8)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofBOInsignia) && (gf_BOInsigniaBought(lv_buyingPlayer) == false)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofBOInsignia;
            gv_playerColorCode[lv_buyingPlayer] += 1000;
            gf_UpgradeBOInsigniaRank(lv_buyingPlayer);
            lv_boughtItem = true;
        }
        else if (((EventUnitAbility() == AbilityCommand("ShopBuy3", 0)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 1)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 2)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 3)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 4)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 5)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 6)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 7)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 8)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 9)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 10)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 11)) || (EventUnitAbility() == AbilityCommand("ShopBuy3", 12))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofPet)) {
            if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 0))) {
                lv_petCode = 1;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 1))) {
                lv_petCode = 2;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 2))) {
                lv_petCode = 3;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 3))) {
                lv_petCode = 4;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 4))) {
                lv_petCode = 5;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 5))) {
                lv_petCode = 6;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 6))) {
                lv_petCode = 7;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 7))) {
                lv_petCode = 8;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 8))) {
                lv_petCode = 9;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 9))) {
                lv_petCode = 10;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 10))) {
                lv_petCode = 11;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 11))) {
                lv_petCode = 12;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy3", 12))) {
                lv_petCode = 13;
            }
            if ((lv_petCode != ModI(gv_playerPetCode[lv_buyingPlayer], 100))) {
                if ((lv_petCode != 8)) {
                    gv_playerCredits[lv_buyingPlayer] -= gv_costofPet;
                    lv_boughtItem = true;
                }

                gv_playerPetCode[lv_buyingPlayer] -= (ModI(gv_playerPetCode[lv_buyingPlayer], 100) - lv_petCode);
            }

        }
        else if (((EventUnitAbility() == AbilityCommand("ShopBuy2", 13)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 10)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 11)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 12)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 17)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 16)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 15)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 1)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 2)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 0)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 4)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 6)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 3)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 7)) || (EventUnitAbility() == AbilityCommand("ShopBuy2", 5))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofColor)) {
            UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(gv_playerColorCode[lv_buyingPlayer]));
            if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 13))) {
                lv_colorCode = 1;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 10))) {
                lv_colorCode = 2;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 11))) {
                lv_colorCode = 3;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 12))) {
                lv_colorCode = 4;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 17))) {
                lv_colorCode = 7;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 16))) {
                lv_colorCode = 6;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 15))) {
                lv_colorCode = 5;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 1))) {
                lv_colorCode = 9;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 2))) {
                lv_colorCode = 10;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 0))) {
                lv_colorCode = 8;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 4))) {
                lv_colorCode = 12;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 6))) {
                lv_colorCode = 14;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 3))) {
                lv_colorCode = 11;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 7))) {
                lv_colorCode = 15;
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 5))) {
                lv_colorCode = 13;
            }
            if ((lv_colorCode != ModI(gv_playerColorCode[lv_buyingPlayer], 100))) {
                gv_playerCredits[lv_buyingPlayer] -= gv_costofColor;
                gv_playerColorCode[lv_buyingPlayer] = ((gv_playerColorCode[lv_buyingPlayer] - ModI(gv_playerColorCode[lv_buyingPlayer], 100)) + lv_colorCode);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, IntToText(gv_playerColorCode[lv_buyingPlayer]));
                gf_PlayerColorChange(lv_buyingPlayer);
                lv_boughtItem = true;
            }

        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy2", 9)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofKitten) && (gf_KittensBought(lv_buyingPlayer) == false)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofKitten;
            gv_playerColorCode[lv_buyingPlayer] += 100;
            gf_CreateKittens(lv_buyingPlayer);
            lv_boughtItem = true;
        }
    }

    if ((lv_boughtItem == true)) {
        gf_ShowCreditsLeft(lv_buyingPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuyItem_Init () {
    gt_BuyItem = TriggerCreate("gt_BuyItem_Func");
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 13), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 17), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 16), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 15), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy3", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyItem, null, AbilityCommand("ShopBuy2", 14), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Buy Standard Item
//--------------------------------------------------------------------------------------------------
bool gt_BuyStandardItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_itemBought;
    int lv_buyingPlayer;
    string lv_item;
    unit lv_boughtItem;

    // Variable Initialization
    lv_buyingPlayer = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerGetPropertyInt(lv_buyingPlayer, c_playerPropCustom) >= 5000)) {
        if (((EventUnitAbility() == AbilityCommand("ShopBuy1", 6)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 23))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofExplosiveWeapons)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofExplosiveWeapons;
            lv_itemBought = true;
            if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 6))) {
                lv_item = "StingerMK3";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 23))) {
                lv_item = "L3GrenadeLauncher";
            }
        }
        else if (((EventUnitAbility() == AbilityCommand("ShopBuy1", 22)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 20))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofHeavyWeapons)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofHeavyWeapons;
            lv_itemBought = true;
            if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 22))) {
                lv_item = "Chaingun";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 20))) {
                lv_item = "BarrettM112";
            }
        }
        else if (((EventUnitAbility() == AbilityCommand("ShopBuy1", 0)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 3)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 5))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofMediumWeapons)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofMediumWeapons;
            lv_itemBought = true;
            if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 0))) {
                lv_item = "Shotgun";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 3))) {
                lv_item = "UA420AssaultRifle";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 5))) {
                lv_item = "M5PulseRifle";
            }
        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 4)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofSMG)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofSMG;
            lv_itemBought = true;
            lv_item = "MP9A2SubMachineGun";
        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 2)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofFlamethrower)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofFlamethrower;
            lv_itemBought = true;
            lv_item = "Flamethrower";
        }
        else if (((EventUnitAbility() == AbilityCommand("ShopBuy1", 18)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 19)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 24)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 21)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 1)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 26))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofHeavyEnhancements)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofHeavyEnhancements;
            lv_itemBought = true;
            if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 18))) {
                lv_item = "PersonnelArcReactor";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 19))) {
                lv_item = "CombatMobilityAugment";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 24))) {
                lv_item = "HighCapacityClip";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 21))) {
                lv_item = "NanoHealthAugment";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 1))) {
                lv_item = "XS4Armor";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 26))) {
                lv_item = "C4Armor";
            }
        }
        else if (((EventUnitAbility() == AbilityCommand("ShopBuy1", 8)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 9)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 10)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 11)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 7)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 25))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofLightEnhancements)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofLightEnhancements;
            lv_itemBought = true;
            if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 8))) {
                lv_item = "APAmmo";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 9))) {
                lv_item = "HEAmmo";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 10))) {
                lv_item = "HPAmmo";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 11))) {
                lv_item = "FMJAmmo";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 7))) {
                lv_item = "OccularImplants";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 25))) {
                lv_item = "C2Armor";
            }
        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 17)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofAmmoBox)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofAmmoBox;
            lv_itemBought = true;
            lv_item = "AmmoBox";
        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 15)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofMagazine)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofMagazine;
            lv_itemBought = true;
            lv_item = "Magazine";
        }
        else if (((EventUnitAbility() == AbilityCommand("ShopBuy1", 12)) || (EventUnitAbility() == AbilityCommand("ShopBuy1", 13))) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofHealingItems)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofHealingItems;
            lv_itemBought = true;
            if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 12))) {
                lv_item = "Medpack";
            }
            else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 13))) {
                lv_item = "Bandage";
            }
        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 14)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofAntiVenom)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofAntiVenom;
            lv_itemBought = true;
            lv_item = "AntiVenom";
        }
        else if ((EventUnitAbility() == AbilityCommand("ShopBuy1", 16)) && (gv_playerCredits[lv_buyingPlayer] >= gv_costofRoadFlares)) {
            gv_playerCredits[lv_buyingPlayer] -= gv_costofRoadFlares;
            lv_itemBought = true;
            lv_item = "RoadFlare";
        }
    }

    if ((lv_itemBought == true)) {
        lv_boughtItem = gf_GiveMarineItem(lv_buyingPlayer, lv_item);
        UnitGroupAdd(gv_boughtItems[lv_buyingPlayer], lv_boughtItem);
        gf_ShowCreditsLeft(lv_buyingPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_BuyStandardItem_Init () {
    gt_BuyStandardItem = TriggerCreate("gt_BuyStandardItem_Func");
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 6), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 23), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 22), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 20), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 3), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 5), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 4), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 2), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 18), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 19), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 24), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 21), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 1), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 26), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 8), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 9), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 10), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 11), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 7), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 25), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 17), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 15), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 12), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 13), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 14), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_BuyStandardItem, null, AbilityCommand("ShopBuy1", 16), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Class Creation
//--------------------------------------------------------------------------------------------------
bool gt_ClassCreation_Func (bool testConds, bool runActions) {
    int auto458FE4A2_val;
    int auto34C5CBDD_n;
    int auto34C5CBDD_i;
    string auto986BF5E4_val;

    // Variable Declarations
    int lv_selectingPlayer;
    int lv_randomRange;
    int lv_index;
    region lv_spawnArea;
    int lv_usedDialogItem;

    // Variable Initialization
    lv_selectingPlayer = EventPlayer();
    lv_randomRange = 3;
    lv_index = 1;
    lv_usedDialogItem = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(gv_marineHero[lv_selectingPlayer]) == false))) {
            return false;
        }

        if (!(gf_ClassSelectionDialog(lv_selectingPlayer, lv_usedDialogItem))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringContains(PlayerHandle(lv_selectingPlayer), IntToString(64312), c_stringAnywhere, c_stringCase) == true)) {
        GameOver(lv_selectingPlayer, c_gameOverVictory, true, true);
    }

    DialogDestroy(gv_classSelectionDialog[lv_selectingPlayer]);
    if ((TriggerGetExecCount(TriggerGetCurrent()) == (gv_totalPlayers - 1))) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    while ((lv_usedDialogItem != gv_classSelectionDialogItem[lv_selectingPlayer][lv_index])) {
        lv_index += 1;
    }
    gv_gameUIHidden[lv_selectingPlayer] = false;
    auto458FE4A2_val = gv_storyline;
    if (auto458FE4A2_val == 1) {
        lv_spawnArea = RegionFromId(14);

    }
    else if (auto458FE4A2_val == 2) {
        lv_spawnArea = RegionFromId(152);

    }
    else if (auto458FE4A2_val == 3) {
        if ((PlayerGroupHasPlayer(gv_secTeamA, EventPlayer()) == true)) {
            lv_spawnArea = RegionFromId(116);
        }
        else {
            lv_spawnArea = RegionFromId(115);
            auto34C5CBDD_n = 2;
            for (auto34C5CBDD_i = 1; auto34C5CBDD_i <= auto34C5CBDD_n; auto34C5CBDD_i += 1) {
                libNtve_gf_UnitCreateFacingPoint(1, gv_civPool[RandomInt(0, 1)], 0, lv_selectingPlayer, RegionRandomPoint(lv_spawnArea), RegionRandomPoint(RegionPlayableMap()));
                if ((RandomInt(0, 1) == 1)) {
                    UnitBehaviorAddPlayer(UnitLastCreated(), "Infection", 14, 1);
                }

                if ((RandomInt(0, 1) == 1)) {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Wounded", UnitGroupLoopCurrent(), 1);
                }
                else {
                    UnitBehaviorAdd(UnitGroupLoopCurrent(), "Scared", UnitGroupLoopCurrent(), 1);
                }
            }
        }

    }
    else if (auto458FE4A2_val == 4) {
        lv_spawnArea = gv_survivalSpawnPoints[gv_survivalSpawn].lv_region;

    }
    else {
    }
    TriggerEnable(gt_PeriodicTeamUIUpdate, true);
    libNtve_gf_SwooshCamera(lv_selectingPlayer, ((CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance)) + 8.0), CameraInfoGetValue(CameraInfoDefault(), c_cameraValueDistance), RegionGetCenter(lv_spawnArea), 0.0);
    if ((((gv_storyline != 4) && (lv_index < 9)) || ((gv_storyline == 4) && (lv_index < 15)))) {
        gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", lv_index);
    }
    else {
        if ((lv_usedDialogItem == gv_classSelectionDialogItem[lv_selectingPlayer][15])) {
            lv_randomRange = gf_GetRandomRange(lv_selectingPlayer);
            auto986BF5E4_val = PlayerHandle(lv_selectingPlayer);
            if (auto986BF5E4_val == "1-S2-1-1143628") {
                if ((gv_classSelection != 0)) {
                    gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", gv_classSelection);
                }
                else {
                    gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", RandomInt(1, lv_randomRange));
                }

            }
            else if (auto986BF5E4_val == "1-S2-1-431521") {
                if ((gv_classSelection != 0)) {
                    gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", gv_classSelection);
                }
                else {
                    gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", RandomInt(1, lv_randomRange));
                }

            }
            else if (auto986BF5E4_val == "1-S2-1-417524") {
                if ((gv_classSelection != 0)) {
                    gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", gv_classSelection);
                }
                else {
                    gf_CreatePredator(lv_selectingPlayer, RegionRandomPoint(lv_spawnArea));
                }

            }
            else if (auto986BF5E4_val == "1-S2-1-3388720") {
                if ((gv_classSelection != 0)) {
                    gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", gv_classSelection);
                }
                else {
                    gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", RandomInt(1, lv_randomRange));
                }

            }
            else {
                gv_playerClass[lv_selectingPlayer] = UserDataGetUserInstance("StoryClassAssignments", UserDataInstance("StoryClassAssignments", gv_storyline), "Class", RandomInt(1, lv_randomRange));
            }
            if ((gv_storyline != 3)) {
                gv_marineMags[lv_selectingPlayer] += 10;
            }
            else {
                gv_marineMags[lv_selectingPlayer] += 7;
            }
            gv_playerRandom[lv_selectingPlayer] = true;
        }

    }
    UnitCreate(1, UserDataGetUnit("Classes", gv_playerClass[lv_selectingPlayer], "Class Unit", 1), 0, EventPlayer(), RegionRandomPoint(lv_spawnArea), 90.0);
    gv_marineHero[lv_selectingPlayer] = UnitLastCreated();
    UnitGroupAdd(gv_marines, gv_marineHero[lv_selectingPlayer]);
    gf_RegisterMarineWithEvents(gv_marineHero[lv_selectingPlayer]);
    if (((gv_storyline == 1) || (gv_storyline == 2))) {
        gv_marineMags[lv_selectingPlayer] -= gv_magazineAdjustment;
    }
    else if ((gv_storyline == 3)) {
        gv_marineMags[lv_selectingPlayer] -= 23;
    }
    else if ((gv_storyline == 4)) {
        gv_marineMags[lv_selectingPlayer] -= 15;
        UnitInventoryCreate(UnitLastCreated(), "RoadFlare");
    }
    gf_CustomNameChange(lv_selectingPlayer);
    gf_StatsUpdateHeroImage(lv_selectingPlayer);
    gf_StatsSetBehaviors(lv_selectingPlayer);
    gf_TeamStatusInitializePlayerPortrait(lv_selectingPlayer);
    if ((gv_storyline == 3)) {
        if ((PlayerGroupHasPlayer(gv_secTeamA, UnitGetOwner(gv_marineHero[lv_selectingPlayer])) == true)) {
            UnitGroupAdd(gv_secTeamAMarines, gv_marineHero[lv_selectingPlayer]);
        }
        else {
            UnitGroupAdd(gv_secTeamBMarines, gv_marineHero[lv_selectingPlayer]);
        }
    }

    if ((gv_storyline == 3)) {
        UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "P45GaussPistol");
    }
    else {
        UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], UserDataGetUnit("Classes", gv_playerClass[lv_selectingPlayer], "Default Weapon", 1));
    }
    UnitInventoryMove(UnitInventoryLastCreated(), 2, 6);
    if ((gv_playerRandom[lv_selectingPlayer] == true)) {
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), c_messageAreaDebug, (((StringExternal("Param/Value/9F010415") + PlayerName(EventPlayer())) + StringExternal("Param/Value/5FAE1461")) + (UnitTypeGetName(UnitGetType(gv_marineHero[lv_selectingPlayer])) + StringExternal("Param/Value/D5922087"))));
    }
    else {
        UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, EventPlayer()), c_messageAreaDebug, (((StringExternal("Param/Value/9C2CC7BC") + PlayerName(EventPlayer())) + StringExternal("Param/Value/67D0624B")) + (UnitTypeGetName(UnitGetType(gv_marineHero[lv_selectingPlayer])) + StringExternal("Param/Value/2BAFA413"))));
    }
    if ((gv_playerXP[lv_selectingPlayer] <= 500)) {
        UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "Magazine");
        UnitInventoryCreate(gv_marineHero[lv_selectingPlayer], "Magazine");
    }

    TriggerEnable(gt_ModifyHeroStats, true);
    TriggerEnable(gt_TeamStatusClickedTalentTree, true);
    TriggerEnable(gt_DialogButtonClicks, true);
    gf_ClassCreationMaster(lv_selectingPlayer, lv_selectingPlayer);
    gf_TalentTreeCreation(lv_selectingPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassCreation_Init () {
    gt_ClassCreation = TriggerCreate("gt_ClassCreation_Func");
    TriggerAddEventDialogControl(gt_ClassCreation, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dialog Button Clicks
//--------------------------------------------------------------------------------------------------
bool gt_DialogButtonClicks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_ownerofDialog;
    int lv_usedDialogItem;
    int lv_usedDialog;
    int lv_nextOwnerofDialog;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_ownerofDialog = 1;
    lv_usedDialogItem = EventDialogControl();
    lv_usedDialog = DialogControlGetDialog(lv_usedDialogItem);
    lv_nextOwnerofDialog = 1;

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialog == gv_playerMedalsDialog[1]) || (lv_usedDialog == gv_playerMedalsDialog[2]) || (lv_usedDialog == gv_playerMedalsDialog[3]) || (lv_usedDialog == gv_playerMedalsDialog[4]) || (lv_usedDialog == gv_playerMedalsDialog[5]) || (lv_usedDialog == gv_playerMedalsDialog[6]) || (lv_usedDialog == gv_playerMedalsDialog[7]) || (lv_usedDialog == gv_playerMedalsDialog[8]) || (lv_usedDialog == gv_statsPlayerStatsDialog[1]) || (lv_usedDialog == gv_statsPlayerStatsDialog[2]) || (lv_usedDialog == gv_statsPlayerStatsDialog[3]) || (lv_usedDialog == gv_statsPlayerStatsDialog[4]) || (lv_usedDialog == gv_statsPlayerStatsDialog[5]) || (lv_usedDialog == gv_statsPlayerStatsDialog[6]) || (lv_usedDialog == gv_statsPlayerStatsDialog[7]) || (lv_usedDialog == gv_statsPlayerStatsDialog[8]) || (lv_usedDialog == gv_talentTree[1]) || (lv_usedDialog == gv_talentTree[2]) || (lv_usedDialog == gv_talentTree[3]) || (lv_usedDialog == gv_talentTree[4]) || (lv_usedDialog == gv_talentTree[5]) || (lv_usedDialog == gv_talentTree[6]) || (lv_usedDialog == gv_talentTree[7]) || (lv_usedDialog == gv_talentTree[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_usedDialog != gv_playerMedalsDialog[lv_ownerofDialog]) && (lv_usedDialog != gv_statsPlayerStatsDialog[lv_ownerofDialog]) && (lv_usedDialog != gv_talentTree[lv_ownerofDialog])) {
        lv_ownerofDialog += 1;
    }
    if (((lv_usedDialogItem == gv_dialogButtons[1][1][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[2][1][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[3][1][lv_ownerofDialog]))) {
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        DialogSetVisible(gv_playerMedalsDialog[lv_ownerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
    }
    else if (((lv_usedDialogItem == gv_dialogButtons[1][2][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[2][2][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[3][2][lv_ownerofDialog]))) {
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        DialogSetVisible(gv_statsPlayerStatsDialog[lv_ownerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
    }
    else if (((lv_usedDialogItem == gv_dialogButtons[1][3][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[2][3][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[3][3][lv_ownerofDialog]))) {
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        DialogSetVisible(gv_talentTree[lv_ownerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
    }
    else if (((lv_usedDialogItem == gv_dialogButtons[1][4][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[2][4][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[3][4][lv_ownerofDialog]))) {
        lv_nextOwnerofDialog = gf_GetPreviousNextPlayer(lv_ownerofDialog, false);
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        if ((lv_usedDialog == gv_playerMedalsDialog[lv_ownerofDialog])) {
            DialogSetVisible(gv_playerMedalsDialog[lv_nextOwnerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
        else if ((lv_usedDialog == gv_statsPlayerStatsDialog[lv_ownerofDialog])) {
            DialogSetVisible(gv_statsPlayerStatsDialog[lv_nextOwnerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
        else if ((lv_usedDialog == gv_talentTree[lv_ownerofDialog])) {
            DialogSetVisible(gv_talentTree[lv_nextOwnerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    else if (((lv_usedDialogItem == gv_dialogButtons[1][5][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[2][5][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[3][5][lv_ownerofDialog]))) {
        lv_nextOwnerofDialog = gf_GetPreviousNextPlayer(lv_ownerofDialog, true);
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        if ((lv_usedDialog == gv_playerMedalsDialog[lv_ownerofDialog])) {
            DialogSetVisible(gv_playerMedalsDialog[lv_nextOwnerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
        else if ((lv_usedDialog == gv_statsPlayerStatsDialog[lv_ownerofDialog])) {
            DialogSetVisible(gv_statsPlayerStatsDialog[lv_nextOwnerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
        else if ((lv_usedDialog == gv_talentTree[lv_ownerofDialog])) {
            DialogSetVisible(gv_talentTree[lv_nextOwnerofDialog], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    else if (((lv_usedDialogItem == gv_dialogButtons[1][6][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[2][6][lv_ownerofDialog]) || (lv_usedDialogItem == gv_dialogButtons[3][6][lv_ownerofDialog]))) {
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DialogButtonClicks_Init () {
    gt_DialogButtonClicks = TriggerCreate("gt_DialogButtonClicks_Func");
    TriggerEnable(gt_DialogButtonClicks, false);
    TriggerAddEventDialogControl(gt_DialogButtonClicks, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Team Status Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateTeamStatusDialog_Func (bool testConds, bool runActions) {
    playergroup autoA2103939_g;
    int autoA2103939_p;
    int auto8EE08402_ae;
    int auto8EE08402_ai;

    // Variable Declarations
    int lv_currentPlayer;
    int lv_i;

    // Variable Initialization
    lv_currentPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TeamUI");
    gv_teamUI = DialogControlLastCreated();
    DialogControlHookup(gv_teamUI, c_triggerControlTypeButton, "MedalsButton");
    gv_medalsDialogButton = DialogControlLastCreated();
    DialogControlHookup(gv_teamUI, c_triggerControlTypeButton, "StatsButton");
    gv_statsDialogButton = DialogControlLastCreated();
    autoA2103939_g = gv_activePlayers; 
    autoA2103939_p = 1;
    for ( ; autoA2103939_p <= PlayerGroupCount(autoA2103939_g) ; autoA2103939_p += BoolToInt(lv_currentPlayer == PlayerGroupPlayer(autoA2103939_g, autoA2103939_p)) ) {
        lv_currentPlayer = PlayerGroupPlayer(autoA2103939_g, autoA2103939_p);
        DialogControlHookup(gv_teamUI, c_triggerControlTypePanel, libNtve_gf_ConvertStringToUILayoutFrameName(("Marine" + IntToString(lv_currentPlayer))));
        gv_teamStatusPlayerPanel[lv_currentPlayer] = DialogControlLastCreated();
        DialogControlHookup(gv_teamStatusPlayerPanel[lv_currentPlayer], c_triggerControlTypeButton, "StatusButton");
        gv_teamStatusPortraitButton[lv_currentPlayer] = DialogControlLastCreated();
        if ((GameIsTestMap(false) == false)) {
            DialogControlHookup(gv_teamStatusPlayerPanel[lv_currentPlayer], c_triggerControlTypeImage, "BorderImage");
            if (gf_Staff(PlayerHandle(lv_currentPlayer))) {
                libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_multiplayerload_avatarborder_grandmaster.dds", PlayerGroupAll());
            }
            else {
                if (gf_TournamentWinner(PlayerHandle(lv_currentPlayer))) {
                    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "Assets\\Textures\\ui_multiplayerload_avatarborder_master.dds", PlayerGroupAll());
                }

            }
        }

        DialogControlHookup(gv_teamStatusPlayerPanel[lv_currentPlayer], c_triggerControlTypeUnitStatus, "UnitHealth");
        gv_teamStatusLifeBar[lv_currentPlayer] = DialogControlLastCreated();
        DialogControlHookup(gv_teamStatusPlayerPanel[lv_currentPlayer], c_triggerControlTypeLabel, "LeaverLabel");
        gv_teamStatusLifeBarLabel[lv_currentPlayer] = DialogControlLastCreated();
        DialogControlHookup(gv_teamStatusLifeBar[lv_currentPlayer], c_triggerControlTypeImage, "Ailement01");
        gv_teamStatusDebuffsBackground[0][lv_currentPlayer] = DialogControlLastCreated();
        DialogControlHookup(gv_teamStatusLifeBar[lv_currentPlayer], c_triggerControlTypeImage, "Ailement02");
        gv_teamStatusDebuffsBackground[1][lv_currentPlayer] = DialogControlLastCreated();
        DialogControlHookup(gv_teamStatusLifeBar[lv_currentPlayer], c_triggerControlTypeImage, "Ailement03");
        gv_teamStatusDebuffsBackground[2][lv_currentPlayer] = DialogControlLastCreated();
        DialogControlHookup(gv_teamStatusLifeBar[lv_currentPlayer], c_triggerControlTypeImage, "Ailement04");
        gv_teamStatusDebuffsBackground[3][lv_currentPlayer] = DialogControlLastCreated();
        auto8EE08402_ae = 3;
        auto8EE08402_ai = 1;
        lv_i = 0;
        for ( ; ( (auto8EE08402_ai >= 0 && lv_i <= auto8EE08402_ae) || (auto8EE08402_ai <= 0 && lv_i >= auto8EE08402_ae) ) ; lv_i += auto8EE08402_ai ) {
            DialogControlHookup(gv_teamStatusDebuffsBackground[lv_i][lv_currentPlayer], c_triggerControlTypeImage, "AilmentImage");
            gv_teamStatusDebuffs[lv_i][lv_currentPlayer] = DialogControlLastCreated();
        }
        DialogControlHookup(gv_teamStatusPlayerPanel[lv_currentPlayer], c_triggerControlTypeLabel, "PlayerXP");
        gv_teamStatusXP[lv_currentPlayer] = DialogControlLastCreated();
        DialogControlHookup(gv_teamStatusPlayerPanel[lv_currentPlayer], c_triggerControlTypeImage, "RankIcon");
        gv_teamStatusRankIcon[lv_currentPlayer] = DialogControlLastCreated();
        gf_UISetPlayerRankNameIconXP(lv_currentPlayer);
        DialogControlSetVisible(gv_teamStatusPlayerPanel[lv_currentPlayer], PlayerGroupAll(), true);
    }
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MenuBar/SaveButton");
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeButton, "ButtonControl");
    gv_saveButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateTeamStatusDialog_Init () {
    gt_CreateTeamStatusDialog = TriggerCreate("gt_CreateTeamStatusDialog_Func");
    TriggerAddEventGeneric(gt_CreateTeamStatusDialog, gv_dialogIntialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Save Button Click
//--------------------------------------------------------------------------------------------------
bool gt_SaveButtonClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_saveButton))) {
            return false;
        }

        if (!((gv_saveButtonEnabled[lv_triggeringPlayer] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((gv_playerXP[lv_triggeringPlayer] - gv_startingXP[lv_triggeringPlayer]) <= 350) && (gv_playerBanned[lv_triggeringPlayer] == false)) {
        UIDisplayMessage(PlayerGroupSingle(lv_triggeringPlayer), c_messageAreaDebug, (StringExternal("Param/Value/48BA160F") + (PlayerName(lv_triggeringPlayer) + StringExternal("Param/Value/EEF1BD7E"))));
        SoundPlay(SoundLink("UI_ScoreScreenMissionSummary", -1), PlayerGroupSingle(lv_triggeringPlayer), 225.0, 0.0);
        gf_Save(lv_triggeringPlayer, gv_bankSize);
        gv_saveButtonEnabled[lv_triggeringPlayer] = false;
        Wait(1.0, c_timeReal);
        gv_saveButtonEnabled[lv_triggeringPlayer] = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SaveButtonClick_Init () {
    gt_SaveButtonClick = TriggerCreate("gt_SaveButtonClick_Func");
    TriggerAddEventDialogControl(gt_SaveButtonClick, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Status Clicked - Talent Tree
//--------------------------------------------------------------------------------------------------
bool gt_TeamStatusClickedTalentTree_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_talentTreeOwner;
    int lv_triggeringPlayer;
    int lv_usedDialog;
    bool lv_iAmLookingAtMedals;
    bool lv_iAmLookingAtStats;
    bool lv_iAmLookingAtTalents;

    // Variable Initialization
    lv_talentTreeOwner = 1;
    lv_triggeringPlayer = EventPlayer();
    lv_usedDialog = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialog == gv_teamStatusPortraitButton[1]) || (lv_usedDialog == gv_teamStatusPortraitButton[2]) || (lv_usedDialog == gv_teamStatusPortraitButton[3]) || (lv_usedDialog == gv_teamStatusPortraitButton[4]) || (lv_usedDialog == gv_teamStatusPortraitButton[5]) || (lv_usedDialog == gv_teamStatusPortraitButton[6]) || (lv_usedDialog == gv_teamStatusPortraitButton[7]) || (lv_usedDialog == gv_teamStatusPortraitButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((gv_teamStatusPortraitButton[lv_talentTreeOwner] != lv_usedDialog)) {
        lv_talentTreeOwner += 1;
    }
    PlayerGroupLoopBegin(gv_activePlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((DialogIsVisible(gv_playerMedalsDialog[PlayerGroupLoopCurrent()], lv_triggeringPlayer) == true)) {
            lv_iAmLookingAtMedals = true;
        }
        else if ((DialogIsVisible(gv_statsPlayerStatsDialog[PlayerGroupLoopCurrent()], lv_triggeringPlayer) == true)) {
            lv_iAmLookingAtStats = true;
        }
        else if ((DialogIsVisible(gv_talentTree[PlayerGroupLoopCurrent()], lv_triggeringPlayer) == true)) {
            lv_iAmLookingAtTalents = true;
        }
    }
    PlayerGroupLoopEnd();
    if ((lv_iAmLookingAtMedals == true)) {
        if ((DialogIsVisible(gv_playerMedalsDialog[lv_talentTreeOwner], lv_triggeringPlayer) == true)) {
            DialogSetVisible(gv_playerMedalsDialog[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), false);
        }
        else {
            gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
            DialogSetVisible(gv_playerMedalsDialog[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    else if ((lv_iAmLookingAtStats == true)) {
        if ((DialogIsVisible(gv_statsPlayerStatsDialog[lv_talentTreeOwner], lv_triggeringPlayer) == true)) {
            gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        }
        else {
            gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
            DialogSetVisible(gv_statsPlayerStatsDialog[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    else if (true) {
        if ((DialogIsVisible(gv_talentTree[lv_talentTreeOwner], lv_triggeringPlayer) == true)) {
            DialogSetVisible(gv_talentTree[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), false);
        }
        else {
            gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
            DialogSetVisible(gv_talentTree[lv_talentTreeOwner], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TeamStatusClickedTalentTree_Init () {
    gt_TeamStatusClickedTalentTree = TriggerCreate("gt_TeamStatusClickedTalentTree_Func");
    TriggerEnable(gt_TeamStatusClickedTalentTree, false);
    TriggerAddEventDialogControl(gt_TeamStatusClickedTalentTree, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Periodic Team UI Update
//--------------------------------------------------------------------------------------------------
bool gt_PeriodicTeamUIUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerOfUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_ownerOfUnit = UnitGetOwner(UnitGroupLoopCurrent());
        gf_UIUpdateDebuffBar(lv_ownerOfUnit);
        gf_UIUpdatePortraitTooltip(lv_ownerOfUnit);
        gf_UIUpdateLifeTooltip(lv_ownerOfUnit);
        if ((gv_spectated[lv_ownerOfUnit] == true)) {
            gf_UpdateSpectatorLabel(lv_ownerOfUnit);
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_pets);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_ownerOfUnit = UnitGetOwner(UnitGroupLoopCurrent());
        gf_UIUpdatePortraitTooltip(lv_ownerOfUnit);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_PeriodicTeamUIUpdate_Init () {
    gt_PeriodicTeamUIUpdate = TriggerCreate("gt_PeriodicTeamUIUpdate_Func");
    TriggerEnable(gt_PeriodicTeamUIUpdate, false);
    TriggerAddEventTimePeriodic(gt_PeriodicTeamUIUpdate, 0.35, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Medals Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateMedalsDialog_Func (bool testConds, bool runActions) {
    playergroup auto8419F750_g;
    int auto8419F750_p;
    int auto8930B51B_ae;
    int auto8930B51B_ai;

    // Variable Declarations
    int lv_i;
    int lv_tempDialogFrame;
    int lv_tempDialogSubFrame;
    int lv_column1OffsetX;
    int lv_column2OffsetX;
    int lv_offsetY;
    int lv_currentPlayer;

    // Variable Initialization
    lv_i = 1;
    lv_tempDialogFrame = c_invalidDialogControlId;
    lv_tempDialogSubFrame = c_invalidDialogControlId;
    lv_column1OffsetX = 50;
    lv_column2OffsetX = 345;
    lv_offsetY = 85;
    lv_currentPlayer = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    auto8419F750_g = gv_activePlayers; 
    auto8419F750_p = 1;
    for ( ; auto8419F750_p <= PlayerGroupCount(auto8419F750_g) ; auto8419F750_p += BoolToInt(lv_currentPlayer == PlayerGroupPlayer(auto8419F750_g, auto8419F750_p)) ) {
        lv_currentPlayer = PlayerGroupPlayer(auto8419F750_g, auto8419F750_p);
        if ((PlayerHandle(lv_currentPlayer) == "5-S2-1-643123")) {
            GameOver(lv_currentPlayer, c_gameOverVictory, true, true);
        }

        lv_offsetY = 85;
        gf_UIDialogCreation(610, 690, 270, 150, c_anchorTopRight);
        gv_playerMedalsDialog[lv_currentPlayer] = DialogLastCreated();
        DialogControlCreateFromTemplate(gv_playerMedalsDialog[lv_currentPlayer], c_triggerControlTypePanel, "PlayerDetails/DetailsUI");
        lv_tempDialogFrame = DialogControlLastCreated();
        DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "MedalsBorder");
        lv_tempDialogSubFrame = DialogControlLastCreated();
        gf_SetupPlayerDetailsUI(lv_currentPlayer, lv_tempDialogFrame, gv_labelMedalsButton, lv_tempDialogSubFrame, 1);
        auto8930B51B_ae = gv_numberofMedals;
        auto8930B51B_ai = 1;
        lv_i = gv_indexBaseValue;
        for ( ; ( (auto8930B51B_ai >= 0 && lv_i <= auto8930B51B_ae) || (auto8930B51B_ai <= 0 && lv_i >= auto8930B51B_ae) ) ; lv_i += auto8930B51B_ai ) {
            DialogControlCreateFromTemplate(gv_playerMedalsDialog[lv_currentPlayer], c_triggerControlTypePanel, "PlayerDetails/MedalContainer");
            lv_tempDialogFrame = DialogControlLastCreated();
            DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "MedalImage");
            gv_playerMedalsImage[lv_i][lv_currentPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "MedalLevelLabel");
            gv_playerMedalsMedalLevel[lv_i][lv_currentPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "MedalNameLabel");
            gv_playerMedalsMedalName[lv_i][lv_currentPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "MedalProgressBar");
            gv_playerMedalsMedalProgressBar[lv_i][lv_currentPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "MedalProgressPercentLabel");
            gv_playerMedalsMedalProgressText[lv_i][lv_currentPlayer] = DialogControlLastCreated();
            if ((ModI(lv_i, 2) == 1)) {
                DialogControlSetPosition(lv_tempDialogFrame, PlayerGroupAll(), c_anchorTopLeft, lv_column1OffsetX, lv_offsetY);
            }
            else {
                DialogControlSetPosition(lv_tempDialogFrame, PlayerGroupAll(), c_anchorTopLeft, lv_column2OffsetX, lv_offsetY);
                lv_offsetY += 91;
            }
        }
        gf_PlayerMedalsSetMedalItems(lv_currentPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateMedalsDialog_Init () {
    gt_CreateMedalsDialog = TriggerCreate("gt_CreateMedalsDialog_Func");
    TriggerAddEventGeneric(gt_CreateMedalsDialog, gv_dialogIntialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Medals Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleMedalsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    unitgroup lv_medalsUnitsSelected;
    int lv_ownerofSelectedUnits;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_medalsUnitsSelected = UnitGroupSelected(lv_triggeringPlayer);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_medalsDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(lv_medalsUnitsSelected, c_unitCountAlive) > 0)) {
        lv_ownerofSelectedUnits = UnitGetOwner(UnitGroupUnit(lv_medalsUnitsSelected, 1));
        if ((((lv_ownerofSelectedUnits >= 1) && (lv_ownerofSelectedUnits <= 8)) == true)) {
            if ((DialogIsVisible(gv_playerMedalsDialog[lv_ownerofSelectedUnits], lv_triggeringPlayer) == true)) {
                gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
                return true;
            }
            else {
                gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
                DialogSetVisible(gv_playerMedalsDialog[lv_ownerofSelectedUnits], PlayerGroupSingle(lv_triggeringPlayer), true);
                return true;
            }
        }

    }

    if ((DialogIsVisible(gv_playerMedalsDialog[lv_triggeringPlayer], lv_triggeringPlayer) == true)) {
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
    }
    else {
        gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        DialogSetVisible(gv_playerMedalsDialog[lv_triggeringPlayer], PlayerGroupSingle(lv_triggeringPlayer), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleMedalsDialog_Init () {
    gt_ToggleMedalsDialog = TriggerCreate("gt_ToggleMedalsDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleMedalsDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Create Stats Dialog
//--------------------------------------------------------------------------------------------------
bool gt_CreateStatsDialog_Func (bool testConds, bool runActions) {
    int auto00FD03F1_ae;
    int auto00FD03F1_ai;
    int autoC1DCA918_ae;
    int autoC1DCA918_ai;

    // Variable Declarations
    int lv_statPanelXOffset;
    int lv_panelXOffsetMod;
    int lv_statPanelYOffset;
    int lv_index;
    int lv_statIndex;
    int lv_tempDialogFrame;
    int lv_tempDialogSubFrame;

    // Variable Initialization
    lv_statPanelXOffset = 220;
    lv_panelXOffsetMod = 230;
    lv_tempDialogFrame = c_invalidDialogControlId;
    lv_tempDialogSubFrame = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_activePlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        lv_index = PlayerGroupLoopCurrent();
        lv_statPanelYOffset = 0;
        gv_statsTotalStats[lv_index] = (((gv_playerRank[lv_index] * 2) + gf_GetMedalStats(lv_index)) - gf_GetCurrentAllocatedStats(lv_index));
        gf_UIDialogCreation(610, 690, 270, 150, c_anchorTopRight);
        gv_statsPlayerStatsDialog[lv_index] = DialogLastCreated();
        DialogControlCreateFromTemplate(gv_statsPlayerStatsDialog[lv_index], c_triggerControlTypePanel, "PlayerDetails/DetailsUI");
        lv_tempDialogFrame = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "StatsBorder");
        lv_tempDialogSubFrame = DialogControlLastCreated();
        gf_SetupPlayerDetailsUI(lv_index, lv_tempDialogFrame, gv_labelStatsButton, lv_tempDialogSubFrame, 2);
        DialogControlCreateFromTemplate(gv_statsPlayerStatsDialog[lv_index], c_triggerControlTypePanel, "PlayerDetails/StatsWeaponModsUI");
        lv_tempDialogFrame = DialogControlLastCreated();
        DialogControlCreate(gv_statsPlayerStatsDialog[lv_index], c_triggerControlTypeProgressBar);
        gv_statsPlayerNextLevelProgressBar[lv_index] = DialogControlLastCreated();
        DialogControlSetSize(gv_statsPlayerNextLevelProgressBar[lv_index], PlayerGroupAll(), 520, 37);
        DialogControlSetPosition(gv_statsPlayerNextLevelProgressBar[lv_index], PlayerGroupAll(), c_anchorTopLeft, 85, 391);
        libNtve_gf_SetDialogItemMinimumValue(gv_statsPlayerNextLevelProgressBar[lv_index], 0.0, PlayerGroupAll());
        libNtve_gf_SetDialogItemMaximumValue(gv_statsPlayerNextLevelProgressBar[lv_index], IntToFixed(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_index] + 1)), "XP Required", 1)), PlayerGroupAll());
        libNtve_gf_SetDialogItemCurrentValue(gv_statsPlayerNextLevelProgressBar[lv_index], IntToFixed(gv_playerXP[lv_index]), PlayerGroupAll());
        libNtve_gf_CreateDialogItemLabel(gv_statsPlayerStatsDialog[lv_index], 520, 37, c_anchorTopLeft, 85, 391, (IntToText(gv_playerXP[lv_index]) + (gv_forwardSlash + IntToText(UserDataGetInt("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_index] + 1)), "XP Required", 1)))), Color(100,100,100), false, 2.0);
        gv_statsPlayerNextXP[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemStyle(gv_statsPlayerNextXP[lv_index], "ModCenterSize20", PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "NextRankLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/73296121"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "NextRank");
        gv_statsPlayerNextLevelPromotionLabel[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(gv_statsPlayerNextLevelPromotionLabel[lv_index], UserDataGetText("Ranks", UserDataInstance("Ranks", (gv_playerRank[lv_index] + 1)), "Title Full", 1), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "LivesLeftLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/91A6002C"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "LivesLeft");
        gv_statsPlayerLivesLeft[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "CreditsAvailableLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/BAE7DD80"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "CreditsAvailable");
        gv_statsPlayerCashLabel[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashLabel[lv_index], IntToText(gv_playerCredits[lv_index]), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "CreditsEarnedLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/32F5FC2A"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeLabel, "CreditsEarned");
        gv_statsPlayerCashAcquiredLabel[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemText(gv_statsPlayerCashAcquiredLabel[lv_index], IntToText(gv_playerLifeTimeCreditsAcquired[lv_index]), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeImage, "StatsButtonImage");
        gv_statsPlayerStatsStatsHeroImage[lv_index] = DialogControlLastCreated();
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "StatsButton");
        gv_statsPlayerStatsStatsButton[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_statsPlayerStatsStatsButton[lv_index], StringExternal("Param/Value/1F4A128E"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypeButton, "ModsButton");
        gv_wModWeaponsModButton[lv_index] = DialogControlLastCreated();
        libNtve_gf_SetDialogItemTooltip(gv_wModWeaponsModButton[lv_index], StringExternal("Param/Value/CF7C000E"), PlayerGroupAll());
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypePanel, "PlayerStatsContainer");
        gv_statsPlayerStatsPanel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(gv_statsPlayerStatsPanel[lv_index], c_triggerControlTypeLabel, "AvailableStatsLabel");
        gv_statsPlayerStatAvailableLabel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(gv_statsPlayerStatsPanel[lv_index], c_triggerControlTypeImage, "HeroImage");
        gv_statsPlayerHeroImage[lv_index] = DialogControlLastCreated();
        auto00FD03F1_ae = gv_numberofStats;
        auto00FD03F1_ai = 1;
        lv_statIndex = 1;
        for ( ; ( (auto00FD03F1_ai >= 0 && lv_statIndex <= auto00FD03F1_ae) || (auto00FD03F1_ai <= 0 && lv_statIndex >= auto00FD03F1_ae) ) ; lv_statIndex += auto00FD03F1_ai ) {
            gf_CreateStatModPanels(lv_index, lv_statIndex, lv_statPanelXOffset, lv_statPanelYOffset);
            lv_statPanelYOffset += 55;
        }
        gf_StatsUpdateAllStatsText(lv_index);
        gf_StatsModPointRecalculate(lv_index);
        lv_statPanelYOffset = 0;
        DialogControlHookup(lv_tempDialogFrame, c_triggerControlTypePanel, "WeaponModsContainer");
        gv_statsWeaponModPanel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(gv_statsWeaponModPanel[lv_index], c_triggerControlTypeLabel, "UnlockedWeaponModsLabel");
        gv_statsWeaponModPointsUnlockedLabel[lv_index] = DialogControlLastCreated();
        DialogControlHookup(gv_statsWeaponModPanel[lv_index], c_triggerControlTypeLabel, "AvailableWeaponModsLabel");
        gv_wModWeaponPointsAvailableLabel[lv_index] = DialogControlLastCreated();
        autoC1DCA918_ae = gv_numberofWeaponMods;
        autoC1DCA918_ai = 1;
        lv_statIndex = 1;
        for ( ; ( (autoC1DCA918_ai >= 0 && lv_statIndex <= autoC1DCA918_ae) || (autoC1DCA918_ai <= 0 && lv_statIndex >= autoC1DCA918_ae) ) ; lv_statIndex += autoC1DCA918_ai ) {
            gf_CreateWeaponModPanels(lv_index, lv_statIndex, lv_panelXOffsetMod, lv_statPanelYOffset);
            lv_statPanelYOffset += 38;
        }
        gf_StatsUpdateAllWeaponsModText(lv_index);
        DialogControlSetVisible(gv_statsWeaponModPanel[lv_index], PlayerGroupAll(), false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CreateStatsDialog_Init () {
    gt_CreateStatsDialog = TriggerCreate("gt_CreateStatsDialog_Func");
    TriggerAddEventGeneric(gt_CreateStatsDialog, gv_dialogIntialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Stats Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleStatsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    unitgroup lv_unitsSelected;
    int lv_ownerofSelectedUnit;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_unitsSelected = UnitGroupSelected(lv_triggeringPlayer);

    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == gv_statsDialogButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(lv_unitsSelected, c_unitCountAlive) > 0)) {
        lv_ownerofSelectedUnit = UnitGetOwner(UnitGroupUnit(lv_unitsSelected, 1));
        if ((((lv_ownerofSelectedUnit >= 1) && (lv_ownerofSelectedUnit <= 8)) == true)) {
            if ((DialogIsVisible(gv_statsPlayerStatsDialog[lv_ownerofSelectedUnit], lv_triggeringPlayer) == true)) {
                gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
            }
            else {
                gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
                DialogSetVisible(gv_statsPlayerStatsDialog[lv_ownerofSelectedUnit], PlayerGroupSingle(lv_triggeringPlayer), true);
            }
        }

    }
    else {
        if ((DialogIsVisible(gv_statsPlayerStatsDialog[lv_triggeringPlayer], lv_triggeringPlayer) == true)) {
            gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
        }
        else {
            gf_HideAllDialogsForPlayer(lv_triggeringPlayer);
            DialogSetVisible(gv_statsPlayerStatsDialog[lv_triggeringPlayer], PlayerGroupSingle(lv_triggeringPlayer), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleStatsDialog_Init () {
    gt_ToggleStatsDialog = TriggerCreate("gt_ToggleStatsDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleStatsDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Toggle Weapons Mod Dialog
//--------------------------------------------------------------------------------------------------
bool gt_ToggleStatsWeaponModsDialog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_clickingPlayer;
    int lv_usedDialogItem;
    int lv_iLocal;
    int lv_index;

    // Variable Initialization
    lv_clickingPlayer = EventPlayer();
    lv_usedDialogItem = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialogItem == gv_wModWeaponsModButton[1]) || (lv_usedDialogItem == gv_wModWeaponsModButton[2]) || (lv_usedDialogItem == gv_wModWeaponsModButton[3]) || (lv_usedDialogItem == gv_wModWeaponsModButton[4]) || (lv_usedDialogItem == gv_wModWeaponsModButton[5]) || (lv_usedDialogItem == gv_wModWeaponsModButton[6]) || (lv_usedDialogItem == gv_wModWeaponsModButton[7]) || (lv_usedDialogItem == gv_wModWeaponsModButton[8]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[1]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[2]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[3]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[4]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[5]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[6]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[7]) || (lv_usedDialogItem == gv_statsPlayerStatsStatsButton[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_usedDialogItem != gv_wModWeaponsModButton[lv_index]) && (lv_usedDialogItem != gv_statsPlayerStatsStatsButton[lv_index])) {
        lv_index += 1;
    }
    if ((lv_usedDialogItem == gv_statsPlayerStatsStatsButton[lv_index])) {
        DialogControlSetVisible(gv_statsWeaponModPanel[lv_index], PlayerGroupSingle(lv_clickingPlayer), false);
        DialogControlSetVisible(gv_statsPlayerStatsPanel[lv_index], PlayerGroupSingle(lv_clickingPlayer), true);
    }
    else if ((lv_usedDialogItem == gv_wModWeaponsModButton[lv_index])) {
        DialogControlSetVisible(gv_statsPlayerStatsPanel[lv_index], PlayerGroupSingle(lv_clickingPlayer), false);
        DialogControlSetVisible(gv_statsWeaponModPanel[lv_index], PlayerGroupSingle(lv_clickingPlayer), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ToggleStatsWeaponModsDialog_Init () {
    gt_ToggleStatsWeaponModsDialog = TriggerCreate("gt_ToggleStatsWeaponModsDialog_Func");
    TriggerAddEventDialogControl(gt_ToggleStatsWeaponModsDialog, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify Hero Stats
//--------------------------------------------------------------------------------------------------
bool gt_ModifyHeroStats_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_clickingPlayer;
    int lv_usedDialogItem;
    int lv_usedDialog;
    int lv_index;
    int lv_strEnAgPeIn;
    int[gv_numberofStats + 1] lv_statValues;

    // Variable Initialization
    lv_clickingPlayer = EventPlayer();
    lv_usedDialogItem = EventDialogControl();
    lv_usedDialog = DialogControlGetDialog(lv_usedDialogItem);
    lv_index = 1;
    lv_strEnAgPeIn = 1;

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialog == gv_statsPlayerStatsDialog[1]) || (lv_usedDialog == gv_statsPlayerStatsDialog[2]) || (lv_usedDialog == gv_statsPlayerStatsDialog[3]) || (lv_usedDialog == gv_statsPlayerStatsDialog[4]) || (lv_usedDialog == gv_statsPlayerStatsDialog[5]) || (lv_usedDialog == gv_statsPlayerStatsDialog[6]) || (lv_usedDialog == gv_statsPlayerStatsDialog[7]) || (lv_usedDialog == gv_statsPlayerStatsDialog[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_usedDialog != gv_statsPlayerStatsDialog[lv_index])) {
        lv_index += 1;
    }
    if ((lv_index == lv_clickingPlayer) && (UnitIsValid(gv_marineHero[lv_index]) == true)) {
        if (((lv_usedDialogItem == gv_statsPlayerDecreButton[1][lv_index]) || (lv_usedDialogItem == gv_statsPlayerDecreButton[2][lv_index]) || (lv_usedDialogItem == gv_statsPlayerDecreButton[3][lv_index]) || (lv_usedDialogItem == gv_statsPlayerDecreButton[4][lv_index]) || (lv_usedDialogItem == gv_statsPlayerDecreButton[5][lv_index]) || (lv_usedDialogItem == gv_statsPlayerIncreButton[1][lv_index]) || (lv_usedDialogItem == gv_statsPlayerIncreButton[2][lv_index]) || (lv_usedDialogItem == gv_statsPlayerIncreButton[3][lv_index]) || (lv_usedDialogItem == gv_statsPlayerIncreButton[4][lv_index]) || (lv_usedDialogItem == gv_statsPlayerIncreButton[5][lv_index]))) {
            while ((lv_usedDialogItem != gv_statsPlayerDecreButton[lv_strEnAgPeIn][lv_index]) && (lv_usedDialogItem != gv_statsPlayerIncreButton[lv_strEnAgPeIn][lv_index])) {
                lv_strEnAgPeIn += 1;
            }
            lv_statValues[1] = gv_statsStrength1[lv_index];
            lv_statValues[2] = gv_statsEndurance2[lv_index];
            lv_statValues[3] = gv_statsAgility3[lv_index];
            lv_statValues[4] = gv_statsPerception4[lv_index];
            lv_statValues[5] = gv_statsIntelligence5[lv_index];
            if ((lv_usedDialogItem == gv_statsPlayerDecreButton[lv_strEnAgPeIn][lv_index])) {
                if ((lv_statValues[lv_strEnAgPeIn] > 0)) {
                    gf_StatsRemoveStat(lv_index, lv_strEnAgPeIn, UserDataGetGameLink("StatData", UserDataInstance("StatData", lv_strEnAgPeIn), "Behavior", 1));
                    gv_statsTotalStats[lv_index] += 1;
                    lv_statValues[lv_strEnAgPeIn] -= 1;
                }
                else {
                    return true;
                }
            }
            else if ((lv_usedDialogItem == gv_statsPlayerIncreButton[lv_strEnAgPeIn][lv_index])) {
                if ((lv_statValues[lv_strEnAgPeIn] < 9) && (gv_statsTotalStats[lv_index] > 0)) {
                    gf_StatsAddStat(lv_index, lv_strEnAgPeIn, UserDataGetGameLink("StatData", UserDataInstance("StatData", lv_strEnAgPeIn), "Behavior", 1));
                    gv_statsTotalStats[lv_index] -= 1;
                    lv_statValues[lv_strEnAgPeIn] += 1;
                }
                else {
                    return true;
                }
            }
            gf_StatsUpdateStatText(lv_statValues[lv_strEnAgPeIn], lv_strEnAgPeIn, lv_index);
            gf_StatsUpdateAvailableStatsText(lv_index);
        }
        else if (((lv_usedDialogItem == gv_wModPlayerDecreButton[1][lv_index]) || (lv_usedDialogItem == gv_wModPlayerDecreButton[2][lv_index]) || (lv_usedDialogItem == gv_wModPlayerDecreButton[3][lv_index]) || (lv_usedDialogItem == gv_wModPlayerDecreButton[4][lv_index]) || (lv_usedDialogItem == gv_wModPlayerDecreButton[5][lv_index]) || (lv_usedDialogItem == gv_wModPlayerDecreButton[6][lv_index]) || (lv_usedDialogItem == gv_wModPlayerDecreButton[7][lv_index]) || (lv_usedDialogItem == gv_wModPlayerIncreButton[1][lv_index]) || (lv_usedDialogItem == gv_wModPlayerIncreButton[2][lv_index]) || (lv_usedDialogItem == gv_wModPlayerIncreButton[3][lv_index]) || (lv_usedDialogItem == gv_wModPlayerIncreButton[4][lv_index]) || (lv_usedDialogItem == gv_wModPlayerIncreButton[5][lv_index]) || (lv_usedDialogItem == gv_wModPlayerIncreButton[6][lv_index]) || (lv_usedDialogItem == gv_wModPlayerIncreButton[7][lv_index]))) {
            while ((lv_usedDialogItem != gv_wModPlayerDecreButton[lv_strEnAgPeIn][lv_index]) && (lv_usedDialogItem != gv_wModPlayerIncreButton[lv_strEnAgPeIn][lv_index])) {
                lv_strEnAgPeIn += 1;
            }
            if ((lv_usedDialogItem == gv_wModPlayerDecreButton[lv_strEnAgPeIn][lv_index])) {
                if ((gv_statsModProperties[lv_strEnAgPeIn][lv_index] == 1)) {
                    return true;
                }
                else if (((gv_statsModProperties[lv_strEnAgPeIn][lv_index] >= 2) && (gv_statsModProperties[lv_strEnAgPeIn][lv_index] <= 5))) {
                    if ((gv_modTotalPointsNegative[lv_index] < gf_StatsGetMaxModPoints(lv_index))) {
                        gv_modTotalPointsNegative[lv_index] += 1;
                    }
                    else {
                        return true;
                    }
                }
                else if (((gv_statsModProperties[lv_strEnAgPeIn][lv_index] >= 6) && (gv_statsModProperties[lv_strEnAgPeIn][lv_index] <= 9))) {
                    gv_modTotalPointsPositive[lv_index] -= 1;
                }
                gv_statsModProperties[lv_strEnAgPeIn][lv_index] -= 1;
                gv_wModTotalPointsLeft[lv_index] += 1;
            }
            else if ((lv_usedDialogItem == gv_wModPlayerIncreButton[lv_strEnAgPeIn][lv_index])) {
                if ((gv_modTotalPointsNegative[lv_index] > gv_modTotalPointsPositive[lv_index])) {
                    if ((gv_statsModProperties[lv_strEnAgPeIn][lv_index] == 9)) {
                        return true;
                    }
                    else if (((gv_statsModProperties[lv_strEnAgPeIn][lv_index] >= 5) && (gv_statsModProperties[lv_strEnAgPeIn][lv_index] <= 8))) {
                        if ((gv_modTotalPointsPositive[lv_index] < gf_StatsGetMaxModPoints(lv_index))) {
                            gv_modTotalPointsPositive[lv_index] += 1;
                        }
                        else {
                            return true;
                        }
                    }
                    else if (((gv_statsModProperties[lv_strEnAgPeIn][lv_index] >= 1) && (gv_statsModProperties[lv_strEnAgPeIn][lv_index] <= 4))) {
                        gv_modTotalPointsNegative[lv_index] -= 1;
                    }
                    gv_statsModProperties[lv_strEnAgPeIn][lv_index] += 1;
                    gv_wModTotalPointsLeft[lv_index] -= 1;
                }

            }
            gf_StatsInitializeWeaponMods(lv_strEnAgPeIn, lv_index);
            gf_StatsUpdateWeaponsModText(lv_strEnAgPeIn, lv_index);
            gf_StatsUpdateAvailableWModPointsText(lv_index);
            SoundPlay(SoundLink("ShotgunPump", -1), PlayerGroupSingle(lv_clickingPlayer), 75.0, 0.25);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModifyHeroStats_Init () {
    gt_ModifyHeroStats = TriggerCreate("gt_ModifyHeroStats_Func");
    TriggerEnable(gt_ModifyHeroStats, false);
    TriggerAddEventDialogControl(gt_ModifyHeroStats, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Disable Stat And Mods Modification
//--------------------------------------------------------------------------------------------------
bool gt_DisableStatAndModsModification_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(gt_ModifyHeroStats, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_DisableStatAndModsModification_Init () {
    gt_DisableStatAndModsModification = TriggerCreate("gt_DisableStatAndModsModification_Func");
    TriggerAddEventTimeElapsed(gt_DisableStatAndModsModification, 300.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Backstab
//--------------------------------------------------------------------------------------------------
bool gt_Backstab_Func (bool testConds, bool runActions) {
    int autoBF7B6407_n;
    int autoBF7B6407_i;

    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    fixed lv_damage;
    int lv_backstabTextTag;
    fixed lv_backstabTextHeightOffset;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_damage = EventUnitDamageAmount();
    lv_backstabTextTag = c_textTagNone;
    lv_backstabTextHeightOffset = 1.5;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(lv_attackingUnit, "Backstab") == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_attackedUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (gf_AttackerbehindTarget(lv_attackingUnit, lv_attackedUnit, 160.0)) {
        UnitDamage(lv_attackingUnit, "Backstab", lv_attackedUnit, (lv_damage * 0.5));
        TextTagCreate(((StringExternal("Param/Value/BB7F61D6") + FixedToText((lv_damage * 0.5), 0)) + StringExternal("Param/Value/54C65657")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
        lv_backstabTextTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        TextTagAttachToUnit(lv_backstabTextTag, lv_attackingUnit, lv_backstabTextHeightOffset);
        autoBF7B6407_n = 10;
        for (autoBF7B6407_i = 1; autoBF7B6407_i <= autoBF7B6407_n; autoBF7B6407_i += 1) {
            Wait(0.1, c_timeGame);
            lv_backstabTextHeightOffset += 0.1;
            TextTagAttachToUnit(lv_backstabTextTag, lv_attackingUnit, lv_backstabTextHeightOffset);
        }
        TextTagDestroy(lv_backstabTextTag);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Backstab_Init () {
    gt_Backstab = TriggerCreate("gt_Backstab_Func");
    TriggerEnable(gt_Backstab, false);
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "Shotgun");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "Crowbar");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "CombatKnifeDamage");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "Predator");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "StingerMK3Damage");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "AutoTurret");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "LongboltMissileU");
    TriggerAddEventUnitDamaged(gt_Backstab, null, c_unitDamageTypeAny, c_unitDamageEither, "ExecuteHeroicMassiveDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Critical Strike
//--------------------------------------------------------------------------------------------------
bool gt_CriticalStrike_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    fixed lv_damage;
    int lv_critTextTag;
    fixed lv_critTextHeightOffset;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_damage = EventUnitDamageAmount();
    lv_critTextTag = c_textTagNone;
    lv_critTextHeightOffset = 1.5;

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior(EventUnit(), "CriticalStrikeDefender") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagCreate((FixedToText(lv_damage, 0) + StringExternal("Param/Value/296CE093")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
    lv_critTextTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
    TextTagAttachToUnit(lv_critTextTag, lv_attackingUnit, lv_critTextHeightOffset);
    TextTagSetVelocity(lv_critTextTag, 0.5, 90.0);
    Wait(1.0, c_timeGame);
    TextTagDestroy(lv_critTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CriticalStrike_Init () {
    gt_CriticalStrike = TriggerCreate("gt_CriticalStrike_Func");
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeMelee, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeRanged, c_unitDamageNonFatal, null);
    TriggerAddEventUnitDamaged(gt_CriticalStrike, null, c_unitDamageTypeSplash, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Concentrated Fire Critical Strike
//--------------------------------------------------------------------------------------------------
bool gt_ConcentratedFireCriticalStrike_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((gv_talentLevel[2][UnitGetOwner(EventUnit())] > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior(EventUnit(), "ConcentratedFireLevel1") == true) || (UnitHasBehavior(EventUnit(), "ConcentratedFireLevel2") == true) || (UnitHasBehavior(EventUnit(), "ConcentratedFireLevel3") == true))) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ConcentratedFireCriticalStrike", gv_talentLevel[1][UnitGetOwner(EventUnit())]);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ConcentratedFireCriticalStrike", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ConcentratedFireCriticalStrike_Init () {
    gt_ConcentratedFireCriticalStrike = TriggerCreate("gt_ConcentratedFireCriticalStrike_Func");
    TriggerAddEventUnitBehaviorChange(gt_ConcentratedFireCriticalStrike, null, "ConcentratedFireLevel1", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_ConcentratedFireCriticalStrike, null, "ConcentratedFireLevel2", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_ConcentratedFireCriticalStrike, null, "ConcentratedFireLevel3", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_ConcentratedFireCriticalStrike, null, "ConcentratedFireLevel1", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_ConcentratedFireCriticalStrike, null, "ConcentratedFireLevel2", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(gt_ConcentratedFireCriticalStrike, null, "ConcentratedFireLevel3", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Harvester of Sorrow Critical Strike
//--------------------------------------------------------------------------------------------------
bool gt_HarvesterofSorrowCriticalStrike_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "HarvesterofSorrow") == true)) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ConcentratedFireCriticalStrike2", 1);
    }
    else {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "ConcentratedFireCriticalStrike2", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HarvesterofSorrowCriticalStrike_Init () {
    gt_HarvesterofSorrowCriticalStrike = TriggerCreate("gt_HarvesterofSorrowCriticalStrike_Func");
    TriggerAddEventUnitBehaviorChange(gt_HarvesterofSorrowCriticalStrike, null, "HarvesterofSorrow", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_HarvesterofSorrowCriticalStrike, null, "HarvesterofSorrow", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Grenade Launcher Fire Up End
//--------------------------------------------------------------------------------------------------
bool gt_GrenadeLauncherFireUpEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FireUpGrenadesLevel1", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FireUpGrenadesLevel12", 0);
    libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "FireUpGrenadesLevel13", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GrenadeLauncherFireUpEnd_Init () {
    gt_GrenadeLauncherFireUpEnd = TriggerCreate("gt_GrenadeLauncherFireUpEnd_Func");
    TriggerAddEventUnitBehaviorChange(gt_GrenadeLauncherFireUpEnd, null, "FocusedFire", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sonic Trap - Limit 5
//--------------------------------------------------------------------------------------------------
bool gt_SonicTrapLimit5_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_riflemanOwner;

    // Variable Initialization
    lv_riflemanOwner = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_sonicTrap[lv_riflemanOwner], EventUnitCreatedUnit());
    if ((UnitGroupCount(gv_sonicTrap[lv_riflemanOwner], c_unitCountAlive) > 5)) {
        UnitGroupLoopBegin(gv_sonicTrap[lv_riflemanOwner]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
            break;
        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SonicTrapLimit5_Init () {
    gt_SonicTrapLimit5 = TriggerCreate("gt_SonicTrapLimit5_Func");
    TriggerAddEventUnitCreated(gt_SonicTrapLimit5, null, "SonicTrap", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sonic Trap Vision
//--------------------------------------------------------------------------------------------------
bool gt_SonicTrapVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_revealRadius;
    fixed lv_revealDuration;
    point lv_sonicTrapTargetPoint;

    // Variable Initialization
    lv_revealRadius = 10.0;
    lv_revealDuration = 5.0;
    lv_sonicTrapTargetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    PingCreate(PlayerGroupActive(), "PingWarning", lv_sonicTrapTargetPoint, ColorWithAlpha(76.86, 85.88, 99.22, 49.80), 1.0);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lv_sonicTrapTargetPoint, lv_revealRadius), lv_revealDuration, false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SonicTrapVision_Init () {
    gt_SonicTrapVision = TriggerCreate("gt_SonicTrapVision_Func");
    TriggerAddEventUnitAbility(gt_SonicTrapVision, null, AbilityCommand("SonicTrapLevel1", 0), c_unitAbilStageComplete, false);
    TriggerAddEventUnitAbility(gt_SonicTrapVision, null, AbilityCommand("SonicTrapLevel2", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Anticipation
//--------------------------------------------------------------------------------------------------
bool gt_Anticipation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_ownerofAttackingUnit;
    fixed lv_damage;
    int lv_anticipationTextTag;
    fixed lv_anticipationLevel;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_ownerofAttackingUnit = UnitGetOwner(lv_attackingUnit);
    lv_damage = EventUnitDamageAmount();
    lv_anticipationTextTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_attackedUnit) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(lv_attackingUnit), UnitGetPosition(lv_attackedUnit)) > 9.0))) {
            return false;
        }

        if (!(((UnitHasBehavior(lv_attackingUnit, "AnticipationLevel1") == true) || (UnitHasBehavior(lv_attackingUnit, "AnticipationLevel2") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(lv_attackingUnit, "AnticipationLevel1") == true)) {
        lv_damage = (lv_damage * 0.15);
    }
    else if ((UnitHasBehavior(lv_attackingUnit, "AnticipationLevel2") == true)) {
        lv_damage = (lv_damage * 0.3);
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "AnticipationDamage", "Amount", lv_ownerofAttackingUnit, FixedToString(lv_damage, c_fixedPrecisionAny));
    PlayerCreateEffectUnit(lv_ownerofAttackingUnit, "AnticipationDamage", lv_attackedUnit);
    TextTagCreate(((StringExternal("Param/Value/9EE1081C") + FixedToText(lv_damage, 0)) + StringExternal("Param/Value/B74F32C6")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
    lv_anticipationTextTag = TextTagLastCreated();
    TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(50.20, 0.00, 100.00));
    TextTagAttachToUnit(lv_anticipationTextTag, lv_attackingUnit, 2.0);
    TextTagSetVelocity(lv_anticipationTextTag, 0.5, 90.0);
    Wait(1.0, c_timeGame);
    TextTagDestroy(lv_anticipationTextTag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Anticipation_Init () {
    gt_Anticipation = TriggerCreate("gt_Anticipation_Func");
    TriggerEnable(gt_Anticipation, false);
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "PrecisionShotLevel1Damage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "PrecisionShotLevel2Damage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BaseDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BaseDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BaseDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "GaussRifleMini");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "SniperRifleMini");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "M45AMarksmanRifle");
    TriggerAddEventUnitDamaged(gt_Anticipation, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Concentration
//--------------------------------------------------------------------------------------------------
bool gt_Concentration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackingUnit;
    unit lv_attackedUnit;
    int lv_ownerofAttackingUnit;
    string lv_classofAttackingUnit;
    fixed lv_damage;
    int lv_concentrationTextTag;
    fixed lv_concentrationTextHeightOffset;
    fixed lv_concentrationDamage;

    // Variable Initialization
    lv_attackingUnit = EventUnitDamageSourceUnit();
    lv_attackedUnit = EventUnit();
    lv_ownerofAttackingUnit = EventUnitDamageSourcePlayer();
    lv_classofAttackingUnit = UnitGetType(lv_attackingUnit);
    lv_damage = EventUnitDamageAmount();
    lv_concentrationTextTag = c_textTagNone;
    lv_concentrationTextHeightOffset = 1.5;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_attackedUnit) == true))) {
            return false;
        }

        if (!((lv_classofAttackingUnit == "Marksman"))) {
            return false;
        }

        if (!((gv_talentLevel[1][lv_ownerofAttackingUnit] > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior(lv_attackingUnit, "ConcentrationLevel1") == true) || (UnitHasBehavior(lv_attackingUnit, "ConcentrationLevel2") == true) || (UnitHasBehavior(lv_attackingUnit, "ConcentrationLevel3") == true))) {
        lv_concentrationDamage = ((IntToFixed(gv_talentLevel[1][lv_ownerofAttackingUnit]) * 0.2) * lv_damage);
        CatalogFieldValueSet(c_gameCatalogEffect, "Concentration", "Amount", lv_ownerofAttackingUnit, FixedToString(lv_concentrationDamage, c_fixedPrecisionAny));
        UnitCreateEffectUnit(lv_attackingUnit, "Concentration", lv_attackedUnit);
        if ((EventUnitDamageEffect() == "OSOKLevel3BarrettDamage")) {
            UnitCreateEffectUnit(lv_attackingUnit, "OSOKLevel3BarrettBossDamage", lv_attackedUnit);
        }
        if ((EventUnitDamageEffect() == "OSOKLevel3BaseDamage")) {
            UnitCreateEffectUnit(lv_attackingUnit, "OSOKLevel3MarksmanBossDamage", lv_attackedUnit);
        }
        UnitBehaviorRemove(lv_attackingUnit, "ConcentrationLevel1", 1);
        UnitBehaviorRemove(lv_attackingUnit, "ConcentrationLevel2", 1);
        UnitBehaviorRemove(lv_attackingUnit, "ConcentrationLevel3", 1);
        TextTagCreate(((StringExternal("Param/Value/4D701111") + FixedToText(lv_concentrationDamage, 0)) + StringExternal("Param/Value/5E300354")), 20, UnitGetPosition(lv_attackingUnit), 1.5, true, true, PlayerGroupActive());
        lv_concentrationTextTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 0.00));
        Wait(0.5, c_timeGame);
        TextTagAttachToUnit(lv_concentrationTextTag, lv_attackingUnit, lv_concentrationTextHeightOffset);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
        TextTagSetVelocity(TextTagLastCreated(), 0.2, 90.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Concentration_Init () {
    gt_Concentration = TriggerCreate("gt_Concentration_Func");
    TriggerEnable(gt_Concentration, false);
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel1BaseDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel2BaseDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BarrettDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "OSOKLevel3BaseDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "Shotgun");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "Crowbar");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Concentration, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Execute Movespeed Bonus
//--------------------------------------------------------------------------------------------------
bool gt_ExecuteMovespeedBonus_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitDamageSourceUnit(), "ExecuteMovespeedBonus", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExecuteMovespeedBonus_Init () {
    gt_ExecuteMovespeedBonus = TriggerCreate("gt_ExecuteMovespeedBonus_Func");
    TriggerAddEventUnitDamaged(gt_ExecuteMovespeedBonus, null, c_unitDamageTypeAny, c_unitDamageFatal, "ExecuteHeroicMassiveDamage");
    TriggerAddEventUnitDamaged(gt_ExecuteMovespeedBonus, null, c_unitDamageTypeAny, c_unitDamageFatal, "ExecuteNormalTargets");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Supply Station
//--------------------------------------------------------------------------------------------------
bool gt_SupplyStation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofMarine;
    int lv_localMarineMags;
    int lv_totalRounds;
    unit lv_effectTarget;
    int lv_effectSourcePlayer;
    int lv_supplyStationLevel;

    // Variable Initialization
    lv_ownerofMarine = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_localMarineMags = 1;
    lv_effectTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_effectSourcePlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_supplyStationLevel = gv_talentLevel[4][lv_effectSourcePlayer];

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_marines, lv_effectTarget) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(lv_effectTarget, "HighCapacityClip") == true)) {
        lv_localMarineMags += 1;
    }

    if ((UnitGetType(lv_effectTarget) == "TychusChaingun")) {
        lv_localMarineMags += gv_talentLevel[3][lv_ownerofMarine];
    }

    lv_totalRounds = (gv_playerRoundLimit[lv_ownerofMarine] * lv_localMarineMags);
    gv_marineRounds[lv_ownerofMarine] = MinI((gv_marineRounds[lv_ownerofMarine] + lv_supplyStationLevel), lv_totalRounds);
    gf_UpdateAmmoDialog(lv_ownerofMarine);
    if ((gv_marineMags[lv_ownerofMarine] == 0) && (UnitHasBehavior(lv_effectTarget, "Reload") == false)) {
        if ((((UnitWeaponGet(lv_effectTarget, 1) == "StingerMK3") && (gv_marineRounds[lv_ownerofMarine] >= 10)))) {
            UnitAbilityEnable(lv_effectTarget, "attack", true);
        }

        if ((gv_marineRounds[lv_ownerofMarine] >= 3)) {
            UnitAbilityEnable(lv_effectTarget, "L3LaunchGrenade", true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SupplyStation_Init () {
    gt_SupplyStation = TriggerCreate("gt_SupplyStation_Func");
    TriggerAddEventPlayerEffectUsed(gt_SupplyStation, c_playerAny, "SupplyStationModifyLevel1");
    TriggerAddEventPlayerEffectUsed(gt_SupplyStation, c_playerAny, "SupplyStationModifyLevel2");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Laser Designator
//--------------------------------------------------------------------------------------------------
bool gt_LaserDesignator_Func (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_lDDuration;
    fixed lv_revealRadius;
    unit lv_designatedUnit;

    // Variable Initialization
    lv_lDDuration = TimerCreate();
    lv_revealRadius = 2.0;
    lv_designatedUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_lDDuration, 60.0, false, c_timeGame);
    PingCreate(gv_marineSquad, "PingObjective", UnitGetPosition(lv_designatedUnit), ColorWithAlpha(100.00, 0.00, 0.00, 49.41), 60.0);
    PingSetUnit(PingLastCreated(), lv_designatedUnit);
    if (((UnitGetType(lv_designatedUnit) == "Infestor2") || (UnitGetType(lv_designatedUnit) == "Tartarus") || (UnitGetType(lv_designatedUnit) == "Erebos") || (UnitGetType(lv_designatedUnit) == "Deimos") || (UnitGetType(lv_designatedUnit) == "Demeter") || (UnitGetType(lv_designatedUnit) == "Nazara") || (UnitGetType(lv_designatedUnit) == "Apoptosis") || (UnitGetType(lv_designatedUnit) == "Eos") || (UnitGetType(lv_designatedUnit) == "Perses") || (UnitGetType(lv_designatedUnit) == "Ivax") || (UnitGetType(lv_designatedUnit) == "Cronus") || (UnitGetType(lv_designatedUnit) == "Cerberus") || (UnitGetType(lv_designatedUnit) == "Menoetes") || (UnitGetType(lv_designatedUnit) == "Hephaestus"))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, (UnitTypeGetName(UnitGetType(lv_designatedUnit)) + StringExternal("Param/Value/72B3A8D0")));
        SoundPlay(SoundLink("TUIWarningPing", -1), PlayerGroupAll(), 100.0, 0.0);
    }

    PlayerCreateEffectUnit(9, "LaserDesignatorReveal", lv_designatedUnit);
    while (!(((UnitIsAlive(lv_designatedUnit) == false) || (libNtve_gf_UnitIsHidden(lv_designatedUnit) == true) || (TimerGetRemaining(lv_lDDuration) <= 0.0)))) {
        Wait(0.5, c_timeGame);
    }
    PingDestroy(PingLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_LaserDesignator_Init () {
    gt_LaserDesignator = TriggerCreate("gt_LaserDesignator_Func");
    TriggerAddEventUnitBehaviorChange(gt_LaserDesignator, null, "LaserDesignatorLevel1", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_LaserDesignator, null, "LaserDesignatorLevel2", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(gt_LaserDesignator, null, "LaserDesignatorLevel3", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flare
//--------------------------------------------------------------------------------------------------
bool gt_Flare_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_reconOwner;
    fixed lv_revealRadius;
    fixed lv_revealDuration;
    point lv_flareTargetPoint;

    // Variable Initialization
    lv_reconOwner = UnitGetOwner(EventUnit());
    lv_revealRadius = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "Flare", "RevealRadius", lv_reconOwner);
    lv_revealDuration = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "Flare", "ExpireDelay", lv_reconOwner);
    lv_flareTargetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lv_flareTargetPoint, lv_revealRadius), lv_revealDuration, false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Flare_Init () {
    gt_Flare = TriggerCreate("gt_Flare_Func");
    TriggerAddEventUnitAbility(gt_Flare, null, AbilityCommand("Flare", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Reaper MK-13 Created
//--------------------------------------------------------------------------------------------------
bool gt_ReaperMK13Created_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reaperMK13Unit;
    int lv_reconOwner;

    // Variable Initialization
    lv_reaperMK13Unit = EventUnitCreatedUnit();
    lv_reconOwner = UnitGetOwner(lv_reaperMK13Unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_reaperMK13[lv_reconOwner]);
    Wait(0.2, c_timeGame);
    gv_reaperMK13[lv_reconOwner] = lv_reaperMK13Unit;
    UnitSetPropertyFixed(gv_reaperMK13[lv_reconOwner], c_unitPropLevel, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ReaperMK13Created_Init () {
    gt_ReaperMK13Created = TriggerCreate("gt_ReaperMK13Created_Func");
    TriggerEnable(gt_ReaperMK13Created, false);
    TriggerAddEventUnitCreated(gt_ReaperMK13Created, null, "ReaperMK13", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Refresher - Reset Cooldowns
//--------------------------------------------------------------------------------------------------
bool gt_RefresherResetCooldowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_reconHero;

    // Variable Initialization
    lv_reconHero = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityReset(lv_reconHero, AbilityCommand("Sprint", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("Escape", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("Flare", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("Execute", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("LaserDesignator", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("MassDesignate", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("ReaperMK13", 0), c_spendLocationAbility);
    UnitAbilityReset(lv_reconHero, AbilityCommand("SupplyStation", 0), c_spendLocationAbility);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RefresherResetCooldowns_Init () {
    gt_RefresherResetCooldowns = TriggerCreate("gt_RefresherResetCooldowns_Func");
    TriggerAddEventUnitAbility(gt_RefresherResetCooldowns, null, AbilityCommand("Refresher", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Sadist
//--------------------------------------------------------------------------------------------------
bool gt_Sadist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_sadistLevel;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libNtve_gf_KillingUnit()) == "DominionKillTeam"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sadistLevel = gv_talentLevel[9][libNtve_gf_KillingPlayer()];
    UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropLife, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropLife, c_unitPropCurrent) + (lv_sadistLevel * 2.0)));
    UnitSetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropShields, (UnitGetPropertyFixed(gv_marineHero[libNtve_gf_KillingPlayer()], c_unitPropShields, c_unitPropCurrent) + lv_sadistLevel));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Sadist_Init () {
    gt_Sadist = TriggerCreate("gt_Sadist_Func");
    TriggerEnable(gt_Sadist, false);
    TriggerAddEventUnitDied(gt_Sadist, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armageddon Bomb - Limit 3
//--------------------------------------------------------------------------------------------------
bool gt_ArmageddonBombLimit3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_demoOwner;

    // Variable Initialization
    lv_demoOwner = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(gv_armageddonBomb[lv_demoOwner], EventUnitCreatedUnit());
    if ((UnitGroupCount(gv_armageddonBomb[lv_demoOwner], c_unitCountAlive) > 3)) {
        UnitGroupLoopBegin(gv_armageddonBomb[lv_demoOwner]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
            break;
        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmageddonBombLimit3_Init () {
    gt_ArmageddonBombLimit3 = TriggerCreate("gt_ArmageddonBombLimit3_Func");
    TriggerEnable(gt_ArmageddonBombLimit3, false);
    TriggerAddEventUnitCreated(gt_ArmageddonBombLimit3, null, "Armageddon", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Nexus - Revoke Shared Vision
//--------------------------------------------------------------------------------------------------
bool gt_FieldNexusRevokeSharedVision_Func (bool testConds, bool runActions) {
    int autoA7473437_ae;
    int autoA7473437_ai;
    int auto78B9422F_ae;
    int auto78B9422F_ai;
    unitgroup auto2222CC65_g;
    int auto2222CC65_u;

    // Variable Declarations
    unit lv_killedFieldNexus;
    int lv_localInt;
    unit lv_localUnit;

    // Variable Initialization
    lv_killedFieldNexus = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_killedFieldNexus) == "FieldNexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.5, c_timeGame);
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((TechTreeUnitCount(PlayerGroupLoopCurrent(), "FieldNexus", c_techCountCompleteOnly) > 0)) {
            gv_fieldNexusAlive = true;
        }

    }
    PlayerGroupLoopEnd();
    if ((gv_fieldNexusAlive == false)) {
        IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true)) {
                autoA7473437_ae = gv_numberofPlayers;
                autoA7473437_ai = 1;
                lv_localInt = gv_indexBaseValue;
                for ( ; ( (autoA7473437_ai >= 0 && lv_localInt <= autoA7473437_ae) || (autoA7473437_ai <= 0 && lv_localInt >= autoA7473437_ae) ) ; lv_localInt += autoA7473437_ai ) {
                    if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (lv_localInt != IntLoopCurrent())) {
                        if ((PlayerGetAlliance(lv_localInt, c_allianceIdControl, IntLoopCurrent()) == true)) {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, IntLoopCurrent(), libNtve_ge_AllianceSetting_Ally);
                            PlayerSetAlliance(lv_localInt, c_allianceIdControl, IntLoopCurrent(), true);
                        }
                        else {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, IntLoopCurrent(), libNtve_ge_AllianceSetting_Ally);
                        }
                    }
                    else if ((PlayerStatus(lv_localInt) == c_playerStatusLeft) && (lv_localInt != IntLoopCurrent())) {
                        libNtve_gf_SetAllianceOneWay(lv_localInt, IntLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                    }
                }
            }
            else if ((PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == false)) {
                auto78B9422F_ae = gv_numberofPlayers;
                auto78B9422F_ai = 1;
                lv_localInt = gv_indexBaseValue;
                for ( ; ( (auto78B9422F_ai >= 0 && lv_localInt <= auto78B9422F_ae) || (auto78B9422F_ai <= 0 && lv_localInt >= auto78B9422F_ae) ) ; lv_localInt += auto78B9422F_ai ) {
                    if ((PlayerStatus(lv_localInt) == c_playerStatusActive) && (lv_localInt != IntLoopCurrent())) {
                        if ((PlayerGetAlliance(lv_localInt, c_allianceIdControl, IntLoopCurrent()) == true)) {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, IntLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                        }
                        else {
                            libNtve_gf_SetAllianceOneWay(lv_localInt, IntLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVision);
                        }
                    }
                    else if ((PlayerStatus(lv_localInt) == c_playerStatusLeft) && (lv_localInt != IntLoopCurrent())) {
                        libNtve_gf_SetAllianceOneWay(lv_localInt, IntLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                    }
                }
            }
        }
        IntLoopEnd();
    }

    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "PsiOps") && ((UnitHasBehavior(UnitGroupLoopCurrent(), "MindLinkLevel1") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "MindLinkLevel2") == true) || (UnitHasBehavior(UnitGroupLoopCurrent(), "MindLinkLevel3") == true))) {
            UnitGroupLoopBegin(gv_mindLinkedGroup[UnitGetOwner(UnitGroupLoopCurrent())]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                auto2222CC65_g = gv_mindLinkedGroup[UnitGetOwner(UnitGroupLoopCurrent())];
                auto2222CC65_u = 1;
                for ( ; auto2222CC65_u <= UnitGroupCount(auto2222CC65_g, c_unitCountAll) ; auto2222CC65_u += BoolToInt(lv_localUnit == UnitGroupUnit(auto2222CC65_g, auto2222CC65_u)) ) {
                    lv_localUnit = UnitGroupUnit(auto2222CC65_g, auto2222CC65_u);
                    libNtve_gf_SetAlliance(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetOwner(lv_localUnit), libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
            }
            UnitGroupLoopEnd();
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldNexusRevokeSharedVision_Init () {
    gt_FieldNexusRevokeSharedVision = TriggerCreate("gt_FieldNexusRevokeSharedVision_Func");
    TriggerEnable(gt_FieldNexusRevokeSharedVision, false);
    TriggerAddEventUnitDied(gt_FieldNexusRevokeSharedVision, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Field Nexus - Share Vision
//--------------------------------------------------------------------------------------------------
bool gt_FieldNexusShareVision_Func (bool testConds, bool runActions) {
    int auto2940E8D8_ae;
    int auto2940E8D8_ai;
    int auto0A16C072_ae;
    int auto0A16C072_ai;

    // Variable Declarations
    unit lv_fieldNexusUnit;
    int lv_outerLoop;
    int lv_innerLoop;
    int lv_engineerOwner;
    int lv_currentNumberofFieldNexus;

    // Variable Initialization
    lv_fieldNexusUnit = EventUnitCreatedUnit();
    lv_engineerOwner = UnitGetOwner(lv_fieldNexusUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_fieldNexusUnit) == "FieldNexus"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_fieldNexusAlive = true;
    if ((UnitIsValid(gv_fieldNexus[lv_engineerOwner]) == true) && (UnitIsAlive(gv_fieldNexus[lv_engineerOwner]) == true)) {
        UnitKill(gv_fieldNexus[lv_engineerOwner]);
    }

    gv_fieldNexus[lv_engineerOwner] = lv_fieldNexusUnit;
    auto2940E8D8_ae = gv_numberofPlayers;
    auto2940E8D8_ai = 1;
    lv_outerLoop = gv_indexBaseValue;
    for ( ; ( (auto2940E8D8_ai >= 0 && lv_outerLoop <= auto2940E8D8_ae) || (auto2940E8D8_ai <= 0 && lv_outerLoop >= auto2940E8D8_ae) ) ; lv_outerLoop += auto2940E8D8_ai ) {
        auto0A16C072_ae = gv_numberofPlayers;
        auto0A16C072_ai = 1;
        lv_innerLoop = (lv_outerLoop + 1);
        for ( ; ( (auto0A16C072_ai >= 0 && lv_innerLoop <= auto0A16C072_ae) || (auto0A16C072_ai <= 0 && lv_innerLoop >= auto0A16C072_ae) ) ; lv_innerLoop += auto0A16C072_ai ) {
            if ((PlayerStatus(lv_outerLoop) == c_playerStatusActive) && (PlayerStatus(lv_innerLoop) == c_playerStatusActive)) {
                if ((PlayerGetAlliance(lv_outerLoop, c_allianceIdControl, lv_innerLoop) == true)) {
                    libNtve_gf_SetAllianceOneWay(lv_outerLoop, lv_innerLoop, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
                else {
                    libNtve_gf_SetAllianceOneWay(lv_outerLoop, lv_innerLoop, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
                if ((PlayerGetAlliance(lv_innerLoop, c_allianceIdControl, lv_outerLoop) == true)) {
                    libNtve_gf_SetAllianceOneWay(lv_innerLoop, lv_outerLoop, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndControl);
                }
                else {
                    libNtve_gf_SetAllianceOneWay(lv_innerLoop, lv_outerLoop, libNtve_ge_AllianceSetting_AllyWithSharedVision);
                }
            }
        }
    }
    gf_RestoreLeaverControl();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FieldNexusShareVision_Init () {
    gt_FieldNexusShareVision = TriggerCreate("gt_FieldNexusShareVision_Func");
    TriggerEnable(gt_FieldNexusShareVision, false);
    TriggerAddEventUnitCreated(gt_FieldNexusShareVision, null, "FieldNexus", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Synergy
//--------------------------------------------------------------------------------------------------
bool gt_Synergy_Func (bool testConds, bool runActions) {
    int autoE77BADAD_n;
    int autoE77BADAD_i;

    // Variable Declarations
    unit lv_localSourceUnit;
    unit lv_localTargetUnit;
    int lv_ownerofSynergySourceUnit;
    string lv_classofSynergySourceUnit;
    fixed lv_damage;
    int lv_synergyTextTag;
    fixed lv_synergyTextHeightOffset;
    fixed lv_synergyDamage;
    fixed lv_damageFactor;
    int lv_synergyLevel;

    // Variable Initialization
    lv_localSourceUnit = EventUnitDamageSourceUnit();
    lv_localTargetUnit = EventUnit();
    lv_ownerofSynergySourceUnit = UnitGetOwner(EventUnitDamageSourceUnit());
    lv_classofSynergySourceUnit = UnitGetType(lv_localSourceUnit);
    lv_damage = EventUnitDamageAmount();
    lv_synergyTextTag = c_textTagNone;
    lv_synergyTextHeightOffset = 1.5;
    lv_damageFactor = 0.2;
    lv_synergyLevel = gv_talentLevel[9][UnitGetOwner(EventUnitDamageSourceUnit())];

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_localTargetUnit) == true))) {
            return false;
        }

        if (!(((lv_ownerofSynergySourceUnit >= gv_indexBaseValue) && (lv_ownerofSynergySourceUnit <= gv_numberofPlayers)))) {
            return false;
        }

        if (!((gv_talentLevel[9][UnitGetOwner(EventUnitDamageSourceUnit())] > 0))) {
            return false;
        }

        if (!(((lv_classofSynergySourceUnit == "Engineer") || (lv_classofSynergySourceUnit == "X1GuardianLevel1") || (lv_classofSynergySourceUnit == "X1GuardianLevel2") || (lv_classofSynergySourceUnit == "X1GuardianLevel3")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((((gv_synergyTargetUnit[lv_ownerofSynergySourceUnit] == lv_localTargetUnit) && (lv_classofSynergySourceUnit == "Engineer") && (TimerGetRemaining(gv_synergyTimerGuardian[lv_ownerofSynergySourceUnit]) > 0.0)) || ((gv_synergyTargetUnit[lv_ownerofSynergySourceUnit] == lv_localTargetUnit) && (TimerGetRemaining(gv_synergyTimerEngineer[lv_ownerofSynergySourceUnit]) > 0.0) && ((lv_classofSynergySourceUnit == "X1GuardianLevel1") || (lv_classofSynergySourceUnit == "X1GuardianLevel2") || (lv_classofSynergySourceUnit == "X1GuardianLevel3"))))) {
        lv_synergyDamage = (lv_damage * (lv_damageFactor * IntToFixed(lv_synergyLevel)));
        CatalogFieldValueSet(c_gameCatalogEffect, "SynergyDamage", "Amount", lv_ownerofSynergySourceUnit, FixedToString(lv_synergyDamage, c_fixedPrecisionAny));
        PlayerCreateEffectUnit(lv_ownerofSynergySourceUnit, "SynergyDamage", lv_localTargetUnit);
        Wait(1.0, c_timeGame);
        TextTagCreate(((StringExternal("Param/Value/D7D37A75") + FixedToText(lv_synergyDamage, 0)) + StringExternal("Param/Value/1FBBBF5D")), 20, UnitGetPosition(lv_localSourceUnit), 1.5, true, true, PlayerGroupActive());
        lv_synergyTextTag = TextTagLastCreated();
        TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(9.80, 9.80, 100.00));
        TextTagAttachToUnit(lv_synergyTextTag, lv_localSourceUnit, lv_synergyTextHeightOffset);
        autoE77BADAD_n = 10;
        for (autoE77BADAD_i = 1; autoE77BADAD_i <= autoE77BADAD_n; autoE77BADAD_i += 1) {
            Wait(0.1, c_timeGame);
            lv_synergyTextHeightOffset += 0.1;
            TextTagAttachToUnit(lv_synergyTextTag, lv_localSourceUnit, lv_synergyTextHeightOffset);
        }
        TextTagDestroy(lv_synergyTextTag);
    }

    gv_synergyTargetUnit[lv_ownerofSynergySourceUnit] = lv_localTargetUnit;
    if ((lv_classofSynergySourceUnit == "Engineer")) {
        TimerStart(gv_synergyTimerEngineer[lv_ownerofSynergySourceUnit], 2.0, false, c_timeGame);
    }
    else {
        TimerStart(gv_synergyTimerGuardian[lv_ownerofSynergySourceUnit], 2.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Synergy_Init () {
    gt_Synergy = TriggerCreate("gt_Synergy_Func");
    TriggerEnable(gt_Synergy, false);
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "P38ScytheGuassPistol");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "GuassRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "XM814HeavyMachineGun");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "C10CanisterRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "Shotgun");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "LaserRifleDamage");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "Crowbar");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "CombatKnifeDamage");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "InfernalFlameThrower");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel2");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "FlameThrowerLevel3");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "M5PulseRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "ScoutGround");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "UA420AssaultRifle");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "L3GrenadeExplosion");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "MP9A2SubMachineGun");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "BarrettM112");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "StingerMK3Damage");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "DiamondbackBeam");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "X1EvisceratorBeamLevel2");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "X1EvisceratorBeamLevel3");
    TriggerAddEventUnitDamaged(gt_Synergy, null, c_unitDamageTypeAny, c_unitDamageEither, "ThermalLancesMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: X-1 Guardian
//--------------------------------------------------------------------------------------------------
bool gt_X1Guardian_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_x1GuardianUnit;
    int lv_engineerOwner;

    // Variable Initialization
    lv_x1GuardianUnit = EventUnitCreatedUnit();
    lv_engineerOwner = UnitGetOwner(lv_x1GuardianUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(gv_x1Guardian[lv_engineerOwner]);
    Wait(0.2, c_timeGame);
    gv_x1Guardian[lv_engineerOwner] = lv_x1GuardianUnit;
    if ((gv_fPS[lv_engineerOwner] == true)) {
        UnitSetState(lv_x1GuardianUnit, c_unitStateStatusBar, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_X1Guardian_Init () {
    gt_X1Guardian = TriggerCreate("gt_X1Guardian_Func");
    TriggerEnable(gt_X1Guardian, false);
    TriggerAddEventUnitCreated(gt_X1Guardian, null, "X1Guardian", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tactical Nuke
//--------------------------------------------------------------------------------------------------
bool gt_TacticalNuke_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_revealRadius;
    fixed lv_revealDuration;
    point lv_tacticalNukeTargetPoint;

    // Variable Initialization
    lv_revealRadius = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "NukeDamage", "AreaArray[" + IntToString(0) + "].Radius", c_playerAny);
    lv_revealDuration = 12.0;
    lv_tacticalNukeTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        VisRevealArea(PlayerGroupLoopCurrent(), RegionCircle(lv_tacticalNukeTargetPoint, lv_revealRadius), lv_revealDuration, false);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TacticalNuke_Init () {
    gt_TacticalNuke = TriggerCreate("gt_TacticalNuke_Func");
    TriggerAddEventPlayerEffectUsed(gt_TacticalNuke, c_playerAny, "NukePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ravaging Phantom
//--------------------------------------------------------------------------------------------------
bool gt_RavagingPhantom_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "Egg"))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) == 13) || (UnitGetOwner(EventUnit()) == 14)))) {
            return false;
        }

        if (!((((EventUnitDamageEffect() != "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel1") == true) && (RandomInt(1, 100) <= 40)) || ((EventUnitDamageEffect() != "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel2") == true) && (RandomInt(1, 100) <= 80)) || ((EventUnitDamageEffect() == "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel1") == true) && (RandomInt(1, 100) <= 25)) || ((EventUnitDamageEffect() == "PsionicTempestDamage") && (UnitHasBehavior(libNtve_gf_KillingUnit(), "RavagingPhantomLevel2") == true) && (RandomInt(1, 100) <= 50))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreate(1, UnitGetType(EventUnit()), c_unitCreateIgnorePlacement, UnitGetOwner(libNtve_gf_KillingUnit()), UnitGetPosition(EventUnit()), UnitGetFacing(EventUnit()));
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity 0.700000");
    UnitBehaviorAdd(UnitLastCreated(), "PhantomSuicide", UnitLastCreated(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RavagingPhantom_Init () {
    gt_RavagingPhantom = TriggerCreate("gt_RavagingPhantom_Func");
    TriggerEnable(gt_RavagingPhantom, false);
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageLevel1Damage");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageLevel2Damage");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageLevel3Damage");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageDamageExtraStunLevel1");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageDamageExtraStunLevel2");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "MindRavageDamageExtraStunLevel3");
    TriggerAddEventUnitDamaged(gt_RavagingPhantom, null, c_unitDamageTypeAny, c_unitDamageFatal, "PsionicTempestDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Inception
//--------------------------------------------------------------------------------------------------
bool gt_Inception_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiOpsHero;

    // Variable Initialization
    lv_psiOpsHero = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    GameSetLighting("NOTDInception", 1.0);
    gv_cinematicMode = true;
    gv_inceptionOn = true;
    gv_hexCycle = 0.8;
    Wait(15.0, c_timeGame);
    if ((UnitIsAlive(gv_boss) == true) && (UnitGetType(gv_boss) == "Apoptosis")) {
        GameSetLighting("NOTDApoptosisLighting", 1.0);
    }
    else if (true) {
        GameSetLighting(gv_defaultLighting, 1.0);
    }
    Wait(1.0, c_timeGame);
    gv_hexCycle = 0.5;
    gv_cinematicMode = false;
    gv_inceptionOn = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Inception_Init () {
    gt_Inception = TriggerCreate("gt_Inception_Func");
    TriggerEnable(gt_Inception, false);
    TriggerAddEventUnitAbility(gt_Inception, null, AbilityCommand("Inception", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind-Link Share Damage
//--------------------------------------------------------------------------------------------------
bool gt_MindLinkShareDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_attackedMarine;
    int lv_mindLinkedGroupPsiOpsOwner;
    int lv_unitCountofMindLinkedGroup;
    int lv_mindLinkLevel;
    fixed lv_correctDamage;

    // Variable Initialization
    lv_attackedMarine = EventUnit();
    lv_correctDamage = EventUnitDamageAmount();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageEffect() != "MindLinkDamage"))) {
            return false;
        }

        if (!((UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent) <= 0.5))) {
            return false;
        }

        if (!(((UnitHasBehavior(lv_attackedMarine, "MindLinkLevel1") == true) || (UnitHasBehavior(lv_attackedMarine, "MindLinkLevel2") == true) || (UnitHasBehavior(lv_attackedMarine, "MindLinkLevel3") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((UnitGroupHasUnit(gv_mindLinkedGroup[IntLoopCurrent()], lv_attackedMarine) == true)) {
            lv_mindLinkedGroupPsiOpsOwner = IntLoopCurrent();
            break;
        }

    }
    IntLoopEnd();
    lv_unitCountofMindLinkedGroup = UnitGroupCount(gv_mindLinkedGroup[lv_mindLinkedGroupPsiOpsOwner], c_unitCountAlive);
    lv_correctDamage /= IntToFixed(lv_unitCountofMindLinkedGroup);
    UnitSetPropertyFixed(lv_attackedMarine, c_unitPropLife, (UnitGetPropertyFixed(lv_attackedMarine, c_unitPropLife, c_unitPropCurrent) + EventUnitDamageAmount()));
    UnitGroupLoopBegin(gv_mindLinkedGroup[lv_mindLinkedGroupPsiOpsOwner]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitDamage(EventUnitDamageSourceUnit(), "MindLinkDamage", UnitGroupLoopCurrent(), lv_correctDamage);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MindLinkShareDamage_Init () {
    gt_MindLinkShareDamage = TriggerCreate("gt_MindLinkShareDamage_Func");
    TriggerEnable(gt_MindLinkShareDamage, false);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[1]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[2]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[3]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[4]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[5]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[6]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[7]"), c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(gt_MindLinkShareDamage, UnitRefFromVariable("gv_marineHero[8]"), c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mind-Link Share Vision
//--------------------------------------------------------------------------------------------------
bool gt_MindLinkShareVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_psiOpsHero;
    int lv_psiOpsOwner;
    int lv_mindLinkLevel;
    string lv_mindLinkBehavior;
    int lv_numberofMindLinkedUnits;
    playergroup lv_mindLinkedPlayers;

    // Variable Initialization
    lv_psiOpsHero = EventUnit();
    lv_psiOpsOwner = UnitGetOwner(EventUnit());
    lv_mindLinkLevel = gv_talentLevel[7][lv_psiOpsOwner];
    lv_mindLinkedPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_mindLinkLevel == 1)) {
        lv_mindLinkBehavior = "MindLinkLevel1";
    }
    else if ((lv_mindLinkLevel == 2)) {
        lv_mindLinkBehavior = "MindLinkLevel2";
    }
    else if ((lv_mindLinkLevel == 3)) {
        lv_mindLinkBehavior = "MindLinkLevel3";
    }
    UnitGroupAdd(gv_mindLinkedGroup[lv_psiOpsOwner], lv_psiOpsHero);
    UnitGroupAdd(gv_mindLinkedGroup[lv_psiOpsOwner], EventUnitTargetUnit());
    lv_numberofMindLinkedUnits = UnitGroupCount(gv_mindLinkedGroup[lv_psiOpsOwner], c_unitCountAlive);
    if ((lv_numberofMindLinkedUnits > (lv_mindLinkLevel + 1))) {
        UnitGroupLoopBegin(gv_mindLinkedGroup[lv_psiOpsOwner]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGroupLoopCurrent() != lv_psiOpsHero)) {
                UnitGroupRemove(gv_mindLinkedGroup[lv_psiOpsOwner], UnitGroupLoopCurrent());
                UnitBehaviorRemove(UnitGroupLoopCurrent(), lv_mindLinkBehavior, 1);
                break;
            }

        }
        UnitGroupLoopEnd();
    }

    libNtve_gf_SetPlayerGroupAlliance(gv_activePlayers, libNtve_ge_AllianceSetting_Ally);
    UnitGroupLoopBegin(gv_mindLinkedGroup[lv_psiOpsOwner]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerGroupAdd(lv_mindLinkedPlayers, UnitGetOwner(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    libNtve_gf_SetPlayerGroupAlliance(lv_mindLinkedPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    gf_RestoreLeaverControl();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MindLinkShareVision_Init () {
    gt_MindLinkShareVision = TriggerCreate("gt_MindLinkShareVision_Func");
    TriggerEnable(gt_MindLinkShareVision, false);
    TriggerAddEventUnitAbility(gt_MindLinkShareVision, null, AbilityCommand("MindLink", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cancel Mind-Link
//--------------------------------------------------------------------------------------------------
bool gt_CancelMindLink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofPsiOps;
    playergroup lv_mindLinkPlayers;

    // Variable Initialization
    lv_ownerofPsiOps = EventPlayer();
    lv_mindLinkPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(gv_mindLinkedGroup[lv_ownerofPsiOps]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel1", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel2", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "MindLinkLevel3", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(gv_mindLinkedGroup[lv_ownerofPsiOps]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerGroupAdd(lv_mindLinkPlayers, UnitGetOwner(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    if ((UnitCount("FieldNexus", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0)) {
        libNtve_gf_SetPlayerGroupAlliance(lv_mindLinkPlayers, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    }
    else {
        libNtve_gf_SetPlayerGroupAlliance(lv_mindLinkPlayers, libNtve_ge_AllianceSetting_Ally);
    }
    UnitGroupClear(gv_mindLinkedGroup[lv_ownerofPsiOps]);
    gf_RestoreLeaverControl();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_CancelMindLink_Init () {
    gt_CancelMindLink = TriggerCreate("gt_CancelMindLink_Func");
    TriggerEnable(gt_CancelMindLink, false);
    TriggerAddEventUnitAbility(gt_CancelMindLink, null, AbilityCommand("MindLinkCancel", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hammer of the Gods - Cam Shake
//--------------------------------------------------------------------------------------------------
bool gt_HammeroftheGodsCamShake_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "BlackDog"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((PlayerType(IntLoopCurrent()) == c_playerTypeUser) && (PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_marineHero[IntLoopCurrent()])) <= 3.0)) || ((UnitIsAlive(gv_playerPet[IntLoopCurrent()]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerPet[IntLoopCurrent()])) <= 3.0)))) {
            CameraShakeStart(IntLoopCurrent(), c_cameraPositionBoth, c_cameraDirectionXZ, 0.02, 1.0, 100.0, 0.1);
        }
        else if ((PlayerType(IntLoopCurrent()) == c_playerTypeUser) && (PlayerStatus(IntLoopCurrent()) == c_playerStatusActive) && (((UnitIsAlive(gv_marineHero[IntLoopCurrent()]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_marineHero[IntLoopCurrent()])) <= 5.0)) || ((UnitIsAlive(gv_playerPet[IntLoopCurrent()]) == true) && (DistanceBetweenPoints(UnitGetPosition(EventUnit()), UnitGetPosition(gv_playerPet[IntLoopCurrent()])) <= 5.0)))) {
            CameraShakeStart(IntLoopCurrent(), c_cameraPositionBoth, c_cameraDirectionXZ, 0.005, 1.0, 100.0, 0.1);
        }
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HammeroftheGodsCamShake_Init () {
    gt_HammeroftheGodsCamShake = TriggerCreate("gt_HammeroftheGodsCamShake_Func");
    TriggerEnable(gt_HammeroftheGodsCamShake, false);
    TriggerAddEventUnitStartedAttack(gt_HammeroftheGodsCamShake, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AMRounds
//--------------------------------------------------------------------------------------------------
bool gt_AMRounds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localTurret;

    // Variable Initialization
    lv_localTurret = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(lv_localTurret, "SwitchtoHEFRounds", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_AMRounds_Init () {
    gt_AMRounds = TriggerCreate("gt_AMRounds_Func");
    TriggerEnable(gt_AMRounds, false);
    TriggerAddEventUnitAbility(gt_AMRounds, null, AbilityCommand("SwitchtoAMRounds", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mini TK Penalty
//--------------------------------------------------------------------------------------------------
bool gt_MiniTKPenalty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = libNtve_gf_KillingPlayer();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "MobileInfantryFlamethrower") || (UnitGetType(EventUnit()) == "MobileInfantryMarksman") || (UnitGetType(EventUnit()) == "MobileInfantryRifleman")))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != libNtve_gf_KillingPlayer()))) {
            return false;
        }

        if (!(((libNtve_gf_KillingPlayer() >= gv_indexBaseValue) && (libNtve_gf_KillingPlayer() <= gv_numberofPlayers)))) {
            return false;
        }

        if (!(((UnitGetOwner(EventUnit()) >= gv_indexBaseValue) && (UnitGetOwner(EventUnit()) <= gv_numberofPlayers)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gv_miniDeathsFriendly += 1;
    if ((gv_miniDeathsFriendly < 4)) {
        gv_playerCredits[lv_index] -= 10;
        gv_playerXP[lv_index] -= 10;
        gv_playerRating[lv_index] -= 10;
    }
    else {
        gv_playerCredits[lv_index] -= 100;
        gv_playerXP[lv_index] -= 100;
        gv_playerRating[lv_index] -= 100;
    }
    gf_Save(libNtve_gf_KillingPlayer(), gv_bankSize);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MiniTKPenalty_Init () {
    gt_MiniTKPenalty = TriggerCreate("gt_MiniTKPenalty_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Modify Shell Limit
//--------------------------------------------------------------------------------------------------
bool gt_ModifyShellLimit_Func (bool testConds, bool runActions) {
    int autoCB15F0D9_ae;
    int autoCB15F0D9_ai;
    int autoDF19124A_ae;
    int autoDF19124A_ai;

    // Variable Declarations
    int lv_usedDialogItem;
    int lv_usedDialog;
    int lv_currentAbilityCost;
    int lv_forwardObserverOwner;
    int lv_clickingPlayer;
    int lv_shellType;
    bool lv_decre;
    bool lv_incre;
    int lv_player;

    // Variable Initialization
    lv_usedDialogItem = EventDialogControl();
    lv_usedDialog = DialogControlGetDialog(lv_usedDialogItem);
    lv_clickingPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialog == gv_shellDialog[1]) || (lv_usedDialog == gv_shellDialog[2]) || (lv_usedDialog == gv_shellDialog[3]) || (lv_usedDialog == gv_shellDialog[4]) || (lv_usedDialog == gv_shellDialog[5]) || (lv_usedDialog == gv_shellDialog[6]) || (lv_usedDialog == gv_shellDialog[7]) || (lv_usedDialog == gv_shellDialog[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_usedDialog != gv_shellDialog[lv_forwardObserverOwner])) {
        lv_forwardObserverOwner += 1;
    }
    autoCB15F0D9_ae = 3;
    autoCB15F0D9_ai = 1;
    lv_shellType = 1;
    for ( ; ( (autoCB15F0D9_ai >= 0 && lv_shellType <= autoCB15F0D9_ae) || (autoCB15F0D9_ai <= 0 && lv_shellType >= autoCB15F0D9_ae) ) ; lv_shellType += autoCB15F0D9_ai ) {
        if ((EventDialogControl() == gv_shellIncre[lv_shellType][lv_forwardObserverOwner])) {
            lv_incre = true;
            break;
        }

    }
    if ((lv_incre == false)) {
        lv_decre = true;
        autoDF19124A_ae = 3;
        autoDF19124A_ai = 1;
        lv_shellType = 1;
        for ( ; ( (autoDF19124A_ai >= 0 && lv_shellType <= autoDF19124A_ae) || (autoDF19124A_ai <= 0 && lv_shellType >= autoDF19124A_ae) ) ; lv_shellType += autoDF19124A_ai ) {
            if ((EventDialogControl() == gv_shellDecre[lv_shellType][lv_forwardObserverOwner])) {
                break;
            }

        }
    }

    lv_player = lv_forwardObserverOwner;
    if (((lv_player == lv_clickingPlayer) || ((lv_player != lv_clickingPlayer) && ((PlayerGetAlliance(lv_player, c_allianceIdControl, lv_clickingPlayer) == true))))) {
        lv_currentAbilityCost = CatalogFieldValueGetAsInt(c_gameCatalogAbil, UserDataGetGameLink("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", lv_shellType), "Ability", 1), "Cost[" + IntToString(0) + "].Charge.CountUse", lv_player);
        if (((lv_incre == true) && (lv_currentAbilityCost < 20))) {
            CatalogFieldValueSet(c_gameCatalogAbil, UserDataGetGameLink("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", lv_shellType), "Ability", 1), "Cost[" + IntToString(0) + "].Charge.CountUse", lv_player, IntToString((lv_currentAbilityCost + 1)));
        }
        else if (((lv_decre == true) && (lv_currentAbilityCost > 1))) {
            CatalogFieldValueSet(c_gameCatalogAbil, UserDataGetGameLink("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", lv_shellType), "Ability", 1), "Cost[" + IntToString(0) + "].Charge.CountUse", lv_player, IntToString((lv_currentAbilityCost - 1)));
        }
        libNtve_gf_SetDialogItemText(gv_shellCounter[lv_shellType][lv_forwardObserverOwner], IntToText(CatalogFieldValueGetAsInt(c_gameCatalogAbil, UserDataGetGameLink("ForwardObserverShellDialogData", UserDataInstance("ForwardObserverShellDialogData", lv_shellType), "Ability", 1), "Cost[" + IntToString(0) + "].Charge.CountUse", lv_player)), PlayerGroupSingle(lv_player));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ModifyShellLimit_Init () {
    gt_ModifyShellLimit = TriggerCreate("gt_ModifyShellLimit_Func");
    TriggerEnable(gt_ModifyShellLimit, false);
    TriggerAddEventDialogControl(gt_ModifyShellLimit, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fire Mission
//--------------------------------------------------------------------------------------------------
bool gt_FireMission_Func (bool testConds, bool runActions) {
    int auto428C50E9_n;
    int auto428C50E9_i;

    // Variable Declarations
    int lv_forwardObserverOwner;
    int lv_fireMissionLevel;
    point lv_randomPoint;
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;
    int lv_randomInteger;
    int lv_satelliteLinkLevel;
    unitgroup lv_unitsinRegion;

    // Variable Initialization
    lv_forwardObserverOwner = UnitGetOwner(EventUnit());
    lv_fireMissionLevel = gv_talentLevel[1][lv_forwardObserverOwner];
    lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "FireMission", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));
    lv_satelliteLinkLevel = gv_talentLevel[4][lv_forwardObserverOwner];
    lv_unitsinRegion = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArtilleryStart(1, ColorWithAlpha(100.00, 100.00, 0.00, 0.00), EventUnitTargetPoint(), EventUnit(), lv_forwardObserverOwner);
    auto428C50E9_n = lv_shellLimit;
    for (auto428C50E9_i = 1; auto428C50E9_i <= auto428C50E9_n; auto428C50E9_i += 1) {
    }
    IntLoopBegin(1, lv_shellLimit);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        lv_randomInteger = RandomInt(1, 3);
        lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
        UnitCreateEffectPoint(EventUnit(), UserDataGetGameLink("FireMissionDamageEffects", UserDataInstance("FireMissionDamageEffects", lv_fireMissionLevel), "Damage Effects", lv_randomInteger), lv_randomPoint);
        gf_ArtilleryCamaraShake(lv_randomPoint);
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_FireMission_Init () {
    gt_FireMission = TriggerCreate("gt_FireMission_Func");
    TriggerAddEventUnitAbility(gt_FireMission, null, AbilityCommand("FireMission", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shockwave Barrage
//--------------------------------------------------------------------------------------------------
bool gt_ShockwaveBarrage_Func (bool testConds, bool runActions) {
    int auto6DA45AD8_n;
    int auto6DA45AD8_i;

    // Variable Declarations
    int lv_forwardObserverOwner;
    int lv_shockwaveBarrageLevel;
    point lv_randomPoint;
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;
    int lv_randomInteger;

    // Variable Initialization
    lv_forwardObserverOwner = UnitGetOwner(EventUnit());
    lv_shockwaveBarrageLevel = gv_talentLevel[3][lv_forwardObserverOwner];
    lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ShockwaveBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArtilleryStart(2, ColorWithAlpha(12.55, 56.08, 100.00, 0.00), EventUnitTargetPoint(), EventUnit(), lv_forwardObserverOwner);
    auto6DA45AD8_n = lv_shellLimit;
    for (auto6DA45AD8_i = 1; auto6DA45AD8_i <= auto6DA45AD8_n; auto6DA45AD8_i += 1) {
        lv_randomInteger = RandomInt(1, 2);
        lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
        UnitCreateEffectPoint(EventUnit(), UserDataGetGameLink("ShockwaveBarrageEffects", UserDataInstance("ShockwaveBarrageEffects", lv_shockwaveBarrageLevel), "Damage Effects", lv_randomInteger), lv_randomPoint);
        gf_ArtilleryCamaraShake(lv_randomPoint);
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ShockwaveBarrage_Init () {
    gt_ShockwaveBarrage = TriggerCreate("gt_ShockwaveBarrage_Func");
    TriggerAddEventUnitAbility(gt_ShockwaveBarrage, null, AbilityCommand("ShockwaveBarrage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Napalm Barrage
//--------------------------------------------------------------------------------------------------
bool gt_NapalmBarrage_Func (bool testConds, bool runActions) {
    int auto89C324DD_n;
    int auto89C324DD_i;

    // Variable Declarations
    int lv_forwardObserverOwner;
    int lv_napalmBarrageLevel;
    point lv_randomPoint;
    int lv_shellLimit;
    fixed lv_barrageTimeInterval;

    // Variable Initialization
    lv_forwardObserverOwner = UnitGetOwner(EventUnit());
    lv_napalmBarrageLevel = gv_talentLevel[5][lv_forwardObserverOwner];
    lv_shellLimit = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NapalmBarrage", "Cost[" + IntToString(0) + "].Charge.CountUse", lv_forwardObserverOwner);
    lv_barrageTimeInterval = (3.0 / IntToFixed(lv_shellLimit));

    // Actions
    if (!runActions) {
        return true;
    }

    gf_ArtilleryStart(3, ColorWithAlpha(96.86, 31.37, 3.53, 0.00), EventUnitTargetPoint(), EventUnit(), lv_forwardObserverOwner);
    auto89C324DD_n = lv_shellLimit;
    for (auto89C324DD_i = 1; auto89C324DD_i <= auto89C324DD_n; auto89C324DD_i += 1) {
        lv_randomPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 5.0));
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "NapalmFire", 0, lv_forwardObserverOwner, lv_randomPoint);
        gf_ArtilleryCamaraShake(lv_randomPoint);
        Wait(lv_barrageTimeInterval, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_NapalmBarrage_Init () {
    gt_NapalmBarrage = TriggerCreate("gt_NapalmBarrage_Func");
    TriggerAddEventUnitAbility(gt_NapalmBarrage, null, AbilityCommand("NapalmBarrage", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Mobile Infantry
//--------------------------------------------------------------------------------------------------
bool gt_MobileInfantry_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forwardObserverOwner;

    // Variable Initialization
    lv_forwardObserverOwner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "MobileInfantryRifleman"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, ((StringExternal("Param/Value/F6D31C38") + IntToText(FixedToInt(UnitAbilityChargeInfo(EventUnit(), AbilityCommand("MobileInfantry", 0), c_unitAbilChargeCountLeft)))) + StringExternal("Param/Value/6E980D4F")));
    UnitGroupAdd(gv_mobileInfantryGroup[lv_forwardObserverOwner], EventUnitCreatedUnit());
    UnitFlashSelection(EventUnitCreatedUnit(), 1.5);
    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventUnitCreatedUnit()), 1.3, UnitGetPosition(EventUnit()))), c_orderQueueReplace);
    TriggerAddEventUnitDied(gt_MiniTKPenalty, UnitRefFromUnit(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_MobileInfantry_Init () {
    gt_MobileInfantry = TriggerCreate("gt_MobileInfantry_Func");
    TriggerAddEventUnitCreated(gt_MobileInfantry, null, "MobileInfantry", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surveillance Flares
//--------------------------------------------------------------------------------------------------
bool gt_SurveillanceFlares_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_forwardObserverOwner;
    region lv_targetRegion;
    point lv_targetPoint;

    // Variable Initialization
    lv_forwardObserverOwner = UnitGetOwner(EventUnit());
    lv_targetRegion = RegionCircle(EventUnitTargetPoint(), 8.0);
    lv_targetPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 8.0));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior(EventUnit(), "BattlefieldIntelligence") == true)) {
        lv_targetPoint = RegionRandomPoint(RegionCircle(EventUnitTargetPoint(), 4.0));
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "SurveillanceFlare", c_unitCreateIgnorePlacement, lv_forwardObserverOwner, lv_targetPoint);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_ShareVisionofUnit(UnitLastCreated(), true, IntLoopCurrent());
    }
    IntLoopEnd();
    Wait(0.4, c_timeGame);
    libNtve_gf_ShowHideUnit(UnitLastCreated(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_SurveillanceFlares_Init () {
    gt_SurveillanceFlares = TriggerCreate("gt_SurveillanceFlares_Func");
    TriggerEnable(gt_SurveillanceFlares, false);
    TriggerAddEventUnitAbility(gt_SurveillanceFlares, null, AbilityCommand("SurveillanceFlare", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Buddy
//--------------------------------------------------------------------------------------------------
bool gt_GunshipBuddy_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_enteredString;
    int lv_gunshipBuddy;

    // Variable Initialization
    lv_enteredString = EventChatMessage(false);
    lv_gunshipBuddy = StringToInt(StringSub(lv_enteredString, 9, 9));

    // Conditions
    if (testConds) {
        if (!(((lv_gunshipBuddy >= gv_indexBaseValue) && (lv_gunshipBuddy <= gv_numberofPlayers)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(gv_marineHero[EventPlayer()]) == true) && (UnitIsAlive(gv_marineHero[lv_gunshipBuddy]) == true) && (UnitGetType(gv_marineHero[EventPlayer()]) == "ForwardObserver")) {
        gv_gunshipBuddy[EventPlayer()] = lv_gunshipBuddy;
        UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaDebug, (StringExternal("Param/Value/ECB0A6AF") + (PlayerName(UnitGetOwner(gv_marineHero[lv_gunshipBuddy])) + StringExternal("Param/Value/53C88C67"))));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipBuddy_Init () {
    gt_GunshipBuddy = TriggerCreate("gt_GunshipBuddy_Func");
    TriggerAddEventChatMessage(gt_GunshipBuddy, c_playerAny, "-gbuddy", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Selection
//--------------------------------------------------------------------------------------------------
bool gt_GunshipSelection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "Hyperion"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }

        if (!((gv_gunshipActive[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitClearSelection(EventPlayer());
    UnitSelect(EventUnit(), EventPlayer(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipSelection_Init () {
    gt_GunshipSelection = TriggerCreate("gt_GunshipSelection_Func");
    TriggerEnable(gt_GunshipSelection, false);
    TriggerAddEventUnitSelected(gt_GunshipSelection, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Support
//--------------------------------------------------------------------------------------------------
bool gt_GunshipSupport_Func (bool testConds, bool runActions) {
    int autoCA2160B0_n;
    int autoCA2160B0_i;

    // Variable Declarations
    unit lv_forwardObserverHero;
    int lv_forwardObserverOwner;
    bool lv_gunshipModeOff;
    fixed lv_gunshipRotation;
    fixed lv_gunshipAngleofAttack;
    int lv_transperancyDialog;
    int lv_gunshipCycle;
    point lv_gunshipUnitPoint;
    fixed lv_gunshipAngleHorizontal;
    fixed lv_gunshipAngleVertical;
    fixed lv_heightDifference;
    fixed lv_displacementDifference;
    fixed lv_distanceDifference;
    int lv_angleChangeCycle;
    bool lv_angleChange;

    // Variable Initialization
    lv_forwardObserverHero = EventUnit();
    lv_forwardObserverOwner = UnitGetOwner(lv_forwardObserverHero);
    lv_gunshipModeOff = true;
    lv_gunshipRotation = RandomFixed(-180.0, 180.0);
    lv_gunshipAngleofAttack = 37.0;
    lv_transperancyDialog = c_invalidDialogId;
    lv_gunshipUnitPoint = PointWithOffsetPolar(UnitGetPosition(lv_forwardObserverHero), 20.0, lv_gunshipRotation);

    // Actions
    if (!runActions) {
        return true;
    }

    gv_gunshipFollowedUnit[lv_forwardObserverOwner] = lv_forwardObserverHero;
    DialogCreate(0, 0, c_anchorCenter, 0, 0, true);
    DialogSetFullscreen(DialogLastCreated(), true);
    lv_transperancyDialog = DialogLastCreated();
    DialogSetImage(lv_transperancyDialog, "Assets\\Textures\\buildingplane_green1.dds");
    DialogSetTransparency(DialogLastCreated(), 59.0);
    DialogSetVisible(DialogLastCreated(), PlayerGroupSingle(lv_forwardObserverOwner), true);
    if ((gv_gunshipBuddy[lv_forwardObserverOwner] > 0) && (gv_marineHero[gv_gunshipBuddy[lv_forwardObserverOwner]] != lv_forwardObserverHero)) {
        gv_gunshipFollowedUnit[lv_forwardObserverOwner] = gv_marineHero[gv_gunshipBuddy[lv_forwardObserverOwner]];
    }
    else if ((gv_gunshipBuddy[lv_forwardObserverOwner] > 0) && (gv_marineHero[gv_gunshipBuddy[lv_forwardObserverOwner]] == lv_forwardObserverHero)) {
    }
    else if (true) {
        UnitGroupLoopBegin(gv_marines);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if (((UnitGroupLoopCurrent() != lv_forwardObserverHero) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_forwardObserverHero)) < 5.0) && (PlayerStatus(UnitGetOwner(UnitGroupLoopCurrent())) == c_playerStatusActive))) {
                gv_gunshipFollowedUnit[lv_forwardObserverOwner] = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
    }
    libNtve_gf_StoreUnitSelection(lv_forwardObserverOwner, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    UnitGroupLoopBegin(gv_mobileInfantryGroup[lv_forwardObserverOwner]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, false);
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(gv_marineSquad);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        gf_ShowHideMarineDialog(false, lv_forwardObserverOwner, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    libNtve_gf_HideGameUI(false, PlayerGroupSingle(lv_forwardObserverOwner));
    DialogControlSetVisible(gv_teamUI, PlayerGroupSingle(lv_forwardObserverOwner), false);
    gv_gunshipCinematicActive[lv_forwardObserverOwner] = true;
    gv_gameUIHidden[lv_forwardObserverOwner] = true;
    UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, StringExternal("Param/Value/EDD297E3"));
    TriggerEnable(gt_GunshipOtherKeys, true);
    TriggerEnable(gt_GunshipImpactQuake, true);
    Wait(0.5, c_timeGame);
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDebug, StringExternal("Param/Value/F96D5DCB"));
    CameraSetData(PlayerGroupSingle(lv_forwardObserverOwner), "GunshipCamara");
    CameraSetValue(lv_forwardObserverOwner, c_cameraValueFieldOfView, 75.0, 3.5, -1, 0);
    CameraLockInput(lv_forwardObserverOwner, true);
    if ((lv_gunshipRotation <= -90.0)) {
        UnitCreate(1, "Hyperion", 0, lv_forwardObserverOwner, Point(0.0, 0.0), (lv_gunshipRotation + 270.0));
    }
    else {
        UnitCreate(1, "Hyperion", 0, lv_forwardObserverOwner, Point(0.0, 0.0), (lv_gunshipRotation - 90.0));
    }
    UnitSetPosition(UnitLastCreated(), lv_gunshipUnitPoint, false);
    gv_gunshipUnit[lv_forwardObserverOwner] = UnitLastCreated();
    UnitSelect(UnitLastCreated(), lv_forwardObserverOwner, true);
    TriggerEnable(gt_GunshipSelection, true);
    PingCreate(PlayerGroupActive(), "PingObjective", UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]), ColorWithAlpha(100.00, 100.00, 100.00, 49.02), 60.0);
    PingSetUnit(PingLastCreated(), gv_gunshipUnit[lv_forwardObserverOwner]);
    Wait(0.5, c_timeGame);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.05, 2.0, 100.0, 2.5);
    }
    IntLoopEnd();
    autoCA2160B0_n = 120;
    for (autoCA2160B0_i = 1; autoCA2160B0_i <= autoCA2160B0_n; autoCA2160B0_i += 1) {
        if ((lv_gunshipCycle == 4)) {
            gv_gunshipActive[lv_forwardObserverOwner] = true;
        }

        if (((UnitIsAlive(lv_forwardObserverHero) == false) || ((gv_gunshipActive[lv_forwardObserverOwner] == false) && (lv_gunshipCycle > 3)))) {
            UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, StringExternal("Param/Value/7D755BC0"));
            SoundPlay(SoundLink("Raven_AutoTurretReleaseImpact", -1), PlayerGroupAll(), 100.0, 0.0);
            break;
        }

        if ((lv_gunshipCycle == 84)) {
            UIDisplayMessage(PlayerGroupSingle(lv_forwardObserverOwner), c_messageAreaDebug, StringExternal("Param/Value/F080EC08"));
        }

        if ((UnitIsAlive(gv_gunshipFollowedUnit[lv_forwardObserverOwner]) == true) && (DistanceBetweenPoints(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), UnitGetPosition(lv_forwardObserverHero)) > 1.2)) {
            UnitIssueOrder(lv_forwardObserverHero, OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), 1.2))), c_orderQueueReplace);
            UnitIssueOrder(lv_forwardObserverHero, OrderTargetingUnit(AbilityCommand("move", 0), gv_gunshipFollowedUnit[lv_forwardObserverOwner]), c_orderQueueReplace);
            UnitGroupLoopBegin(gv_mobileInfantryGroup[lv_forwardObserverOwner]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("move", 0), gv_gunshipFollowedUnit[lv_forwardObserverOwner]), c_orderQueueReplace);
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionCircle(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), 1.2))), c_orderQueueReplace);
            }
            UnitGroupLoopEnd();
        }

        if ((UnitIsAlive(gv_gunshipFollowedUnit[lv_forwardObserverOwner]) == false) && (UnitIsAlive(gv_marineHero[lv_forwardObserverOwner]) == true)) {
            gv_gunshipFollowedUnit[lv_forwardObserverOwner] = gv_marineHero[lv_forwardObserverOwner];
        }
        else if ((UnitIsAlive(gv_gunshipFollowedUnit[lv_forwardObserverOwner]) == false) && (UnitIsAlive(gv_marineHero[lv_forwardObserverOwner]) == false)) {
            gv_gunshipFollowedUnit[lv_forwardObserverOwner] = UnitGroupUnit(gv_marines, 1);
        }
        if ((ModI(lv_gunshipCycle, 4) == 0)) {
            lv_gunshipRotation += 40.0;
            if ((lv_gunshipRotation > 180.0)) {
                lv_gunshipRotation = (-360.0 + lv_gunshipRotation);
            }

            if ((lv_angleChange == false)) {
                lv_gunshipAngleofAttack += RandomFixed(-10.0, 10.0);
                lv_angleChange = true;
                lv_gunshipAngleofAttack = libNtve_gf_ArithmeticRealClamp(lv_gunshipAngleofAttack, 30.0, 60.0);
            }

            if ((lv_angleChange == true)) {
                lv_angleChangeCycle += 1;
            }

            if ((lv_angleChangeCycle == 6)) {
                lv_angleChangeCycle -= 6;
                lv_angleChange = false;
            }

            lv_gunshipUnitPoint = PointWithOffsetPolar(UnitGetPosition(lv_forwardObserverHero), 20.0, lv_gunshipRotation);
            UnitSetPosition(gv_gunshipUnit[lv_forwardObserverOwner], lv_gunshipUnitPoint, false);
            lv_heightDifference = (34.0 * Sin(lv_gunshipAngleofAttack));
            if ((gv_gunshipCameraSwitch[lv_forwardObserverOwner] == false)) {
                lv_gunshipAngleHorizontal = AngleBetweenPoints(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]), UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]));
                lv_displacementDifference = DistanceBetweenPoints(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]), UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]));
            }
            else {
                lv_gunshipAngleHorizontal = AngleBetweenPoints(UnitGetPosition(gv_gunshipFollowedUnit[lv_forwardObserverOwner]), UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner]));
                lv_displacementDifference = 26.0;
            }
            lv_distanceDifference = SquareRoot(((lv_displacementDifference * lv_displacementDifference) + (lv_heightDifference * lv_heightDifference)));
            lv_gunshipAngleVertical = ATan((lv_heightDifference / lv_displacementDifference));
            lv_gunshipAngleHorizontal += 11.0;
            lv_gunshipAngleVertical -= 10.0;
            lv_distanceDifference += 2.0;
            if ((lv_angleChangeCycle == 1)) {
                CameraSetValue(lv_forwardObserverOwner, c_cameraValuePitch, lv_gunshipAngleVertical, 2.5, -1, 0);
            }

            if ((gv_gunshipZoom[lv_forwardObserverOwner] == true)) {
                lv_distanceDifference /= 2.0;
            }

            CameraSetValue(lv_forwardObserverOwner, c_cameraValueDistance, lv_distanceDifference, 2.5, -1, 0);
            CameraSetValue(lv_forwardObserverOwner, c_cameraValueYaw, lv_gunshipAngleHorizontal, 2.5, -1, 0);
            CameraPan(lv_forwardObserverOwner, UnitGetPosition(lv_forwardObserverHero), 2.5, -1, 0, false);
        }

        if ((UnitIsAlive(gv_gunshipUnit[lv_forwardObserverOwner]) == false)) {
            UnitGroupLoopBegin(gv_marines);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if (((UnitGroupLoopCurrent() != lv_forwardObserverHero) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_forwardObserverHero)) < 5.0))) {
                    gv_gunshipFollowedUnit[lv_forwardObserverOwner] = UnitGroupLoopCurrent();
                }

            }
            UnitGroupLoopEnd();
        }

        lv_gunshipCycle += 1;
        Wait(0.5, c_timeGame);
    }
    gv_gunshipActive[lv_forwardObserverOwner] = false;
    UnitIssueOrder(gv_gunshipUnit[lv_forwardObserverOwner], OrderTargetingPoint(AbilityCommand("AsgardMove", 0), Point((PointGetX(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner])) + (1200.0 * Cos((UnitGetFacing(gv_gunshipUnit[lv_forwardObserverOwner]) + 90.0)))), (PointGetY(UnitGetPosition(gv_gunshipUnit[lv_forwardObserverOwner])) + (1200.0 * Sin((UnitGetFacing(gv_gunshipUnit[lv_forwardObserverOwner]) + 90.0)))))), c_orderQueueReplace);
    UnitBehaviorAddPlayer(gv_gunshipUnit[lv_forwardObserverOwner], "GunshipSupportSpeed", lv_forwardObserverOwner, 1);
    SoundPlay(SoundLink("GunshipSupportLeavingAcknowledge", -1), PlayerGroupSingle(lv_forwardObserverOwner), 100.0, 0.0);
    SoundPlay(SoundLink("GunshipLiftOff", -1), PlayerGroupAll(), 100.0, 0.0);
    IntLoopBegin(1, 8);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        CameraShakeStart(IntLoopCurrent(), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, 3.0);
    }
    IntLoopEnd();
    Wait(3.0, c_timeGame);
    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((gv_gunshipActive[IntLoopCurrent()] == true)) {
            lv_gunshipModeOff = false;
            break;
        }

    }
    IntLoopEnd();
    if ((lv_gunshipModeOff == true)) {
        TriggerEnable(gt_GunshipImpactQuake, false);
        TriggerEnable(gt_GunshipOtherKeys, false);
        TriggerEnable(gt_GunshipSelection, false);
    }

    libNtve_gf_HideGameUI(true, PlayerGroupSingle(lv_forwardObserverOwner));
    UnitGroupLoopBegin(gv_mobileInfantryGroup[lv_forwardObserverOwner]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_MakeUnitUncommandable(UnitGroupLoopCurrent(), false);
        UnitSetState(UnitGroupLoopCurrent(), c_unitStateSelectable, true);
    }
    UnitGroupLoopEnd();
    CameraApplyInfo(lv_forwardObserverOwner, CameraInfoDefault(), 0.0, -1, 10, true);
    CameraSetValue(lv_forwardObserverOwner, c_cameraValueDistance, 32.0, 0.0, -1, 10);
    CameraPan(lv_forwardObserverOwner, UnitGetPosition(gv_marineHero[lv_forwardObserverOwner]), 0.0, -1, 10, false);
    CameraLockInput(lv_forwardObserverOwner, false);
    DialogDestroy(lv_transperancyDialog);
    libNtve_gf_RestoreUnitSelection(lv_forwardObserverOwner);
    gf_ShowHideMarineDialog(true, lv_forwardObserverOwner, lv_forwardObserverOwner);
    Wait(3.0, c_timeGame);
    gv_gunshipCinematicActive[lv_forwardObserverOwner] = false;
    gv_gameUIHidden[lv_forwardObserverOwner] = false;
    UnitRemove(gv_gunshipUnit[lv_forwardObserverOwner]);
    gf_ShowHideMarineDialog(true, lv_forwardObserverOwner, lv_forwardObserverOwner);
    DialogControlSetVisible(gv_teamUI, PlayerGroupSingle(lv_forwardObserverOwner), true);
    CameraLockInput(lv_forwardObserverOwner, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipSupport_Init () {
    gt_GunshipSupport = TriggerCreate("gt_GunshipSupport_Func");
    TriggerEnable(gt_GunshipSupport, false);
    TriggerAddEventUnitAbility(gt_GunshipSupport, null, AbilityCommand("TX179Asgard", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Other Keys
//--------------------------------------------------------------------------------------------------
bool gt_GunshipOtherKeys_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((gv_gunshipActive[lv_index] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventKeyPressed() == c_keyC)) {
        if ((gv_gunshipCameraSwitch[lv_index] == false)) {
            gv_gunshipCameraSwitch[lv_index] = true;
        }
        else {
            gv_gunshipCameraSwitch[lv_index] = false;
        }
    }
    else if ((EventKeyPressed() == c_keyM)) {
        gv_gunshipActive[lv_index] = false;
        UnitBehaviorRemove(gv_marineHero[lv_index], "GunshipMode", 1);
    }
    else if ((EventKeyPressed() == c_keyZ)) {
        if ((gv_gunshipZoom[lv_index] == false)) {
            gv_gunshipZoom[lv_index] = true;
        }
        else {
            gv_gunshipZoom[lv_index] = false;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipOtherKeys_Init () {
    gt_GunshipOtherKeys = TriggerCreate("gt_GunshipOtherKeys_Func");
    TriggerEnable(gt_GunshipOtherKeys, false);
    TriggerAddEventKeyPressed(gt_GunshipOtherKeys, c_playerAny, c_keyC, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_GunshipOtherKeys, c_playerAny, c_keyZ, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
    TriggerAddEventKeyPressed(gt_GunshipOtherKeys, c_playerAny, c_keyM, true, c_keyModifierStateExclude, c_keyModifierStateExclude, c_keyModifierStateExclude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gunship Impact Quake
//--------------------------------------------------------------------------------------------------
bool gt_GunshipImpactQuake_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    fixed[3] lv_duration;

    // Variable Initialization
    for (init_i = 0; init_i <= 2; init_i += 1) {
        lv_duration[init_i] = 0.625;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_duration[1] -= 0.125;
    lv_duration[2] -= 0.25;
    UnitGroupLoopBegin(gv_marines);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 3.0) && (gv_gunshipActive[UnitGetOwner(UnitGroupLoopCurrent())] == false)) {
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.35, 2.0, 100.0, lv_duration[0]);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 5.0) && (gv_gunshipActive[UnitGetOwner(UnitGroupLoopCurrent())] == false)) {
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.2, 2.0, 100.0, lv_duration[1]);
        }
        else if ((DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)) <= 7.0) && (gv_gunshipActive[UnitGetOwner(UnitGroupLoopCurrent())] == false)) {
            CameraShakeStart(UnitGetOwner(UnitGroupLoopCurrent()), c_cameraPositionTarget, c_cameraDirectionZ, 0.1, 2.0, 100.0, lv_duration[2]);
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GunshipImpactQuake_Init () {
    gt_GunshipImpactQuake = TriggerCreate("gt_GunshipImpactQuake_Func");
    TriggerEnable(gt_GunshipImpactQuake, false);
    TriggerAddEventPlayerEffectUsed(gt_GunshipImpactQuake, c_playerAny, "GunshipSupportGaussCannonDamageSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hug - Reveal When Activated
//--------------------------------------------------------------------------------------------------
bool gt_HugRevealWhenActivated_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    IntLoopBegin(gv_indexBaseValue, gv_numberofPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        VisRevealArea(IntLoopCurrent(), RegionCircle(UnitGetPosition(EventUnit()), 3.0), 5.0, false);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_HugRevealWhenActivated_Init () {
    gt_HugRevealWhenActivated = TriggerCreate("gt_HugRevealWhenActivated_Func");
    TriggerAddEventUnitAbility(gt_HugRevealWhenActivated, null, AbilityCommand("NeuralParasite", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Selection
//--------------------------------------------------------------------------------------------------
bool gt_TalentSelection_Func (bool testConds, bool runActions) {
    int autoAAF60232_ae;
    int autoAAF60232_ai;

    // Variable Declarations
    int lv_triggPlayer;
    int lv_itemNo;
    int lv_ownerofTalentTree;
    int lv_usedDialog;
    int lv_usedDialogItem;

    // Variable Initialization
    lv_triggPlayer = EventPlayer();
    lv_usedDialog = DialogControlGetDialog(EventDialogControl());
    lv_usedDialogItem = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv_usedDialog == gv_talentTree[1]) || (lv_usedDialog == gv_talentTree[2]) || (lv_usedDialog == gv_talentTree[3]) || (lv_usedDialog == gv_talentTree[4]) || (lv_usedDialog == gv_talentTree[5]) || (lv_usedDialog == gv_talentTree[6]) || (lv_usedDialog == gv_talentTree[7]) || (lv_usedDialog == gv_talentTree[8])))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((lv_usedDialog != gv_talentTree[lv_ownerofTalentTree])) {
        lv_ownerofTalentTree += 1;
    }
    if (((lv_ownerofTalentTree == lv_triggPlayer) || ((lv_ownerofTalentTree != lv_triggPlayer) && ((PlayerGetAlliance(lv_ownerofTalentTree, c_allianceIdControl, lv_triggPlayer) == true) || (PlayerGetAlliance(lv_triggPlayer, c_allianceIdControl, lv_ownerofTalentTree) == true)))) && (gv_talentsAvailable[lv_ownerofTalentTree] > 0)) {
        autoAAF60232_ae = gv_numberofTalents;
        autoAAF60232_ai = 1;
        lv_itemNo = gv_indexBaseValue;
        for ( ; ( (autoAAF60232_ai >= 0 && lv_itemNo <= autoAAF60232_ae) || (autoAAF60232_ai <= 0 && lv_itemNo >= autoAAF60232_ae) ) ; lv_itemNo += autoAAF60232_ai ) {
            if ((lv_usedDialogItem == gv_talentTrees[lv_ownerofTalentTree].lv_talentButtons[lv_itemNo].lv_button)) {
                gf_UpdateTalentSystem(lv_itemNo, lv_ownerofTalentTree);
                return true;
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentSelection_Init () {
    gt_TalentSelection = TriggerCreate("gt_TalentSelection_Func");
    TriggerEnable(gt_TalentSelection, false);
    TriggerAddEventDialogControl(gt_TalentSelection, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Tree Toggle
//--------------------------------------------------------------------------------------------------
bool gt_TalentTreeToggle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_selectingPlayer;
    int lv_ownerofHero;

    // Variable Initialization
    lv_selectingPlayer = EventPlayer();
    lv_ownerofHero = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogIsVisible(gv_talentTree[lv_ownerofHero], lv_selectingPlayer) == false)) {
        gf_HideAllDialogsForPlayer(lv_selectingPlayer);
        DialogSetVisible(gv_talentTree[lv_ownerofHero], PlayerGroupSingle(lv_selectingPlayer), true);
    }
    else {
        DialogSetVisible(gv_talentTree[lv_ownerofHero], PlayerGroupSingle(lv_selectingPlayer), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_TalentTreeToggle_Init () {
    gt_TalentTreeToggle = TriggerCreate("gt_TalentTreeToggle_Func");
    TriggerAddEventUnitAbility(gt_TalentTreeToggle, null, AbilityCommand("Talents", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ClassSelectOverride_Init();
    gt_Dahlia_Init();
    gt_ShowPathtoMilitaryBase_Init();
    gt_NOTDInitialize_Init();
    gt_PlayerIntialize_Init();
    gt_Environment_Init();
    gt_RegisterMarineEvents_Init();
    gt_StorylineDialogCreation_Init();
    gt_StorylineSelection_Init();
    gt_ModeSelection_Init();
    gt_FinaliseStorylineandMode_Init();
    gt_ManualSave_Init();
    gt_AutoSave_Init();
    gt_MapInitLoadPlayer_Init();
    gt_VoteKick_Init();
    gt_Clear_Init();
    gt_SquadStatsCheck_Init();
    gt_CiviliansCheck_Init();
    gt_TeamLocation_Init();
    gt_ClassPointsCheck_Init();
    gt_WinsCheck_Init();
    gt_AmmoCheck_Init();
    gt_NavyCross_Init();
    gt_NightmareMode_Init();
    gt_SpectatorModeType_Init();
    gt_SpectatorModeClick_Init();
    gt_SpectatorModeOff_Init();
    gt_ManualReload_Init();
    gt_AmmoUsage_Init();
    gt_AmmoUsageL3_Init();
    gt_ReceivesDamage_Init();
    gt_L3Kills_Init();
    gt_TeamKill_Init();
    gt_KarmaBite_Init();
    gt_LevelUp_Init();
    gt_PetLevelUp_Init();
    gt_PredatorDies_Init();
    gt_Helium3AcquiredCredits_Init();
    gt_DeadMarine_Init();
    gt_PsiOpsDeath_Init();
    gt_ImmortalRevive_Init();
    gt_ZombieDeathEffects_Init();
    gt_InfestorKilled_Init();
    gt_InfestorAmbientSpawns_Init();
    gt_InfestorAI_Init();
    gt_ClearImmortalEnemies_Init();
    gt_VictoryBonus_Init();
    gt_ClassPointsUpdateVictoryOnly_Init();
    gt_ReturntoEarth_Init();
    gt_GameOverCheck_Init();
    gt_NOTDCreditsRoll_Init();
    gt_Barrels_Init();
    gt_BarrelKills_Init();
    gt_GateEnterAirlockMainGateOuter_Init();
    gt_GateEnterAirlockMainGateInner_Init();
    gt_NavyCrossCheck_Init();
    gt_NightmareBonus_Init();
    gt_ChapterEndMedicRatingBonus_Init();
    gt_VetPugGameBonus_Init();
    gt_AFKCheck_Init();
    gt_PlayerLeavesGame_Init();
    gt_PlayerQuitsGame_Init();
    gt_MineShaft_Init();
    gt_SethReinforcements_Init();
    gt_ZeusLetoAI_Init();
    gt_ZeusLetoRespawn_Init();
    gt_ZeusLetoHardenedCarapace_Init();
    gt_MineBossKill_Init();
    gt_OM1EnterCommTower_Init();
    gt_OM1DownloadCycle_Init();
    gt_OM1DownloadComplete_Init();
    gt_OM2aOgilvyFound_Init();
    gt_OM2bIvanFound_Init();
    gt_OM3ArmoryTurrets_Init();
    gt_OM4ScrapyardSalvageInit_Init();
    gt_OM4ScrapyardSalvageCycle_Init();
    gt_OM4ChemicalSealComplete_Init();
    gt_OM5RamirezKilled_Init();
    gt_OM5RamirezsTaunts_Init();
    gt_OM6CommTowerTransmission_Init();
    gt_OM7CharlieSecTeam_Init();
    gt_OM8EnterBridgeTerminal_Init();
    gt_OM8BBQDead_Init();
    gt_OM11Delta2_Init();
    gt_OM12EnterPrisonerHoldingArea_Init();
    gt_OM12Prisoner1JohnAnderton_Init();
    gt_OM12Prisoner2FaricaAugustin_Init();
    gt_ECInitialize_Init();
    gt_ECW1EnterMine_Init();
    gt_W1DataTransferProcess_Init();
    gt_W1DataTransferComplete_Init();
    gt_HuggerSpawns_Init();
    gt_ECW2ScrapyardAmbush_Init();
    gt_W2EnterMilitaryBase_Init();
    gt_W3SampleCollectionProcess_Init();
    gt_ECOptionalCamMissionStart_Init();
    gt_OptionalSecurityCamerasCollection_Init();
    gt_OptionalSecurityCamerasMobs_Init();
    gt_ECW4AirlockRoadAmbush_Init();
    gt_Boss1SpawnCinematic_Init();
    gt_Boss1AI_Init();
    gt_Boss1CarapaceHardens33_Init();
    gt_Boss1HardCarapace_Init();
    gt_Boss1OMCaptureTartarus_Init();
    gt_Boss1OMIncapacitateSuccessful_Init();
    gt_Boss1TartarusKilled_Init();
    gt_Boss1bSpawn_Init();
    gt_Boss1bFightMobs_Init();
    gt_Boss1bRegenerationStarts_Init();
    gt_Boss1EilethyiaKilled_Init();
    gt_Wave4EnterAirlockGate2P_Init();
    gt_Wave4EnterAirlockGate3P_Init();
    gt_Wave4EnterAirlockBackupGate_Init();
    gt_Wave4EnterAirlockNorthGate_Init();
    gt_ECDelta1Transport_Init();
    gt_ECEnterTruck_Init();
    gt_ECCivReward_Init();
    gt_ECZombieTime_Init();
    gt_Wave5AirlockBattle_Init();
    gt_Wave6Cocoons_Init();
    gt_BroodMotherAmbush_Init();
    gt_Boss2Spawn_Init();
    gt_Boss2ErebosCinematic_Init();
    gt_Boss2AI_Init();
    gt_Boss2Killed_Init();
    gt_Boss3SpawnMenoetes_Init();
    gt_Boss3AI_Init();
    gt_Boss3Killed_Init();
    gt_Wave7DropshipEVACRecruit_Init();
    gt_Wave7DropshipEVACVeteran_Init();
    gt_ECNydusFirstBlood_Init();
    gt_OptionalParrotKill_Init();
    gt_OptionalEnterLabChapter1DrBergmann_Init();
    gt_Chapter2Initialize_Init();
    gt_Chapter2AmbientSpawns_Init();
    gt_Chapter2ErebosAI_Init();
    gt_Chapter2ErebosHPLifesteal_Init();
    gt_Chapter2ErebosKilled_Init();
    gt_OptionalPowerGeneratorRestart_Init();
    gt_Wave8EnterScrapyardDoor_Init();
    gt_Wave8BanelingSurprise_Init();
    gt_Wave9DrBergmannEncounter_Init();
    gt_Wave10OptionalCivilianRescueInitialization_Init();
    gt_Wave10OptionalCivilianRescueSave_Init();
    gt_Wave10OptionalCivilianEntersContainment_Init();
    gt_W10DomeA_Init();
    gt_W11DomeB_Init();
    gt_W12DomeC_Init();
    gt_W13DomeD_Init();
    gt_Wave13BioDomeDMobs_Init();
    gt_Wave13BioDomeDDestroyed_Init();
    gt_Wave14Betrayal_Init();
    gt_W14BlackOps_Init();
    gt_BlackOpsAIGunshipSupport_Init();
    gt_BlackOpsAIReactive_Init();
    gt_Chapter3Initialize_Init();
    gt_ECOPTIONALTruckEscortBegins_Init();
    gt_ECOPTIONALTruckDestroyed_Init();
    gt_ECOPTIONALTruckEvacSuccessful_Init();
    gt_Chapter3QueenEngaged_Init();
    gt_Chapter3MiniMarineEvasionAI_Init();
    gt_Wave15RandomMobs_Init();
    gt_Wave16RandomMobs_Init();
    gt_Wave17RandomMobs_Init();
    gt_Wave18Finale_Init();
    gt_QueenShriek67HP_Init();
    gt_QueenShriek33HP_Init();
    gt_QueenChaseSequence_Init();
    gt_QueenKilled_Init();
    gt_ACInitialize_Init();
    gt_ACDrTanakaDeath_Init();
    gt_ACC1ItemSpawn_Init();
    gt_ACW1Landing_Init();
    gt_ACW1EnterArmory_Init();
    gt_ACProwlerEnters_Init();
    gt_ACProwlerDies_Init();
    gt_ACW2DefendwithSecTeamArmory_Init();
    gt_ACW2CharlieFind_Init();
    gt_ACW3CharlieFound_Init();
    gt_ACDemeterSpawn_Init();
    gt_DemeterEngaged_Init();
    gt_DemeterKilled_Init();
    gt_ACW4MindlessHordes_Init();
    gt_ACW5HeadtotheLab_Init();
    gt_ACEnterScrapyardGate_Init();
    gt_ACEnterLabNorthGate_Init();
    gt_ACEnterSiteAlphaGate_Init();
    gt_ACEnterApolloDockGate_Init();
    gt_ACEnterApolloReactorGate_Init();
    gt_ACBoss2SpawnCronus_Init();
    gt_ACCronusKilled_Init();
    gt_ACC2Initialize_Init();
    gt_ACC2ItemSpawn_Init();
    gt_TanakaTerminalSpeech_Init();
    gt_ACW6GuardDrTanakaatLab_Init();
    gt_ACW7GuardDrTanakaatLabPart2_Init();
    gt_ACW8ZombieInvasion_Init();
    gt_ACW9ChaseDrTanakaPoisonGas_Init();
    gt_TanakaInjured_Init();
    gt_ACW10ShowdownatEvacPoint_Init();
    gt_ACW10TanakaIntercepted_Init();
    gt_ACBoss3SpawnCerberus_Init();
    gt_ACBoss3Killed_Init();
    gt_ACC3Initialize_Init();
    gt_ACW11EntertheAirlock_Init();
    gt_ACW11TanakaChoiceDialog_Init();
    gt_ACW12aVentilationShaft_Init();
    gt_ACW12aVentControlCycle_Init();
    gt_ACW12bComplianceNexus_Init();
    gt_NexusKillTracking_Init();
    gt_ACW13AhiveRun_Init();
    gt_ACW14Delta1EVAC_Init();
    gt_ACNakagawaRescueKenny_Init();
    gt_ACNakagawaRescueErin_Init();
    gt_ACNakagawaRescueNgoc_Init();
    gt_ACNakagawaRescueSteph_Init();
    gt_ACDelta1Onboarding_Init();
    gt_ACIVAXSpawn_Init();
    gt_ACIVAXMissleVision_Init();
    gt_ACIVAXSatchelVisual_Init();
    gt_ACIVAXSatchelUpgrade_Init();
    gt_ACIVAXCloak_Init();
    gt_ACIVAXCloakedMovement_Init();
    gt_ACIVAXStunImmunity_Init();
    gt_ACIVAXKilled_Init();
    gt_ACW15HoldOut_Init();
    gt_ACW16HoldOutPart2_Init();
    gt_ACBoss4SpawnPerses_Init();
    gt_ACBoss4AI_Init();
    gt_ACBoss4PersesAI_Init();
    gt_ACBoss4Killed_Init();
    gt_STInitialize_Init();
    gt_STTeam2DeathTraps_Init();
    gt_STC1ItemSpawn_Init();
    gt_STW1ApolloFinalHoldoutDeaths_Init();
    gt_STW1HarassMobCycle_Init();
    gt_STW1AgronWarning_Init();
    gt_STW1EnterAirlockColonyGate_Init();
    gt_STW1EnterAirlockEastGate_Init();
    gt_STW2EnterArmoryDeimos_Init();
    gt_STW1EnterAirlockNorthGate_Init();
    gt_STW1HereWeGo_Init();
    gt_STW1EnterEastWingGateRESCUE_Init();
    gt_STInfectedCiviliansPeriodic_Init();
    gt_LtShengAI_Init();
    gt_STBoss1DeimosEngaged_Init();
    gt_STBoss1DeimosAttackShock_Init();
    gt_STBoss1DeimosKilled_Init();
    gt_STW3NorthWestCocoonSurprise_Init();
    gt_STW3ToTheCommTower_Init();
    gt_STW4TotheScienceLab_Init();
    gt_STW4EnterLab_Init();
    gt_STW5LabCinematic_Init();
    gt_STBoss2SpawnNazara_Init();
    gt_STBoss2AI_Init();
    gt_STBoss2Clone_Init();
    gt_STBoss2Killed_Init();
    gt_STW6LaserTime_Init();
    gt_STW7LaserEscalates_Init();
    gt_STW7HALShutdownInitiate_Init();
    gt_STW7HALShutdownCycle_Init();
    gt_STW7HALShutdownComplete_Init();
    gt_STC2Initialize_Init();
    gt_STC2ItemSpawn_Init();
    gt_STW8ChaseBergmann_Init();
    gt_STW8DrBergmannSearchPeriodic_Init();
    gt_STW10BossSpawnApoptosis_Init();
    gt_STW10ApotosisBloodWave_Init();
    gt_STW10ApoptosisAttacked_Init();
    gt_STW10ApoptosisKilled_Init();
    gt_STW10IVAXMission_Init();
    gt_STW11HiddenHandRevealed_Init();
    gt_SecTeamChoice_Init();
    gt_STC3aInitialize_Init();
    gt_STW13CiviliansGoWild_Init();
    gt_STC3aInfectedCiviliansPeriodic_Init();
    gt_STC3aEngageCommunicationLines_Init();
    gt_STW14BossSpawnHephaestus_Init();
    gt_STW14BossAI_Init();
    gt_STW14BossKilled_Init();
    gt_STC3aReactorCoreTerminalsReached_Init();
    gt_STC3aReactorDLCycle_Init();
    gt_STC3aReactorDLComplete_Init();
    gt_STW15Random3_Init();
    gt_STW16ReactorSelfDestructBeginsESCAPE_Init();
    gt_STW17EVAC_Init();
    gt_STC3bInitialize_Init();
    gt_STW13GetToTheThors_Init();
    gt_STC3bThorPilot_Init();
    gt_STC3bThorActivation_Init();
    gt_STC3bPowerGeneratorRestart_Init();
    gt_STC3bPowerGeneratorComplete_Init();
    gt_STW14bBossSpawnAthena_Init();
    gt_STW14bBossKilled_Init();
    gt_STW15bBioDomeThreat_Init();
    gt_SealDomeA_Init();
    gt_SealDomeB_Init();
    gt_SealDomeC_Init();
    gt_SealDomeD_Init();
    gt_DomesSealedandHadesLocated_Init();
    gt_STW16bBossFightHades_Init();
    gt_HadesTentaclesInfection_Init();
    gt_STW16bBossBlackholePeriodic_Init();
    gt_STW16bBossPhase1Death_Init();
    gt_STW16bBossExecuted_Init();
    gt_SurvivalInit_Init();
    gt_SurvivalW15_Init();
    gt_SurvivalW610_Init();
    gt_SurvivalW1115_Init();
    gt_SurvivalW1620_Init();
    gt_SurvivalW2125_Init();
    gt_SurvivalW2630_Init();
    gt_SurvivalCronusAAI_Init();
    gt_SurvivalCronusBAI_Init();
    gt_SurvivalW3135_Init();
    gt_SurvivalW3640_Init();
    gt_ShowInventory_Init();
    gt_OpenEquipment_Init();
    gt_WeaponSwapDisable_Init();
    gt_UpdateWeightItems_Init();
    gt_ItemTransferBlock_Init();
    gt_UnequipItem_Init();
    gt_EquipItem_Init();
    gt_ItemDropChangetoNeutral_Init();
    gt_ItemGained_Init();
    gt_DropMagazine_Init();
    gt_MagazineUse_Init();
    gt_StackMagsIntoBox_Init();
    gt_UseBandagewithAbility_Init();
    gt_RoadFlare_Init();
    gt_BuyItem_Init();
    gt_BuyStandardItem_Init();
    gt_ClassCreation_Init();
    gt_DialogButtonClicks_Init();
    gt_CreateTeamStatusDialog_Init();
    gt_SaveButtonClick_Init();
    gt_TeamStatusClickedTalentTree_Init();
    gt_PeriodicTeamUIUpdate_Init();
    gt_CreateMedalsDialog_Init();
    gt_ToggleMedalsDialog_Init();
    gt_CreateStatsDialog_Init();
    gt_ToggleStatsDialog_Init();
    gt_ToggleStatsWeaponModsDialog_Init();
    gt_ModifyHeroStats_Init();
    gt_DisableStatAndModsModification_Init();
    gt_Backstab_Init();
    gt_CriticalStrike_Init();
    gt_ConcentratedFireCriticalStrike_Init();
    gt_HarvesterofSorrowCriticalStrike_Init();
    gt_GrenadeLauncherFireUpEnd_Init();
    gt_SonicTrapLimit5_Init();
    gt_SonicTrapVision_Init();
    gt_Anticipation_Init();
    gt_Concentration_Init();
    gt_ExecuteMovespeedBonus_Init();
    gt_SupplyStation_Init();
    gt_LaserDesignator_Init();
    gt_Flare_Init();
    gt_ReaperMK13Created_Init();
    gt_RefresherResetCooldowns_Init();
    gt_Sadist_Init();
    gt_ArmageddonBombLimit3_Init();
    gt_FieldNexusRevokeSharedVision_Init();
    gt_FieldNexusShareVision_Init();
    gt_Synergy_Init();
    gt_X1Guardian_Init();
    gt_TacticalNuke_Init();
    gt_RavagingPhantom_Init();
    gt_Inception_Init();
    gt_MindLinkShareDamage_Init();
    gt_MindLinkShareVision_Init();
    gt_CancelMindLink_Init();
    gt_HammeroftheGodsCamShake_Init();
    gt_AMRounds_Init();
    gt_MiniTKPenalty_Init();
    gt_ModifyShellLimit_Init();
    gt_FireMission_Init();
    gt_ShockwaveBarrage_Init();
    gt_NapalmBarrage_Init();
    gt_MobileInfantry_Init();
    gt_SurveillanceFlares_Init();
    gt_GunshipBuddy_Init();
    gt_GunshipSelection_Init();
    gt_GunshipSupport_Init();
    gt_GunshipOtherKeys_Init();
    gt_GunshipImpactQuake_Init();
    gt_HugRevealWhenActivated_Init();
    gt_TalentSelection_Init();
    gt_TalentTreeToggle_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
